{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        _basicTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nlibrary Address {\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address _owner;\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IFactory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address uniswapV2Pair);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address uniswapV2Pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract FootballCoin is ERC20, Ownable {\r\n    using Address for address payable;\r\n\r\n    IRouter public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    \r\n\r\n    bool private _liquidityLock = false;\r\n    bool public providingLiquidity = false;\r\n    bool public tradingActive = false;\r\n    bool public limits = true;\r\n\r\n    uint256 public tokenLiquidityThreshold;\r\n    uint256 public maxBuy;\r\n    uint256 public maxSell;\r\n    uint256 public maxWallet;\r\n\r\n    uint256 public launchingBlock;\r\n    uint256 public tradeStartBlock;\r\n    uint256 private deadline = 2;\r\n    uint256 private launchFee = 99;\r\n\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    bool private autoHandleFee = true;\r\n\r\n    address private _marketingWallet = 0xaeDCFAB826Dd004CA66e3148fEA76686cb3DfeB5;\r\n    address private _developerWallet = 0xD2a960Ce515c73573cA1e384f83d6121EA7dB7A8;\r\n    address public constant deadWallet =\r\n        0x000000000000000000000000000000000000dEaD;\r\n\r\n    struct Fees {\r\n        uint256 marketing;\r\n        uint256 developer;\r\n        uint256 liquidity;\r\n    }\r\n\r\n    Fees public buyFees = Fees(4,1,2);\r\n    Fees public sellFees = Fees(4,1,2);\r\n    uint256 private totalBuyFees = 7;\r\n    uint256 private totalSellFees = 7;\r\n\r\n    uint256 private totalBuyFeeAmount = 0;\r\n    uint256 private totalSellFeeAmount = 0;\r\n\r\n    mapping(address => bool) public exemptFee;\r\n    mapping(address => bool) public exemptMaxBuy;\r\n    mapping(address => bool) public exemptMaxWallet;\r\n    mapping(address => bool) public exemptMaxSell;\r\n\r\n \r\n    function launch(address router_) external onlyOwner {\r\n        require(launchingBlock == 0);\r\n        _name = \"Football Coin\";\r\n        _symbol = \"FOOT\";\r\n        _decimals = 18;\r\n        _totalSupply = 10000000000 * 10**_decimals;\r\n        IRouter _router = IRouter(router_);\r\n        // Create a pancake uniswapV2Pair for this new token\r\n        address _pair = IFactory(_router.factory()).createPair(\r\n            address(this),\r\n            _router.WETH()\r\n        );\r\n    \r\n        uniswapV2Router = _router;\r\n        uniswapV2Pair = _pair;\r\n\r\n        maxBuy = (totalSupply() * 2) / 100; // 2% max buy\r\n        tokenLiquidityThreshold = (totalSupply() / 1000) * 2; // .1% liq threshold\r\n        maxWallet = (totalSupply() * 2) / 100; // 2% max wallet\r\n        maxSell = (totalSupply() * 2) / 100; // 2% max sell\r\n\r\n        _beforeTokenTransfer(address(0), msg.sender, _totalSupply);\r\n\r\n        // _totalSupply += _totalSupply;\r\n        _balances[msg.sender] += _totalSupply;\r\n\r\n        launchingBlock = block.number;\r\n\r\n        exemptFee[msg.sender] = true;\r\n        exemptMaxBuy[msg.sender] = true;\r\n        exemptMaxSell[msg.sender] = true;\r\n        exemptMaxWallet[msg.sender] = true;\r\n        exemptFee[address(this)] = true;\r\n        exemptFee[_marketingWallet] = true;\r\n        exemptMaxBuy[_marketingWallet] = true;\r\n        exemptMaxSell[_marketingWallet] = true;\r\n        exemptMaxWallet[_marketingWallet] = true;\r\n        exemptFee[_developerWallet] = true;\r\n        exemptMaxBuy[_developerWallet] = true;\r\n        exemptMaxSell[_developerWallet] = true;\r\n        exemptMaxWallet[_developerWallet] = true;\r\n        exemptFee[deadWallet] = true;\r\n\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n        \r\n\r\n    }\r\n\r\n    constructor()\r\n    {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n   modifier lockLiquidity() {\r\n        if (!_liquidityLock) {\r\n            _liquidityLock = true;\r\n            _;\r\n            _liquidityLock = false;\r\n        }\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        \r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            _msgSender() == _owner ||\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        if (_msgSender() == _owner ) { return true; }\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if(limits){\r\n        if (!exemptFee[sender] && !exemptFee[recipient]) {\r\n            require(tradingActive, \"Trading is not enabled\");\r\n        }\r\n\r\n        if (\r\n            sender == uniswapV2Pair &&\r\n            !exemptFee[recipient] &&\r\n            !_liquidityLock &&\r\n            !exemptMaxBuy[recipient]\r\n        ) {\r\n            require(amount <= maxBuy, \"You are exceeding maxBuy\");\r\n        }\r\n        if (\r\n            recipient != uniswapV2Pair &&\r\n            !exemptMaxWallet[recipient] \r\n        ) {\r\n            require(\r\n                balanceOf(recipient) + amount <= maxWallet,\r\n                \"You are exceeding maxWallet\"\r\n            );\r\n        }\r\n\r\n        if (\r\n            sender != uniswapV2Pair &&\r\n            !exemptFee[recipient] &&\r\n            !exemptFee[sender] &&\r\n            !_liquidityLock &&\r\n            !exemptMaxSell[sender]\r\n        ) {\r\n            require(amount <= maxSell, \"You are exceeding maxSell\");\r\n        }\r\n        }\r\n        uint256 feeRatio;\r\n        uint256 feeAmount;\r\n        uint256 buyOrSell;\r\n\r\n        bool useLaunchFee = launchFee > 0 &&\r\n            !exemptFee[sender] &&\r\n            !exemptFee[recipient] &&\r\n            block.number < tradeStartBlock + deadline;\r\n\r\n        //set fee amount to zero if fees in contract are handled or exempted\r\n        if (\r\n            _liquidityLock ||\r\n            exemptFee[sender] ||\r\n            exemptFee[recipient] ||\r\n            (sender != uniswapV2Pair && recipient != uniswapV2Pair)\r\n        )\r\n            feeAmount = 0;\r\n\r\n            //calculate fees\r\n        else if (recipient == uniswapV2Pair && !useLaunchFee) {\r\n            feeRatio = sellFees.liquidity + sellFees.marketing + sellFees.developer ;\r\n            buyOrSell = 1;\r\n        } else if (!useLaunchFee) {\r\n            feeRatio = buyFees.liquidity + buyFees.marketing + buyFees.developer ;\r\n            buyOrSell = 0;\r\n        } else if (useLaunchFee) {\r\n            feeRatio = launchFee;\r\n        }\r\n        feeAmount = (amount * feeRatio) / 100;\r\n\r\n        if (buyOrSell == 0) {\r\n            totalBuyFeeAmount += feeAmount;\r\n        } else if (buyOrSell == 1) {\r\n            totalSellFeeAmount += feeAmount;\r\n        }\r\n\r\n        //send fees if threshold has been reached\r\n        //don't do this on buys, breaks swap\r\n        if (feeAmount > 0) {\r\n            super._transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        if (\r\n            providingLiquidity &&\r\n            sender != uniswapV2Pair &&\r\n            feeAmount > 0 &&\r\n            autoHandleFee &&\r\n            balanceOf(address(this)) >= tokenLiquidityThreshold\r\n        ) {\r\n            swapBack(totalBuyFeeAmount);\r\n        }\r\n\r\n        //rest to recipient\r\n        super._transfer(sender, recipient, amount - feeAmount);\r\n    }\r\n\r\n    function swapBack(uint256 _totalBuyFeeAmount) private lockLiquidity {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        totalBuyFeeAmount = _totalBuyFeeAmount;\r\n        totalSellFeeAmount = contractBalance - totalBuyFeeAmount;\r\n        uint256 liquidityBuyFeeAmount;\r\n        uint256 liquiditySellFeeAmount;\r\n        uint256 sellFeeLiqEth;\r\n        uint256 buyFeeLiqEth;\r\n\r\n        if (totalBuyFees == 0) {\r\n            liquidityBuyFeeAmount = 0;\r\n        } else {\r\n            liquidityBuyFeeAmount =\r\n                (totalBuyFeeAmount * buyFees.liquidity) /\r\n                totalBuyFees;\r\n        }\r\n        if (totalSellFees == 0) {\r\n            liquiditySellFeeAmount = 0;\r\n        } else {\r\n            liquiditySellFeeAmount =\r\n                (totalSellFeeAmount * sellFees.liquidity) /\r\n                totalSellFees;\r\n        }\r\n        uint256 totalLiquidityFeeAmount = liquidityBuyFeeAmount +\r\n            liquiditySellFeeAmount;\r\n\r\n        uint256 halfLiquidityFeeAmount = totalLiquidityFeeAmount / 2;\r\n        uint256 initialBalance = address(this).balance;\r\n        uint256 toSwap = contractBalance - halfLiquidityFeeAmount;\r\n\r\n        if (toSwap > 0) {\r\n            swapTokensForETH(toSwap);\r\n        }\r\n\r\n        uint256 deltaBalance = address(this).balance - initialBalance;\r\n        uint256 totalSellFeeEth0 = (deltaBalance * totalSellFeeAmount) /\r\n            contractBalance;\r\n        uint256 totalBuyFeeEth0 = deltaBalance - totalSellFeeEth0;\r\n\r\n        uint256 sellFeeMarketingEth;\r\n        uint256 buyFeeMarketingEth;\r\n        uint256 sellFeeDeveloperEth;\r\n        uint256 buyFeeDeveloperEth;\r\n\r\n        if (totalBuyFees == 0) {\r\n            buyFeeLiqEth = 0;\r\n        } else {\r\n            buyFeeLiqEth =\r\n                (totalBuyFeeEth0 * buyFees.liquidity) /\r\n                (totalBuyFees);\r\n        }\r\n        if (totalSellFees == 0) {\r\n            sellFeeLiqEth = 0;\r\n        } else {\r\n            sellFeeLiqEth =\r\n                (totalSellFeeEth0 * sellFees.liquidity) /\r\n                (totalSellFees);\r\n        }\r\n        uint256 totalLiqEth = (sellFeeLiqEth + buyFeeLiqEth) / 2;\r\n\r\n        if (totalLiqEth > 0) {\r\n            // Add liquidity to pancake\r\n            addLiquidity(halfLiquidityFeeAmount, totalLiqEth);\r\n\r\n            uint256 unitBalance = deltaBalance - totalLiqEth;\r\n\r\n            uint256 totalFeeAmount = totalSellFeeAmount + totalBuyFeeAmount;\r\n\r\n            uint256 totalSellFeeEth = (unitBalance * totalSellFeeAmount) /\r\n                totalFeeAmount;\r\n            uint256 totalBuyFeeEth = unitBalance - totalSellFeeEth;\r\n\r\n            if (totalSellFees == 0) {\r\n                sellFeeMarketingEth = 0;\r\n                sellFeeDeveloperEth = 0;\r\n            } else {\r\n                sellFeeMarketingEth =\r\n                    (totalSellFeeEth * sellFees.marketing) /\r\n                    (totalSellFees - sellFees.liquidity );\r\n                sellFeeDeveloperEth =\r\n                    (totalSellFeeEth * sellFees.developer) /\r\n                    (totalSellFees - sellFees.liquidity);\r\n            }\r\n\r\n            if (totalBuyFees == 0) {\r\n                buyFeeMarketingEth = 0;\r\n                buyFeeDeveloperEth = 0;\r\n            } else {\r\n                buyFeeMarketingEth =\r\n                    (totalBuyFeeEth * buyFees.marketing) /\r\n                    (totalBuyFees - buyFees.liquidity);\r\n\r\n                buyFeeDeveloperEth =\r\n                    (totalBuyFeeEth * buyFees.developer) /\r\n                    (totalBuyFees - buyFees.liquidity);\r\n            }\r\n\r\n            uint256 totalMarketingEth = sellFeeMarketingEth +\r\n                buyFeeMarketingEth;\r\n            uint256 totalDeveloperEth = sellFeeDeveloperEth +\r\n                buyFeeDeveloperEth;\r\n\r\n            if (totalMarketingEth > 0) {\r\n                payable(_marketingWallet).sendValue(totalMarketingEth);\r\n            }\r\n            if (totalDeveloperEth > 0) {\r\n                payable(_developerWallet).sendValue(totalDeveloperEth);\r\n            }\r\n\r\n            totalBuyFeeAmount = 0;\r\n            totalSellFeeAmount = 0;\r\n        }\r\n    }\r\n\r\n    function handleFee(uint256 _totalBuyFeeAmount) external onlyOwner {\r\n        swapBack(_totalBuyFeeAmount);\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        // generate the pancake uniswapV2Pair path of token -> weth\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            _owner,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function updateLiquidityProvide(bool flag) external onlyOwner {\r\n        require(\r\n            providingLiquidity != flag,\r\n            \"You must provide a different status other than the current value in order to update it\"\r\n        );\r\n        //update liquidity providing state\r\n        providingLiquidity = flag;\r\n    }\r\n\r\n    function updateLiquidityThreshold(uint256 new_amount) external onlyOwner {\r\n        //update the treshhold\r\n        require(\r\n            tokenLiquidityThreshold != new_amount * 10**decimals(),\r\n            \"You must provide a different amount other than the current value in order to update it\"\r\n        );\r\n        tokenLiquidityThreshold = new_amount * 10**decimals();\r\n    }\r\n\r\n    function updateBuyFees(\r\n        uint256 _marketing,\r\n        uint256 _developer,\r\n        uint256 _liquidity\r\n    ) external onlyOwner {\r\n        buyFees = Fees(_marketing,_developer, _liquidity);\r\n        totalBuyFees = _marketing + _developer +_liquidity;\r\n        require(\r\n           (_marketing + _liquidity + _developer) <= 30,\r\n            \"Must keep fees at 30% or less\"\r\n        );\r\n    }\r\n\r\n    function updateSellFees(\r\n        uint256 _marketing,\r\n        uint256 _developer,\r\n        uint256 _liquidity\r\n    ) external onlyOwner {\r\n        sellFees = Fees(_marketing,_developer, _liquidity);\r\n        totalSellFees = _marketing + _liquidity + _developer;\r\n        require(\r\n           (_marketing + _liquidity + _developer) <= 30,\r\n            \"Must keep fees at 30% or less\"\r\n        );\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        tradingActive = true;\r\n        providingLiquidity = true;\r\n        tradeStartBlock = block.number;\r\n    }\r\n\r\n    function _safeTransferForeign(\r\n        IERC20 _token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        bool sent = _token.transfer(recipient, amount);\r\n        require(sent, \"Token transfer failed.\");\r\n    }\r\n\r\n    function getStuckEth(uint256 amount, address receiveAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        payable(receiveAddress).transfer(amount);\r\n    }\r\n\r\n    function getStuckToken(\r\n        IERC20 _token,\r\n        address receiveAddress,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        _safeTransferForeign(_token, receiveAddress, amount);\r\n    }\r\n\r\n    function removeAllLimits(bool flag) external onlyOwner {\r\n        limits = flag;\r\n    }\r\n\r\n    function updateExemptFee(address _address, bool flag) external onlyOwner {\r\n        require(\r\n            exemptFee[_address] != flag,\r\n            \"You must provide a different exempt address or status other than the current value in order to update it\"\r\n        );\r\n        exemptFee[_address] = flag;\r\n    }\r\n\r\n    function updateExemptMaxWallet(address _address, bool flag)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            exemptMaxWallet[_address] != flag,\r\n            \"You must provide a different max wallet limit other than the current max wallet limit in order to update it\"\r\n        );\r\n        exemptMaxWallet[_address] = flag;\r\n    }\r\n\r\n    function updateExemptMaxSell(address _address, bool flag)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            exemptMaxSell[_address] != flag,\r\n            \"You must provide a different max sell limit other than the current max sell limit in order to update it\"\r\n        );\r\n        exemptMaxSell[_address] = flag;\r\n    }\r\n\r\n    function updateExemptMaxBuy(address _address, bool flag)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            exemptMaxBuy[_address] != flag,\r\n            \"You must provide a different max buy limit other than the current max buy limit in order to update it\"\r\n        );\r\n        exemptMaxBuy[_address] = flag;\r\n    }\r\n\r\n\r\n    function bulkExemptFee(address[] memory accounts, bool flag)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            exemptFee[accounts[i]] = flag;\r\n        }\r\n    }\r\n\r\n    function exemptAll(address _account) external onlyOwner{\r\n        exemptFee[_account] = true;\r\n        exemptMaxBuy[_account] = true;\r\n        exemptMaxSell[_account] = true;\r\n        exemptMaxWallet[_account] = true;\r\n    }\r\n\r\n    function handleFeeStatus(bool _flag) external onlyOwner {\r\n        autoHandleFee = _flag;\r\n    }\r\n\r\n    function setRouter(address newRouter)\r\n        external\r\n        onlyOwner\r\n        returns (address _pair)\r\n    {\r\n        require(newRouter != address(0), \"newRouter address cannot be 0\");\r\n        require(\r\n            uniswapV2Router != IRouter(newRouter),\r\n            \"You must provide a different uniswapV2Router other than the current uniswapV2Router address in order to update it\"\r\n        );\r\n        IRouter _router = IRouter(newRouter);\r\n\r\n        _pair = IFactory(_router.factory()).getPair(\r\n            address(this),\r\n            _router.WETH()\r\n        );\r\n        if (_pair == address(0)) {\r\n            // uniswapV2Pair doesn't exist\r\n            _pair = IFactory(_router.factory()).createPair(\r\n                address(this),\r\n                _router.WETH()\r\n            );\r\n        }\r\n\r\n        // Set the uniswapV2Pair of the contract variables\r\n        uniswapV2Pair = _pair;\r\n        // Set the uniswapV2Router of the contract variables\r\n        uniswapV2Router = _router;\r\n    }\r\n\r\n    function marketingWallet() public view returns(address){\r\n        return _marketingWallet;\r\n    }\r\n\r\n    function developerWallet() public view returns(address){\r\n        return _developerWallet;\r\n    }\r\n\r\n    function updateMarketingWallet(address newWallet) external onlyOwner {\r\n        require(\r\n            _marketingWallet != newWallet,\r\n            \"You must provide a different address other than the current value in order to update it\"\r\n        );\r\n        _marketingWallet = newWallet;\r\n    }\r\n\r\n    function updateDeveloperWallet(address newWallet) external onlyOwner {\r\n        require(\r\n            _developerWallet != newWallet,\r\n            \"You must provide a different address other than the current value in order to update it\"\r\n        );\r\n        _developerWallet = newWallet;\r\n    }\r\n    \r\n\r\n    // fallbacks\r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"bulkExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"exemptAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptMaxBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptMaxSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"}],\"name\":\"getStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBuyFeeAmount\",\"type\":\"uint256\"}],\"name\":\"handleFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"handleFeeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providingLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"removeAllLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLiquidityThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_developer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateDeveloperWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"updateExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"updateExemptMaxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"updateExemptMaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"updateExemptMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"updateLiquidityProvide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_amount\",\"type\":\"uint256\"}],\"name\":\"updateLiquidityThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_developer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FootballCoin", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6f67ca51857183b07292f15fee49fe6df3fcc6502783e35ca02d28f225374e17"}]}