{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ClaimAndLock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"src/interface/IMultiMerkleStash.sol\\\";\\nimport \\\"src/interface/IVeSDT.sol\\\";\\n\\n/// @notice Contract helper for bundle tx for claiming bribes and lock SDT for veSDT\\ncontract ClaimAndLock {\\n\\taddress public multiMerkleStash = address(0x03E34b085C52985F6a5D27243F20C84bDdc01Db4);\\n\\taddress public constant VE_SDT = address(0x0C30476f66034E11782938DF8e4384970B6c9e8a);\\n\\taddress public constant SDT = address(0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F);\\n\\n\\tconstructor() {\\n\\t\\tIERC20(SDT).approve(VE_SDT, type(uint256).max);\\n\\t}\\n\\n\\t/// @notice Bundle tx for Claiming (only) SDT from bribes and Lock it on veSDT\\n\\t/// @dev For locking SDT into veSDT, account should already have some veSDT\\n\\t/// @dev Can't lock SDT into veSDT for first time here\\n\\t/// @param index Index for the merkle tree\\n\\t/// @param amount Amount of bribes received\\n\\t/// @param merkleProof MerkleProof for this bribes session\\n\\tfunction claimAndLockSDT(\\n\\t\\tuint256 index,\\n\\t\\tuint256 amount,\\n\\t\\tbytes32[] calldata merkleProof\\n\\t) external {\\n\\t\\t//claim SDT from bribes\\n\\t\\tIMultiMerkleStash(multiMerkleStash).claim(SDT, index, msg.sender, amount, merkleProof);\\n\\t\\t// lock SDT\\n\\t\\tIERC20(SDT).transferFrom(msg.sender, address(this), amount);\\n\\t\\tIVeSDT(VE_SDT).deposit_for(msg.sender, amount);\\n\\t}\\n\\n\\t/// @notice Bundle tx for Claiming bribes and Lock SDT for veSDT\\n\\t/// @dev For locking SDT into veSDT, account should already have some veSDT\\n\\t/// @dev Can't lock SDT into veSDT for first time here\\n\\t/// @param claims List containing claimParam structure argument needed for claimMulti\\n\\tfunction claimAndLockMulti(IMultiMerkleStash.claimParam[] calldata claims) external {\\n\\t\\t//claim all bribes token\\n\\t\\tIMultiMerkleStash(multiMerkleStash).claimMulti(msg.sender, claims);\\n\\t\\t// find amount of SDT claimed\\n\\t\\tuint256 amountSDT = 0;\\n\\t\\tfor (uint256 i = 0; i < claims.length; ) {\\n\\t\\t\\tif (claims[i].token == SDT) {\\n\\t\\t\\t\\tamountSDT = claims[i].amount;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\t++i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// lock SDT\\n\\t\\tIERC20(SDT).transferFrom(msg.sender, address(this), amountSDT);\\n\\t\\tIVeSDT(VE_SDT).deposit_for(msg.sender, amountSDT);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interface/IMultiMerkleStash.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\ninterface IMultiMerkleStash {\\n\\tstruct claimParam {\\n\\t\\taddress token;\\n\\t\\tuint256 index;\\n\\t\\tuint256 amount;\\n\\t\\tbytes32[] merkleProof;\\n\\t}\\n\\n\\tfunction isClaimed(address token, uint256 index) external view returns (bool);\\n\\n\\tfunction claim(\\n\\t\\taddress token,\\n\\t\\tuint256 index,\\n\\t\\taddress account,\\n\\t\\tuint256 amount,\\n\\t\\tbytes32[] calldata merkleProof\\n\\t) external;\\n\\n\\tfunction merkleRoot(address _address) external returns (bytes32);\\n\\n\\tfunction claimMulti(address account, claimParam[] calldata claims) external;\\n}\\n\"\r\n    },\r\n    \"src/interface/IVeSDT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\ninterface IVeSDT {\\n\\tfunction deposit_for(address _addr, uint256 _value) external;\\n\\n\\tfunction balanceOf(address _addr) external returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VE_SDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IMultiMerkleStash.claimParam[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"claimAndLockMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimAndLockSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiMerkleStash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ClaimAndLock", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}