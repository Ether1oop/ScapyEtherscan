{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: ClaimSpotSale.sol\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.17;\r\n\r\n/// @author someone in metaverse\r\ncontract MobtiesVIP is Ownable {\r\n    uint256 public claimSpotsSold = 0;\r\n    mapping(address => uint256) public claimSpotsBoughtBy;\r\n\r\n    uint256 public claimSpotsToSell = 500;\r\n    uint256 public costPerClaim = 0.35 * 1e18;\r\n    uint256 public maxMintClaimSpotAmount = 10;\r\n    uint256 public claimSpotMintActiveTime = type(uint256).max;\r\n\r\n    event PurchasedClaimSpot(address, uint256);\r\n\r\n    /// @notice people can buy claim spots here when sale is open\r\n    function purchaseClaimSpot(uint256 _mintAmount) external payable {\r\n        require(_mintAmount > 0, \"need to mint at least 1 spot\");\r\n        require(msg.value == costPerClaim * _mintAmount, \"incorrect funds\");\r\n        require(\r\n            block.timestamp > claimSpotMintActiveTime,\r\n            \"The Claim Spot Mint is paused\"\r\n        );\r\n        require(\r\n            claimSpotsBoughtBy[msg.sender] + _mintAmount <=\r\n                maxMintClaimSpotAmount,\r\n            \"max mint amount per session exceeded\"\r\n        );\r\n        require(\r\n            claimSpotsSold + _mintAmount <= claimSpotsToSell,\r\n            \"max mint amount per session exceeded\"\r\n        );\r\n\r\n        claimSpotsBoughtBy[msg.sender] += _mintAmount;\r\n        claimSpotsSold += _mintAmount;\r\n\r\n        emit PurchasedClaimSpot(msg.sender, _mintAmount);\r\n    }\r\n\r\n    /// @notice owner can withdraw funds from here\r\n    function withdraw() public payable onlyOwner {\r\n        (bool success, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(success);\r\n    }\r\n\r\n    /// @dev setters\r\n\r\n    /// @notice owner can change the price of claim spots\r\n    function setCostPerClaim(uint256 _costPerClaim) public onlyOwner {\r\n        costPerClaim = _costPerClaim;\r\n    }\r\n\r\n    /// @notice owner can change the total number of claim spots to sell\r\n    function setClaimSpotsToSell(uint256 _claimSpotsToSell) public onlyOwner {\r\n        claimSpotsToSell = _claimSpotsToSell;\r\n    }\r\n\r\n    /// @notice owner can change the per wallet max mint claim spots\r\n    function setMaxMintClaimSpotAmount(uint256 _maxMintClaimSpotAmount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        maxMintClaimSpotAmount = _maxMintClaimSpotAmount;\r\n    }\r\n\r\n    /// @notice Owner can open or close the sale. To open put 0, to close put 99999999999999999999, to start at specific time get time value from here https://www.epochconverter.com/\r\n    function setClaimSpotMintActiveTime(uint256 _claimSpotMintActiveTime)\r\n        public\r\n        onlyOwner\r\n    {\r\n        claimSpotMintActiveTime = _claimSpotMintActiveTime;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PurchasedClaimSpot\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimSpotMintActiveTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimSpotsBoughtBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimSpotsSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimSpotsToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costPerClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintClaimSpotAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"purchaseClaimSpot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimSpotMintActiveTime\",\"type\":\"uint256\"}],\"name\":\"setClaimSpotMintActiveTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimSpotsToSell\",\"type\":\"uint256\"}],\"name\":\"setClaimSpotsToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_costPerClaim\",\"type\":\"uint256\"}],\"name\":\"setCostPerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMintClaimSpotAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxMintClaimSpotAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "MobtiesVIP", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://34eddb51be558f8fd76ebbf6ae79019103afc90154dd1394477ffbacb293a699"}]}