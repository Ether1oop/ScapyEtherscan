{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/vortex/VortexBurner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"@bancor/token-governance/contracts/ITokenGovernance.sol\\\";\\n\\nimport \\\"../converter/interfaces/IConverterRegistry.sol\\\";\\nimport \\\"../converter/interfaces/IConverter.sol\\\";\\n\\nimport \\\"../utility/ContractRegistryClient.sol\\\";\\nimport \\\"../utility/Owned.sol\\\";\\nimport \\\"../utility/Utils.sol\\\";\\nimport \\\"../utility/interfaces/ITokenHolder.sol\\\";\\n\\nimport \\\"../token/ReserveToken.sol\\\";\\n\\nimport \\\"../INetworkSettings.sol\\\";\\nimport \\\"../IBancorNetwork.sol\\\";\\n\\ninterface IVortexBurner {\\n    function totalBurnedAmount() external view returns (uint256);\\n}\\n\\ninterface IBancorNetworkV3 {\\n    function tradeBySourceAmount(\\n        IERC20 sourceToken,\\n        IERC20 targetToken,\\n        uint256 sourceAmount,\\n        uint256 minReturnAmount,\\n        uint256 deadline,\\n        address beneficiary\\n    ) external payable returns (uint256);\\n}\\n\\n/**\\n * @dev This contract provides any user to trigger a network fee burning event\\n */\\ncontract VortexBurner is Owned, Utils, ReentrancyGuard, ContractRegistryClient {\\n    using SafeMath for uint256;\\n    using Math for uint256;\\n    using ReserveToken for IReserveToken;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20Ex for IERC20;\\n\\n    struct Strategy {\\n        address[][] paths;\\n        uint256[] amounts;\\n        address[] govPath;\\n    }\\n\\n    // the mechanism is only designed to work with 50/50 standard pool converters\\n    uint32 private constant STANDARD_POOL_RESERVE_WEIGHT = PPM_RESOLUTION / 2;\\n\\n    // the type of the standard pool converter\\n    uint16 private constant STANDARD_POOL_CONVERTER_TYPE = 3;\\n\\n    // the address of the network token\\n    IERC20 private immutable _networkToken;\\n\\n    // the address of the governance token\\n    IERC20 private immutable _govToken;\\n\\n    // the address of the governance token security module\\n    ITokenGovernance private immutable _govTokenGovernance;\\n\\n    // the address of the v3 network\\n    IBancorNetworkV3 private immutable _networkV3;\\n\\n    // the percentage of the converted network tokens to be sent to the caller of the burning event (in units of PPM)\\n    uint32 private _burnReward;\\n\\n    // the maximum burn reward to be sent to the caller of the burning event\\n    uint256 private _maxBurnRewardAmount;\\n\\n    // stores the total amount of the burned governance tokens\\n    uint256 private _totalBurnedAmount;\\n\\n    /**\\n     * @dev triggered when the burn reward has been changed\\n     */\\n    event BurnRewardUpdated(\\n        uint32 prevBurnReward,\\n        uint32 newBurnReward,\\n        uint256 prevMaxBurnRewardAmount,\\n        uint256 newMaxBurnRewardAmount\\n    );\\n\\n    /**\\n     * @dev triggered during conversion of a single token during the burning event\\n     */\\n    event Converted(IReserveToken reserveToken, uint256 sourceAmount, uint256 targetAmount);\\n\\n    /**\\n     * @dev triggered after a completed burning event\\n     */\\n    event Burned(IReserveToken[] reserveTokens, uint256 sourceAmount, uint256 burnedAmount);\\n\\n    /**\\n     * @dev initializes a new VortexBurner contract\\n     */\\n    constructor(\\n        IERC20 networkToken,\\n        ITokenGovernance govTokenGovernance,\\n        IContractRegistry registry,\\n        IVortexBurner prevBurner,\\n        IBancorNetworkV3 networkV3\\n    )\\n        public\\n        ContractRegistryClient(registry)\\n        validAddress(address(networkToken))\\n        validAddress(address(govTokenGovernance))\\n        validAddress(address(networkV3))\\n    {\\n        _networkToken = networkToken;\\n        _govTokenGovernance = govTokenGovernance;\\n        _govToken = govTokenGovernance.token();\\n        _networkV3 = networkV3;\\n\\n        if (address(prevBurner) != address(0x0)) {\\n            _totalBurnedAmount = prevBurner.totalBurnedAmount();\\n        }\\n    }\\n\\n    /**\\n     * @dev ETH receive callback\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev returns the burn reward percentage and its maximum amount\\n     */\\n    function burnReward() external view returns (uint32, uint256) {\\n        return (_burnReward, _maxBurnRewardAmount);\\n    }\\n\\n    /**\\n     * @dev allows the owner to set the burn reward percentage and its maximum amount\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function setBurnReward(uint32 newBurnReward, uint256 newMaxBurnRewardAmount)\\n        external\\n        ownerOnly\\n        validFee(newBurnReward)\\n    {\\n        emit BurnRewardUpdated(_burnReward, newBurnReward, _maxBurnRewardAmount, newMaxBurnRewardAmount);\\n\\n        _burnReward = newBurnReward;\\n        _maxBurnRewardAmount = newMaxBurnRewardAmount;\\n    }\\n\\n    /**\\n     * @dev returns the total amount of the burned governance tokens\\n     */\\n    function totalBurnedAmount() external view returns (uint256) {\\n        return _totalBurnedAmount;\\n    }\\n\\n    /**\\n     * @dev converts the provided tokens to governance tokens and burns them\\n     */\\n    function burn(IReserveToken[] calldata reserveTokens) external nonReentrant {\\n        ITokenHolder feeWallet = _networkFeeWallet();\\n\\n        // retrieve the burning strategy\\n        Strategy memory strategy = _burnStrategy(reserveTokens, feeWallet);\\n\\n        // withdraw all token/ETH amounts to the contract\\n        feeWallet.withdrawTokensMultiple(reserveTokens, address(this), strategy.amounts);\\n\\n        // convert all amounts to the network token and record conversion amounts\\n        IBancorNetwork network = _bancorNetwork();\\n\\n        for (uint256 i = 0; i < strategy.paths.length; ++i) {\\n            // avoid empty conversions\\n            uint256 amount = strategy.amounts[i];\\n            if (amount == 0) {\\n                continue;\\n            }\\n\\n            address[] memory path = strategy.paths[i];\\n            IReserveToken reserveToken = IReserveToken(path[0]);\\n            uint256 value = 0;\\n\\n            if (address(reserveToken) == address(_networkToken) || address(reserveToken) == address(_govToken)) {\\n                // if the source token is the network or the governance token, we won't try to convert it, but rather\\n                // include its amount in either the total amount of tokens to convert or burn.\\n                continue;\\n            }\\n\\n            if (reserveToken.isNativeToken()) {\\n                // if the source token is actually an ETH reserve, make sure to pass its value to the network\\n                value = amount;\\n            } else {\\n                // if the source token is a regular token, approve the network to withdraw the token amount\\n                reserveToken.ensureApprove(address(network), amount);\\n            }\\n\\n            // perform the actual conversion and optionally send ETH to the network\\n            uint256 targetAmount = network.convertByPath{ value: value }(path, amount, 1, address(this), address(0), 0);\\n\\n            emit Converted(reserveToken, amount, targetAmount);\\n        }\\n\\n        // calculate the burn reward and reduce it from the total amount to convert\\n        (uint256 sourceAmount, uint256 burnRewardAmount) = _netNetworkConversionAmounts();\\n\\n        // in case there are network tokens to burn, convert them to the governance token\\n        if (sourceAmount > 0) {\\n            // allow BancorNetwork v3 to transfer the BNT from this contract\\n            _networkToken.ensureApprove(address(_networkV3), sourceAmount);\\n\\n            // trade BNT to vBNT on BancorNetwork v3\\n            _networkV3.tradeBySourceAmount(_networkToken, _govToken, sourceAmount, 1, block.timestamp + 100, address(this));\\n        }\\n\\n        // get the governance token balance\\n        uint256 govTokenBalance = _govToken.balanceOf(address(this));\\n        require(govTokenBalance > 0, \\\"ERR_ZERO_BURN_AMOUNT\\\");\\n\\n        // update the stats of the burning event\\n        _totalBurnedAmount = _totalBurnedAmount.add(govTokenBalance);\\n\\n        // burn the entire governance token balance\\n        _govTokenGovernance.burn(govTokenBalance);\\n\\n        // if there is a burn reward, transfer it to the caller\\n        if (burnRewardAmount > 0) {\\n            _networkToken.transfer(msg.sender, burnRewardAmount);\\n        }\\n\\n        emit Burned(reserveTokens, sourceAmount + burnRewardAmount, govTokenBalance);\\n    }\\n\\n    /**\\n     * @dev transfers the ownership of the network fee wallet\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     */\\n    function transferNetworkFeeWalletOwnership(address newOwner) external ownerOnly {\\n        _networkFeeWallet().transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev accepts the ownership of he network fee wallet\\n     */\\n    function acceptNetworkFeeOwnership() external ownerOnly {\\n        _networkFeeWallet().acceptOwnership();\\n    }\\n\\n    /**\\n     * @dev returns the burning strategy for the specified tokens\\n     */\\n    function _burnStrategy(IReserveToken[] calldata reserveTokens, ITokenHolder feeWallet)\\n        private\\n        view\\n        returns (Strategy memory)\\n    {\\n        IConverterRegistry registry = _converterRegistry();\\n\\n        Strategy memory strategy = Strategy({\\n            paths: new address[][](reserveTokens.length),\\n            amounts: new uint256[](reserveTokens.length),\\n            govPath: new address[](3)\\n        });\\n\\n        for (uint256 i = 0; i < reserveTokens.length; ++i) {\\n            IReserveToken reserveToken = reserveTokens[i];\\n\\n            address[] memory path = new address[](3);\\n            path[0] = address(reserveToken);\\n\\n            // don't look up for a converter for either the network or the governance token, since they are going to be\\n            // handled in a special way during the burn itself\\n            if (address(reserveToken) != address(_networkToken) && address(reserveToken) != address(_govToken)) {\\n                path[1] = address(_networkTokenConverterAnchor(reserveToken, registry));\\n                path[2] = address(_networkToken);\\n            }\\n\\n            strategy.paths[i] = path;\\n\\n            // make sure to retrieve the balance of either an ERC20 or an ETH reserve\\n            strategy.amounts[i] = reserveToken.balanceOf(address(feeWallet));\\n        }\\n\\n        // get the governance token converter path\\n        strategy.govPath[0] = address(_networkToken);\\n        strategy.govPath[1] = address(_networkTokenConverterAnchor(IReserveToken(address(_govToken)), registry));\\n        strategy.govPath[2] = address(_govToken);\\n\\n        return strategy;\\n    }\\n\\n    /**\\n     * @dev applies the burn reward on the whole balance and returns the net amount and the reward\\n     */\\n    function _netNetworkConversionAmounts() private view returns (uint256, uint256) {\\n        uint256 amount = _networkToken.balanceOf(address(this));\\n        uint256 burnRewardAmount = Math.min(amount.mul(_burnReward) / PPM_RESOLUTION, _maxBurnRewardAmount);\\n\\n        return (amount - burnRewardAmount, burnRewardAmount);\\n    }\\n\\n    /**\\n     * @dev finds the converter anchor of the 50/50 standard pool converter between the specified token and the network token\\n     */\\n    function _networkTokenConverterAnchor(IReserveToken reserveToken, IConverterRegistry converterRegistry)\\n        private\\n        view\\n        returns (IConverterAnchor)\\n    {\\n        // initialize both the source and the target tokens\\n        IReserveToken[] memory reserveTokens = new IReserveToken[](2);\\n        reserveTokens[0] = IReserveToken(address(_networkToken));\\n        reserveTokens[1] = reserveToken;\\n\\n        // make sure to only look up for 50/50 converters\\n        uint32[] memory standardReserveWeights = new uint32[](2);\\n        standardReserveWeights[0] = STANDARD_POOL_RESERVE_WEIGHT;\\n        standardReserveWeights[1] = STANDARD_POOL_RESERVE_WEIGHT;\\n\\n        // find the standard pool converter between the specified token and the network token\\n        IConverterAnchor anchor = converterRegistry.getLiquidityPoolByConfig(\\n            STANDARD_POOL_CONVERTER_TYPE,\\n            reserveTokens,\\n            standardReserveWeights\\n        );\\n        require(address(anchor) != address(0), \\\"ERR_INVALID_RESERVE_TOKEN\\\");\\n\\n        return anchor;\\n    }\\n\\n    /**\\n     * @dev returns the converter registry\\n     */\\n    function _converterRegistry() private view returns (IConverterRegistry) {\\n        return IConverterRegistry(_addressOf(CONVERTER_REGISTRY));\\n    }\\n\\n    /**\\n     * @dev returns the network contract\\n     */\\n    function _bancorNetwork() private view returns (IBancorNetwork) {\\n        return IBancorNetwork(payable(_addressOf(BANCOR_NETWORK)));\\n    }\\n\\n    /**\\n     * @dev returns the network settings contract\\n     */\\n    function _networkSetting() private view returns (INetworkSettings) {\\n        return INetworkSettings(_addressOf(NETWORK_SETTINGS));\\n    }\\n\\n    /**\\n     * @dev returns the network fee wallet\\n     */\\n    function _networkFeeWallet() private view returns (ITokenHolder) {\\n        return ITokenHolder(_networkSetting().networkFeeWallet());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@bancor/token-governance/contracts/ITokenGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\nimport \\\"./IMintableToken.sol\\\";\\n\\n/// @title The interface for mintable/burnable token governance.\\ninterface ITokenGovernance {\\n    // The address of the mintable ERC20 token.\\n    function token() external view returns (IMintableToken);\\n\\n    /// @dev Mints new tokens.\\n    ///\\n    /// @param to Account to receive the new amount.\\n    /// @param amount Amount to increase the supply by.\\n    ///\\n    function mint(address to, uint256 amount) external;\\n\\n    /// @dev Burns tokens from the caller.\\n    ///\\n    /// @param amount Amount to decrease the supply by.\\n    ///\\n    function burn(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/converter/interfaces/IConverterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.6.12;\\n\\nimport \\\"../../token/interfaces/IReserveToken.sol\\\";\\n\\nimport \\\"./IConverterAnchor.sol\\\";\\n\\n/**\\n * @dev Converter Registry interface\\n */\\ninterface IConverterRegistry {\\n    function getAnchorCount() external view returns (uint256);\\n\\n    function getAnchors() external view returns (address[] memory);\\n\\n    function getAnchor(uint256 index) external view returns (IConverterAnchor);\\n\\n    function isAnchor(address value) external view returns (bool);\\n\\n    function getLiquidityPoolCount() external view returns (uint256);\\n\\n    function getLiquidityPools() external view returns (address[] memory);\\n\\n    function getLiquidityPool(uint256 index) external view returns (IConverterAnchor);\\n\\n    function isLiquidityPool(address value) external view returns (bool);\\n\\n    function getConvertibleTokenCount() external view returns (uint256);\\n\\n    function getConvertibleTokens() external view returns (address[] memory);\\n\\n    function getConvertibleToken(uint256 index) external view returns (IReserveToken);\\n\\n    function isConvertibleToken(address value) external view returns (bool);\\n\\n    function getConvertibleTokenAnchorCount(IReserveToken convertibleToken) external view returns (uint256);\\n\\n    function getConvertibleTokenAnchors(IReserveToken convertibleToken) external view returns (address[] memory);\\n\\n    function getConvertibleTokenAnchor(IReserveToken convertibleToken, uint256 index)\\n        external\\n        view\\n        returns (IConverterAnchor);\\n\\n    function isConvertibleTokenAnchor(IReserveToken convertibleToken, address value) external view returns (bool);\\n\\n    function getLiquidityPoolByConfig(\\n        uint16 converterType,\\n        IReserveToken[] memory reserveTokens,\\n        uint32[] memory reserveWeights\\n    ) external view returns (IConverterAnchor);\\n}\\n\"\r\n    },\r\n    \"contracts/converter/interfaces/IConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IConverterAnchor.sol\\\";\\n\\nimport \\\"../../utility/interfaces/IOwned.sol\\\";\\n\\nimport \\\"../../token/interfaces/IReserveToken.sol\\\";\\n\\n/**\\n * @dev Converter interface\\n */\\ninterface IConverter is IOwned {\\n    function converterType() external pure returns (uint16);\\n\\n    function anchor() external view returns (IConverterAnchor);\\n\\n    function isActive() external view returns (bool);\\n\\n    function targetAmountAndFee(\\n        IReserveToken sourceToken,\\n        IReserveToken targetToken,\\n        uint256 sourceAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function convert(\\n        IReserveToken sourceToken,\\n        IReserveToken targetToken,\\n        uint256 sourceAmount,\\n        address trader,\\n        address payable beneficiary\\n    ) external payable returns (uint256);\\n\\n    function conversionFee() external view returns (uint32);\\n\\n    function maxConversionFee() external view returns (uint32);\\n\\n    function reserveBalance(IReserveToken reserveToken) external view returns (uint256);\\n\\n    receive() external payable;\\n\\n    function transferAnchorOwnership(address newOwner) external;\\n\\n    function acceptAnchorOwnership() external;\\n\\n    function setConversionFee(uint32 fee) external;\\n\\n    function addReserve(IReserveToken token, uint32 weight) external;\\n\\n    function transferReservesOnUpgrade(address newConverter) external;\\n\\n    function onUpgradeComplete() external;\\n\\n    // deprecated, backward compatibility\\n    function token() external view returns (IConverterAnchor);\\n\\n    function transferTokenOwnership(address newOwner) external;\\n\\n    function acceptTokenOwnership() external;\\n\\n    function reserveTokenCount() external view returns (uint16);\\n\\n    function reserveTokens() external view returns (IReserveToken[] memory);\\n\\n    function connectors(IReserveToken reserveToken)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint32,\\n            bool,\\n            bool,\\n            bool\\n        );\\n\\n    function getConnectorBalance(IReserveToken connectorToken) external view returns (uint256);\\n\\n    function connectorTokens(uint256 index) external view returns (IReserveToken);\\n\\n    function connectorTokenCount() external view returns (uint16);\\n\\n    /**\\n     * @dev triggered when the converter is activated\\n     */\\n    event Activation(uint16 indexed converterType, IConverterAnchor indexed anchor, bool indexed activated);\\n\\n    /**\\n     * @dev triggered when a conversion between two tokens occurs\\n     */\\n    event Conversion(\\n        IReserveToken indexed sourceToken,\\n        IReserveToken indexed targetToken,\\n        address indexed trader,\\n        uint256 sourceAmount,\\n        uint256 targetAmount,\\n        int256 conversionFee\\n    );\\n\\n    /**\\n     * @dev triggered when the rate between two tokens in the converter changes\\n     *\\n     * note that the event might be dispatched for rate updates between any two tokens in the converter\\n     */\\n    event TokenRateUpdate(address indexed token1, address indexed token2, uint256 rateN, uint256 rateD);\\n\\n    /**\\n     * @dev triggered when the conversion fee is updated\\n     */\\n    event ConversionFeeUpdate(uint32 prevFee, uint32 newFee);\\n}\\n\"\r\n    },\r\n    \"contracts/utility/ContractRegistryClient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.6.12;\\n\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"./interfaces/IContractRegistry.sol\\\";\\n\\n/**\\n * @dev This is the base contract for ContractRegistry clients.\\n */\\ncontract ContractRegistryClient is Owned, Utils {\\n    bytes32 internal constant CONTRACT_REGISTRY = \\\"ContractRegistry\\\";\\n    bytes32 internal constant BANCOR_NETWORK = \\\"BancorNetwork\\\";\\n    bytes32 internal constant CONVERTER_FACTORY = \\\"ConverterFactory\\\";\\n    bytes32 internal constant CONVERSION_PATH_FINDER = \\\"ConversionPathFinder\\\";\\n    bytes32 internal constant CONVERTER_UPGRADER = \\\"BancorConverterUpgrader\\\";\\n    bytes32 internal constant CONVERTER_REGISTRY = \\\"BancorConverterRegistry\\\";\\n    bytes32 internal constant CONVERTER_REGISTRY_DATA = \\\"BancorConverterRegistryData\\\";\\n    bytes32 internal constant BNT_TOKEN = \\\"BNTToken\\\";\\n    bytes32 internal constant BANCOR_X = \\\"BancorX\\\";\\n    bytes32 internal constant BANCOR_X_UPGRADER = \\\"BancorXUpgrader\\\";\\n    bytes32 internal constant LIQUIDITY_PROTECTION = \\\"LiquidityProtection\\\";\\n    bytes32 internal constant NETWORK_SETTINGS = \\\"NetworkSettings\\\";\\n\\n    // address of the current contract registry\\n    IContractRegistry private _registry;\\n\\n    // address of the previous contract registry\\n    IContractRegistry private _prevRegistry;\\n\\n    // only the owner can update the contract registry\\n    bool private _onlyOwnerCanUpdateRegistry;\\n\\n    /**\\n     * @dev verifies that the caller is mapped to the given contract name\\n     */\\n    modifier only(bytes32 contractName) {\\n        _only(contractName);\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _only(bytes32 contractName) internal view {\\n        require(msg.sender == _addressOf(contractName), \\\"ERR_ACCESS_DENIED\\\");\\n    }\\n\\n    /**\\n     * @dev initializes a new ContractRegistryClient instance\\n     */\\n    constructor(IContractRegistry initialRegistry) internal validAddress(address(initialRegistry)) {\\n        _registry = IContractRegistry(initialRegistry);\\n        _prevRegistry = IContractRegistry(initialRegistry);\\n    }\\n\\n    /**\\n     * @dev updates to the new contract registry\\n     */\\n    function updateRegistry() external {\\n        // verify that this function is permitted\\n        require(msg.sender == owner() || !_onlyOwnerCanUpdateRegistry, \\\"ERR_ACCESS_DENIED\\\");\\n\\n        // get the new contract registry\\n        IContractRegistry newRegistry = IContractRegistry(_addressOf(CONTRACT_REGISTRY));\\n\\n        // verify that the new contract registry is different and not zero\\n        require(newRegistry != _registry && address(newRegistry) != address(0), \\\"ERR_INVALID_REGISTRY\\\");\\n\\n        // verify that the new contract registry is pointing to a non-zero contract registry\\n        require(newRegistry.addressOf(CONTRACT_REGISTRY) != address(0), \\\"ERR_INVALID_REGISTRY\\\");\\n\\n        // save a backup of the current contract registry before replacing it\\n        _prevRegistry = _registry;\\n\\n        // replace the current contract registry with the new contract registry\\n        _registry = newRegistry;\\n    }\\n\\n    /**\\n     * @dev restores the previous contract registry\\n     */\\n    function restoreRegistry() external ownerOnly {\\n        // restore the previous contract registry\\n        _registry = _prevRegistry;\\n    }\\n\\n    /**\\n     * @dev restricts the permission to update the contract registry\\n     */\\n    function restrictRegistryUpdate(bool restrictOwnerOnly) public ownerOnly {\\n        // change the permission to update the contract registry\\n        _onlyOwnerCanUpdateRegistry = restrictOwnerOnly;\\n    }\\n\\n    /**\\n     * @dev returns the address of the current contract registry\\n     */\\n    function registry() public view returns (IContractRegistry) {\\n        return _registry;\\n    }\\n\\n    /**\\n     * @dev returns the address of the previous contract registry\\n     */\\n    function prevRegistry() external view returns (IContractRegistry) {\\n        return _prevRegistry;\\n    }\\n\\n    /**\\n     * @dev returns whether only the owner can update the contract registry\\n     */\\n    function onlyOwnerCanUpdateRegistry() external view returns (bool) {\\n        return _onlyOwnerCanUpdateRegistry;\\n    }\\n\\n    /**\\n     * @dev returns the address associated with the given contract name\\n     */\\n    function _addressOf(bytes32 contractName) internal view returns (address) {\\n        return _registry.addressOf(contractName);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utility/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/IOwned.sol\\\";\\n\\n/**\\n * @dev This contract provides support and utilities for contract ownership.\\n */\\ncontract Owned is IOwned {\\n    address private _owner;\\n    address private _newOwner;\\n\\n    /**\\n     * @dev triggered when the owner is updated\\n     */\\n    event OwnerUpdate(address indexed prevOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev initializes a new Owned instance\\n     */\\n    constructor() public {\\n        _owner = msg.sender;\\n    }\\n\\n    // allows execution by the owner only\\n    modifier ownerOnly() {\\n        _ownerOnly();\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _ownerOnly() private view {\\n        require(msg.sender == _owner, \\\"ERR_ACCESS_DENIED\\\");\\n    }\\n\\n    /**\\n     * @dev allows transferring the contract ownership\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the owner of the contract\\n     *\\n     * note the new owner still needs to accept the transfer\\n     */\\n    function transferOwnership(address newOwner) public override ownerOnly {\\n        require(newOwner != _owner, \\\"ERR_SAME_OWNER\\\");\\n\\n        _newOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev used by a new owner to accept an ownership transfer\\n     */\\n    function acceptOwnership() public override {\\n        require(msg.sender == _newOwner, \\\"ERR_ACCESS_DENIED\\\");\\n\\n        emit OwnerUpdate(_owner, _newOwner);\\n\\n        _owner = _newOwner;\\n        _newOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev returns the address of the current owner\\n     */\\n    function owner() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev returns the address of the new owner candidate\\n     */\\n    function newOwner() external view returns (address) {\\n        return _newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utility/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Utilities & Common Modifiers\\n */\\ncontract Utils {\\n    uint32 internal constant PPM_RESOLUTION = 1000000;\\n\\n    // verifies that a value is greater than zero\\n    modifier greaterThanZero(uint256 value) {\\n        _greaterThanZero(value);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _greaterThanZero(uint256 value) internal pure {\\n        require(value > 0, \\\"ERR_ZERO_VALUE\\\");\\n    }\\n\\n    // validates an address - currently only checks that it isn't null\\n    modifier validAddress(address addr) {\\n        _validAddress(addr);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validAddress(address addr) internal pure {\\n        require(addr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n\\n    // ensures that the portion is valid\\n    modifier validPortion(uint32 _portion) {\\n        _validPortion(_portion);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validPortion(uint32 _portion) internal pure {\\n        require(_portion > 0 && _portion <= PPM_RESOLUTION, \\\"ERR_INVALID_PORTION\\\");\\n    }\\n\\n    // validates an external address - currently only checks that it isn't null or this\\n    modifier validExternalAddress(address addr) {\\n        _validExternalAddress(addr);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validExternalAddress(address addr) internal view {\\n        require(addr != address(0) && addr != address(this), \\\"ERR_INVALID_EXTERNAL_ADDRESS\\\");\\n    }\\n\\n    // ensures that the fee is valid\\n    modifier validFee(uint32 fee) {\\n        _validFee(fee);\\n\\n        _;\\n    }\\n\\n    // error message binary size optimization\\n    function _validFee(uint32 fee) internal pure {\\n        require(fee <= PPM_RESOLUTION, \\\"ERR_INVALID_FEE\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utility/interfaces/ITokenHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.6.12;\\n\\nimport \\\"../../token/interfaces/IReserveToken.sol\\\";\\n\\nimport \\\"./IOwned.sol\\\";\\n\\n/**\\n * @dev Token Holder interface\\n */\\ninterface ITokenHolder is IOwned {\\n    receive() external payable;\\n\\n    function withdrawTokens(\\n        IReserveToken reserveToken,\\n        address payable to,\\n        uint256 amount\\n    ) external;\\n\\n    function withdrawTokensMultiple(\\n        IReserveToken[] calldata reserveTokens,\\n        address payable to,\\n        uint256[] calldata amounts\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/token/ReserveToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IReserveToken.sol\\\";\\n\\nimport \\\"./SafeERC20Ex.sol\\\";\\n\\n/**\\n * @dev This library implements ERC20 and SafeERC20 utilities for reserve tokens, which can be either ERC20 tokens or ETH\\n */\\nlibrary ReserveToken {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20Ex for IERC20;\\n\\n    // the address that represents an ETH reserve\\n    IReserveToken public constant NATIVE_TOKEN_ADDRESS = IReserveToken(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    /**\\n     * @dev returns whether the provided token represents an ERC20 or ETH reserve\\n     */\\n    function isNativeToken(IReserveToken reserveToken) internal pure returns (bool) {\\n        return reserveToken == NATIVE_TOKEN_ADDRESS;\\n    }\\n\\n    /**\\n     * @dev returns the balance of the reserve token\\n     */\\n    function balanceOf(IReserveToken reserveToken, address account) internal view returns (uint256) {\\n        if (isNativeToken(reserveToken)) {\\n            return account.balance;\\n        }\\n\\n        return toIERC20(reserveToken).balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev transfers a specific amount of the reserve token\\n     */\\n    function safeTransfer(\\n        IReserveToken reserveToken,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isNativeToken(reserveToken)) {\\n            payable(to).transfer(amount);\\n        } else {\\n            toIERC20(reserveToken).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev transfers a specific amount of the reserve token from a specific holder using the allowance mechanism\\n     *\\n     * note that the function ignores a reserve token which represents an ETH reserve\\n     */\\n    function safeTransferFrom(\\n        IReserveToken reserveToken,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0 || isNativeToken(reserveToken)) {\\n            return;\\n        }\\n\\n        toIERC20(reserveToken).safeTransferFrom(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev ensures that the spender has sufficient allowance\\n     *\\n     * note that this function ignores a reserve token which represents an ETH reserve\\n     */\\n    function ensureApprove(\\n        IReserveToken reserveToken,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (isNativeToken(reserveToken)) {\\n            return;\\n        }\\n\\n        toIERC20(reserveToken).ensureApprove(spender, amount);\\n    }\\n\\n    /**\\n     * @dev utility function that converts an IReserveToken to an IERC20\\n     */\\n    function toIERC20(IReserveToken reserveToken) private pure returns (IERC20) {\\n        return IERC20(address(reserveToken));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/INetworkSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.6.12;\\n\\nimport \\\"./utility/interfaces/ITokenHolder.sol\\\";\\n\\ninterface INetworkSettings {\\n    function networkFeeParams() external view returns (ITokenHolder, uint32);\\n\\n    function networkFeeWallet() external view returns (ITokenHolder);\\n\\n    function networkFee() external view returns (uint32);\\n}\\n\"\r\n    },\r\n    \"contracts/IBancorNetwork.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.6.12;\\n\\ninterface IBancorNetwork {\\n    function rateByPath(address[] memory path, uint256 sourceAmount) external view returns (uint256);\\n\\n    function convertByPath(\\n        address[] memory path,\\n        uint256 sourceAmount,\\n        uint256 minReturn,\\n        address payable beneficiary,\\n        address affiliateAccount,\\n        uint256 affiliateFee\\n    ) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@bancor/token-governance/contracts/IMintableToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IClaimable.sol\\\";\\n\\n/// @title Mintable Token interface\\ninterface IMintableToken is IERC20, IClaimable {\\n    function issue(address to, uint256 amount) external;\\n\\n    function destroy(address from, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@bancor/token-governance/contracts/IClaimable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\n/// @title Claimable contract interface\\ninterface IClaimable {\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function acceptOwnership() external;\\n}\\n\"\r\n    },\r\n    \"contracts/token/interfaces/IReserveToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev This contract is used to represent reserve tokens, which are tokens that can either be regular ERC20 tokens or\\n * native ETH (represented by the NATIVE_TOKEN_ADDRESS address)\\n *\\n * Please note that this interface is intentionally doesn't inherit from IERC20, so that it'd be possible to effectively\\n * override its balanceOf() function in the ReserveToken library\\n */\\ninterface IReserveToken {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/converter/interfaces/IConverterAnchor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.6.12;\\n\\nimport \\\"../../utility/interfaces/IOwned.sol\\\";\\n\\n/**\\n * @dev Converter Anchor interface\\n */\\ninterface IConverterAnchor is IOwned {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utility/interfaces/IOwned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Owned interface\\n */\\ninterface IOwned {\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function acceptOwnership() external;\\n}\\n\"\r\n    },\r\n    \"contracts/utility/interfaces/IContractRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract Registry interface\\n */\\ninterface IContractRegistry {\\n    function addressOf(bytes32 contractName) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/token/SafeERC20Ex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/**\\n * @dev Extends the SafeERC20 library with additional operations\\n */\\nlibrary SafeERC20Ex {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev ensures that the spender has sufficient allowance\\n     */\\n    function ensureApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (allowance >= amount) {\\n            return;\\n        }\\n\\n        if (allowance > 0) {\\n            token.safeApprove(spender, 0);\\n        }\\n        token.safeApprove(spender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"networkToken\",\"type\":\"address\"},{\"internalType\":\"contract ITokenGovernance\",\"name\":\"govTokenGovernance\",\"type\":\"address\"},{\"internalType\":\"contract IContractRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"contract IVortexBurner\",\"name\":\"prevBurner\",\"type\":\"address\"},{\"internalType\":\"contract IBancorNetworkV3\",\"name\":\"networkV3\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevBurnReward\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newBurnReward\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevMaxBurnRewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBurnRewardAmount\",\"type\":\"uint256\"}],\"name\":\"BurnRewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IReserveToken[]\",\"name\":\"reserveTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IReserveToken\",\"name\":\"reserveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"}],\"name\":\"Converted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptNetworkFeeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReserveToken[]\",\"name\":\"reserveTokens\",\"type\":\"address[]\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnReward\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyOwnerCanUpdateRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevRegistry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"restrictOwnerOnly\",\"type\":\"bool\"}],\"name\":\"restrictRegistryUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newBurnReward\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"newMaxBurnRewardAmount\",\"type\":\"uint256\"}],\"name\":\"setBurnReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurnedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferNetworkFeeWalletOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VortexBurner", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001f573d6fb3f13d689ff844b4ce37794d79a7ff1c0000000000000000000000000887ae1251e180d7d453aedebee26e1639f2011300000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd40000000000000000000000002f87b1fca1769bc3361700078e1985b2dc0f1142000000000000000000000000eef417e1d5cc832e619ae18d2f140de2999dd4fb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}