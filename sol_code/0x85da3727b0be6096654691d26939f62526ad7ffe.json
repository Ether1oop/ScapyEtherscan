{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.15;\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721Upgradeable is IERC165Upgradeable {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface ITokenRecoverable {\r\n    // Events for token recovery (ERC20) and (ERC721)\r\n    event TokenRecoveredERC20(\r\n        address indexed recipient,\r\n        address indexed erc20,\r\n        uint256 amount\r\n    );\r\n    event TokenRecoveredERC721(\r\n        address indexed recipient,\r\n        address indexed erc721,\r\n        uint256 tokenId\r\n    );\r\n\r\n    /**\r\n     * Allows the owner of an ERC20Club or ERC721Collective to return\r\n     * any ERC20 tokens erroneously sent to the contract.\r\n     *\r\n     * Emits a `TokenRecoveredERC20` event.\r\n     *\r\n     * Requirements:\r\n     * - The caller must be the (Club or Collective) token contract owner.\r\n     * @param recipient Address that erroneously sent the ERC20 token(s)\r\n     * @param erc20 Erroneously-sent ERC20 token to recover\r\n     * @param amount Amount to recover\r\n     */\r\n    function recoverERC20(\r\n        address recipient,\r\n        address erc20,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * Allows the owner of an ERC20Club or ERC721Collective to return\r\n     * any ERC721 tokens erroneously sent to the contract.\r\n     *\r\n     * Emits a `TokenRecoveredERC721` event.\r\n     *\r\n     * Requirements:\r\n     * - The caller must be the (Club or Collective) token contract owner.\r\n     * @param recipient Address that erroneously sent the ERC721 token\r\n     * @param erc721 Erroneously-sent ERC721 token to recover\r\n     * @param tokenId The tokenId to recover\r\n     */\r\n    function recoverERC721(\r\n        address recipient,\r\n        address erc721,\r\n        uint256 tokenId\r\n    ) external;\r\n}\r\n\r\n/**\r\n * Interface for a Guard that governs whether a token can be minted, burned, or\r\n * transferred by a particular operator, from a particular sender (`from` is\r\n * address 0 iff the token is being minted), to a particular recipient (`to` is\r\n * address 0 iff the token is being burned).\r\n */\r\ninterface IGuard {\r\n    /**\r\n     * @return True iff the transaction is allowed\r\n     * @param operator Transaction msg.sender\r\n     * @param from Token sender\r\n     * @param to Token recipient\r\n     * @param value Amount (ERC20) or token ID (ERC721)\r\n     */\r\n    function isAllowed(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 value // amount (ERC20) or tokenId (ERC721)\r\n    ) external view returns (bool);\r\n}\r\n\r\ninterface ITokenEnforceable is ITokenRecoverable {\r\n    event ControlDisabled(address indexed controller);\r\n    event BatcherUpdated(address batcher);\r\n    event GuardUpdated(GuardType indexed guard, address indexed implementation);\r\n    event GuardLocked(\r\n        bool mintGuardLocked,\r\n        bool burnGuardLocked,\r\n        bool transferGuardLocked\r\n    );\r\n\r\n    /**\r\n     * @return The address of the transaction batcher used to batch calls over\r\n     * onlyOwner functions.\r\n     */\r\n    function batcher() external view returns (address);\r\n\r\n    /**\r\n     * @return True iff the token contract owner is allowed to mint, burn, or\r\n     * transfer on behalf of arbitrary addresses.\r\n     */\r\n    function isControllable() external view returns (bool);\r\n\r\n    /**\r\n     * @return The address of the Guard used to determine whether a mint is\r\n     * allowed. The contract at this address is assumed to implement the IGuard\r\n     * interface.\r\n     */\r\n    function mintGuard() external view returns (IGuard);\r\n\r\n    /**\r\n     * @return The address of the Guard used to determine whether a burn is\r\n     * allowed. The contract at this address is assumed to implement the IGuard\r\n     * interface.\r\n     */\r\n    function burnGuard() external view returns (IGuard);\r\n\r\n    /**\r\n     * @return The address of the Guard used to determine whether a transfer is\r\n     * allowed. The contract at this address is assumed to implement the IGuard\r\n     * interface.\r\n     */\r\n    function transferGuard() external view returns (IGuard);\r\n\r\n    /**\r\n     * @return True iff the mint Guard cannot be changed.\r\n     */\r\n    function mintGuardLocked() external view returns (bool);\r\n\r\n    /**\r\n     * @return True iff the burn Guard cannot be changed.\r\n     */\r\n    function burnGuardLocked() external view returns (bool);\r\n\r\n    /**\r\n     * @return True iff the transfer Guard cannot be changed.\r\n     */\r\n    function transferGuardLocked() external view returns (bool);\r\n\r\n    /**\r\n     * Irreversibly disables the token contract owner from minting, burning,\r\n     * and transferring on behalf of arbitrary addresses.\r\n     *\r\n     * Emits a `ControlDisabled` event.\r\n     *\r\n     * Requirements:\r\n     * - The caller must be the token contract owner or the batcher.\r\n     */\r\n    function disableControl() external;\r\n\r\n    /**\r\n     * Irreversibly prevents the token contract owner from changing the mint,\r\n     * burn, and/or transfer Guards.\r\n     *\r\n     * If at least one guard was requested to be locked, emits a `GuardLocked`\r\n     * event confirming whether each Guard is locked.\r\n     *\r\n     * Requirements:\r\n     * - The caller must be the token contract owner or the batcher.\r\n     * @param mintGuardLock If true, the mint Guard will be locked. If false,\r\n     * does nothing to the mint Guard.\r\n     * @param burnGuardLock If true, the mint Guard will be locked. If false,\r\n     * does nothing to the burn Guard.\r\n     * @param transferGuardLock If true, the mint Guard will be locked. If\r\n     * false, does nothing to the transfer Guard.\r\n     */\r\n    function lockGuards(\r\n        bool mintGuardLock,\r\n        bool burnGuardLock,\r\n        bool transferGuardLock\r\n    ) external;\r\n\r\n    /**\r\n     * Update the address of the batcher for batching calls over\r\n     * onlyOwner functions.\r\n     *\r\n     * Emits a `BatcherUpdated` event.\r\n     *\r\n     * Requirements:\r\n     * - The caller must be the token contract owner or the batcher.\r\n     * @param implementation Address of new batcher\r\n     */\r\n    function updateBatcher(address implementation) external;\r\n\r\n    /**\r\n     * Update the address of the Guard for minting. The contract at the\r\n     * passed-in address is assumed to implement the IGuard interface.\r\n     *\r\n     * Emits a `GuardUpdated` event with `GuardType.Mint`.\r\n     *\r\n     * Requirements:\r\n     * - The caller must be the token contract owner or the batcher.\r\n     * - The mint Guard must not be locked.\r\n     * @param implementation Address of new mint Guard\r\n     */\r\n    function updateMintGuard(address implementation) external;\r\n\r\n    /**\r\n     * Update the address of the Guard for burning. The contract at the\r\n     * passed-in address is assumed to implement the IGuard interface.\r\n     *\r\n     * Emits a `GuardUpdated` event with `GuardType.Burn`.\r\n     *\r\n     * Requirements:\r\n     * - The caller must be the token contract owner or the batcher.\r\n     * - The burn Guard must not be locked.\r\n     * @param implementation Address of new burn Guard\r\n     */\r\n    function updateBurnGuard(address implementation) external;\r\n\r\n    /**\r\n     * Update the address of the Guard for transferring. The contract at the\r\n     * passed-in address is assumed to implement the IGuard interface.\r\n     *\r\n     * Emits a `GuardUpdated` event with `GuardType.Transfer`.\r\n     *\r\n     * Requirements:\r\n     * - The caller must be the token contract owner or the batcher.\r\n     * - The transfer Guard must not be locked.\r\n     * @param implementation Address of transfer Guard\r\n     */\r\n    function updateTransferGuard(address implementation) external;\r\n\r\n    /**\r\n     * @return True iff a token can be minted, burned, or transferred by a\r\n     * particular operator, from a particular sender (`from` is address 0 iff\r\n     * the token is being minted), to a particular recipient (`to` is address 0\r\n     * iff the token is being burned).\r\n     * @param operator Transaction msg.sender\r\n     * @param from Token sender\r\n     * @param to Token recipient\r\n     * @param value Amount (ERC20) or token ID (ERC721)\r\n     */\r\n    function isAllowed(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 value // amount (ERC20) or tokenId (ERC721)\r\n    ) external view returns (bool);\r\n\r\n    /**\r\n     * @return owner The address of the token contract owner\r\n     */\r\n    function owner() external view returns (address);\r\n\r\n    /**\r\n     * Transfers ownership of the contract to a new account (`newOwner`)\r\n     *\r\n     * Emits an `OwnershipTransferred` event.\r\n     *\r\n     * Requirements:\r\n     * - The caller must be the current owner.\r\n     * @param newOwner Address that will become the owner\r\n     */\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    /**\r\n     * Leaves the contract without an owner. After calling this function, it\r\n     * will no longer be possible to call `onlyOwner` functions.\r\n     *\r\n     * Requirements:\r\n     * - The caller must be the current owner.\r\n     */\r\n    function renounceOwnership() external;\r\n}\r\n\r\nenum GuardType {\r\n    Mint,\r\n    Burn,\r\n    Transfer\r\n}\r\n\r\n/**\r\n * @title IERC1644 Controller Token Operation (part of the ERC1400 Security\r\n * Token Standards)\r\n *\r\n * See https://github.com/ethereum/EIPs/issues/1644. Data and operatorData\r\n * parameters were removed.\r\n */\r\ninterface IERC1644 {\r\n    event ControllerRedemption(\r\n        address account,\r\n        address indexed from,\r\n        uint256 value\r\n    );\r\n\r\n    event ControllerTransfer(\r\n        address controller,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * Burns `tokenId` without checking whether the caller owns or is approved\r\n     * to spend the token.\r\n     *\r\n     * Emits a `Transfer` event with `address(0)` as `to` AND a\r\n     * `ControllerRedemption` event.\r\n     *\r\n     * Requirements:\r\n     * - The caller must be the token contract owner or the batcher.\r\n     * - `isControllable` must be true.\r\n     * @param account The account whose token will be burned.\r\n     * @param value Amount (ERC20) or token ID (ERC721)\r\n     */\r\n    function controllerRedeem(\r\n        address account,\r\n        uint256 value // amount (ERC20) or tokenId (ERC721))\r\n    ) external;\r\n\r\n    /**\r\n     * Transfers `tokenId` token from `from` to `to`, without checking whether\r\n     * the caller owns or is approved to spend the token.\r\n     *\r\n     * Emits a `Transfer` event with `address(0)` as `to` AND a\r\n     * `ControllerRedemption` event.\r\n     *\r\n     * Requirements:\r\n     * - The caller must be the token contract owner or the batcher.\r\n     * - `isControllable` must be true.\r\n     * @param from The account sending the token.\r\n     * @param to The account to receive the token.\r\n     * @param value Amount (ERC20) or token ID (ERC721)\r\n     */\r\n    function controllerTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 value // amount (ERC20) or tokenId (ERC721)\r\n    ) external;\r\n}\r\n\r\n/**\r\n * Interface for functions defined in ERC721UpgradeableFork\r\n */\r\ninterface IERC721UpgradeableFork is IERC721MetadataUpgradeable {\r\n    /**\r\n     * @return ID of the first token that will be minted.\r\n     */\r\n    function STARTING_TOKEN_ID() external view returns (uint256);\r\n\r\n    /**\r\n     * Max consecutive tokenIds of bulk-minted tokens whose owner can be stored\r\n     * as address(0). This number is capped to reduce the cost of owner lookup.\r\n     */\r\n    function OWNER_ID_STAGGER() external view returns (uint256);\r\n\r\n    /**\r\n     * @return ID of the next token that will be minted. Existing tokens are\r\n     * limited to IDs between `STARTING_TOKEN_ID` and `_nextTokenId` (including\r\n     * `STARTING_TOKEN_ID` and excluding `_nextTokenId`, though not all of these\r\n     * IDs may be in use if tokens have been burned).\r\n     */\r\n    function nextTokenId() external view returns (uint256);\r\n\r\n    /**\r\n     * @return receiver Address that should receive royalties from sales.\r\n     * @return royaltyAmount How much royalty that should be sent to `receiver`,\r\n     * denominated in the same unit of exchange as `salePrice`.\r\n     * @param tokenId The token being sold.\r\n     * @param salePrice The sale price of the token, denominated in any unit of\r\n     * exchange. The royalty amount will be denominated and should be paid in\r\n     * that same unit of exchange.\r\n     */\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount);\r\n}\r\n\r\n/**\r\n * Interface for only functions defined in ERC721Collective (excludes inherited\r\n * and overridden functions)\r\n */\r\ninterface IERC721CollectiveUnchained is IERC1644 {\r\n    event RendererUpdated(address indexed implementation);\r\n    event RendererLocked();\r\n\r\n    /**\r\n     * Initializes `ERC721Collective`.\r\n     *\r\n     * Emits an `Initialized` event.\r\n     *\r\n     * @param name_ Name of token\r\n     * @param symbol_ Symbol of token\r\n     * @param mintGuard_ Address of mint guard\r\n     * @param burnGuard_ Address of burn guard\r\n     * @param transferGuard_ Address of transfer guard\r\n     * @param renderer_ Address of renderer\r\n     */\r\n    function __ERC721Collective_init(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        address mintGuard_,\r\n        address burnGuard_,\r\n        address transferGuard_,\r\n        address renderer_\r\n    ) external;\r\n\r\n    /**\r\n     * @return Number of currently-existing tokens (tokens that have been\r\n     * minted and that have not been burned).\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    // name(), symbol(), and tokenURI() overriding ERC721UpgradeableFork\r\n    // declared in IERC721Fork\r\n\r\n    /**\r\n     * @return The address of the token Renderer. The contract at this address\r\n     * is assumed to implement the IRenderer interface.\r\n     */\r\n    function renderer() external view returns (address);\r\n\r\n    /**\r\n     * @return True iff the Renderer cannot be changed.\r\n     */\r\n    function rendererLocked() external view returns (bool);\r\n\r\n    /**\r\n     * Update the address of the token Renderer. The contract at the passed-in\r\n     * address is assumed to implement the IRenderer interface.\r\n     *\r\n     * Emits a `RendererUpdated` event.\r\n     *\r\n     * Requirements:\r\n     * - The caller must be the token contract owner or the batcher.\r\n     * - Renderer must not be locked.\r\n     * @param implementation Address of new Renderer\r\n     */\r\n    function updateRenderer(address implementation) external;\r\n\r\n    /**\r\n     * Irreversibly prevents the token contract owner from changing the token\r\n     * Renderer.\r\n     *\r\n     * Emits a `RendererLocked` event.\r\n     *\r\n     * Requirements:\r\n     * - The caller must be the token contract owner or the batcher.\r\n     */\r\n    function lockRenderer() external;\r\n\r\n    // supportsInterface(bytes4 interfaceId) overriding ERC1644 declared in\r\n    // IERC1644\r\n\r\n    /**\r\n     * @return True after successfully executing mint and transfer of\r\n     * `nextTokenId` to `account`.\r\n     *\r\n     * Emits a `Transfer` event with `address(0)` as `from`.\r\n     *\r\n     * Requirements:\r\n     * - `account` cannot be the zero address.\r\n     * @param account The account to receive the minted token.\r\n     */\r\n    function mintTo(address account) external returns (bool);\r\n\r\n    /**\r\n     * @return True after successfully bulk minting and transferring the\r\n     * `nextTokenId` through `nextTokenId + amount` tokens to `account`.\r\n     *\r\n     * Emits a `Transfer` event (with `address(0)` as `from`) for each token\r\n     * that is minted.\r\n     *\r\n     * Requirements:\r\n     * - `account` cannot be the zero address.\r\n     * @param account The account to receive the minted tokens.\r\n     * @param amount The number of tokens to be minted.\r\n     */\r\n    function bulkMintToOneAddress(address account, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @return True after successfully bulk minting and transferring one of the\r\n     * `nextTokenId` through `nextTokenId + accounts.length` tokens to each of\r\n     * the addresses in `accounts`.\r\n     *\r\n     * Emits a `Transfer` event (with `address(0)` as `from`) for each token\r\n     * that is minted.\r\n     *\r\n     * Requirements:\r\n     * - `accounts` cannot have length 0.\r\n     * - None of the addresses in `accounts` can be the zero address.\r\n     * @param accounts The accounts to receive the minted tokens.\r\n     */\r\n    function bulkMintToNAddresses(address[] calldata accounts)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @return True after successfully burning `tokenId`.\r\n     *\r\n     * Emits a `Transfer` event with `address(0)` as `to`.\r\n     *\r\n     * Requirements:\r\n     * - The caller must either own or be approved to spend the `tokenId` token.\r\n     * - `tokenId` must exist.\r\n     * @param tokenId The tokenId to be burned.\r\n     */\r\n    function redeem(uint256 tokenId) external returns (bool);\r\n\r\n    // controllerRedeem() and controllerTransfer() declared in IERC1644\r\n\r\n    /**\r\n     * Sets the default royalty fee percentage for the ERC721.\r\n     *\r\n     * A custom royalty fee will override the default if set for specific tokenIds.\r\n     *\r\n     * Requirements:\r\n     * - The caller must be the token contract owner.\r\n     * - `isControllable` must be true.\r\n     * @param receiver The account to receive the royalty.\r\n     * @param feeNumerator The fee amount in basis points.\r\n     */\r\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\r\n\r\n    /**\r\n     * Sets a custom royalty fee percentage for the specified `tokenId`.\r\n     *\r\n     * Requirements:\r\n     * - The caller must be the token contract owner.\r\n     * - `isControllable` must be true.\r\n     * - `tokenId` must exist.\r\n     * @param tokenId The tokenId to set a custom royalty for.\r\n     * @param receiver The account to receive the royalty.\r\n     * @param feeNumerator The fee amount in basis points.\r\n     */\r\n    function setTokenRoyalty(\r\n        uint256 tokenId,\r\n        address receiver,\r\n        uint96 feeNumerator\r\n    ) external;\r\n}\r\n\r\n/**\r\n * Interface for all functions in ERC721Collective, including inherited and\r\n * overridden functions\r\n */\r\ninterface IERC721Collective is\r\n    ITokenEnforceable,\r\n    IERC721UpgradeableFork,\r\n    IERC721CollectiveUnchained\r\n{\r\n\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Library used to query support of an interface declared via {IERC165}.\r\n *\r\n * Note that these functions return the actual result of the query: they do not\r\n * `revert` if an interface is not supported. It is up to the caller to decide\r\n * what to do in these cases.\r\n */\r\nlibrary ERC165Checker {\r\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\r\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the {IERC165} interface.\r\n     */\r\n    function supportsERC165(address account) internal view returns (bool) {\r\n        // Any contract that implements ERC165 must explicitly indicate support of\r\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\r\n        return\r\n            supportsERC165InterfaceUnchecked(\r\n                account,\r\n                type(IERC165).interfaceId\r\n            ) &&\r\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the interface defined by\r\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(address account, bytes4 interfaceId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        // query support of both ERC165 as per the spec and support of _interfaceId\r\n        return\r\n            supportsERC165(account) &&\r\n            supportsERC165InterfaceUnchecked(account, interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a boolean array where each value corresponds to the\r\n     * interfaces passed in and whether they're supported or not. This allows\r\n     * you to batch check interfaces for a contract where your expectation\r\n     * is that some interfaces may not be supported.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function getSupportedInterfaces(\r\n        address account,\r\n        bytes4[] memory interfaceIds\r\n    ) internal view returns (bool[] memory) {\r\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\r\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\r\n\r\n        // query support of ERC165 itself\r\n        if (supportsERC165(account)) {\r\n            // query support of each interface in interfaceIds\r\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(\r\n                    account,\r\n                    interfaceIds[i]\r\n                );\r\n            }\r\n        }\r\n\r\n        return interfaceIdsSupported;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports all the interfaces defined in\r\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * Batch-querying can lead to gas savings by skipping repeated checks for\r\n     * {IERC165} support.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsAllInterfaces(\r\n        address account,\r\n        bytes4[] memory interfaceIds\r\n    ) internal view returns (bool) {\r\n        // query support of ERC165 itself\r\n        if (!supportsERC165(account)) {\r\n            return false;\r\n        }\r\n\r\n        // query support of each interface in interfaceIds\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // all interfaces supported\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface, does not check ERC165 support\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return true if the contract at account indicates support of the interface with\r\n     * identifier interfaceId, false otherwise\r\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\r\n     * the behavior of this method is undefined. This precondition can be checked\r\n     * with {supportsERC165}.\r\n     * Interface identification is specified in ERC-165.\r\n     */\r\n    function supportsERC165InterfaceUnchecked(\r\n        address account,\r\n        bytes4 interfaceId\r\n    ) internal view returns (bool) {\r\n        // prepare call\r\n        bytes memory encodedParams = abi.encodeWithSelector(\r\n            IERC165.supportsInterface.selector,\r\n            interfaceId\r\n        );\r\n\r\n        // perform static call\r\n        bool success;\r\n        uint256 returnSize;\r\n        uint256 returnValue;\r\n        assembly {\r\n            success := staticcall(\r\n                30000,\r\n                account,\r\n                add(encodedParams, 0x20),\r\n                mload(encodedParams),\r\n                0x00,\r\n                0x20\r\n            )\r\n            returnSize := returndatasize()\r\n            returnValue := mload(0x00)\r\n        }\r\n\r\n        return success && returnSize >= 0x20 && returnValue > 0;\r\n    }\r\n}\r\n\r\n/// Mixin can be used by any module using an address that should be an\r\n/// ERC721Collective and needs to check if it indeed is one.\r\nabstract contract ERC165CheckerERC721Collective {\r\n    /// Only proceed if collective implements IERC721Collective interface\r\n    /// @param collective collective to check\r\n    modifier onlyCollectiveInterface(address collective) {\r\n        _checkCollectiveInterface(collective);\r\n        _;\r\n    }\r\n\r\n    function _checkCollectiveInterface(address collective) internal view {\r\n        require(\r\n            ERC165Checker.supportsInterface(\r\n                collective,\r\n                type(IERC721Collective).interfaceId\r\n            ),\r\n            \"ERC165CheckerERC721Collective: collective address does not implement proper interface\"\r\n        );\r\n    }\r\n}\r\n\r\ninterface IOwner {\r\n    function owner() external view returns (address);\r\n}\r\n\r\n/**\r\n * Utility for use by any module or guard that needs to check if an address is\r\n * the owner of the TokenEnforceable (ERC20Club or ERC721Collective)\r\n */\r\n\r\nabstract contract TokenOwnerChecker {\r\n    /**\r\n     * Only proceed if msg.sender owns TokenEnforceable contract\r\n     * @param token TokenEnforceable whose owner to check\r\n     */\r\n    modifier onlyTokenOwner(address token) {\r\n        _onlyTokenOwner(token);\r\n        _;\r\n    }\r\n\r\n    function _onlyTokenOwner(address token) internal view {\r\n        require(\r\n            msg.sender == IOwner(token).owner(),\r\n            \"TokenOwnerChecker: Caller not token owner\"\r\n        );\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                0,\r\n                \"Address: low-level call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage)\r\n        private\r\n        pure\r\n    {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(\r\n                oldAllowance >= value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    newAllowance\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(\r\n            nonceAfter == nonceBefore + 1,\r\n            \"SafeERC20: permit did not succeed\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract TokenRecoverable is ITokenRecoverable {\r\n    // Using safeTransfer since interacting with other ERC20s\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public admin;\r\n\r\n    constructor(address _admin) {\r\n        admin = _admin;\r\n    }\r\n\r\n    modifier isAdmin() {\r\n        require(msg.sender == admin, \"TokenRecoverable: Caller not admin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Only allows a syndicate address to access any ERC20 tokens erroneously sent to the contract.\r\n     *\r\n     * Emits a `TokenRecoveredERC20` event.\r\n     *\r\n     * Requirements:\r\n     * - None\r\n     * @param recipient Address that erroneously sent the ERC20 token(s)\r\n     * @param erc20 Erroneously-sent ERC20 token to recover\r\n     * @param amount Amount to recover\r\n     */\r\n    function recoverERC20(\r\n        address recipient,\r\n        address erc20,\r\n        uint256 amount\r\n    ) external isAdmin {\r\n        IERC20(erc20).safeTransfer(recipient, amount);\r\n        emit TokenRecoveredERC20(recipient, erc20, amount);\r\n    }\r\n\r\n    /**\r\n     * Only allows a syndicate address to access any ERC721 tokens erroneously sent to the contract.\r\n     *\r\n     * Emits a `TokenRecoveredERC721` event.\r\n     *\r\n     * Requirements:\r\n     * - None\r\n     * @param recipient Address that erroneously sent the ERC721 token\r\n     * @param erc721 Erroneously-sent ERC721 token to recover\r\n     * @param tokenId The tokenId to recover\r\n     */\r\n    function recoverERC721(\r\n        address recipient,\r\n        address erc721,\r\n        uint256 tokenId\r\n    ) external isAdmin {\r\n        IERC721(erc721).transferFrom(address(this), recipient, tokenId);\r\n        emit TokenRecoveredERC721(recipient, erc721, tokenId);\r\n    }\r\n}\r\n\r\n// Public mint module that allows anyone willing to pay the ETH price to mint.\r\ncontract EthPriceMintModule is\r\n    ReentrancyGuard,\r\n    ERC165CheckerERC721Collective,\r\n    TokenOwnerChecker,\r\n    TokenRecoverable\r\n{\r\n    // Collective => price to mint 1 token in wei\r\n    mapping(address => uint256) public ethPrice;\r\n\r\n    event EthPriceUpdated(address indexed collective, uint256 ethPrice_);\r\n    event Minted(\r\n        address indexed collective,\r\n        address indexed account,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(address admin) TokenRecoverable(admin) {}\r\n\r\n    /// Update eth price for minting\r\n    /// @param collective Collective to update\r\n    /// @param ethPrice_ The price per ERC721\r\n    function updateEthPrice(address collective, uint256 ethPrice_)\r\n        public\r\n        onlyTokenOwner(collective)\r\n    {\r\n        ethPrice[collective] = ethPrice_;\r\n        emit EthPriceUpdated(collective, ethPrice_);\r\n    }\r\n\r\n    /// Mint Collective NFT - one per person\r\n    /// @param collective Collective to mint\r\n    /// @param amount amount to be minted\r\n    /// @return true\r\n    function mint(address collective, uint256 amount)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        onlyCollectiveInterface(collective)\r\n        returns (bool)\r\n    {\r\n        require(\r\n            msg.value == ethPrice[collective] * amount,\r\n            \"EthPriceMintModule: Must send ETH value equal to ethPrice\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, ) = payable(Ownable(collective).owner()).call{\r\n            value: msg.value\r\n        }(\"\");\r\n        require(success, \"EthPriceMintModule: Failed to send Ether to owner\");\r\n\r\n        IERC721Collective(collective).bulkMintToOneAddress(msg.sender, amount);\r\n        emit Minted(collective, msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    /// This function is called for all messages sent to this contract (there\r\n    /// are no other functions). Sending Ether to this contract will cause an\r\n    /// exception, because the fallback function does not have the `payable`\r\n    /// modifier.\r\n    /// Source: https://docs.soliditylang.org/en/v0.8.9/contracts.html?highlight=fallback#fallback-function\r\n    fallback() external {\r\n        revert(\"EthPriceMintModule: non-existent function\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collective\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPrice_\",\"type\":\"uint256\"}],\"name\":\"EthPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collective\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRecoveredERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenRecoveredERC721\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collective\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"recoverERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collective\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice_\",\"type\":\"uint256\"}],\"name\":\"updateEthPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EthPriceMintModule", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000040db79f7f18c468c6552538b488c58b5e72bf4d9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4f86c23938074cc8814908fdb39f05e56a224232a8feb69a12a52b2166347c0b"}]}