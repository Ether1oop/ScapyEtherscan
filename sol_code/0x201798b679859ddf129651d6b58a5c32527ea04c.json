{"status": "1", "message": "OK", "result": [{"SourceCode": "# @version 0.3.3\r\n\"\"\"\r\n@notice Gauge Manager Proxy\r\n@author CurveFi\r\n\"\"\"\r\n\r\n\r\ninterface Factory:\r\n    def admin() -> address: view\r\n    def deploy_gauge(_pool: address) -> address: nonpayable\r\n\r\ninterface OwnerProxy:\r\n    def add_reward(_gauge: address, _reward_token: address, _distributor: address): nonpayable\r\n    def ownership_admin() -> address: view\r\n    def set_reward_distributor(_gauge: address, _reward_token: address, _distributor: address): nonpayable\r\n\r\n\r\nevent SetManager:\r\n    _manager: indexed(address)\r\n\r\nevent SetGaugeManager:\r\n    _gauge: indexed(address)\r\n    _gauge_manager: indexed(address)\r\n\r\n\r\nFACTORY: immutable(address)\r\nOWNER_PROXY: immutable(address)\r\n\r\n\r\ngauge_manager: public(HashMap[address, address])\r\nmanager: public(address)\r\n\r\n\r\n@external\r\ndef __init__(_factory: address, _manager: address):\r\n    FACTORY = _factory\r\n    OWNER_PROXY = Factory(_factory).admin()\r\n\r\n    self.manager = _manager\r\n    log SetManager(_manager)\r\n\r\n\r\n@external\r\ndef add_reward(_gauge: address, _reward_token: address, _distributor: address):\r\n    \"\"\"\r\n    @notice Add a reward to a gauge\r\n    @param _gauge The gauge the reward will be added to\r\n    @param _reward_token The token to be added as a reward (should be ERC20-compliant)\r\n    @param _distributor The account which will top-up, and distribute the rewards.\r\n    \"\"\"\r\n    assert msg.sender in [self.gauge_manager[_gauge], self.manager]\r\n\r\n    OwnerProxy(OWNER_PROXY).add_reward(_gauge, _reward_token, _distributor)\r\n\r\n\r\n@external\r\ndef set_reward_distributor(_gauge: address, _reward_token: address, _distributor: address):\r\n    \"\"\"\r\n    @notice Set the reward distributor for a gauge\r\n    @param _gauge The gauge to update\r\n    @param _reward_token The reward token for which the distributor will be changed\r\n    @param _distributor The new distributor for the reward token.\r\n    \"\"\"\r\n    assert msg.sender in [self.gauge_manager[_gauge], self.manager]\r\n\r\n    OwnerProxy(OWNER_PROXY).set_reward_distributor(_gauge, _reward_token, _distributor)\r\n\r\n\r\n@external\r\ndef deploy_gauge(_pool: address, _gauge_manager: address = msg.sender) -> address:\r\n    \"\"\"\r\n    @notice Deploy a gauge, and set _gauge_manager as the manager\r\n    @param _pool The pool to deploy a gauge for\r\n    @param _gauge_manager The account to which will manage rewards for the gauge\r\n    \"\"\"\r\n    gauge: address = Factory(FACTORY).deploy_gauge(_pool)\r\n\r\n    self.gauge_manager[gauge] = _gauge_manager\r\n    log SetGaugeManager(gauge, _gauge_manager)\r\n    return gauge\r\n\r\n\r\n@external\r\ndef set_gauge_manager(_gauge: address, _gauge_manager: address):\r\n    \"\"\"\r\n    @notice Change the gauge manager for a gauge\r\n    @dev The manager of this contract, or the ownership admin can outright modify gauge\r\n        managership. A gauge manager can also transfer managership to a new manager via this\r\n        method, but only for the gauge which they are the manager of.\r\n    @param _gauge The gauge to change the managership of\r\n    @param _gauge_manager The account to set as the new manager of the gauge.\r\n    \"\"\"\r\n    if msg.sender not in [self.manager, OwnerProxy(OWNER_PROXY).ownership_admin()]:\r\n        assert msg.sender == self.gauge_manager[_gauge]\r\n\r\n    self.gauge_manager[_gauge] = _gauge_manager\r\n    log SetGaugeManager(_gauge, _gauge_manager)\r\n\r\n\r\n@external\r\ndef set_manager(_manager: address):\r\n    \"\"\"\r\n    @notice Set the manager of this contract\r\n    @param _manager The account to set as the manager\r\n    \"\"\"\r\n    assert msg.sender in [self.manager, OwnerProxy(OWNER_PROXY).ownership_admin()]\r\n\r\n    self.manager = _manager\r\n    log SetManager(_manager)\r\n\r\n\r\n@pure\r\n@external\r\ndef factory() -> address:\r\n    return FACTORY\r\n\r\n\r\n@pure\r\n@external\r\ndef owner_proxy() -> address:\r\n    return OWNER_PROXY", "ABI": "[{\"name\":\"SetManager\",\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetGaugeManager\",\"inputs\":[{\"name\":\"_gauge\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_gauge_manager\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"},{\"name\":\"_manager\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_reward\",\"inputs\":[{\"name\":\"_gauge\",\"type\":\"address\"},{\"name\":\"_reward_token\",\"type\":\"address\"},{\"name\":\"_distributor\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_reward_distributor\",\"inputs\":[{\"name\":\"_gauge\",\"type\":\"address\"},{\"name\":\"_reward_token\",\"type\":\"address\"},{\"name\":\"_distributor\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deploy_gauge\",\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deploy_gauge\",\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_gauge_manager\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_gauge_manager\",\"inputs\":[{\"name\":\"_gauge\",\"type\":\"address\"},{\"name\":\"_gauge_manager\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_manager\",\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"factory\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"owner_proxy\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"gauge_manager\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"manager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.3.3", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "000000000000000000000000b9fc157394af804a3578134a6585c0dc9cc990d4000000000000000000000000edf2c58e16cc606da1977e79e1e69e79c54fe242", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}