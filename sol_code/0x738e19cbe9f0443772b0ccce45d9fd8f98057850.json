{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC721\\IERC721.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\math\\SafeMath.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\lib\\IMintableERC20.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IMintableERC20 {\r\n    function mint(address to, uint256 amount) external;\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\consoleStake.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ConsoleStake is IERC721Receiver, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 constant SECINDAY = 86400;\r\n  \r\n  IMintableERC20 public gameToken;\r\n  IERC721 public consoleToken;\r\n\r\n  // struct to store a stake's token, owner, and earning values\r\n  struct Stake {\r\n    uint256 lastClaim;\r\n    address owner;\r\n  }\r\n\r\n  // maps tokenId to stake\r\n  mapping(uint256 => Stake) public stakes; \r\n\r\n  event TokenStaked(address owner, uint256 tokenId);\r\n  event TokenUnStaked(address owner, uint256 tokenId);\r\n  event GameClaimed(uint256 tokenId, uint256 earned);\r\n  \r\n  constructor(IMintableERC20 _gameToken, IERC721 _consoleToken) { \r\n    gameToken = _gameToken;\r\n    consoleToken = _consoleToken;\r\n  }\r\n\r\n  function stakeConsoles(uint16[] calldata tokenIds) external {\r\n    for (uint i = 0; i < tokenIds.length; i++) {\r\n      require(consoleToken.ownerOf(tokenIds[i]) == _msgSender(), \"not_token_owner\");\r\n      consoleToken.transferFrom(_msgSender(), address(this), tokenIds[i]);\r\n      _stakeConsole(_msgSender(), tokenIds[i]);\r\n    }\r\n  }\r\n\r\n  function unstakeConsoles(uint16[] calldata tokenIds) external {\r\n    for (uint i = 0; i < tokenIds.length; i++) { \r\n      require(stakes[tokenIds[i]].owner == _msgSender(), \"not_token_owner\");\r\n      consoleToken.transferFrom(address(this), _msgSender(), tokenIds[i]);\r\n      _unstakeConsole(_msgSender(), tokenIds[i]);\r\n    }\r\n  }\r\n\r\n  function claim(uint16[] calldata tokenIds) external {\r\n    uint256 amount = 0;\r\n    for (uint i = 0; i < tokenIds.length; i++) {\r\n      require(stakes[tokenIds[i]].owner == _msgSender(), \"not_token_owner\");\r\n      amount = amount.add(_claim(tokenIds[i]));\r\n    }\r\n\r\n    // transfer Game token reward\r\n    if (amount > 0) {\r\n      gameToken.mint(msg.sender, amount * 10 ** 18);\r\n    }\r\n  }\r\n\r\n  function onERC721Received(\r\n    address,\r\n    address from,\r\n    uint256,\r\n    bytes calldata\r\n  ) external pure override returns (bytes4) {\r\n    require(from == address(0x0), \"Cannot send tokens to Barn directly\");\r\n    return IERC721Receiver.onERC721Received.selector;\r\n  }\r\n\r\n  function _stakeConsole(address account, uint256 tokenId) internal {\r\n    stakes[tokenId] = Stake({\r\n      lastClaim: block.timestamp,\r\n      owner: account\r\n    });\r\n    emit TokenStaked(account, tokenId);\r\n  }\r\n\r\n  function _unstakeConsole(address account, uint256 tokenId) internal {\r\n    delete stakes[tokenId];\r\n    emit TokenUnStaked(account, tokenId);\r\n  }\r\n\r\n  /**\r\n    update last claim time for stake, returns amount of Game token be rewarded\r\n   */\r\n  function _claim(uint16 tokenId) internal returns (uint256){\r\n    Stake storage stake = stakes[tokenId];\r\n    uint256 amount = block.timestamp.sub(stake.lastClaim).div(SECINDAY);\r\n    if (amount > 0) {\r\n      stake.lastClaim = stake.lastClaim.add(amount.mul(SECINDAY));\r\n      emit GameClaimed(tokenId, amount);\r\n    }\r\n    return amount;\r\n  }\r\n}\r\n\r\n// File: contracts\\ConsoleStakeV2.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ConsoleStakeV2 is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 constant SECINDAY = 86400;\r\n  uint256 constant DECADE_PERIOD = 50; // IN DAYS\r\n  uint256 constant INIT_TIME = 1639584000; // GAME TOKEN DEPLOYMENT TIMESTAMP Wed Dec 15 2021 16:00:00 GMT+0000\r\n  uint256 constant LPREWARD_SEC = 0.003472 ether; // GAME EMISSION RATE FOR LP STAKING IN A SEC => 300 GAME PER DAY\r\n\r\n  IMintableERC20 public gameToken;\r\n  ConsoleStake public oldStake;\r\n\r\n  IMintableERC20 public LPToken; // game-eth or game-frax\r\n  uint256 public lastLPRewardTime;  // Last block timestamp that Games distribution occurs.\r\n  uint256 public accGAMEPerShare;   // Accumulated Games per share, times 1e12. See below.\r\n\r\n  // struct to store a stake's token, owner, and earning values\r\n  struct Stake {\r\n    uint256 lastClaim;\r\n    address owner;\r\n  }\r\n\r\n  struct UserInfo {\r\n    uint256 amount;         // How many LP tokens the user has provided.\r\n    uint256 rewardDebt;     // Reward debt.\r\n  }\r\n\r\n  event DepositLP(address indexed user, uint256 amount);\r\n  event WithdrawLP(address indexed user, uint256 amount);\r\n  event EmergencyWithdrawLP(address indexed user, uint256 amount);\r\n\r\n  // maps tokenId to stake\r\n  mapping(uint256 => Stake) public stakes; \r\n  mapping(address => UserInfo) public userInfo;\r\n\r\n  constructor(IMintableERC20 _gameToken, IMintableERC20 _lpToken, ConsoleStake _oldStake) { \r\n    gameToken = _gameToken;\r\n    LPToken = _lpToken;\r\n    oldStake = _oldStake;\r\n  }\r\n\r\n  // Return reward multiplier over the given _from to _to block.\r\n  function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\r\n    return _to.sub(_from);\r\n  }\r\n\r\n  // View function to see pending AMCs on frontend.\r\n  function pendingGAME(address _user) external view returns (uint256) {\r\n    UserInfo storage user = userInfo[_user];\r\n    uint256 lpSupply = LPToken.balanceOf(address(this));\r\n    uint256 _accGAMEPerShare = accGAMEPerShare;\r\n    if (block.timestamp > lastLPRewardTime && lpSupply != 0) {\r\n        uint256 multiplier = getMultiplier(lastLPRewardTime, block.timestamp);\r\n        uint256 gameReward = multiplier.mul(emissionRateLPReward());\r\n        _accGAMEPerShare = _accGAMEPerShare.add(gameReward.mul(1e12).div(lpSupply));\r\n    }\r\n    return user.amount.mul(_accGAMEPerShare).div(1e12).sub(user.rewardDebt);\r\n  }\r\n\r\n  // Update reward variables of the given pool to be up-to-date.\r\n  function updatePool() public {\r\n    if (block.timestamp <= lastLPRewardTime) {\r\n        return;\r\n    }\r\n    uint256 lpSupply = LPToken.balanceOf(address(this));\r\n    if (lpSupply == 0) {\r\n        lastLPRewardTime = block.timestamp;\r\n        return;\r\n    }\r\n    uint256 multiplier = getMultiplier(lastLPRewardTime, block.timestamp);\r\n    uint256 gameReward = multiplier.mul(emissionRateLPReward());\r\n    gameToken.mint(address(this), gameReward);\r\n    accGAMEPerShare = accGAMEPerShare.add(gameReward.mul(1e12).div(lpSupply));\r\n    lastLPRewardTime = block.timestamp;\r\n  }\r\n\r\n  // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n  function emergencyWithdraw() public  {\r\n    UserInfo storage user = userInfo[msg.sender];\r\n    uint256 amount = user.amount;\r\n    user.amount = 0;\r\n    user.rewardDebt = 0;\r\n    LPToken.transfer(address(msg.sender), amount);\r\n    emit EmergencyWithdrawLP(msg.sender, amount);\r\n  }\r\n\r\n  function enterStaking(uint256 _amount) public {\r\n    UserInfo storage user = userInfo[msg.sender];\r\n    updatePool();\r\n    if (user.amount > 0) {\r\n        uint256 pending = user.amount.mul(accGAMEPerShare).div(1e12).sub(user.rewardDebt);\r\n        if(pending > 0) {\r\n            gameToken.transfer(msg.sender, pending);\r\n        }\r\n    }\r\n    if(_amount > 0) {\r\n        require(LPToken.transferFrom(address(msg.sender), address(this), _amount));\r\n        user.amount = user.amount.add(_amount);\r\n    }\r\n    user.rewardDebt = user.amount.mul(accGAMEPerShare).div(1e12);\r\n    emit DepositLP(msg.sender, _amount);\r\n  }\r\n\r\n  function leaveStaking(uint256 _amount) public {\r\n    UserInfo storage user = userInfo[msg.sender];\r\n    require(user.amount >= _amount, \"withdraw: not good\");\r\n    updatePool();\r\n    uint256 pending = user.amount.mul(accGAMEPerShare).div(1e12).sub(user.rewardDebt);\r\n    if(pending > 0) {\r\n        gameToken.transfer(msg.sender, pending);\r\n    }\r\n    if(_amount > 0) {\r\n        user.amount = user.amount.sub(_amount);\r\n        LPToken.transfer(address(msg.sender), _amount);\r\n    }\r\n    user.rewardDebt = user.amount.mul(accGAMEPerShare).div(1e12);\r\n    emit WithdrawLP(msg.sender, _amount);\r\n  }\r\n\r\n  function emissionRate() public view returns (uint256) {\r\n    uint256 periods = block.timestamp.sub(INIT_TIME).div(SECINDAY * DECADE_PERIOD);\r\n\r\n    return (10 ** 18) / (2 ** periods) ;\r\n  }\r\n\r\n  function emissionRateLPReward() public view returns (uint256) {\r\n    uint256 periods = block.timestamp.sub(INIT_TIME).div(SECINDAY * DECADE_PERIOD);\r\n\r\n    return LPREWARD_SEC / (2 ** periods) ;\r\n  }\r\n\r\n  function calcReward(uint256 _tokenId) public view returns (uint256, uint256) {\r\n    uint256 rate = emissionRate();\r\n    uint256 lastClaim;\r\n    address creator;\r\n    \r\n    (lastClaim, creator) = oldStake.stakes(_tokenId);\r\n    if (creator == address(0)) return (0, 0);\r\n    Stake storage stake = stakes[_tokenId];\r\n    if (stake.lastClaim > lastClaim) {\r\n      lastClaim = stake.lastClaim;\r\n    }\r\n\r\n    uint256 slots = block.timestamp.sub(lastClaim).div(SECINDAY);\r\n    uint256 amount = slots.mul(rate);\r\n    return (amount, slots);\r\n  }\r\n\r\n  function claim(uint16[] calldata tokenIds) external {\r\n    uint256 amount = 0;\r\n    for (uint i = 0; i < tokenIds.length; i++) {\r\n      amount = amount.add(_claim(tokenIds[i]));\r\n    }\r\n\r\n    // transfer Game token reward\r\n    if (amount > 0) {\r\n      gameToken.mint(msg.sender, amount);\r\n    }\r\n  }\r\n\r\n  /**\r\n    update last claim time for stake, returns amount of Game token be rewarded\r\n   */\r\n  function _claim(uint16 _tokenId) internal returns (uint256){\r\n    uint256 lastClaim;\r\n    address creator;\r\n    (lastClaim, creator) = oldStake.stakes(_tokenId);\r\n\r\n    require(creator ==  _msgSender(), \"not_stake_owner\");\r\n    uint256 amount;\r\n    uint256 slots;\r\n    (amount, slots) = calcReward(_tokenId);\r\n\r\n    // update stake stroage for next reward\r\n    Stake storage stake = stakes[_tokenId];\r\n    if (stake.lastClaim > lastClaim) {\r\n      stake.lastClaim = stake.lastClaim.add(slots.mul(SECINDAY));\r\n    } else  {\r\n      stake.lastClaim = lastClaim.add(slots.mul(SECINDAY));\r\n    }\r\n\r\n    return amount;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"_gameToken\",\"type\":\"address\"},{\"internalType\":\"contract IMintableERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract ConsoleStake\",\"name\":\"_oldStake\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawLP\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPToken\",\"outputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accGAMEPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"calcReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionRateLPReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameToken\",\"outputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLPRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldStake\",\"outputs\":[{\"internalType\":\"contract ConsoleStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingGAME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConsoleStakeV2", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000882e5b370d595e50c24b2a0e7a94e87cc32adda1000000000000000000000000d9a13cf1c0a61ffc2e82cbdc641f45f37c2b1c1c000000000000000000000000e7bd8a7c642e807b820c483f87b28f11a796fb37", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://af5d92842ff1892fd089acc43a51eefb53a187ed66ad197fb541bd35c9288369"}]}