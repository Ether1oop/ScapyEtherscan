{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.1;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n    external\r\n    view\r\n    returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract RegnumDao is Context, IERC20, IERC20Metadata, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping (address => bool) public _isExcludedFromFee;\r\n    mapping(address => bool) public _isBlacklisted;\r\n    mapping(address => bool) public _tradeAllowedList;\r\n\r\n    string private _name = \"RegnumDAO\";\r\n    string private _symbol = \"REX\";\r\n    uint8 private _decimals = 9;\r\n\r\n    uint256 private _initSupply = 100_000_000;\r\n    uint256 private _totalSupply = _initSupply * 10**_decimals;\r\n\r\n    address public _liqWallet;\r\n    address payable public _devMarketingWallet;\r\n\r\n    uint256 public _maxTxAmount;\r\n    uint256 public _maxWalletAmount;\r\n    uint256 private _amountToFlush;\r\n    uint256 public _lpExtraSum;\r\n    uint256 public _devMarketingSum;\r\n    bool private _inSwapAndLiquify;\r\n\r\n    IUniswapV2Router02 public immutable _uniswapV2Router;\r\n    address public immutable _uniswapV2Pair;\r\n\r\n    uint256 private _feeDenominator = 1000;\r\n\r\n    bool public _tradeEnabled;\r\n    bool public _tResolverEnabled;\r\n\r\n    event Boom();\r\n    event ThirdEyeResolver(address wallet);\r\n    event ToDevMarketing(uint256 balance0);\r\n    event ToLiquidity(uint256 balance0, uint256 balance1);\r\n\r\n    struct IThirdEye {\r\n        uint256 startedAt;\r\n        bool safu;\r\n        uint256 when;\r\n    }\r\n\r\n    IThirdEye public _thirdEye =\r\n    IThirdEye({\r\n    startedAt: 0,\r\n    safu: true,\r\n    when: 3\r\n    });\r\n\r\n    struct ITax {\r\n        uint256 lpFee;\r\n        uint256 devMarketingFee;\r\n        uint256 burnFee;\r\n    }\r\n\r\n    ITax public _buyTax =\r\n    ITax({\r\n    lpFee: 10,\r\n    devMarketingFee: 40,\r\n    burnFee: 0\r\n    });\r\n\r\n    ITax public _sellTax =\r\n    ITax({\r\n    lpFee: 10,\r\n    devMarketingFee: 40,\r\n    burnFee: 0\r\n    });\r\n\r\n    ITax public _transferTax =\r\n    ITax({\r\n    lpFee: 10,\r\n    devMarketingFee: 40,\r\n    burnFee: 0\r\n    });\r\n\r\n    modifier busySwap() {\r\n        _inSwapAndLiquify = true;\r\n        _;\r\n        _inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor(address mWallet_) {\r\n        _maxTxAmount = 1000000 * 10**_decimals; //1%\r\n        _maxWalletAmount = 2000000 * 10**_decimals; //2%\r\n        _amountToFlush = 100000 * 10**_decimals; //0.1%\r\n\r\n        _liqWallet = _msgSender();\r\n        _devMarketingWallet = payable(mWallet_);\r\n\r\n        _tradeEnabled = false;\r\n\r\n        _lpExtraSum = 0;\r\n        _devMarketingSum = 0;\r\n\r\n        _isExcludedFromFee[_msgSender()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_devMarketingWallet] = true;\r\n\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n\r\n        _balances[address(this)] = 0;\r\n        _balances[_devMarketingWallet] = 0;\r\n\r\n        _tradeAllowedList[_msgSender()] = true;\r\n        _tradeAllowedList[address(this)] = true;\r\n\r\n        //IUniswapV2Router02 uniswapV2Router_ = IUniswapV2Router02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); //bsc-tesnet\r\n        IUniswapV2Router02 uniswapV2Router_ = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //eth-uni\r\n\r\n        _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router_.factory()).createPair(address(this), uniswapV2Router_.WETH());\r\n        _uniswapV2Router = uniswapV2Router_;\r\n\r\n        _approve(_msgSender(), address(uniswapV2Router_), type(uint256).max);\r\n        _approve(address(this), address(uniswapV2Router_), type(uint256).max);\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender,address recipient,uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - (amount));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool){\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + (addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - (subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setDevMarketingWallet(address payable newAddress) external onlyOwner {\r\n        _devMarketingWallet = payable(newAddress);\r\n    }\r\n\r\n    function setLiqWallet(address newAddress) external onlyOwner {\r\n        _liqWallet = newAddress;\r\n    }\r\n\r\n    function flushReserveBalance() external onlyOwner {\r\n        uint256 amountETH = address(this).balance;\r\n        payable(_devMarketingWallet).transfer(amountETH);\r\n    }\r\n\r\n    function flushMarketingTax(uint256 tokenBalance) external onlyOwner {\r\n        shouldTakeDevMarketing(tokenBalance);\r\n    }\r\n\r\n    function setAccountFromFee(address account, bool flag) public onlyOwner {\r\n        _isExcludedFromFee[account] = flag;\r\n    }\r\n\r\n    function excludeFromBlacklist(address account) public onlyOwner {\r\n        _isBlacklisted[account] = false;\r\n    }\r\n\r\n    function setResolverStatus(bool flag) public onlyOwner {\r\n        _tResolverEnabled = flag;\r\n    }\r\n\r\n    function setSettings(uint256 maxWallet, uint256 maxTx, uint256 toFlush) public onlyOwner {\r\n        require(maxWallet * 10**_decimals > 1000000 * 10**_decimals, \"Max Wallet must be above 1% of total supply.\");\r\n        require(maxTx * 10**_decimals > 500000 * 10**_decimals, \"Max Transaction must be above 0.5% of total supply.\");\r\n\r\n        _maxWalletAmount = maxWallet * 10**_decimals;\r\n        _maxTxAmount = maxTx * 10**_decimals;\r\n        _amountToFlush = toFlush * 10**_decimals;\r\n    }\r\n\r\n    function setFee(uint8 feeType, uint256 liqFee, uint256 devMarketingFee, uint256 burnFee) public onlyOwner {\r\n        require(liqFee + devMarketingFee + burnFee <= 100);\r\n\r\n        if(feeType == 0) {\r\n            _buyTax = ITax({\r\n            lpFee: liqFee,\r\n            devMarketingFee: devMarketingFee,\r\n            burnFee: burnFee\r\n            });\r\n        }else if(feeType == 1){\r\n            _sellTax = ITax({\r\n            lpFee: liqFee,\r\n            devMarketingFee: devMarketingFee,\r\n            burnFee: burnFee\r\n            });\r\n        }else if(feeType == 2){\r\n            _transferTax = ITax({\r\n            lpFee: liqFee,\r\n            devMarketingFee: devMarketingFee,\r\n            burnFee: burnFee\r\n            });\r\n        }\r\n    }\r\n\r\n    function setupThirdEye() external onlyOwner {\r\n        if (_thirdEye.startedAt == 0) {\r\n            _thirdEye.startedAt = block.number;\r\n            _tResolverEnabled = true;\r\n\r\n            emit Boom();\r\n\r\n            _tradeEnabled = true;\r\n        }\r\n    }\r\n\r\n    function thirdEyeResolver(address account) private{\r\n        if(account == _uniswapV2Pair || account == address(this) || account == address(_uniswapV2Router)) {revert();}\r\n\r\n        _isBlacklisted[account] = true;\r\n        emit ThirdEyeResolver(account);\r\n    }\r\n\r\n    function shouldTakeLiq(uint256 tokenBalance) private busySwap {\r\n        if (tokenBalance > 0) {\r\n            uint256 splittedBalance = tokenBalance / 2;\r\n            uint256 initBalance = address(this).balance;\r\n            swapTokensForEth(splittedBalance);\r\n            uint256 currentBalance = address(this).balance;\r\n\r\n            uint256 ethBalance = uint256(currentBalance - initBalance);\r\n            if (ethBalance > 0) {\r\n                addLiquidity(splittedBalance, ethBalance);\r\n                emit ToLiquidity(splittedBalance, ethBalance);\r\n                _lpExtraSum -= tokenBalance;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        if(_allowances[address(this)][address(_uniswapV2Router)] < tokenAmount) {\r\n            _approve(address(this), address(_uniswapV2Router), type(uint256).max);\r\n        }\r\n\r\n        _uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            _liqWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function shouldTakeDevMarketing(uint256 tokenBalance) private busySwap {\r\n        if (tokenBalance > 0) {\r\n            uint256 initBalance = address(this).balance;\r\n            swapTokensForEth(tokenBalance);\r\n            uint256 currentBalance = address(this).balance;\r\n\r\n            uint256 ethBalance = uint256(currentBalance - initBalance);\r\n            if (ethBalance > 0) {\r\n                _devMarketingWallet.transfer(ethBalance);\r\n                emit ToDevMarketing(ethBalance);\r\n                _devMarketingSum -= tokenBalance;\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n\r\n        if(_allowances[address(this)][address(_uniswapV2Router)] < tokenAmount) {\r\n            _approve(address(this), address(_uniswapV2Router), type(uint256).max);\r\n        }\r\n\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(_isBlacklisted[from] == false, \"Third-eye is watching you\");\r\n        require(_isBlacklisted[to] == false, \"Third-eye is watching you\");\r\n\r\n        if (!_tradeEnabled) {\r\n            require(_tradeAllowedList[from] || _tradeAllowedList[to], \"Transfer: not allowed\");\r\n            require(balanceOf(_uniswapV2Pair) == 0 || to != _uniswapV2Pair, \"Transfer: not allowed\");\r\n        }\r\n\r\n        if(from != owner() && to != owner() || to != address(0xdead) && to != address(0))\r\n        {\r\n            if (from == _uniswapV2Pair || to == _uniswapV2Pair && (!_isExcludedFromFee[to] && !_isExcludedFromFee[from])) {\r\n                require(amount <= _maxTxAmount);\r\n            }\r\n            if(to != address(_uniswapV2Router) && to != _uniswapV2Pair && !_isExcludedFromFee[to]) {\r\n                require(balanceOf(to) + amount <= _maxWalletAmount);\r\n            }\r\n        }\r\n\r\n        if(!_inSwapAndLiquify && from != _uniswapV2Pair && _tResolverEnabled) {\r\n            if (_lpExtraSum > _amountToFlush) {\r\n                shouldTakeLiq(_amountToFlush);\r\n            }else{\r\n                if (_devMarketingSum > _amountToFlush) {\r\n                    shouldTakeDevMarketing(_amountToFlush);\r\n                }\r\n            }\r\n        }\r\n\r\n        bool shouldTakeFee = true;\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            shouldTakeFee = false;\r\n        }\r\n\r\n        if(!_tResolverEnabled) {\r\n            shouldTakeFee = false;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, shouldTakeFee);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool shouldTakeFee) private {\r\n        uint256 liqFee = 0;\r\n        uint256 devMarketingFee = 0;\r\n        uint256 burnFee = 0;\r\n\r\n        uint256 liqFeeAmount = 0;\r\n        uint256 devMarketingFeeAmount = 0;\r\n        uint256 burnFeeAmount = 0;\r\n\r\n        uint256 feeAmount = 0;\r\n\r\n        bool thirdEyeFee = false;\r\n\r\n        if (_thirdEye.safu) {\r\n            uint256 thirdEyeResolveNumber = (_thirdEye.startedAt + _thirdEye.when);\r\n            if (_thirdEye.startedAt > 0 && block.number > thirdEyeResolveNumber) {\r\n                _thirdEye.safu = false;\r\n            } else {\r\n                if (sender == _uniswapV2Pair && recipient != address(_uniswapV2Router) && !_isExcludedFromFee[recipient]) {\r\n                    thirdEyeResolver(recipient);\r\n                    thirdEyeFee = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (shouldTakeFee) {\r\n            if (thirdEyeFee) {\r\n                liqFee = 800;\r\n                devMarketingFee = 0;\r\n                burnFee = 0;\r\n            }else{\r\n                if (sender == _uniswapV2Pair) {\r\n                    liqFee = _buyTax.lpFee;\r\n                    devMarketingFee = _buyTax.devMarketingFee;\r\n                    burnFee = _buyTax.burnFee;\r\n                } else if (recipient == _uniswapV2Pair) {\r\n                    liqFee = _sellTax.lpFee;\r\n                    devMarketingFee = _sellTax.devMarketingFee;\r\n                    burnFee = _sellTax.burnFee;\r\n                } else {\r\n                    liqFee = _transferTax.lpFee;\r\n                    devMarketingFee = _transferTax.devMarketingFee;\r\n                    burnFee = _transferTax.burnFee;\r\n                }\r\n            }\r\n\r\n            feeAmount = (amount * (liqFee + devMarketingFee + burnFee)) / (1000);\r\n\r\n            if ((liqFee + devMarketingFee + burnFee) > 0) {\r\n                liqFeeAmount = feeAmount * liqFee / (liqFee + devMarketingFee + burnFee);\r\n                devMarketingFeeAmount = feeAmount * devMarketingFee / (liqFee + devMarketingFee + burnFee);\r\n                burnFeeAmount = feeAmount * burnFee / (liqFee + devMarketingFee + burnFee);\r\n            }\r\n\r\n            _lpExtraSum += liqFeeAmount;\r\n            _devMarketingSum += devMarketingFeeAmount;\r\n        }\r\n\r\n        _balances[sender] -= amount;\r\n        _balances[address(this)] += (liqFeeAmount + devMarketingFeeAmount);\r\n        emit Transfer(sender, address(this), (liqFeeAmount + devMarketingFeeAmount));\r\n\r\n        uint256 finalAmount = amount - (liqFeeAmount + devMarketingFeeAmount + burnFeeAmount);\r\n        _balances[recipient] += finalAmount;\r\n        emit Transfer(sender, recipient, finalAmount);\r\n\r\n        if (burnFeeAmount > 0) {\r\n            _balances[address(0xdead)] += burnFeeAmount;\r\n            emit Transfer(sender, address(0xdead), burnFeeAmount);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mWallet_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Boom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"ThirdEyeResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance0\",\"type\":\"uint256\"}],\"name\":\"ToDevMarketing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance1\",\"type\":\"uint256\"}],\"name\":\"ToLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devMarketingSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devMarketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liqWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpExtraSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tResolverEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_thirdEye\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"safu\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_tradeAllowedList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"name\":\"flushMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flushReserveBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setAccountFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setDevMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"liqFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setLiqWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setResolverStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toFlush\",\"type\":\"uint256\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupThirdEye\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RegnumDao", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000017b0508ae1d02d04f7536068075c44d366c66a6b", "EVMVersion": "byzantium", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4ac83f44cd76ebce137506009efd5671390ae8fcaf145c1f0f1e7d7d5d7de60e"}]}