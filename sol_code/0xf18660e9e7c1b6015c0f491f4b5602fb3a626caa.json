{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/erc721/ERC721Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../royaltyManager/interfaces/IRoyaltyManager.sol\\\";\\nimport \\\"../tokenManager/interfaces/ITokenManager.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"../utils/ERC2981/IERC2981Upgradeable.sol\\\";\\nimport \\\"../utils/ERC165/ERC165CheckerUpgradeable.sol\\\";\\nimport \\\"../metatx/ERC2771ContextUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\n/**\\n * @title Base ERC721\\n * @author ishan@highlight.xyz\\n * @dev Core piece of Highlight NFT contracts (v2)\\n */\\nabstract contract ERC721Base is\\n    OwnableUpgradeable,\\n    IERC2981Upgradeable,\\n    ERC2771ContextUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using ERC165CheckerUpgradeable for address;\\n\\n    /**\\n     * @dev Set of minters allowed to mint on contract\\n     */\\n    EnumerableSet.AddressSet internal _minters;\\n\\n    /**\\n     * @dev Global token/edition manager default\\n     */\\n    address public defaultManager;\\n\\n    /**\\n     * @dev Token/edition managers per token grouping.\\n     *      Edition ID if implemented by Editions contract, and token ID if implemented by General contract.\\n     */\\n    mapping(uint256 => address) internal _managers;\\n\\n    /**\\n     * @dev Default royalty for entire contract\\n     */\\n    IRoyaltyManager.Royalty internal _defaultRoyalty;\\n\\n    /**\\n     * @dev Royalty per token grouping.\\n     *      Edition ID if implemented by Editions contract, and token ID if implemented by General contract.\\n     */\\n    mapping(uint256 => IRoyaltyManager.Royalty) internal _royalties;\\n\\n    /**\\n     * @dev Royalty manager - optional contract that defines the conditions around setting royalties\\n     */\\n    address public royaltyManager;\\n\\n    /**\\n     * @dev Freezes minting on smart contract forever\\n     */\\n    uint8 internal _mintFrozen;\\n\\n    /**\\n     * @dev Emitted when minter is registered or unregistered\\n     * @param minter Minter that was changed\\n     * @param registered True if the minter was registered, false if unregistered\\n     */\\n    event MinterRegistrationChanged(address indexed minter, bool indexed registered);\\n\\n    /**\\n     * @dev Emitted when token managers are set for token/edition ids\\n     * @param _ids Edition / token ids\\n     * @param _tokenManagers Token managers to set for tokens / editions\\n     */\\n    event GranularTokenManagersSet(uint256[] _ids, address[] _tokenManagers);\\n\\n    /**\\n     * @dev Emitted when token managers are removed for token/edition ids\\n     * @param _ids Edition / token ids to remove token managers for\\n     */\\n    event GranularTokenManagersRemoved(uint256[] _ids);\\n\\n    /**\\n     * @dev Emitted when default token manager changed\\n     * @param newDefaultTokenManager New default token manager. Zero address if old one was removed\\n     */\\n    event DefaultTokenManagerChanged(address indexed newDefaultTokenManager);\\n\\n    /**\\n     * @dev Emitted when default royalty is set\\n     * @param recipientAddress Royalty recipient\\n     * @param royaltyPercentageBPS Percentage of sale (in basis points) owed to royalty recipient\\n     */\\n    event DefaultRoyaltySet(address indexed recipientAddress, uint16 indexed royaltyPercentageBPS);\\n\\n    /**\\n     * @dev Emitted when royalties are set for edition / token ids\\n     * @param ids Token / edition ids\\n     * @param _newRoyalties New royalties for each token / edition\\n     */\\n    event GranularRoyaltiesSet(uint256[] ids, IRoyaltyManager.Royalty[] _newRoyalties);\\n\\n    /**\\n     * @dev Emitted when royalty manager is updated\\n     * @param newRoyaltyManager New royalty manager. Zero address if old one was removed\\n     */\\n    event RoyaltyManagerChanged(address indexed newRoyaltyManager);\\n\\n    /**\\n     * @dev Emitted when mints are frozen permanently\\n     */\\n    event MintsFrozen();\\n\\n    /**\\n     * @dev Restricts calls to minters\\n     */\\n    modifier onlyMinter() {\\n        require(_minters.contains(_msgSender()), \\\"Not minter\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Restricts calls if input royalty bps is over 10000\\n     */\\n    modifier royaltyValid(uint16 _royaltyBPS) {\\n        require(_royaltyBPSValid(_royaltyBPS), \\\"Over BPS limit\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Registers a minter\\n     * @param minter New minter\\n     */\\n    function registerMinter(address minter) external onlyOwner nonReentrant {\\n        require(_minters.add(minter), \\\"Already a minter\\\");\\n\\n        emit MinterRegistrationChanged(minter, true);\\n    }\\n\\n    /**\\n     * @dev Unregisters a minter\\n     * @param minter Minter to unregister\\n     */\\n    function unregisterMinter(address minter) external onlyOwner nonReentrant {\\n        require(_minters.remove(minter), \\\"Not yet minter\\\");\\n\\n        emit MinterRegistrationChanged(minter, false);\\n    }\\n\\n    /**\\n     * @dev Sets granular token managers if current token manager(s) allow it\\n     * @param _ids Edition / token ids\\n     * @param _tokenManagers Token managers to set for tokens / editions\\n     */\\n    function setGranularTokenManagers(uint256[] calldata _ids, address[] calldata _tokenManagers)\\n        external\\n        nonReentrant\\n    {\\n        address msgSender = _msgSender();\\n        address tempOwner = owner();\\n\\n        uint256 idsLength = _ids.length;\\n        for (uint256 i = 0; i < idsLength; i++) {\\n            require(_isValidTokenManager(_tokenManagers[i]), \\\"Invalid TM\\\");\\n            address currentTokenManager = tokenManager(_ids[i]);\\n            if (currentTokenManager == address(0)) {\\n                require(msgSender == tempOwner, \\\"Not owner\\\");\\n            } else {\\n                require(ITokenManager(currentTokenManager).canSwap(msgSender, _ids[i], _managers[i]), \\\"Can't swap\\\");\\n            }\\n\\n            _managers[_ids[i]] = _tokenManagers[i];\\n        }\\n\\n        emit GranularTokenManagersSet(_ids, _tokenManagers);\\n    }\\n\\n    /**\\n     * @dev Remove granular token managers\\n     * @param _ids Edition / token ids to remove token managers for\\n     */\\n    function removeGranularTokenManagers(uint256[] calldata _ids) external nonReentrant {\\n        address msgSender = _msgSender();\\n\\n        uint256 idsLength = _ids.length;\\n        for (uint256 i = 0; i < idsLength; i++) {\\n            address currentTokenManager = _managers[_ids[i]];\\n            require(currentTokenManager != address(0), \\\"TM non-existent\\\");\\n            require(ITokenManager(currentTokenManager).canRemoveItself(msgSender, _ids[i]), \\\"Can't remove\\\");\\n\\n            _managers[_ids[i]] = address(0);\\n        }\\n\\n        emit GranularTokenManagersRemoved(_ids);\\n    }\\n\\n    /**\\n     * @dev Set default token manager if current token manager allows it\\n     * @param _defaultTokenManager New default token manager\\n     */\\n    function setDefaultTokenManager(address _defaultTokenManager) external nonReentrant {\\n        require(_isValidTokenManager(_defaultTokenManager), \\\"Invalid TM\\\");\\n        address msgSender = _msgSender();\\n\\n        address currentTokenManager = defaultManager;\\n        if (currentTokenManager == address(0)) {\\n            require(msgSender == owner(), \\\"Not owner\\\");\\n        } else {\\n            require(ITokenManager(currentTokenManager).canSwap(msgSender, 0, _defaultTokenManager), \\\"Can't swap\\\");\\n        }\\n\\n        defaultManager = _defaultTokenManager;\\n\\n        emit DefaultTokenManagerChanged(_defaultTokenManager);\\n    }\\n\\n    /**\\n     * @dev Removes default token manager if current token manager allows it\\n     */\\n    function removeDefaultTokenManager() external nonReentrant {\\n        address msgSender = _msgSender();\\n\\n        address currentTokenManager = defaultManager;\\n        require(currentTokenManager != address(0), \\\"Default TM not existent\\\");\\n        require(ITokenManager(currentTokenManager).canRemoveItself(msgSender, 0), \\\"Can't remove\\\");\\n\\n        defaultManager = address(0);\\n\\n        emit DefaultTokenManagerChanged(address(0));\\n    }\\n\\n    /**\\n     * @dev Sets default royalty if royalty manager allows it\\n     * @param _royalty New default royalty\\n     */\\n    function setDefaultRoyalty(IRoyaltyManager.Royalty calldata _royalty)\\n        external\\n        nonReentrant\\n        royaltyValid(_royalty.royaltyPercentageBPS)\\n    {\\n        address msgSender = _msgSender();\\n\\n        address _royaltyManager = royaltyManager;\\n        if (_royaltyManager == address(0)) {\\n            require(msgSender == owner(), \\\"Not owner\\\");\\n        } else {\\n            require(IRoyaltyManager(_royaltyManager).canSetDefaultRoyalty(_royalty, msgSender), \\\"Can't set\\\");\\n        }\\n\\n        _defaultRoyalty = _royalty;\\n\\n        emit DefaultRoyaltySet(_royalty.recipientAddress, _royalty.royaltyPercentageBPS);\\n    }\\n\\n    /**\\n     * @dev Sets granular royalties (per token-grouping) if royalty manager allows it\\n     * @param ids Token / edition ids\\n     * @param _newRoyalties New royalties for each token / edition\\n     */\\n    function setGranularRoyalties(uint256[] calldata ids, IRoyaltyManager.Royalty[] calldata _newRoyalties)\\n        external\\n        nonReentrant\\n    {\\n        address msgSender = _msgSender();\\n        address tempOwner = owner();\\n\\n        address _royaltyManager = royaltyManager;\\n        uint256 idsLength = ids.length;\\n        if (_royaltyManager == address(0)) {\\n            require(msgSender == tempOwner, \\\"Not owner\\\");\\n\\n            for (uint256 i = 0; i < idsLength; i++) {\\n                require(_royaltyBPSValid(_newRoyalties[i].royaltyPercentageBPS), \\\"BPS invalid\\\");\\n                _royalties[ids[i]] = _newRoyalties[i];\\n            }\\n        } else {\\n            for (uint256 i = 0; i < idsLength; i++) {\\n                require(_royaltyBPSValid(_newRoyalties[i].royaltyPercentageBPS), \\\"BPS invalid\\\");\\n                require(\\n                    IRoyaltyManager(_royaltyManager).canSetGranularRoyalty(ids[i], _newRoyalties[i], msgSender),\\n                    \\\"Can't set\\\"\\n                );\\n                _royalties[ids[i]] = _newRoyalties[i];\\n            }\\n        }\\n\\n        emit GranularRoyaltiesSet(ids, _newRoyalties);\\n    }\\n\\n    /**\\n     * @dev Sets royalty manager if current one allows it\\n     * @param _royaltyManager New royalty manager\\n     */\\n    function setRoyaltyManager(address _royaltyManager) external nonReentrant {\\n        require(_isValidRoyaltyManager(_royaltyManager), \\\"Invalid RM\\\");\\n        address msgSender = _msgSender();\\n\\n        address currentRoyaltyManager = royaltyManager;\\n        if (currentRoyaltyManager == address(0)) {\\n            require(msgSender == owner(), \\\"Not owner\\\");\\n        } else {\\n            require(IRoyaltyManager(currentRoyaltyManager).canSwap(_royaltyManager, msgSender), \\\"Can't swap\\\");\\n        }\\n\\n        royaltyManager = _royaltyManager;\\n\\n        emit RoyaltyManagerChanged(_royaltyManager);\\n    }\\n\\n    /**\\n     * @dev Removes royalty manager if current one allows it\\n     */\\n    function removeRoyaltyManager() external nonReentrant {\\n        address msgSender = _msgSender();\\n\\n        address currentRoyaltyManager = royaltyManager;\\n        require(currentRoyaltyManager != address(0), \\\"RM non-existent\\\");\\n        require(IRoyaltyManager(currentRoyaltyManager).canRemoveItself(msgSender), \\\"Can't remove\\\");\\n\\n        royaltyManager = address(0);\\n\\n        emit RoyaltyManagerChanged(address(0));\\n    }\\n\\n    /**\\n     * @dev Freeze mints on contract forever\\n     */\\n    function freezeMints() external onlyOwner nonReentrant {\\n        _mintFrozen = 1;\\n\\n        emit MintsFrozen();\\n    }\\n\\n    /**\\n     * @dev Conforms to ERC-2981. Editions should overwrite to return royalty for entire edition\\n     * @param _tokenGroupingId Token id if on general, and edition id if on editions\\n     * @param _salePrice Sale price of token\\n     */\\n    function royaltyInfo(uint256 _tokenGroupingId, uint256 _salePrice)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        IRoyaltyManager.Royalty memory royalty = _royalties[_tokenGroupingId];\\n        if (royalty.recipientAddress == address(0)) {\\n            royalty = _defaultRoyalty;\\n        }\\n\\n        receiver = royalty.recipientAddress;\\n        royaltyAmount = (_salePrice * uint256(royalty.royaltyPercentageBPS)) / 10000;\\n    }\\n\\n    /**\\n     * @dev Returns the token manager for the id passed in.\\n     * @param id Token ID or Edition ID for Editions implementing contracts\\n     */\\n    function tokenManager(uint256 id) public view returns (address manager) {\\n        manager = defaultManager;\\n        address granularManager = _managers[id];\\n\\n        if (granularManager != address(0)) {\\n            manager = granularManager;\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the contract, setting the creator as the initial owner.\\n     * @param _creator Contract creator\\n     * @param defaultRoyalty Default royalty for the contract\\n     * @param _defaultTokenManager Default token manager for the contract\\n     */\\n    function __ERC721Base_initialize(\\n        address _creator,\\n        IRoyaltyManager.Royalty memory defaultRoyalty,\\n        address _defaultTokenManager\\n    ) internal onlyInitializing royaltyValid(defaultRoyalty.royaltyPercentageBPS) {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _transferOwnership(_creator);\\n\\n        _defaultRoyalty = defaultRoyalty;\\n\\n        if (_defaultTokenManager != address(0)) {\\n            defaultManager = _defaultTokenManager;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if address is a valid tokenManager\\n     * @param _tokenManager Token manager being checked\\n     */\\n    function _isValidTokenManager(address _tokenManager) internal view returns (bool) {\\n        return _tokenManager.supportsInterface(type(ITokenManager).interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns true if address is a valid royaltyManager\\n     * @param _royaltyManager Royalty manager being checked\\n     */\\n    function _isValidRoyaltyManager(address _royaltyManager) internal view returns (bool) {\\n        return _royaltyManager.supportsInterface(type(IRoyaltyManager).interfaceId);\\n    }\\n\\n    /**\\n     * @dev Used for meta-transactions\\n     */\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    /**\\n     * @dev Used for meta-transactions\\n     */\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n\\n    /**\\n     * @dev Returns true if royalty bps passed in is valid (<= 10000)\\n     * @param _royaltyBPS Royalty basis points\\n     */\\n    function _royaltyBPSValid(uint16 _royaltyBPS) private pure returns (bool) {\\n        return _royaltyBPS <= 10000;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/royaltyManager/interfaces/IRoyaltyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IRoyaltyManager\\n * @author ishan@highlight.xyz\\n * @dev Enables interfacing with custom royalty managers that define conditions on setting royalties for NFT contracts\\n */\\ninterface IRoyaltyManager {\\n    /**\\n     * @dev Struct containing values required to adhere to ERC-2981\\n     * @param recipientAddress Royalty recipient - can be EOA, royalty splitter contract, etc.\\n     * @param royaltyPercentageBPS Royalty cut, in basis points\\n     */\\n    struct Royalty {\\n        address recipientAddress;\\n        uint16 royaltyPercentageBPS;\\n    }\\n\\n    /**\\n     * @dev Defines conditions around being able to swap royalty manager for another one\\n     * @param newRoyaltyManager New royalty manager being swapped in\\n     * @param sender msg sender\\n     */\\n    function canSwap(address newRoyaltyManager, address sender) external view returns (bool);\\n\\n    /**\\n     * @dev Defines conditions around being able to remove current royalty manager\\n     * @param sender msg sender\\n     */\\n    function canRemoveItself(address sender) external view returns (bool);\\n\\n    /**\\n     * @dev Defines conditions around being able to set granular royalty (per token or per edition)\\n     * @param id Edition / token ID whose royalty is being set\\n     * @param royalty Royalty being set\\n     * @param sender msg sender\\n     */\\n    function canSetGranularRoyalty(\\n        uint256 id,\\n        Royalty calldata royalty,\\n        address sender\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Defines conditions around being able to set default royalty\\n     * @param royalty Royalty being set\\n     * @param sender msg sender\\n     */\\n    function canSetDefaultRoyalty(Royalty calldata royalty, address sender) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/tokenManager/interfaces/ITokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ITokenManager\\n * @author ishan@highlight.xyz\\n * @dev Enables interfacing with custom token managers\\n */\\ninterface ITokenManager {\\n    /**\\n     * @dev Returns whether metadata updater is allowed to update\\n     * @param sender Updater\\n     * @param id Token/edition who's uri is being updated\\n     *           If id is 0, implementation should decide behaviour for base uri update\\n     * @param newData Token's new uri if called by general contract, and any metadata field if called by editions\\n     * @return If invocation can update metadata\\n     */\\n    function canUpdateMetadata(\\n        address sender,\\n        uint256 id,\\n        bytes calldata newData\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns whether token manager can be swapped for another one by invocator\\n     * @dev Default token manager implementations should ignore id\\n     * @param sender Swapper\\n     * @param id Token grouping id (token id or edition id)\\n     * @param newTokenManager New token manager being swapped to\\n     * @return If invocation can swap token managers\\n     */\\n    function canSwap(\\n        address sender,\\n        uint256 id,\\n        address newTokenManager\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns whether token manager can be removed\\n     * @dev Default token manager implementations should ignore id\\n     * @param sender Swapper\\n     * @param id Token grouping id (token id or edition id)\\n     * @return If invocation can remove token manager\\n     */\\n    function canRemoveItself(address sender, uint256 id) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\n/* solhint-disable */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC2981/IERC2981Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981Upgradeable.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../ERC165/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC165/ERC165CheckerUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\n/* solhint-disable */\\nlibrary ERC165CheckerUpgradeable {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165Upgradeable).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/metatx/ERC2771ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n *      Openzeppelin contract slightly modified by ishan@ highlight.xyz to be upgradeable.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable {\\n    address private _trustedForwarder;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function __ERC2771ContextUpgradeable__init__(address trustedForwarder) internal onlyInitializing {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /* solhint-disable no-inline-assembly */\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC165/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\n/* solhint-disable */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/ERC721General.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC721Base.sol\\\";\\nimport \\\"../metadata/MetadataEncryption.sol\\\";\\nimport \\\"../tokenManager/interfaces/IPostTransfer.sol\\\";\\nimport \\\"../tokenManager/interfaces/IPostBurn.sol\\\";\\nimport \\\"./interfaces/IERC721GeneralMint.sol\\\";\\nimport \\\"../utils/ERC721/ERC721URIStorageUpgradeable.sol\\\";\\n\\n/**\\n * @title Generalized ERC721\\n * @author ishan@highlight.xyz\\n * @dev Generalized NFT smart contract\\n */\\ncontract ERC721General is ERC721Base, ERC721URIStorageUpgradeable, MetadataEncryption, IERC721GeneralMint {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @dev Total tokens minted\\n     */\\n    uint256 public supply;\\n\\n    /**\\n     * @dev Contract metadata\\n     */\\n    string public contractURI;\\n\\n    /**\\n     * @dev Limit the supply to take advantage of over-promising in summation with multiple mint vectors\\n     */\\n    uint256 public limitSupply;\\n\\n    /**\\n     * @dev Emitted when uris are set for tokens\\n     * @param ids IDs of tokens to set uris for\\n     * @param uris Uris to set on tokens\\n     */\\n    event TokenURIsSet(uint256[] ids, string[] uris);\\n\\n    /**\\n     * @dev Emitted when limit supply is set\\n     * @param newLimitSupply Limit supply to set\\n     */\\n    event LimitSupplySet(uint256 indexed newLimitSupply);\\n\\n    /**\\n     * @dev Emitted when hashed metadata config is set\\n     * @param hashedURIData Hashed uri data\\n     * @param hashedRotationData Hashed rotation key\\n     * @param _supply Supply of tokens to mint w/ reveal\\n     */\\n    event HashedMetadataConfigSet(bytes hashedURIData, bytes hashedRotationData, uint256 indexed _supply);\\n\\n    /**\\n     * @dev Emitted when metadata is revealed\\n     * @param key Key used to decode hashed data\\n     * @param newRotationKey Actual rotation key to be used\\n     */\\n    event Revealed(bytes key, uint256 newRotationKey);\\n\\n    /**\\n     * @param creator Creator/owner of contract\\n     * @param _contractURI Contract metadata\\n     * @param defaultRoyalty Default royalty object for contract (optional)\\n     * @param _defaultTokenManager Default token manager for contract (optional)\\n     * @param _name Name of token edition\\n     * @param _symbol Symbol of the token edition\\n     * @param trustedForwarder Trusted minimal forwarder\\n     * @param initialMinter Initial minter to register\\n     * @param newBaseURI Base URI for contract\\n     * @param _limitSupply Initial limit supply\\n     */\\n    function initialize(\\n        address creator,\\n        string memory _contractURI,\\n        IRoyaltyManager.Royalty memory defaultRoyalty,\\n        address _defaultTokenManager,\\n        string memory _name,\\n        string memory _symbol,\\n        address trustedForwarder,\\n        address initialMinter,\\n        string calldata newBaseURI,\\n        uint256 _limitSupply\\n    ) external initializer nonReentrant {\\n        __ERC721URIStorage_init();\\n        __ERC721Base_initialize(creator, defaultRoyalty, _defaultTokenManager);\\n        __ERC2771ContextUpgradeable__init__(trustedForwarder);\\n        __ERC721_init(_name, _symbol);\\n        _minters.add(initialMinter);\\n        contractURI = _contractURI;\\n\\n        if (bytes(newBaseURI).length > 0) {\\n            _setBaseURI(newBaseURI);\\n        }\\n\\n        if (_limitSupply > 0) {\\n            limitSupply = _limitSupply;\\n\\n            emit LimitSupplySet(_limitSupply);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721GeneralMint-mintOneToOneRecipient}\\n     */\\n    function mintOneToOneRecipient(address recipient) external onlyMinter nonReentrant {\\n        require(_mintFrozen == 0, \\\"Mint frozen\\\");\\n\\n        uint256 tempSupply = supply;\\n        tempSupply++;\\n        _requireLimitSupply(tempSupply);\\n\\n        _mint(recipient, tempSupply);\\n        supply = tempSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC721GeneralMint-mintAmountToOneRecipient}\\n     */\\n    function mintAmountToOneRecipient(address recipient, uint256 amount) external onlyMinter nonReentrant {\\n        require(_mintFrozen == 0, \\\"Mint frozen\\\");\\n        uint256 tempSupply = supply; // cache\\n\\n        for (uint256 i = 0; i < amount; i++) {\\n            tempSupply++;\\n            _mint(recipient, tempSupply);\\n        }\\n\\n        _requireLimitSupply(tempSupply);\\n        supply = tempSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC721GeneralMint-mintOneToMultipleRecipients}\\n     */\\n    function mintOneToMultipleRecipients(address[] calldata recipients) external onlyMinter nonReentrant {\\n        require(_mintFrozen == 0, \\\"Mint frozen\\\");\\n        uint256 recipientsLength = recipients.length;\\n        uint256 tempSupply = supply; // cache\\n\\n        for (uint256 i = 0; i < recipientsLength; i++) {\\n            tempSupply++;\\n            _mint(recipients[i], tempSupply);\\n        }\\n\\n        _requireLimitSupply(tempSupply);\\n        supply = tempSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC721GeneralMint-mintSameAmountToMultipleRecipients}\\n     */\\n    function mintSameAmountToMultipleRecipients(address[] calldata recipients, uint256 amount)\\n        external\\n        onlyMinter\\n        nonReentrant\\n    {\\n        require(_mintFrozen == 0, \\\"Mint frozen\\\");\\n        uint256 recipientsLength = recipients.length;\\n        uint256 tempSupply = supply; // cache\\n\\n        for (uint256 i = 0; i < recipientsLength; i++) {\\n            for (uint256 j = 0; j < amount; j++) {\\n                tempSupply++;\\n                _mint(recipients[i], tempSupply);\\n            }\\n        }\\n\\n        _requireLimitSupply(tempSupply);\\n        supply = tempSupply;\\n    }\\n\\n    /**\\n     * @dev Override base URI system for select tokens, with custom per-token metadata\\n     * @param ids IDs of tokens to override base uri system for with custom uris\\n     * @param uris Custom uris\\n     */\\n    function setTokenURIs(uint256[] calldata ids, string[] calldata uris) external nonReentrant {\\n        uint256 idsLength = ids.length;\\n        require(idsLength == uris.length, \\\"Mismatched array lengths\\\");\\n\\n        for (uint256 i = 0; i < idsLength; i++) {\\n            _setTokenURI(ids[i], uris[i]);\\n        }\\n\\n        emit TokenURIsSet(ids, uris);\\n    }\\n\\n    /**\\n     * @dev Set base uri\\n     * @param newBaseURI New base uri to set\\n     */\\n    function setBaseURI(string calldata newBaseURI) external nonReentrant {\\n        require(bytes(newBaseURI).length > 0, \\\"Empty string\\\");\\n\\n        address _manager = defaultManager;\\n\\n        if (_manager == address(0)) {\\n            require(_msgSender() == owner(), \\\"Not owner\\\");\\n        } else {\\n            require(\\n                ITokenManager(_manager).canUpdateMetadata(_msgSender(), 0, bytes(newBaseURI)),\\n                \\\"Can't update base uri\\\"\\n            );\\n        }\\n\\n        _setBaseURI(newBaseURI);\\n    }\\n\\n    /**\\n     * @dev Set limit supply\\n     * @param _limitSupply Limit supply to set\\n     */\\n    function setLimitSupply(uint256 _limitSupply) external onlyOwner nonReentrant {\\n        // allow it to be 0, for post-mint\\n        limitSupply = _limitSupply;\\n\\n        emit LimitSupplySet(_limitSupply);\\n    }\\n\\n    /**\\n     * @dev Configure a reveal mint metadata\\n     * @param hashedURIData Hashed uri data\\n     * @param hashedRotationData Hashed rotation key\\n     * @param _supply Supply of tokens to mint w/ reveal\\n     */\\n    function setHashedMetadataConfig(\\n        bytes calldata hashedURIData,\\n        bytes calldata hashedRotationData,\\n        uint256 _supply\\n    ) external onlyOwner nonReentrant {\\n        (bytes memory encryptedURI, bytes32 provenanceHashURI) = abi.decode(hashedURIData, (bytes, bytes32));\\n\\n        if (encryptedURI.length != 0 && provenanceHashURI != \\\"\\\") {\\n            _hashedBaseURIData = hashedURIData;\\n        }\\n\\n        (bytes memory encryptedRotationKey, bytes32 provenanceHashRotation) = abi.decode(\\n            hashedRotationData,\\n            (bytes, bytes32)\\n        );\\n\\n        if (encryptedRotationKey.length != 0 && provenanceHashRotation != \\\"\\\") {\\n            _hashedRotationKeyData = hashedRotationData;\\n        }\\n\\n        supply = _supply;\\n\\n        emit HashedMetadataConfigSet(hashedURIData, hashedRotationData, _supply);\\n    }\\n\\n    /**\\n     * @dev Reveal metadata by decrypting encrypted base uri, and encrypted rotation key, appending the two\\n     * @param _key Encoded metadata decoder\\n     */\\n    function reveal(bytes calldata _key) external onlyOwner nonReentrant {\\n        bytes memory uriData = _hashedBaseURIData;\\n        (bytes memory encryptedURI, bytes32 provenanceHashURI) = abi.decode(uriData, (bytes, bytes32));\\n\\n        require(encryptedURI.length != 0, \\\"nothing to reveal\\\");\\n\\n        string memory revealedURI = string(encryptDecrypt(encryptedURI, _key));\\n\\n        require(keccak256(abi.encodePacked(revealedURI, _key, block.chainid)) == provenanceHashURI, \\\"Incorrect key\\\");\\n\\n        baseURI = revealedURI;\\n        delete _hashedBaseURIData;\\n\\n        bytes memory rotationData = _hashedRotationKeyData;\\n        (bytes memory encryptedRotationKey, bytes32 provenanceHashRotation) = abi.decode(\\n            rotationData,\\n            (bytes, bytes32)\\n        );\\n\\n        require(encryptedRotationKey.length != 0, \\\"nothing to reveal\\\");\\n\\n        uint256 revealedRotation = _sliceUint(encryptDecrypt(encryptedRotationKey, _key), 0);\\n\\n        require(\\n            keccak256(abi.encodePacked(revealedRotation, _key, block.chainid)) == provenanceHashRotation,\\n            \\\"Incorrect key\\\"\\n        );\\n\\n        _rotationKey = revealedRotation;\\n        delete _hashedRotationKeyData;\\n\\n        emit Revealed(_key, revealedRotation);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}. Overrides default behaviour to check associated tokenManager.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override nonReentrant {\\n        ERC721Upgradeable.transferFrom(from, to, tokenId);\\n\\n        address _manager = tokenManager(tokenId);\\n        if (_manager != address(0) && IERC165Upgradeable(_manager).supportsInterface(type(IPostTransfer).interfaceId)) {\\n            IPostTransfer(_manager).postTransferFrom(_msgSender(), from, to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}. Overrides default behaviour to check associated tokenManager.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override nonReentrant {\\n        ERC721Upgradeable.safeTransferFrom(from, to, tokenId, data);\\n\\n        address _manager = tokenManager(tokenId);\\n        if (_manager != address(0) && IERC165Upgradeable(_manager).supportsInterface(type(IPostTransfer).interfaceId)) {\\n            IPostTransfer(_manager).postSafeTransferFrom(_msgSender(), from, to, tokenId, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-burn}. Overrides default behaviour to check associated tokenManager.\\n     */\\n    function burn(uint256 tokenId) public nonReentrant {\\n        address _manager = tokenManager(tokenId);\\n\\n        if (_manager != address(0) && IERC165Upgradeable(_manager).supportsInterface(type(IPostBurn).interfaceId)) {\\n            address owner = ownerOf(tokenId);\\n            IPostBurn(_manager).postBurn(_msgSender(), owner, tokenId);\\n        } else {\\n            // default to restricting burn to owner or operator if a valid TM isn't present\\n            require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not owner or operator\\\");\\n        }\\n\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev Overrides tokenURI to first rotate the token id\\n     * @param tokenId ID of token to get uri for\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n        uint256 rotatedTokenId = tokenId + _rotationKey;\\n        if (rotatedTokenId > supply) {\\n            rotatedTokenId = rotatedTokenId - supply;\\n        }\\n        return ERC721URIStorageUpgradeable.tokenURI(rotatedTokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165Upgradeable, ERC721Upgradeable)\\n        returns (bool)\\n    {\\n        return ERC721Upgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Override base URI system for select tokens, with custom per-token metadata\\n     * @param tokenId Token to set uri for\\n     * @param _uri Uri to set on token\\n     */\\n    function _setTokenURI(uint256 tokenId, string calldata _uri) internal {\\n        address _manager = tokenManager(tokenId);\\n        address msgSender = _msgSender();\\n\\n        address tempOwner = owner();\\n        if (_manager == address(0)) {\\n            require(msgSender == tempOwner, \\\"Not owner\\\");\\n        } else {\\n            require(ITokenManager(_manager).canUpdateMetadata(msgSender, tokenId, bytes(_uri)), \\\"Can't update\\\");\\n        }\\n\\n        _tokenURIs[tokenId] = _uri;\\n    }\\n\\n    /**\\n     * @dev Used for meta-transactions\\n     */\\n    function _msgSender() internal view override(ERC721Base, ContextUpgradeable) returns (address sender) {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    /**\\n     * @dev Used for meta-transactions\\n     */\\n    function _msgData() internal view override(ERC721Base, ContextUpgradeable) returns (bytes calldata) {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n\\n    /**\\n     * @dev Require the new supply of tokens after mint to be less than limit supply\\n     * @param newSupply New supply\\n     */\\n    function _requireLimitSupply(uint256 newSupply) internal view {\\n        uint256 _limitSupply = limitSupply;\\n        require(_limitSupply == 0 || newSupply <= _limitSupply, \\\"Over limit supply\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/metadata/MetadataEncryption.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Utilities for metadata encryption and decryption\\n * @author ishan@highlight.xyz\\n */\\nabstract contract MetadataEncryption {\\n    /// @dev See: https://ethereum.stackexchange.com/questions/69825/decrypt-message-on-chain\\n    function encryptDecrypt(bytes memory data, bytes calldata key) public pure returns (bytes memory result) {\\n        // Store data length on stack for later use\\n        uint256 length = data.length;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Set result to free memory pointer\\n            result := mload(0x40)\\n            // Increase free memory pointer by lenght + 32\\n            mstore(0x40, add(add(result, length), 32))\\n            // Set result length\\n            mstore(result, length)\\n        }\\n\\n        // Iterate over the data stepping by 32 bytes\\n        for (uint256 i = 0; i < length; i += 32) {\\n            // Generate hash of the key and offset\\n            bytes32 hash = keccak256(abi.encodePacked(key, i));\\n\\n            bytes32 chunk;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // Read 32-bytes data chunk\\n                chunk := mload(add(data, add(i, 32)))\\n            }\\n            // XOR the chunk with hash\\n            chunk ^= hash;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // Write 32-byte encrypted chunk\\n                mstore(add(result, add(i, 32)), chunk)\\n            }\\n        }\\n    }\\n\\n    function _sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n        require(bs.length >= start + 32, \\\"slicing out of range\\\");\\n        uint256 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return x;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenManager/interfaces/IPostTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @author ishan@highlight.xyz\\n * @dev If token managers implement this, transfer actions will call\\n *      postSafeTransferFrom or postTransferFrom on the token manager.\\n */\\ninterface IPostTransfer {\\n    /**\\n     * @dev Hook called by community after safe transfers, if token manager of transferred token implements this\\n     *      interface.\\n     * @param operator Operator transferring tokens\\n     * @param from Token(s) sender\\n     * @param to Token(s) recipient\\n     * @param id Transferred token's id\\n     * @param data Arbitrary data\\n     */\\n    function postSafeTransferFrom(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Hook called by community after transfers, if token manager of transferred token implements this interface.\\n     * @param operator Operator transferring tokens\\n     * @param from Token(s) sender\\n     * @param to Token(s) recipient\\n     * @param id Transferred token's id\\n     */\\n    function postTransferFrom(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tokenManager/interfaces/IPostBurn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @author ishan@highlight.xyz\\n * @dev If token managers implement this, transfer actions will call\\n *      postBurn on the token manager.\\n */\\ninterface IPostBurn {\\n    /**\\n     * @dev Hook called by contract after burn, if token manager of burned token implements this\\n     *      interface.\\n     * @param operator Operator burning tokens\\n     * @param sender Msg sender\\n     * @param id Burned token's id\\n     */\\n    function postBurn(\\n        address operator,\\n        address sender,\\n        uint256 id\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/interfaces/IERC721GeneralMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev General721 mint interface\\n * @author ishan@highlight.xyz\\n */\\ninterface IERC721GeneralMint {\\n    /**\\n     * @dev Mint one token to one recipient\\n     * @param recipient Recipient of minted NFT\\n     */\\n    function mintOneToOneRecipient(address recipient) external;\\n\\n    /**\\n     * @dev Mint an amount of tokens to one recipient\\n     * @param recipient Recipient of minted NFTs\\n     * @param amount Amount of NFTs minted\\n     */\\n    function mintAmountToOneRecipient(address recipient, uint256 amount) external;\\n\\n    /**\\n     * @dev Mint one token to multiple recipients. Useful for use-cases like airdrops\\n     * @param recipients Recipients of minted NFTs\\n     */\\n    function mintOneToMultipleRecipients(address[] calldata recipients) external;\\n\\n    /**\\n     * @dev Mint the same amount of tokens to multiple recipients\\n     * @param recipients Recipients of minted NFTs\\n     * @param amount Amount of NFTs minted to each recipient\\n     */\\n    function mintSameAmountToMultipleRecipients(address[] calldata recipients, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC721/ERC721URIStorageUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Appending URI storage utilities onto template ERC721 contract\\n * @author ishan@highlight.xyz and OpenZeppelin\\n * @dev ERC721 token with storage based token URI management. OpenZeppelin template edited by Highlight\\n */\\n/* solhint-disable */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {}\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {}\\n\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) internal _tokenURIs;\\n\\n    /**\\n     * @dev Hashed rotation key data\\n     */\\n    bytes internal _hashedRotationKeyData;\\n\\n    /**\\n     * @dev Hashed base uri data\\n     */\\n    bytes internal _hashedBaseURIData;\\n\\n    /**\\n     * @dev Rotation key\\n     */\\n    uint256 internal _rotationKey;\\n\\n    /**\\n     * @dev Contract baseURI\\n     */\\n    string public baseURI;\\n\\n    event BaseURISet(string oldBaseUri, string newBaseURI);\\n\\n    /**\\n     * @dev Set contract baseURI\\n     */\\n    function _setBaseURI(string calldata newBaseURI) internal {\\n        emit BaseURISet(baseURI, newBaseURI);\\n\\n        baseURI = newBaseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n\\n        // If there is no token URI, return the base URI.\\n        if (bytes(_tokenURI).length == 0) {\\n            return super.tokenURI(tokenId);\\n        }\\n\\n        return _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"../ERC165/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\n/* solhint-disable */\\ncontract ERC721Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    ERC165Upgradeable,\\n    IERC721Upgradeable,\\n    IERC721MetadataUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (\\n                bytes4 retval\\n            ) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../ERC165/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\n/* solhint-disable */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\n/* solhint-disable */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC721/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\n/* solhint-disable */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC165/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\n/* solhint-disable */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {}\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/factory/CollectionFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../erc721/ERC721Editions.sol\\\";\\nimport \\\"../erc721/ERC721SingleEdition.sol\\\";\\nimport \\\"../erc721/ERC721General.sol\\\";\\nimport \\\"../metadata/interfaces/IEditionsMetadataRenderer.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\n/**\\n * @title CollectionFactory\\n * @author sarib@highlight.xyz, ishan@highlight.xyz\\n * @dev Factory Contract to setup collections\\n */\\ncontract CollectionFactory {\\n    /**\\n     * @dev MintManager for controlling all mint functionality\\n     */\\n    address public immutable mintManagerAddress;\\n\\n    /**\\n     * @dev EditionsMetadataRenderer for handling Editions Metadata\\n     */\\n    address public immutable editionsMetadataRendererAddress;\\n\\n    /**\\n     * @dev ERC721Editions implementation\\n     */\\n    address public immutable erc721EditionsImplementation;\\n\\n    /**\\n     * @dev ERC721SingleEdition implementation\\n     */\\n    address public immutable erc721SingleEditionImplementation;\\n\\n    /**\\n     * @dev ERC721General implementation\\n     */\\n    address public immutable erc721GeneralImplementation;\\n\\n    /**\\n     * @dev Trusted forwarder of meta-transactions\\n     */\\n    address public immutable trustedForwarder;\\n\\n    /**\\n     * @dev Initialize factory\\n     * @param _trustedForwarder Trusted meta-tx executor for system\\n     * @param _mintManagerAddress MintManager for controlling all mint functionality\\n     * @param _editionsMetadataRendererAddress EditionsMetadataRenderer for handling Editions Metadata\\n     * @param _erc721EditionsImplementation ERC721Editions implementation\\n     * @param _erc721SingleEditionImplementation ERC721SingleEdition implementation\\n     * @param _erc721GeneralImplementation ERC721General implementation\\n     */\\n    constructor(\\n        address _trustedForwarder,\\n        address _mintManagerAddress,\\n        address _editionsMetadataRendererAddress,\\n        address _erc721EditionsImplementation,\\n        address _erc721SingleEditionImplementation,\\n        address _erc721GeneralImplementation\\n    ) {\\n        trustedForwarder = _trustedForwarder;\\n\\n        mintManagerAddress = _mintManagerAddress;\\n\\n        editionsMetadataRendererAddress = _editionsMetadataRendererAddress;\\n\\n        erc721EditionsImplementation = _erc721EditionsImplementation;\\n        erc721SingleEditionImplementation = _erc721SingleEditionImplementation;\\n        erc721GeneralImplementation = _erc721GeneralImplementation;\\n    }\\n\\n    /**\\n     * @dev Initialize ERC721Edition collection, deployed via Create2\\n     * @param _creator Creator/owner of contract\\n     * @param _defaultRoyalty Default royalty object for contract (optional)\\n     * @param _defaultTokenManager Default token manager for contract (optional)\\n     * @param _contractURI Contract metadata\\n     * @param _name Name of token edition\\n     * @param _symbol Symbol of the token edition\\n     * @param salt Salt used to uniquely deploy collection (via Create2)\\n     */\\n    function setupERC721EditionCollection(\\n        address _creator,\\n        IRoyaltyManager.Royalty memory _defaultRoyalty,\\n        address _defaultTokenManager,\\n        string memory _contractURI,\\n        string memory _name,\\n        string memory _symbol,\\n        bytes32 salt // generate off-chain\\n    ) external returns (address) {\\n        address clone = Clones.cloneDeterministic(erc721EditionsImplementation, salt);\\n        ERC721Editions(clone).initialize(\\n            _creator,\\n            _defaultRoyalty,\\n            _defaultTokenManager,\\n            _contractURI,\\n            _name,\\n            _symbol,\\n            editionsMetadataRendererAddress,\\n            trustedForwarder,\\n            mintManagerAddress\\n        );\\n        return clone;\\n    }\\n\\n    /**\\n     * @dev Initialize ERC721Edition collection, deployed via Create2 AND create first edition on it\\n     * @param _creator Creator/owner of contract\\n     * @param _defaultRoyalty Default royalty object for contract (optional)\\n     * @param _defaultTokenManager Default token manager for contract (optional)\\n     * @param _contractURI Contract metadata\\n     * @param _name Name of token edition\\n     * @param _symbol Symbol of the token edition\\n     * @param _editionInfo First edition's info\\n     * @param _size First edition's size\\n     * @param salt Salt used to uniquely deploy collection (via Create2)\\n     */\\n    function setupERC721EditionCollectionWithEdition(\\n        address _creator,\\n        IRoyaltyManager.Royalty memory _defaultRoyalty,\\n        address _defaultTokenManager,\\n        string memory _contractURI,\\n        string memory _name,\\n        string memory _symbol,\\n        IEditionsMetadataRenderer.TokenEditionInfo memory _editionInfo,\\n        uint256 _size,\\n        bytes32 salt // generate off-chain\\n    ) external returns (address) {\\n        address clone = Clones.cloneDeterministic(erc721EditionsImplementation, salt);\\n        ERC721Editions(clone).initialize(\\n            address(this),\\n            _defaultRoyalty,\\n            _defaultTokenManager,\\n            _contractURI,\\n            _name,\\n            _symbol,\\n            editionsMetadataRendererAddress,\\n            trustedForwarder,\\n            mintManagerAddress\\n        );\\n        ERC721Editions(clone).createEdition(\\n            abi.encode(_editionInfo),\\n            _size,\\n            _defaultTokenManager // apply default token manager to edition as well\\n        );\\n        ERC721Editions(clone).transferOwnership(_creator);\\n        return clone;\\n    }\\n\\n    /**\\n     * @dev Initialize ERC721SingleEdition collection, deployed via Create2\\n     * @param _creator Creator/owner of contract\\n     * @param _defaultRoyalty Default royalty object for contract (optional)\\n     * @param _defaultTokenManager Default token manager for contract (optional)\\n     * @param _contractURI Contract metadata\\n     * @param _name Name of token edition\\n     * @param _symbol Symbol of the token edition\\n     * @param _editionInfo Single edition's info\\n     * @param _size Single edition's size\\n     * @param salt Salt used to uniquely deploy collection (via Create2)\\n     */\\n    function setupERC721SingleEditionCollection(\\n        address _creator,\\n        IRoyaltyManager.Royalty memory _defaultRoyalty,\\n        address _defaultTokenManager,\\n        string memory _contractURI,\\n        string memory _name,\\n        string memory _symbol,\\n        IEditionsMetadataRenderer.TokenEditionInfo memory _editionInfo,\\n        uint256 _size,\\n        bytes32 salt // generate off-chain\\n    ) external returns (address) {\\n        address clone = Clones.cloneDeterministic(erc721SingleEditionImplementation, salt);\\n        ERC721SingleEdition(clone).initialize(\\n            _creator,\\n            _defaultRoyalty,\\n            _defaultTokenManager,\\n            _contractURI,\\n            _name,\\n            _symbol,\\n            abi.encode(_editionInfo),\\n            _size,\\n            editionsMetadataRendererAddress,\\n            trustedForwarder,\\n            mintManagerAddress\\n        );\\n        return clone;\\n    }\\n\\n    /**\\n     * @dev Initialize ERC721General collection, deployed via Create2\\n     * @param _creator Creator/owner of contract\\n     * @param _defaultRoyalty Default royalty object for contract (optional)\\n     * @param _defaultTokenManager Default token manager for contract (optional)\\n     * @param _contractURI Contract metadata\\n     * @param _name Name of token edition\\n     * @param _symbol Symbol of the token edition\\n     * @param baseUri Collection's base uri\\n     * @param limitSupply Collection's limit supply\\n     * @param salt Salt used to uniquely deploy collection (via Create2)\\n     */\\n    function setupERC721GeneralCollection(\\n        address _creator,\\n        IRoyaltyManager.Royalty memory _defaultRoyalty,\\n        address _defaultTokenManager,\\n        string memory _contractURI,\\n        string memory _name,\\n        string memory _symbol,\\n        string calldata baseUri,\\n        uint256 limitSupply,\\n        bytes32 salt // generate off-chain\\n    ) external returns (address) {\\n        address clone = Clones.cloneDeterministic(erc721GeneralImplementation, salt);\\n        ERC721General(clone).initialize(\\n            _creator,\\n            _contractURI,\\n            _defaultRoyalty,\\n            _defaultTokenManager,\\n            _name,\\n            _symbol,\\n            trustedForwarder,\\n            mintManagerAddress,\\n            baseUri,\\n            limitSupply\\n        );\\n        return clone;\\n    }\\n\\n    /**\\n     * @dev Predict Create2 deployed ERC721Edition collection\\n     * @param salt Salt used to uniquely deploy collection\\n     */\\n    function predictERC721EditionCollectionAddress(bytes32 salt) external view returns (address) {\\n        return Clones.predictDeterministicAddress(erc721EditionsImplementation, salt);\\n    }\\n\\n    /**\\n     * @dev Predict Create2 deployed ERC721SingleEdition collection\\n     * @param salt Salt used to uniquely deploy collection\\n     */\\n    function predictERC721SingleEditionCollectionAddress(bytes32 salt) external view returns (address) {\\n        return Clones.predictDeterministicAddress(erc721SingleEditionImplementation, salt);\\n    }\\n\\n    /**\\n     * @dev Predict Create2 deployed ERC721General collection\\n     * @param salt Salt used to uniquely deploy collection\\n     */\\n    function predictERC721GeneralCollectionAddress(bytes32 salt) external view returns (address) {\\n        return Clones.predictDeterministicAddress(erc721GeneralImplementation, salt);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/ERC721Editions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IERC721Editions.sol\\\";\\nimport \\\"./ERC721Base.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"../metadata/interfaces/IMetadataRenderer.sol\\\";\\nimport \\\"../metadata/interfaces/IEditionsMetadataRenderer.sol\\\";\\nimport \\\"./interfaces/IEditionCollection.sol\\\";\\n\\nimport \\\"../tokenManager/interfaces/IPostTransfer.sol\\\";\\nimport \\\"../utils/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"./interfaces/IERC721EditionMint.sol\\\";\\n\\n/**\\n * @title ERC721 Editions\\n * @author sarib@highlight.xyz, ishan@highlight.xyz\\n * @dev Multiple Editions Per Collection\\n */\\ncontract ERC721Editions is IEditionCollection, IERC721Editions, IERC721EditionMint, ERC721Base, ERC721Upgradeable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @dev Contract metadata\\n     */\\n    string public contractURI;\\n\\n    /**\\n     * @dev Keeps track of next token ID\\n     */\\n    uint256 private _nextTokenId;\\n\\n    /**\\n     * @dev Generates metadata for contract and token\\n     */\\n    address private _metadataRendererAddress;\\n\\n    /**\\n     * @dev Tracks current supply of each edition, edition indexed\\n     */\\n    uint256[] public editionCurrentSupply;\\n\\n    /**\\n     * @dev Tracks size of each edition, edition indexed\\n     */\\n    uint256[] public editionMaxSupply;\\n\\n    /**\\n     * @dev Tracks start token id each edition, edition indexed\\n     */\\n    uint256[] public editionStartId;\\n\\n    /**\\n     * @dev Emitted when edition is created\\n     * @param size Edition size\\n     * @param editionTokenManager Token manager for edition\\n     */\\n    event EditionCreated(uint256 indexed size, address indexed editionTokenManager);\\n\\n    /**\\n     * @param creator Creator/owner of contract\\n     * @param defaultRoyalty Default royalty object for contract (optional)\\n     * @param _defaultTokenManager Default token manager for contract (optional)\\n     * @param _contractURI Contract metadata\\n     * @param _name Name of token edition\\n     * @param _symbol Symbol of the token edition\\n     * @param metadataRendererAddress Contract returning metadata for each edition\\n     * @param trustedForwarder Trusted minimal forwarder\\n     * @param initialMinter Initial minter to register\\n     */\\n    function initialize(\\n        address creator,\\n        IRoyaltyManager.Royalty memory defaultRoyalty,\\n        address _defaultTokenManager,\\n        string memory _contractURI,\\n        string memory _name,\\n        string memory _symbol,\\n        address metadataRendererAddress,\\n        address trustedForwarder,\\n        address initialMinter\\n    ) external initializer nonReentrant {\\n        __ERC721Base_initialize(creator, defaultRoyalty, _defaultTokenManager);\\n        __ERC721_init(_name, _symbol);\\n        __ERC2771ContextUpgradeable__init__(trustedForwarder);\\n        _metadataRendererAddress = metadataRendererAddress;\\n        _minters.add(initialMinter);\\n        _nextTokenId = 1;\\n        contractURI = _contractURI;\\n    }\\n\\n    /**\\n     * @param _editionInfo Info of the Edition\\n     * @param _editionSize Size of the Edition\\n     * @param _editionTokenManager Edition's token manager\\n     * @dev Used to create a new Edition within the Collection\\n     */\\n    function createEdition(\\n        bytes memory _editionInfo,\\n        uint256 _editionSize,\\n        address _editionTokenManager\\n    ) external onlyOwner nonReentrant returns (uint256) {\\n        require(_editionSize > 0, \\\"Edition size == 0\\\");\\n\\n        uint256 editionId = editionStartId.length;\\n\\n        editionStartId.push(_nextTokenId);\\n        editionMaxSupply.push(_editionSize);\\n        editionCurrentSupply.push(0);\\n\\n        _nextTokenId += _editionSize;\\n\\n        IMetadataRenderer(_metadataRendererAddress).initializeMetadata(_editionInfo);\\n\\n        if (_editionTokenManager != address(0)) {\\n            _managers[editionId] = _editionTokenManager;\\n        }\\n\\n        emit EditionCreated(_editionSize, _editionTokenManager);\\n\\n        return editionId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721EditionMint-mintOneToRecipient}\\n     */\\n    function mintOneToRecipient(uint256 editionId, address recipient)\\n        external\\n        onlyMinter\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(_mintFrozen == 0, \\\"Mint frozen\\\");\\n        require(_editionExists(editionId), \\\"Edition doesn't exist\\\");\\n\\n        return _mintEditionsToOne(editionId, recipient, 1);\\n    }\\n\\n    /**\\n     * @dev See {IERC721EditionMint-mintAmountToRecipient}\\n     */\\n    function mintAmountToRecipient(\\n        uint256 editionId,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyMinter nonReentrant returns (uint256) {\\n        require(_mintFrozen == 0, \\\"Mint frozen\\\");\\n        require(_editionExists(editionId), \\\"Edition doesn't exist\\\");\\n\\n        return _mintEditionsToOne(editionId, recipient, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC721EditionMint-mintOneToRecipients}\\n     */\\n    function mintOneToRecipients(uint256 editionId, address[] memory recipients)\\n        external\\n        onlyMinter\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(_mintFrozen == 0, \\\"Mint frozen\\\");\\n        require(_editionExists(editionId), \\\"Edition doesn't exist\\\");\\n        return _mintEditions(editionId, recipients, 1);\\n    }\\n\\n    /**\\n     * @dev See {IERC721EditionMint-mintAmountToRecipients}\\n     */\\n    function mintAmountToRecipients(\\n        uint256 editionId,\\n        address[] memory recipients,\\n        uint256 amount\\n    ) external onlyMinter nonReentrant returns (uint256) {\\n        require(_mintFrozen == 0, \\\"Mint frozen\\\");\\n        require(_editionExists(editionId), \\\"Edition doesn't exist\\\");\\n        return _mintEditions(editionId, recipients, amount);\\n    }\\n\\n    /**\\n     * @dev See {IEditionCollection-getEditionDetails}\\n     */\\n    function getEditionDetails(uint256 editionId) external view returns (EditionDetails memory) {\\n        require(_editionExists(editionId), \\\"Edition doesn't exist\\\");\\n        return _getEditionDetails(editionId);\\n    }\\n\\n    /**\\n     * @dev See {IEditionCollection-getEditionsDetailsAndUri}\\n     */\\n    function getEditionsDetailsAndUri(uint256[] calldata editionIds)\\n        external\\n        view\\n        returns (EditionDetails[] memory, string[] memory)\\n    {\\n        uint256 editionIdsLength = editionIds.length;\\n        EditionDetails[] memory editionsDetails = new EditionDetails[](editionIdsLength);\\n        string[] memory uris = new string[](editionIdsLength);\\n\\n        for (uint256 i = 0; i < editionIdsLength; i++) {\\n            uris[i] = editionURI(editionIds[i]);\\n            editionsDetails[i] = _getEditionDetails(editionIds[i]);\\n        }\\n\\n        return (editionsDetails, uris);\\n    }\\n\\n    /**\\n     * @dev See {IEditionCollection-getEditionStartIds}\\n     */\\n    function getEditionStartIds() external view returns (uint256[] memory) {\\n        return editionStartId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}. Overrides default behaviour to check associated tokenManager.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override nonReentrant {\\n        ERC721Upgradeable.transferFrom(from, to, tokenId);\\n\\n        address _manager = tokenManagerByTokenId(tokenId);\\n        if (_manager != address(0) && IERC165Upgradeable(_manager).supportsInterface(type(IPostTransfer).interfaceId)) {\\n            IPostTransfer(_manager).postTransferFrom(_msgSender(), from, to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}. Overrides default behaviour to check associated tokenManager.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override nonReentrant {\\n        ERC721Upgradeable.safeTransferFrom(from, to, tokenId, data);\\n\\n        address _manager = tokenManagerByTokenId(tokenId);\\n        if (_manager != address(0) && IERC165Upgradeable(_manager).supportsInterface(type(IPostTransfer).interfaceId)) {\\n            IPostTransfer(_manager).postSafeTransferFrom(_msgSender(), from, to, tokenId, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Conforms to ERC-2981.\\n     * @param _tokenId Token id\\n     * @param _salePrice Sale price of token\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        return ERC721Base.royaltyInfo(getEditionId(_tokenId), _salePrice);\\n    }\\n\\n    /**\\n     * @dev See {IEditionCollection-getEditionId}\\n     */\\n    function getEditionId(uint256 tokenId) public view returns (uint256) {\\n        require(_exists(tokenId), \\\"Token doesn't exist\\\");\\n        uint256 editionId = 0;\\n        uint256[] memory tempEditionStartId = editionStartId; // cache\\n        uint256 tempEditionStartIdLength = tempEditionStartId.length; // cache\\n        for (uint256 i = 0; i < tempEditionStartIdLength; i += 1) {\\n            if (tokenId >= tempEditionStartId[i]) {\\n                editionId = i;\\n            }\\n        }\\n        return editionId;\\n    }\\n\\n    /**\\n     * @dev Used to get token manager of token id\\n     * @param tokenId ID of the token\\n     */\\n    function tokenManagerByTokenId(uint256 tokenId) public view returns (address) {\\n        return tokenManager(getEditionId(tokenId));\\n    }\\n\\n    /**\\n     * @dev Get URI for given edition id\\n     * @param editionId edition id to get uri for\\n     * @return base64-encoded json metadata object\\n     */\\n    function editionURI(uint256 editionId) public view returns (string memory) {\\n        require(_editionExists(editionId), \\\"Edition doesn't exist\\\");\\n        return IEditionsMetadataRenderer(_metadataRendererAddress).editionURI(editionId);\\n    }\\n\\n    /**\\n     * @dev Get URI for given token id\\n     * @param tokenId token id to get uri for\\n     * @return base64-encoded json metadata object\\n     */\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), \\\"Token doesn't exist\\\");\\n        return IMetadataRenderer(_metadataRendererAddress).tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Upgradeable-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165Upgradeable, ERC721Upgradeable)\\n        returns (bool)\\n    {\\n        return ERC721Upgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Private function to mint without any access checks. Called by the public edition minting functions.\\n     * @param editionId Edition being minted on\\n     * @param recipients Recipients of newly minted tokens\\n     * @param _amount Amount minted to each recipient\\n     */\\n    function _mintEditions(\\n        uint256 editionId,\\n        address[] memory recipients,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        uint256 recipientsLength = recipients.length;\\n\\n        uint256 maxSupply = editionMaxSupply[editionId];\\n        uint256 currentSupply = editionCurrentSupply[editionId];\\n        uint256 startId = editionStartId[editionId];\\n        uint256 endAt = currentSupply + (recipientsLength * _amount);\\n\\n        require(endAt <= maxSupply, \\\"Sold out\\\");\\n\\n        for (uint256 i = 0; i < recipientsLength; i++) {\\n            for (uint256 j = 0; j < _amount; j++) {\\n                _mint(recipients[i], startId + currentSupply);\\n                currentSupply += 1;\\n            }\\n        }\\n\\n        editionCurrentSupply[editionId] = currentSupply;\\n        return endAt;\\n    }\\n\\n    /**\\n     * @dev Private function to mint without any access checks. Called by the public edition minting functions.\\n     * @param editionId Edition being minted on\\n     * @param recipient Recipient of newly minted token\\n     * @param _amount Amount minted to recipient\\n     */\\n    function _mintEditionsToOne(\\n        uint256 editionId,\\n        address recipient,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        uint256 maxSupply = editionMaxSupply[editionId];\\n        uint256 currentSupply = editionCurrentSupply[editionId];\\n        uint256 startId = editionStartId[editionId];\\n        uint256 endAt = currentSupply + _amount;\\n\\n        require(endAt <= maxSupply, \\\"Sold out\\\");\\n\\n        for (uint256 j = 0; j < _amount; j++) {\\n            _mint(recipient, startId + currentSupply);\\n            currentSupply += 1;\\n        }\\n\\n        editionCurrentSupply[editionId] = currentSupply;\\n        return endAt;\\n    }\\n\\n    /**\\n     * @dev Returns whether `editionId` exists.\\n     * @param editionId Id of edition being checked\\n     */\\n    function _editionExists(uint256 editionId) internal view returns (bool) {\\n        return editionId < editionCurrentSupply.length;\\n    }\\n\\n    /**\\n     * @dev Used for meta-transactions\\n     */\\n    function _msgSender() internal view override(ERC721Base, ContextUpgradeable) returns (address sender) {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    /**\\n     * @dev Used for meta-transactions\\n     */\\n    function _msgData() internal view override(ERC721Base, ContextUpgradeable) returns (bytes calldata) {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n\\n    /**\\n     * @dev Get edition details\\n     * @param editionId Id of edition to get details for\\n     */\\n    function _getEditionDetails(uint256 editionId) private view returns (EditionDetails memory) {\\n        return\\n            EditionDetails(\\n                IEditionsMetadataRenderer(_metadataRendererAddress).editionInfo(address(this), editionId).name,\\n                editionMaxSupply[editionId],\\n                editionCurrentSupply[editionId],\\n                editionStartId[editionId]\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/ERC721SingleEdition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"../metadata/interfaces/IMetadataRenderer.sol\\\";\\nimport \\\"../metadata/interfaces/IEditionsMetadataRenderer.sol\\\";\\nimport \\\"./interfaces/IEditionCollection.sol\\\";\\nimport \\\"./ERC721MinimizedBase.sol\\\";\\nimport \\\"../tokenManager/interfaces/IPostTransfer.sol\\\";\\nimport \\\"../utils/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"./interfaces/IERC721EditionMint.sol\\\";\\n\\n/**\\n * @title ERC721 Single Edition\\n * @author sarib@highlight.xyz, ishan@highlight.xyz\\n * @dev Single Edition Per Collection\\n */\\ncontract ERC721SingleEdition is IERC721EditionMint, IEditionCollection, ERC721MinimizedBase, ERC721Upgradeable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @dev Contract metadata\\n     */\\n    string public contractURI;\\n\\n    /**\\n     * @dev Keeps track of current token ID in supply\\n     */\\n    uint256 private _currentId;\\n\\n    /**\\n     * @dev Generates metadata for contract and token\\n     */\\n    address private _metadataRendererAddress;\\n\\n    /**\\n     * @notice Total size of edition that can be minted\\n     */\\n    uint256 public size;\\n\\n    /**\\n     * @dev Emitted when edition is created\\n     * @param size Edition size\\n     * @param editionTokenManager Token manager for edition\\n     */\\n    event EditionCreated(uint256 indexed size, address indexed editionTokenManager);\\n\\n    /**\\n     * @param creator Creator/owner of contract\\n     * @param defaultRoyalty Default royalty object for contract (optional)\\n     * @param _defaultTokenManager Default token manager for contract (optional)\\n     * @param _contractURI Contract metadata\\n     * @param _name Name of token edition\\n     * @param _symbol Symbol of the token edition\\n     * @param _editionInfo Edition info\\n     * @param _size Edition size\\n     * @param metadataRendererAddress Contract returning metadata for each edition\\n     * @param trustedForwarder Trusted minimal forwarder\\n     * @param initialMinter Initial minter to register\\n     */ \\n    function initialize(\\n        address creator,\\n        IRoyaltyManager.Royalty memory defaultRoyalty,\\n        address _defaultTokenManager,\\n        string memory _contractURI,\\n        string memory _name,\\n        string memory _symbol,\\n        bytes memory _editionInfo,\\n        uint256 _size,\\n        address metadataRendererAddress,\\n        address trustedForwarder,\\n        address initialMinter\\n    ) external initializer nonReentrant {\\n        __ERC721MinimizedBase_initialize(creator, defaultRoyalty, _defaultTokenManager);\\n        __ERC721_init(_name, _symbol);\\n        __ERC2771ContextUpgradeable__init__(trustedForwarder);\\n        size = _size;\\n        _metadataRendererAddress = metadataRendererAddress;\\n        IMetadataRenderer(metadataRendererAddress).initializeMetadata(_editionInfo);\\n        _minters.add(initialMinter);\\n        _currentId = 1;\\n        contractURI = _contractURI;\\n\\n        emit EditionCreated(_size, _defaultTokenManager);\\n    }\\n\\n    /**\\n     * @dev See {IERC721EditionMint-mintOneToRecipient}\\n     */\\n    function mintOneToRecipient(uint256 editionId, address recipient)\\n        external\\n        onlyMinter\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(_mintFrozen == 0, \\\"Mint frozen\\\");\\n        require(_editionExists(editionId), \\\"Edition doesn't exist\\\");\\n\\n        return _mintEditionsToOne(recipient, 1);\\n    }\\n\\n    /**\\n     * @dev See {IERC721EditionMint-mintAmountToRecipient}\\n     */\\n    function mintAmountToRecipient(\\n        uint256 editionId,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyMinter nonReentrant returns (uint256) {\\n        require(_mintFrozen == 0, \\\"Mint frozen\\\");\\n        require(_editionExists(editionId), \\\"Edition doesn't exist\\\");\\n\\n        return _mintEditionsToOne(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC721EditionMint-mintOneToRecipients}\\n     */\\n    function mintOneToRecipients(uint256 editionId, address[] memory recipients)\\n        external\\n        onlyMinter\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(_mintFrozen == 0, \\\"Mint frozen\\\");\\n        require(_editionExists(editionId), \\\"Edition doesn't exist\\\");\\n        return _mintEditions(recipients, 1);\\n    }\\n\\n    /**\\n     * @dev See {IERC721EditionMint-mintAmountToRecipients}\\n     */\\n    function mintAmountToRecipients(\\n        uint256 editionId,\\n        address[] memory recipients,\\n        uint256 amount\\n    ) external onlyMinter nonReentrant returns (uint256) {\\n        require(_mintFrozen == 0, \\\"Mint frozen\\\");\\n        require(_editionExists(editionId), \\\"Edition doesn't exist\\\");\\n        return _mintEditions(recipients, amount);\\n    }\\n\\n    /**\\n     * @dev See {IEditionCollection-getEditionId}\\n     */\\n    function getEditionId(uint256 tokenId) external view returns (uint256) {\\n        require(_exists(tokenId), \\\"Token Id doesn't exist\\\");\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev See {IEditionCollection-getEditionDetails}\\n     */\\n    function getEditionDetails(uint256 editionId) external view returns (EditionDetails memory) {\\n        require(_editionExists(editionId), \\\"Edition doesn't exist\\\");\\n        return _getEditionDetails();\\n    }\\n\\n    /**\\n     * @dev See {IEditionCollection-getEditionsDetailsAndUri}\\n     */\\n    function getEditionsDetailsAndUri(uint256[] calldata editionIds)\\n        external\\n        view\\n        returns (EditionDetails[] memory, string[] memory)\\n    {\\n        require(editionIds.length == 1, \\\"One possible edition id\\\");\\n        EditionDetails[] memory editionsDetails = new EditionDetails[](1);\\n        string[] memory uris = new string[](1);\\n\\n        // expected to be 0, validated in editionURI call\\n        uint256 editionId = editionIds[0];\\n\\n        uris[0] = editionURI(editionId);\\n        editionsDetails[0] = _getEditionDetails();\\n\\n        return (editionsDetails, uris);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}. Overrides default behaviour to check associated tokenManager.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override nonReentrant {\\n        ERC721Upgradeable.transferFrom(from, to, tokenId);\\n\\n        address _manager = defaultManager;\\n        if (_manager != address(0) && IERC165Upgradeable(_manager).supportsInterface(type(IPostTransfer).interfaceId)) {\\n            IPostTransfer(_manager).postTransferFrom(_msgSender(), from, to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}. Overrides default behaviour to check associated tokenManager.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override nonReentrant {\\n        ERC721Upgradeable.safeTransferFrom(from, to, tokenId, data);\\n\\n        address _manager = defaultManager;\\n        if (_manager != address(0) && IERC165Upgradeable(_manager).supportsInterface(type(IPostTransfer).interfaceId)) {\\n            IPostTransfer(_manager).postSafeTransferFrom(_msgSender(), from, to, tokenId, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Conforms to ERC-2981.\\n     * @param // Token id\\n     * @param _salePrice Sale price of token\\n     */\\n    function royaltyInfo(\\n        uint256, /* _tokenId */\\n        uint256 _salePrice\\n    ) public view virtual override returns (address receiver, uint256 royaltyAmount) {\\n        return ERC721MinimizedBase.royaltyInfo(0, _salePrice);\\n    }\\n\\n    /**\\n     * @dev Get URI for given edition id\\n     * @param editionId edition id to get uri for\\n     * @return base64-encoded json metadata object\\n     */\\n    function editionURI(uint256 editionId) public view returns (string memory) {\\n        require(_editionExists(editionId), \\\"Edition doesn't exist\\\");\\n        return IEditionsMetadataRenderer(_metadataRendererAddress).editionURI(editionId);\\n    }\\n\\n    /**\\n     * @dev Get URI for given token id\\n     * @param tokenId token id to get uri for\\n     * @return base64-encoded json metadata object\\n     */\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), \\\"No token\\\");\\n        return IMetadataRenderer(_metadataRendererAddress).tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Used to get token manager of token id\\n     * @param tokenId ID of the token\\n     */\\n    function tokenManagerByTokenId(uint256 tokenId) public view returns (address) {\\n        return tokenManager(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to mint without any access checks. Called by the public edition minting functions.\\n     * @param recipients Recipients of newly minted tokens\\n     * @param _amount Amount minted to each recipient\\n     */\\n    function _mintEditions(address[] memory recipients, uint256 _amount) internal returns (uint256) {\\n        uint256 recipientsLength = recipients.length;\\n\\n        uint256 tempCurrent = _currentId;\\n        uint256 endAt = tempCurrent + (recipientsLength * _amount) - 1;\\n\\n        require(size == 0 || endAt <= size, \\\"Sold out\\\");\\n\\n        for (uint256 i = 0; i < recipientsLength; i++) {\\n            for (uint256 j = 0; j < _amount; j++) {\\n                _mint(recipients[i], tempCurrent);\\n                tempCurrent += 1;\\n            }\\n        }\\n        _currentId = tempCurrent;\\n        return _currentId;\\n    }\\n\\n    /**\\n     * @dev Private function to mint without any access checks. Called by the public edition minting functions.\\n     * @param recipient Recipient of newly minted token\\n     * @param _amount Amount minted to recipient\\n     */\\n    function _mintEditionsToOne(address recipient, uint256 _amount) internal returns (uint256) {\\n        uint256 tempCurrent = _currentId;\\n        uint256 endAt = tempCurrent + _amount - 1;\\n\\n        require(size == 0 || endAt <= size, \\\"Sold out\\\");\\n\\n        for (uint256 j = 0; j < _amount; j++) {\\n            _mint(recipient, tempCurrent);\\n            tempCurrent += 1;\\n        }\\n        _currentId = tempCurrent;\\n        return _currentId;\\n    }\\n\\n    /**\\n     * @dev Used for meta-transactions\\n     */\\n    function _msgSender() internal view override(ERC721MinimizedBase, ContextUpgradeable) returns (address sender) {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    /**\\n     * @dev Used for meta-transactions\\n     */\\n    function _msgData() internal view override(ERC721MinimizedBase, ContextUpgradeable) returns (bytes calldata) {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n\\n    /**\\n     * @dev Returns whether `editionId` exists.\\n     */\\n    function _editionExists(uint256 editionId) internal pure returns (bool) {\\n        return editionId == 0;\\n    }\\n\\n    /**\\n     * @dev Get edition details\\n     */\\n    function _getEditionDetails() private view returns (EditionDetails memory) {\\n        return EditionDetails(this.name(), size, _currentId - 1, 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/metadata/interfaces/IEditionsMetadataRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Used to interface with EditionsMetadataRenderer\\n * @author ishan@highlight.xyz, sarib@highlight.xyz\\n */\\ninterface IEditionsMetadataRenderer {\\n    /**\\n     * @dev Token edition info\\n     * @param name Edition name\\n     * @param description Edition description\\n     * @param imageUrl Edition image url\\n     * @param animationUrl Edition animation url\\n     * @param externalUrl Edition external url\\n     * @param attributes Edition attributes\\n     */\\n    struct TokenEditionInfo {\\n        string name;\\n        string description;\\n        string imageUrl;\\n        string animationUrl;\\n        string externalUrl;\\n        string attributes;\\n    }\\n\\n    /**\\n     * @dev Updates name on edition. Managed by token manager if existent\\n     * @param editionsAddress Address of collection that edition is on\\n     * @param editionId ID of edition to update\\n     * @param name New name of edition\\n     */\\n    function updateName(\\n        address editionsAddress,\\n        uint256 editionId,\\n        string calldata name\\n    ) external;\\n\\n    /**\\n     * @dev Updates description on edition. Managed by token manager if existent\\n     * @param editionsAddress Address of collection that edition is on\\n     * @param editionId ID of edition to update\\n     * @param description New description of edition\\n     */\\n    function updateDescription(\\n        address editionsAddress,\\n        uint256 editionId,\\n        string calldata description\\n    ) external;\\n\\n    /**\\n     * @dev Updates imageUrl on edition. Managed by token manager if existent\\n     * @param editionsAddress Address of collection that edition is on\\n     * @param editionId ID of edition to update\\n     * @param imageUrl New imageUrl of edition\\n     */\\n    function updateImageUrl(\\n        address editionsAddress,\\n        uint256 editionId,\\n        string calldata imageUrl\\n    ) external;\\n\\n    /**\\n     * @dev Updates animationUrl on edition. Managed by token manager if existent\\n     * @param editionsAddress Address of collection that edition is on\\n     * @param editionId ID of edition to update\\n     * @param animationUrl New animationUrl of edition\\n     */\\n    function updateAnimationUrl(\\n        address editionsAddress,\\n        uint256 editionId,\\n        string calldata animationUrl\\n    ) external;\\n\\n    /**\\n     * @dev Updates externalUrl on edition. Managed by token manager if existent\\n     * @param editionsAddress Address of collection that edition is on\\n     * @param editionId ID of edition to update\\n     * @param externalUrl New externalUrl of edition\\n     */\\n    function updateExternalUrl(\\n        address editionsAddress,\\n        uint256 editionId,\\n        string calldata externalUrl\\n    ) external;\\n\\n    /**\\n     * @dev Updates attributes on edition. Managed by token manager if existent\\n     * @param editionsAddress Address of collection that edition is on\\n     * @param editionId ID of edition to update\\n     * @param attributes New attributes of edition\\n     */\\n    function updateAttributes(\\n        address editionsAddress,\\n        uint256 editionId,\\n        string calldata attributes\\n    ) external;\\n\\n    /**\\n     * @dev Get an edition's uri. HAS to be called by collection\\n     * @param editionId Edition's id to get uri for\\n     */\\n    function editionURI(uint256 editionId) external view returns (string memory);\\n\\n    /**\\n     * @dev Get an edition's info.\\n     * @param editionsAddress Address of collection that edition is on\\n     * @param editionsId Edition's id to get info for\\n     */\\n    function editionInfo(address editionsAddress, uint256 editionsId) external view returns (TokenEditionInfo memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/interfaces/IERC721Editions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Core creation interface\\n * @author sarib@highlight.xyz\\n */\\ninterface IERC721Editions {\\n    /**\\n     * @dev Create an edition\\n     * @param _editionInfo Encoded edition metadata\\n     * @param _editionSize Edition size\\n     * @param _editionTokenManager Token manager for edition\\n     */\\n    function createEdition(\\n        bytes memory _editionInfo,\\n        uint256 _editionSize,\\n        address _editionTokenManager\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Get the first token minted for each edition passed in\\n     */\\n    function getEditionStartIds() external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/metadata/interfaces/IMetadataRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Used to interface with core of EditionsMetadataRenderer\\n * @author Zora, sarib@highlight.xyz\\n */\\ninterface IMetadataRenderer {\\n    /**\\n     * @dev Store metadata for an edition\\n     * @param data Metadata\\n     */\\n    function initializeMetadata(bytes memory data) external;\\n\\n    /**\\n     * @dev Get uri for token\\n     * @param tokenId ID of token to get uri for\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/interfaces/IEditionCollection.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interfaces with the details of editions on collections\\n * @author ishan@highlight.xyz, sarib@highlight.xyz\\n */\\ninterface IEditionCollection {\\n    /**\\n     * @dev Edition details\\n     * @param name Edition name\\n     * @param size Edition size\\n     * @param supply Total number of tokens minted on edition\\n     * @param initialTokenId Token id of first token minted in edition\\n     */\\n    struct EditionDetails {\\n        string name;\\n        uint256 size;\\n        uint256 supply;\\n        uint256 initialTokenId;\\n    }\\n\\n    /**\\n     * @dev Get the edition a token belongs to\\n     * @param tokenId The token id of the token\\n     */\\n    function getEditionId(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @dev Get an edition's details\\n     * @param editionId Edition id\\n     */\\n    function getEditionDetails(uint256 editionId) external view returns (EditionDetails memory);\\n\\n    /**\\n     * @dev Get the details and uris of a number of editions\\n     * @param editionIds List of editions to get info for\\n     */\\n    function getEditionsDetailsAndUri(uint256[] calldata editionIds)\\n        external\\n        view\\n        returns (EditionDetails[] memory, string[] memory uris);\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/interfaces/IERC721EditionMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Mint interface on editions contracts\\n * @author sarib@highlight.xyz\\n */\\ninterface IERC721EditionMint {\\n    /**\\n     * @dev Mints one NFT to one recipient\\n     * @param editionId Edition to mint the NFT on\\n     * @param recipient Recipient of minted NFT\\n     */\\n    function mintOneToRecipient(uint256 editionId, address recipient) external returns (uint256);\\n\\n    /**\\n     * @dev Mints an amount of NFTs to one recipient\\n     * @param editionId Edition to mint the NFTs on\\n     * @param recipient Recipient of minted NFTs\\n     * @param amount Amount of NFTs minted\\n     */\\n    function mintAmountToRecipient(\\n        uint256 editionId,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Mints one NFT each to a number of recipients\\n     * @param editionId Edition to mint the NFTs on\\n     * @param recipients Recipients of minted NFTs\\n     */\\n    function mintOneToRecipients(uint256 editionId, address[] memory recipients) external returns (uint256);\\n\\n    /**\\n     * @dev Mints an amount of NFTs each to a number of recipients\\n     * @param editionId Edition to mint the NFTs on\\n     * @param recipients Recipients of minted NFTs\\n     * @param amount Amount of NFTs minted per recipient\\n     */\\n    function mintAmountToRecipients(\\n        uint256 editionId,\\n        address[] memory recipients,\\n        uint256 amount\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/ERC721MinimizedBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../royaltyManager/interfaces/IRoyaltyManager.sol\\\";\\nimport \\\"../tokenManager/interfaces/ITokenManager.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"../utils/ERC2981/IERC2981Upgradeable.sol\\\";\\nimport \\\"../metatx/ERC2771ContextUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"../utils/ERC165/ERC165CheckerUpgradeable.sol\\\";\\n\\n/**\\n * @title Minimized Base ERC721\\n * @author ishan@highlight.xyz\\n * @dev Core piece of Highlight NFT contracts (V2), branch for ERC721SingleEdition\\n */\\nabstract contract ERC721MinimizedBase is\\n    OwnableUpgradeable,\\n    IERC2981Upgradeable,\\n    ERC2771ContextUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using ERC165CheckerUpgradeable for address;\\n\\n    /**\\n     * @dev Set of minters allowed to mint on contract\\n     */\\n    EnumerableSet.AddressSet internal _minters;\\n\\n    /**\\n     * @dev Global token/edition manager default\\n     */\\n    address public defaultManager;\\n\\n    /**\\n     * @dev Default royalty for entire contract\\n     */\\n    IRoyaltyManager.Royalty internal _defaultRoyalty;\\n\\n    /**\\n     * @dev Royalty manager - optional contract that defines the conditions around setting royalties\\n     */\\n    address public royaltyManager;\\n\\n    /**\\n     * @dev Freezes minting on smart contract forever\\n     */\\n    uint8 internal _mintFrozen;\\n\\n    /**\\n     * @dev Emitted when minter is registered or unregistered\\n     * @param minter Minter that was changed\\n     * @param registered True if the minter was registered, false if unregistered\\n     */\\n    event MinterRegistrationChanged(address indexed minter, bool indexed registered);\\n\\n    /**\\n     * @dev Emitted when default token manager changed\\n     * @param newDefaultTokenManager New default token manager. Zero address if old one was removed\\n     */\\n    event DefaultTokenManagerChanged(address indexed newDefaultTokenManager);\\n\\n    /**\\n     * @dev Emitted when default royalty is set\\n     * @param recipientAddress Royalty recipient\\n     * @param royaltyPercentageBPS Percentage of sale (in basis points) owed to royalty recipient\\n     */\\n    event DefaultRoyaltySet(address indexed recipientAddress, uint16 indexed royaltyPercentageBPS);\\n\\n    /**\\n     * @dev Emitted when royalty manager is updated\\n     * @param newRoyaltyManager New royalty manager. Zero address if old one was removed\\n     */\\n    event RoyaltyManagerChanged(address indexed newRoyaltyManager);\\n\\n    /**\\n     * @dev Emitted when mints are frozen permanently\\n     */\\n    event MintsFrozen();\\n\\n    /**\\n     * @dev Restricts calls to minters\\n     */\\n    modifier onlyMinter() {\\n        require(_minters.contains(_msgSender()), \\\"Not minter\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Restricts calls if input royalty bps is over 10000\\n     */\\n    modifier royaltyValid(uint16 _royaltyBPS) {\\n        require(_royaltyBPS <= 10000, \\\"Over BPS limit\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Registers a minter\\n     * @param minter New minter\\n     */\\n    function registerMinter(address minter) external onlyOwner nonReentrant {\\n        require(_minters.add(minter), \\\"Already a minter\\\");\\n\\n        emit MinterRegistrationChanged(minter, true);\\n    }\\n\\n    /**\\n     * @dev Unregisters a minter\\n     * @param minter Minter to unregister\\n     */\\n    function unregisterMinter(address minter) external onlyOwner nonReentrant {\\n        require(_minters.remove(minter), \\\"Not yet minter\\\");\\n\\n        emit MinterRegistrationChanged(minter, false);\\n    }\\n\\n    /**\\n     * @dev Set default token manager if current token manager allows it\\n     * @param _defaultTokenManager New default token manager\\n     */\\n    function setDefaultTokenManager(address _defaultTokenManager) external nonReentrant {\\n        require(_isValidTokenManager(_defaultTokenManager), \\\"Invalid TM\\\");\\n        address msgSender = _msgSender();\\n\\n        address currentTokenManager = defaultManager;\\n        if (currentTokenManager == address(0)) {\\n            require(msgSender == owner(), \\\"Not owner\\\");\\n        } else {\\n            require(ITokenManager(currentTokenManager).canSwap(msgSender, 0, _defaultTokenManager), \\\"Can't swap\\\");\\n        }\\n\\n        defaultManager = _defaultTokenManager;\\n\\n        emit DefaultTokenManagerChanged(_defaultTokenManager);\\n    }\\n\\n    /**\\n     * @dev Removes default token manager if current token manager allows it\\n     */\\n    function removeDefaultTokenManager() external nonReentrant {\\n        address msgSender = _msgSender();\\n\\n        address currentTokenManager = defaultManager;\\n        require(currentTokenManager != address(0), \\\"Default TM not existent\\\");\\n        require(ITokenManager(currentTokenManager).canRemoveItself(msgSender, 0), \\\"Can't remove\\\");\\n\\n        defaultManager = address(0);\\n\\n        emit DefaultTokenManagerChanged(address(0));\\n    }\\n\\n    /**\\n     * @dev Sets default royalty if royalty manager allows it\\n     * @param _royalty New default royalty\\n     */\\n    function setDefaultRoyalty(IRoyaltyManager.Royalty calldata _royalty)\\n        external\\n        nonReentrant\\n        royaltyValid(_royalty.royaltyPercentageBPS)\\n    {\\n        address msgSender = _msgSender();\\n\\n        address _royaltyManager = royaltyManager;\\n        if (_royaltyManager == address(0)) {\\n            require(msgSender == owner(), \\\"Not owner\\\");\\n        } else {\\n            require(IRoyaltyManager(_royaltyManager).canSetDefaultRoyalty(_royalty, msgSender), \\\"Can't set\\\");\\n        }\\n\\n        _defaultRoyalty = _royalty;\\n\\n        emit DefaultRoyaltySet(_royalty.recipientAddress, _royalty.royaltyPercentageBPS);\\n    }\\n\\n    /**\\n     * @dev Sets royalty manager if current one allows it\\n     * @param _royaltyManager New royalty manager\\n     */\\n    function setRoyaltyManager(address _royaltyManager) external nonReentrant {\\n        require(_isValidRoyaltyManager(_royaltyManager), \\\"Invalid RM\\\");\\n        address msgSender = _msgSender();\\n\\n        address currentRoyaltyManager = royaltyManager;\\n        if (currentRoyaltyManager == address(0)) {\\n            require(msgSender == owner(), \\\"Not owner\\\");\\n        } else {\\n            require(IRoyaltyManager(currentRoyaltyManager).canSwap(_royaltyManager, msgSender), \\\"Can't swap\\\");\\n        }\\n\\n        royaltyManager = _royaltyManager;\\n\\n        emit RoyaltyManagerChanged(_royaltyManager);\\n    }\\n\\n    /**\\n     * @dev Removes royalty manager if current one allows it\\n     */\\n    function removeRoyaltyManager() external nonReentrant {\\n        address msgSender = _msgSender();\\n\\n        address currentRoyaltyManager = royaltyManager;\\n        require(currentRoyaltyManager != address(0), \\\"RM non-existent\\\");\\n        require(IRoyaltyManager(currentRoyaltyManager).canRemoveItself(msgSender), \\\"Can't remove\\\");\\n\\n        royaltyManager = address(0);\\n\\n        emit RoyaltyManagerChanged(address(0));\\n    }\\n\\n    /**\\n     * @dev Freeze mints on contract forever\\n     */\\n    function freezeMints() external onlyOwner nonReentrant {\\n        _mintFrozen = 1;\\n\\n        emit MintsFrozen();\\n    }\\n\\n    /**\\n     * @dev Conforms to ERC-2981. Editions should overwrite to return royalty for entire edition\\n     * @param // Edition id\\n     * @param _salePrice Sale price of token\\n     */\\n    function royaltyInfo(\\n        uint256, /* _tokenGroupingId */\\n        uint256 _salePrice\\n    ) public view virtual override returns (address receiver, uint256 royaltyAmount) {\\n        IRoyaltyManager.Royalty memory royalty = _defaultRoyalty;\\n\\n        receiver = royalty.recipientAddress;\\n        royaltyAmount = (_salePrice * uint256(royalty.royaltyPercentageBPS)) / 10000;\\n    }\\n\\n    /**\\n     * @dev Returns the token manager for the id passed in.\\n     * @param // Token ID or Edition ID for Editions implementing contracts\\n     */\\n    function tokenManager(\\n        uint256 /* id */\\n    ) public view returns (address manager) {\\n        return defaultManager;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract, setting the creator as the initial owner.\\n     * @param creator Contract creator\\n     * @param defaultRoyalty Default royalty for the contract\\n     * @param _defaultTokenManager Default token manager for the contract\\n     */\\n    function __ERC721MinimizedBase_initialize(\\n        address creator,\\n        IRoyaltyManager.Royalty memory defaultRoyalty,\\n        address _defaultTokenManager\\n    ) internal onlyInitializing royaltyValid(defaultRoyalty.royaltyPercentageBPS) {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _transferOwnership(creator);\\n\\n        _defaultRoyalty = defaultRoyalty;\\n\\n        defaultManager = _defaultTokenManager;\\n    }\\n\\n    /**\\n     * @dev Returns true if address is a valid tokenManager\\n     * @param _tokenManager Token manager being checked\\n     */\\n    function _isValidTokenManager(address _tokenManager) internal view returns (bool) {\\n        return _tokenManager.supportsInterface(type(ITokenManager).interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns true if address is a valid royaltyManager\\n     * @param _royaltyManager Royalty manager being checked\\n     */\\n    function _isValidRoyaltyManager(address _royaltyManager) internal view returns (bool) {\\n        return _royaltyManager.supportsInterface(type(IRoyaltyManager).interfaceId);\\n    }\\n\\n    /**\\n     * @dev Used for meta-transactions\\n     */\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    /**\\n     * @dev Used for meta-transactions\\n     */\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/metadata/EditionsMetadataRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport { MetadataRendererUtil } from \\\"./MetadataRendererUtil.sol\\\";\\nimport \\\"./interfaces/IMetadataRenderer.sol\\\";\\nimport \\\"./interfaces/IEditionsMetadataRenderer.sol\\\";\\nimport \\\"../erc721/interfaces/IEditionCollection.sol\\\";\\nimport \\\"../tokenManager/interfaces/ITokenManager.sol\\\";\\nimport \\\"../erc721/ERC721MinimizedBase.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\n/**\\n * @title Editions Metadata Render\\n * @author sarib@highlight.xyz, ishan@highlight.xyz\\n * @dev Editions ERC721 Metadata Renderer\\n * Inspired by Zora (zora.co) Editions Contract\\n */\\ncontract EditionsMetadataRenderer is\\n    IMetadataRenderer,\\n    IEditionsMetadataRenderer,\\n    UUPSUpgradeable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    /**\\n     * @dev Maps collection to list of edition infos for each edition on collection, edition-indexed\\n     */\\n    mapping(address => TokenEditionInfo[]) public tokenInfos;\\n\\n    /**\\n     * @dev Emitted when edition's metadata is initialized\\n     * @param contractAddress Collection address of edition\\n     * @param editionId Edition id\\n     * @param data Edition metadata\\n     */\\n    event MetadataInitialized(address indexed contractAddress, uint256 indexed editionId, bytes data);\\n\\n    /**\\n     * @dev Emitted when edition's name is updated\\n     * @param contractAddress Collection address of edition\\n     * @param editionId Edition id\\n     * @param data Changed metadata (in this case, name)\\n     */\\n    event NameUpdated(address indexed contractAddress, uint256 indexed editionId, string data);\\n\\n    /**\\n     * @dev Emitted when edition's description is updated\\n     * @param contractAddress Collection address of edition\\n     * @param editionId Edition id\\n     * @param data Changed metadata (in this case, description)\\n     */\\n    event DescriptionUpdated(address indexed contractAddress, uint256 indexed editionId, string data);\\n\\n    /**\\n     * @dev Emitted when edition's imageUrl is updated\\n     * @param contractAddress Collection address of edition\\n     * @param editionId Edition id\\n     * @param data Changed metadata (in this case, imageUrl)\\n     */\\n    event ImageUrlUpdated(address indexed contractAddress, uint256 indexed editionId, string data);\\n\\n    /**\\n     * @dev Emitted when edition's animationUrl is updated\\n     * @param contractAddress Collection address of edition\\n     * @param editionId Edition id\\n     * @param data Changed metadata (in this case, animationUrl)\\n     */\\n    event AnimationUrlUpdated(address indexed contractAddress, uint256 indexed editionId, string data);\\n\\n    /**\\n     * @dev Emitted when edition's externalUrl is updated\\n     * @param contractAddress Collection address of edition\\n     * @param editionId Edition id\\n     * @param data Changed metadata (in this case, externalUrl)\\n     */\\n    event ExternalUrlUpdated(address indexed contractAddress, uint256 indexed editionId, string data);\\n\\n    /**\\n     * @dev Emitted when edition's attributes is updated\\n     * @param contractAddress Collection address of edition\\n     * @param editionId Edition id\\n     * @param data Changed metadata (in this case, attributes)\\n     */\\n    event AttributesUpdated(address indexed contractAddress, uint256 indexed editionId, string data);\\n\\n    /**\\n     * @dev Initialize implementation with initial owner\\n     * @param _owner Initial owner\\n     */\\n    function initialize(address _owner) external initializer nonReentrant {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @dev Add TokenInfo data for edition\\n     * @param data Token Info data encoded\\n     */\\n    function initializeMetadata(bytes memory data) external nonReentrant {\\n        address msgSender = msg.sender;\\n        tokenInfos[msgSender].push(abi.decode(data, (TokenEditionInfo)));\\n\\n        emit MetadataInitialized(msgSender, tokenInfos[msgSender].length, data);\\n    }\\n\\n    /**\\n     * See {IEditionsMetadataRenderer-updateName}\\n     */\\n    function updateName(\\n        address editionsAddress,\\n        uint256 editionId,\\n        string calldata name\\n    ) external nonReentrant {\\n        require(_verifyCanUpdateMetadata(editionsAddress, editionId, name), \\\"Can't update metadata\\\");\\n\\n        tokenInfos[editionsAddress][editionId].name = name;\\n\\n        emit NameUpdated(editionsAddress, editionId, name);\\n    }\\n\\n    /**\\n     * See {IEditionsMetadataRenderer-updateDescription}\\n     */\\n    function updateDescription(\\n        address editionsAddress,\\n        uint256 editionId,\\n        string calldata description\\n    ) external nonReentrant {\\n        require(_verifyCanUpdateMetadata(editionsAddress, editionId, description), \\\"Can't update metadata\\\");\\n\\n        tokenInfos[editionsAddress][editionId].description = description;\\n\\n        emit DescriptionUpdated(editionsAddress, editionId, description);\\n    }\\n\\n    /**\\n     * See {IEditionsMetadataRenderer-updateImageUrl}\\n     */\\n    function updateImageUrl(\\n        address editionsAddress,\\n        uint256 editionId,\\n        string calldata imageUrl\\n    ) external nonReentrant {\\n        require(_verifyCanUpdateMetadata(editionsAddress, editionId, imageUrl), \\\"Can't update metadata\\\");\\n\\n        tokenInfos[editionsAddress][editionId].imageUrl = imageUrl;\\n\\n        emit ImageUrlUpdated(editionsAddress, editionId, imageUrl);\\n    }\\n\\n    /**\\n     * See {IEditionsMetadataRenderer-updateAnimationUrl}\\n     */\\n    function updateAnimationUrl(\\n        address editionsAddress,\\n        uint256 editionId,\\n        string calldata animationUrl\\n    ) external nonReentrant {\\n        require(_verifyCanUpdateMetadata(editionsAddress, editionId, animationUrl), \\\"Can't update metadata\\\");\\n\\n        tokenInfos[editionsAddress][editionId].animationUrl = animationUrl;\\n\\n        emit AnimationUrlUpdated(editionsAddress, editionId, animationUrl);\\n    }\\n\\n    /**\\n     * See {IEditionsMetadataRenderer-updateExternalUrl}\\n     */\\n    function updateExternalUrl(\\n        address editionsAddress,\\n        uint256 editionId,\\n        string calldata externalUrl\\n    ) external nonReentrant {\\n        require(_verifyCanUpdateMetadata(editionsAddress, editionId, externalUrl), \\\"Can't update metadata\\\");\\n\\n        tokenInfos[editionsAddress][editionId].externalUrl = externalUrl;\\n\\n        emit ExternalUrlUpdated(editionsAddress, editionId, externalUrl);\\n    }\\n\\n    /**\\n     * See {IEditionsMetadataRenderer-updateAttributes}\\n     */\\n    function updateAttributes(\\n        address editionsAddress,\\n        uint256 editionId,\\n        string calldata attributes\\n    ) external nonReentrant {\\n        require(_verifyCanUpdateMetadata(editionsAddress, editionId, attributes), \\\"Can't update metadata\\\");\\n\\n        tokenInfos[editionsAddress][editionId].attributes = attributes;\\n\\n        emit AttributesUpdated(editionsAddress, editionId, attributes);\\n    }\\n\\n    /**\\n     * @dev If edition has a token manager, delegate management of updatability to it\\n            Otherwise, updater must be collection owner\\n     * @param editionsAddress Collection address (where edition is on)\\n     * @param editionId ID of edition\\n     * @param newMetadata New metadata that was changed for edition\\n     */\\n    function _verifyCanUpdateMetadata(\\n        address editionsAddress,\\n        uint256 editionId,\\n        string calldata newMetadata\\n    ) private view returns (bool) {\\n        address _manager = ERC721MinimizedBase(editionsAddress).tokenManager(editionId);\\n        if (_manager == address(0)) {\\n            return msg.sender == OwnableUpgradeable(editionsAddress).owner();\\n        } else {\\n            return ITokenManager(_manager).canUpdateMetadata(msg.sender, editionId, bytes(newMetadata));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns Edition URI based on EditionID\\n     * @param editionId ID to get the EditionURI for\\n     */\\n    function editionURI(uint256 editionId) external view override returns (string memory) {\\n        IEditionCollection.EditionDetails memory details = IEditionCollection(msg.sender).getEditionDetails(editionId);\\n        TokenEditionInfo storage info = tokenInfos[msg.sender][editionId];\\n        return _createEditionMetadata(info, details.size);\\n    }\\n\\n    /**\\n     * @dev Returns Token URI based on TokenID\\n     * @param tokenId ID to get the TokenURI for\\n     */\\n    function tokenURI(uint256 tokenId) external view override returns (string memory) {\\n        IEditionCollection collection = IEditionCollection(msg.sender);\\n        uint256 editionId = collection.getEditionId(tokenId);\\n        IEditionCollection.EditionDetails memory details = collection.getEditionDetails(editionId);\\n        uint256 editionTokenId = tokenId - details.initialTokenId + 1;\\n        TokenEditionInfo storage info = tokenInfos[msg.sender][editionId];\\n        return _createTokenMetadata(info, editionTokenId, details.size);\\n    }\\n\\n    /**\\n     * @dev Get TokenEditionInfo for an edition\\n     * @param editionsAddress Address of Editions contract\\n     * @param editionsId Editions id\\n     */\\n    function editionInfo(address editionsAddress, uint256 editionsId) external view returns (TokenEditionInfo memory) {\\n        return tokenInfos[editionsAddress][editionsId];\\n    }\\n\\n    /* solhint-disable no-empty-blocks */\\n    /**\\n     * @dev Limit upgrades of contract to EditionsMetadataRenderer owner\\n     * @param // New implementation\\n     */\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    /* solhint-enable no-empty-blocks */\\n\\n    /**\\n     * @dev Returns encoded string uri\\n     * @param _name Name of the Contract\\n     * @param _symbol Symbol for the Contract\\n     */\\n    function _createContractMetadata(string memory _name, string memory _symbol) internal pure returns (string memory) {\\n        // solhint-disable quotes\\n        return\\n            MetadataRendererUtil.encodeMetadataJSON(\\n                abi.encodePacked('{\\\"name\\\": \\\"', _name, '\\\", \\\"symbol\\\": \\\"', _symbol, '\\\"}')\\n            );\\n        // solhint-enable quotes\\n    }\\n\\n    /**\\n     * @dev Returns encoded string uri\\n     * @param _info Edition Token Info\\n     * @param _editionSize Size of the Edition\\n     */\\n    function _createEditionMetadata(TokenEditionInfo memory _info, uint256 _editionSize)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        string memory _size = \\\"Unlimited\\\";\\n        if (_editionSize > 0) {\\n            _size = MetadataRendererUtil.numberToString(_editionSize);\\n        }\\n        string memory attributes = _info.attributes;\\n        bool noAttributes = bytes(_info.attributes).length < 1;\\n        if (noAttributes) {\\n            attributes = \\\"[]\\\";\\n        }\\n        string memory _tokenMedia = _tokenMediaData(_info.imageUrl, _info.animationUrl);\\n        // solhint-disable quotes\\n        return\\n            MetadataRendererUtil.encodeMetadataJSON(\\n                abi.encodePacked(\\n                    '{\\\"name\\\": \\\"',\\n                    _info.name,\\n                    '\\\", \\\"',\\n                    'size\\\": \\\"',\\n                    _size,\\n                    '\\\", \\\"',\\n                    'description\\\": \\\"',\\n                    _info.description,\\n                    '\\\", ',\\n                    _tokenMedia,\\n                    '\\\"external_url\\\": \\\"',\\n                    _info.externalUrl,\\n                    '\\\", \\\"',\\n                    'attributes\\\": ',\\n                    attributes,\\n                    \\\"}\\\"\\n                )\\n            );\\n        // solhint-enable quotes\\n    }\\n\\n    /**\\n     * @dev Returns encoded string uri\\n     * @param _info Edition Token Info\\n     * @param _editionTokenId ID of the Token within the Edition\\n     * @param _editionSize Size of the Edition\\n     */\\n    function _createTokenMetadata(\\n        TokenEditionInfo memory _info,\\n        uint256 _editionTokenId,\\n        uint256 _editionSize\\n    ) internal pure returns (string memory) {\\n        string memory _ofEdition = \\\"\\\";\\n        if (_editionSize > 0) {\\n            _ofEdition = string(abi.encodePacked(\\\"/\\\", MetadataRendererUtil.numberToString(_editionSize)));\\n        }\\n        string memory attributes = _info.attributes;\\n        bool noAttributes = bytes(_info.attributes).length < 1;\\n        if (noAttributes) {\\n            attributes = \\\"[]\\\";\\n        }\\n        string memory _tokenMedia = _tokenMediaData(_info.imageUrl, _info.animationUrl);\\n        /* solhint-disable quotes */\\n        return\\n            MetadataRendererUtil.encodeMetadataJSON(\\n                abi.encodePacked(\\n                    '{\\\"name\\\": \\\"',\\n                    _info.name,\\n                    \\\" \\\",\\n                    MetadataRendererUtil.numberToString(_editionTokenId),\\n                    _ofEdition,\\n                    '\\\", \\\"',\\n                    'description\\\": \\\"',\\n                    _info.description,\\n                    '\\\", ',\\n                    _tokenMedia,\\n                    '\\\"external_url\\\": \\\"',\\n                    _info.externalUrl,\\n                    '\\\", \\\"',\\n                    'attributes\\\": ',\\n                    attributes,\\n                    \\\"}\\\"\\n                )\\n            );\\n        /* solhint-enable quotes */\\n    }\\n\\n    /**\\n     * @dev Returns encoded media data\\n     * @param _imageUrl Edition image url\\n     * @param _animationUrl Edition animation url\\n     */\\n    function _tokenMediaData(string memory _imageUrl, string memory _animationUrl)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bool hasImage = bytes(_imageUrl).length > 0;\\n        bool hasAnimation = bytes(_animationUrl).length > 0;\\n        // solhint-disable quotes\\n        if (hasImage && hasAnimation) {\\n            return string(abi.encodePacked('\\\"image\\\": \\\"', _imageUrl, '\\\", \\\"animation_url\\\": \\\"', _animationUrl, '\\\", '));\\n        }\\n        if (hasImage) {\\n            return string(abi.encodePacked('\\\"image\\\": \\\"', _imageUrl, '\\\", '));\\n        }\\n        if (hasAnimation) {\\n            return string(abi.encodePacked('\\\"animation_url\\\": \\\"', _animationUrl, '\\\", '));\\n        }\\n        // solhint-enable quotes\\n\\n        return \\\"\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/metadata/MetadataRendererUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { Base64 } from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\n/**\\n * @title Metadata Render Helper\\n * @author sarib@highlight.xyz, Zora\\n * @dev Helper methods for Metadata Rendering\\n */\\nlibrary MetadataRendererUtil {\\n    /**\\n     * @param json Raw json to base64 and turn into a data-uri\\n     * @dev Encodes the argument json bytes into base64-data uri format\\n     */\\n    function encodeMetadataJSON(bytes memory json) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(json)));\\n    }\\n\\n    /**\\n     * @param value number to return as a string\\n     * @dev Proxy to openzeppelin's toString function\\n     */\\n    function numberToString(uint256 value) internal pure returns (string memory) {\\n        return Strings.toString(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/TestEditionsMetadataRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../metadata/EditionsMetadataRenderer.sol\\\";\\n\\n/**\\n * @author ishan@highlight.xyz\\n * @dev Mock EditionsMetadataRenderer\\n */\\ncontract TestEditionsMetadataRenderer is EditionsMetadataRenderer {\\n    /**\\n     * @dev Test function to test upgrades\\n     */\\n    function test() external pure returns (string memory) {\\n        return \\\"test\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mint/MintManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"../erc721/interfaces/IERC721GeneralMint.sol\\\";\\nimport \\\"../erc721/interfaces/IERC721EditionMint.sol\\\";\\nimport \\\"./interfaces/INativeMetaTransaction.sol\\\";\\nimport \\\"../utils/EIP712Upgradeable.sol\\\";\\nimport \\\"../metatx/ERC2771ContextUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title MintManager\\n * @author ishan@highlight.xyz, sarib@highlight.xyz\\n * @dev Faciliates lion's share of minting in Highlight protocol V2 by managing mint \\\"vectors\\\" on-chain and off-chain\\n */\\ncontract MintManager is EIP712Upgradeable, UUPSUpgradeable, OwnableUpgradeable, ERC2771ContextUpgradeable {\\n    using ECDSA for bytes32;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @dev On-chain mint vector\\n     * @param contractAddress NFT smart contract address\\n     * @param currency Currency used for payment. Native gas token, if zero address\\n     * @param paymentRecipient Payment recipient\\n     * @param startTimestamp When minting opens on vector\\n     * @param endTimestamp When minting ends on vector\\n     * @param pricePerToken Price that has to be paid per minted token\\n     * @param tokenLimitPerTx Max number of tokens that can be minted in one transaction\\n     * @param maxTotalClaimableViaVector Max number of tokens that can be minted via vector\\n     * @param maxUserClaimableViaVector Max number of tokens that can be minted by user via vector\\n     * @param totalClaimedViaVector Total number of tokens minted via vector\\n     * @param allowlistRoot Root of merkle tree with allowlist\\n     * @param paused If vector is paused\\n     */\\n    struct Vector {\\n        address contractAddress;\\n        address currency;\\n        address payable paymentRecipient;\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 pricePerToken;\\n        uint64 tokenLimitPerTx;\\n        uint64 maxTotalClaimableViaVector;\\n        uint64 maxUserClaimableViaVector;\\n        uint64 totalClaimedViaVector;\\n        bytes32 allowlistRoot;\\n        uint8 paused;\\n    }\\n\\n    /**\\n     * @dev On-chain mint vector mutability rules\\n     * @param updatesFrozen If true, vector cannot be updated\\n     * @param deleteFrozen If true, vector cannot be deleted\\n     * @param pausesFrozen If true, vector cannot be paused\\n     */\\n    struct VectorMutability {\\n        uint8 updatesFrozen;\\n        uint8 deleteFrozen;\\n        uint8 pausesFrozen;\\n    }\\n\\n    /**\\n     * @dev Packet enabling impersonation of purchaser for currencies supporting meta-transactions\\n     * @param functionSignature Function to call on contract, with arguments encoded\\n     * @param sigR Elliptic curve signature component\\n     * @param sigS Elliptic curve signature component\\n     * @param sigV Elliptic curve signature component\\n     */\\n    struct PurchaserMetaTxPacket {\\n        bytes functionSignature;\\n        bytes32 sigR;\\n        bytes32 sigS;\\n        uint8 sigV;\\n    }\\n\\n    /**\\n     * @dev Claim that is signed off-chain with EIP-712, and unwrapped to facilitate fulfillment of mint\\n     * @param currency Currency used for payment. Native gas token, if zero address\\n     * @param contractAddress NFT smart contract address\\n     * @param claimer Account able to use this claim\\n     * @param paymentRecipient Payment recipient\\n     * @param pricePerToken Price that has to be paid per minted token\\n     * @param numTokensToMint Number of NFTs to mint in this transaction\\n     * @param maxClaimableViaVector Max number of tokens that can be minted via vector\\n     * @param maxClaimablePerUser Max number of tokens that can be minted by user via vector\\n     * @param editionId ID of edition to mint on. Unused if claim is passed into ERC721General minting function\\n     * @param claimExpiryTimestamp Time when claim expires\\n     * @param claimNonce Unique identifier of claim\\n     * @param offchainVectorId Unique identifier of vector offchain\\n     */\\n    struct Claim {\\n        address currency;\\n        address contractAddress;\\n        address claimer;\\n        address payable paymentRecipient;\\n        uint256 pricePerToken;\\n        uint64 numTokensToMint;\\n        uint256 maxClaimableViaVector;\\n        uint256 maxClaimablePerUser;\\n        uint256 editionId;\\n        uint256 claimExpiryTimestamp;\\n        bytes32 claimNonce;\\n        bytes32 offchainVectorId;\\n    }\\n\\n    /**\\n     * @dev Claim that is signed off-chain with EIP-712, and unwrapped to facilitate fulfillment of mint.\\n     *      Includes meta-tx packets to impersonate purchaser and make payments.\\n     * @param currency Currency used for payment. Native gas token, if zero address\\n     * @param contractAddress NFT smart contract address\\n     * @param claimer Account able to use this claim\\n     * @param paymentRecipient Payment recipient\\n     * @param pricePerToken Price that has to be paid per minted token\\n     * @param numTokensToMint Number of NFTs to mint in this transaction\\n     * @param purchaseToCreatorPacket Meta-tx packet that send portion of payment to creator\\n     * @param purchaseToPlatformPacket Meta-tx packet that send portion of payment to platform\\n     * @param maxClaimableViaVector Max number of tokens that can be minted via vector\\n     * @param maxClaimablePerUser Max number of tokens that can be minted by user via vector\\n     * @param editionId ID of edition to mint on. Unused if claim is passed into ERC721General minting function\\n     * @param claimExpiryTimestamp Time when claim expires\\n     * @param claimNonce Unique identifier of claim\\n     * @param offchainVectorId Unique identifier of vector offchain\\n     */\\n    struct ClaimWithMetaTxPacket {\\n        address currency;\\n        address contractAddress;\\n        address claimer;\\n        uint256 pricePerToken;\\n        uint64 numTokensToMint;\\n        PurchaserMetaTxPacket purchaseToCreatorPacket;\\n        PurchaserMetaTxPacket purchaseToPlatformPacket;\\n        uint256 maxClaimableViaVector;\\n        uint256 maxClaimablePerUser;\\n        uint256 editionId; // unused if for general contract mints\\n        uint256 claimExpiryTimestamp;\\n        bytes32 claimNonce;\\n        bytes32 offchainVectorId;\\n    }\\n\\n    /**\\n     * @dev Tracks current claim state of offchain vectors\\n     * @param numClaimed Total claimed on vector\\n     * @param numClaimedPerUser Tracks totals claimed per user on vector\\n     */\\n    struct OffchainVectorClaimState {\\n        uint256 numClaimed;\\n        mapping(address => uint256) numClaimedPerUser;\\n    }\\n\\n    /* solhint-disable max-line-length */\\n    /**\\n     * @dev DEPRECATED - Claim typehash used via typed structured data hashing (EIP-712)\\n     */\\n    bytes32 private constant _CLAIM_TYPEHASH =\\n        keccak256(\\n            \\\"Claim(address currency,address contractAddress,address claimer,address paymentRecipient,uint256 pricePerToken,uint64 numTokensToMint,uint256 maxClaimableViaVector,uint256 maxClaimablePerUser,uint256 editionId,uint256 claimExpiryTimestamp,bytes32 claimNonce,bytes32 offchainVectorId)\\\"\\n        );\\n\\n    /**\\n     * @dev DEPRECATED - Claim typehash used via typed structured data hashing (EIP-712)\\n     */\\n    bytes32 private constant _CLAIM_WITH_META_TX_PACKET_TYPEHASH =\\n        keccak256(\\n            \\\"ClaimWithMetaTxPacket(address currency,address contractAddress,address claimer,uint256 pricePerToken,uint64 numTokensToMint,PurchaserMetaTxPacket purchaseToCreatorPacket,PurchaserMetaTxPacket purchaseToCreatorPacket,uint256 maxClaimableViaVector,uint256 maxClaimablePerUser,uint256 editionId,uint256 claimExpiryTimestamp,bytes32 claimNonce,bytes32 offchainVectorId)\\\"\\n        );\\n\\n    /* solhint-enable max-line-length */\\n\\n    /**\\n     * @dev Platform receiving portion of payment\\n     */\\n    address payable private _platform;\\n\\n    /**\\n     * @dev System-wide mint vectors\\n     */\\n    mapping(uint256 => Vector) public vectors;\\n\\n    /**\\n     * @dev System-wide mint vectors' mutabilities\\n     */\\n    mapping(uint256 => VectorMutability) public vectorMutabilities;\\n\\n    /**\\n     * @dev System-wide vector ids to (user to user claims count)\\n     */\\n    mapping(uint256 => mapping(address => uint64)) public userClaims;\\n\\n    /**\\n     * @dev Tracks what nonces used in signed mint keys have been used for vectors enforced offchain\\n     *      Requires the platform to not re-use offchain vector IDs.\\n     */\\n    mapping(bytes32 => EnumerableSet.Bytes32Set) private _offchainVectorsToNoncesUsed;\\n\\n    /**\\n     * @dev Tracks running state of offchain vectors\\n     */\\n    mapping(bytes32 => OffchainVectorClaimState) public offchainVectorsClaimState;\\n\\n    /**\\n     * @dev Maps vector ids to edition ids\\n     */\\n    mapping(uint256 => uint256) public vectorToEditionId;\\n\\n    /**\\n     * @dev Current vector id index\\n     */\\n    uint256 private _vectorSupply;\\n\\n    /**\\n     * @dev Platform transaction executors\\n     */\\n    EnumerableSet.AddressSet internal _platformExecutors;\\n\\n    /**\\n     * @dev Emitted when platform executor is added or removed\\n     * @param executor Changed executor\\n     * @param added True if executor was added and false otherwise\\n     */\\n    event PlatformExecutorChanged(address indexed executor, bool indexed added);\\n\\n    /**\\n     * @dev Emitted when vector is created on-chain\\n     * @param vectorId ID of vector\\n     * @param editionId Edition id of vector, meaningful if vector is for Editions collection\\n     * @param vector Vector to create\\n     */\\n    event VectorCreated(uint256 indexed vectorId, uint256 indexed editionId, Vector vector);\\n\\n    /**\\n     * @dev Emitted when vector is updated on-chain\\n     * @param vectorId ID of vector\\n     * @param newVector New vector details\\n     */\\n    event VectorUpdated(uint256 indexed vectorId, Vector newVector);\\n\\n    /**\\n     * @dev Emitted when vector is deleted on-chain\\n     * @param vectorId ID of vector to delete\\n     */\\n    event VectorDeleted(uint256 indexed vectorId);\\n\\n    /**\\n     * @dev Emitted when vector is paused or unpaused on-chain\\n     * @param vectorId ID of vector\\n     * @param paused True if vector was paused, false otherwise\\n     */\\n    event VectorPausedOrUnpaused(uint256 indexed vectorId, uint8 indexed paused);\\n\\n    /**\\n     * @dev Emitted when vector mutability updated\\n     * @param vectorId ID of vector\\n     * @param _newVectorMutability New vector mutability\\n     */\\n    event VectorMutabilityUpdated(uint256 indexed vectorId, VectorMutability _newVectorMutability);\\n\\n    /**\\n     * @dev Emits when native gas token held by contract is withdrawn by platform\\n     * @param withdrawnValue Amount withdrawn\\n     */\\n    event NativeGasTokenWithdrawn(uint256 withdrawnValue);\\n\\n    /**\\n     * @dev Emitted when payment is made in native gas token\\n     * @param paymentRecipient Creator recipient of payment\\n     * @param vectorId Vector that payment was for\\n     * @param amountToCreator Amount sent to creator\\n     * @param percentageBPSOfTotal Percentage (in basis points) that was sent to creator, of total payment\\n     */\\n    event NativeGasTokenPayment(\\n        address indexed paymentRecipient,\\n        bytes32 indexed vectorId,\\n        uint256 amountToCreator,\\n        uint32 percentageBPSOfTotal\\n    );\\n\\n    /**\\n     * @dev Emitted when payment is made in ERC20\\n     * @param currency ERC20 currency\\n     * @param paymentRecipient Creator recipient of payment\\n     * @param vectorId Vector that payment was for\\n     * @param payer Payer\\n     * @param amountToCreator Amount sent to creator\\n     * @param percentageBPSOfTotal Percentage (in basis points) that was sent to creator, of total payment\\n     */\\n    event ERC20Payment(\\n        address indexed currency,\\n        address indexed paymentRecipient,\\n        bytes32 indexed vectorId,\\n        address payer,\\n        uint256 amountToCreator,\\n        uint32 percentageBPSOfTotal\\n    );\\n\\n    /**\\n     * @dev Emitted when payment is made in ERC20 via meta-tx packet method\\n     * @param currency ERC20 currency\\n     * @param msgSender Payer\\n     * @param vectorId Vector that payment was for\\n     * @param purchaseToCreatorPacket Meta-tx packet facilitating payment to creator\\n     * @param purchaseToPlatformPacket Meta-tx packet facilitating payment to platform\\n     * @param amount Payment amount\\n     */\\n    event ERC20PaymentMetaTxPackets(\\n        address indexed currency,\\n        address indexed msgSender,\\n        bytes32 indexed vectorId,\\n        PurchaserMetaTxPacket purchaseToCreatorPacket,\\n        PurchaserMetaTxPacket purchaseToPlatformPacket,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Restricts calls to platform\\n     */\\n    modifier onlyPlatform() {\\n        require(_msgSender() == _platform, \\\"Not platform\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes MintManager\\n     * @param platform Platform address\\n     * @param _owner MintManager owner\\n     * @param trustedForwarder Trusted meta-tx executor\\n     * @param initialExecutor Initial platform executor\\n     */\\n    function initialize(\\n        address payable platform,\\n        address _owner,\\n        address trustedForwarder,\\n        address initialExecutor\\n    ) external initializer {\\n        _platform = platform;\\n        __EIP721Upgradeable_initialize(\\\"MintManager\\\", \\\"1.0.0\\\");\\n        __ERC2771ContextUpgradeable__init__(trustedForwarder);\\n        __Ownable_init();\\n        _transferOwnership(_owner);\\n        _platformExecutors.add(initialExecutor);\\n    }\\n\\n    /**\\n     * @dev Add platform executor. Expected to be protected by a smart contract wallet.\\n     * @param _executor Platform executor to add\\n     */\\n    function addPlatformExecutor(address _executor) external onlyOwner {\\n        require(_executor != address(0), \\\"Cannot set to null address\\\");\\n        require(_platformExecutors.add(_executor), \\\"Already added\\\");\\n        emit PlatformExecutorChanged(_executor, true);\\n    }\\n\\n    /**\\n     * @dev Deprecate platform executor. Expected to be protected by a smart contract wallet.\\n     * @param _executor Platform executor to deprecate\\n     */\\n    function deprecatePlatformExecutor(address _executor) external onlyOwner {\\n        require(_platformExecutors.remove(_executor), \\\"Not deprecated\\\");\\n        emit PlatformExecutorChanged(_executor, false);\\n    }\\n\\n    /**\\n     * @dev Creates on-chain vector\\n     * @param _vector Vector to create\\n     * @param _vectorMutability Vector mutability\\n     * @param editionId Edition id of vector, meaningful if vector is for Editions collection\\n     */\\n    function createVector(\\n        Vector calldata _vector,\\n        VectorMutability calldata _vectorMutability,\\n        uint256 editionId\\n    ) external {\\n        require(Ownable(_vector.contractAddress).owner() == _msgSender(), \\\"Not contract owner\\\");\\n        require(_vector.totalClaimedViaVector == 0, \\\"totalClaimedViaVector not 0\\\");\\n\\n        _vectorSupply++;\\n        vectors[_vectorSupply] = _vector;\\n        vectorMutabilities[_vectorSupply] = _vectorMutability;\\n        vectorToEditionId[_vectorSupply] = editionId;\\n\\n        emit VectorCreated(_vectorSupply, editionId, _vector);\\n    }\\n\\n    /**\\n     * @dev Updates on-chain vector\\n     * @param vectorId ID of vector to update\\n     * @param _newVector New vector details\\n     */\\n    function updateVector(uint256 vectorId, Vector calldata _newVector) external {\\n        Vector memory _oldVector = vectors[vectorId];\\n        require(vectorMutabilities[vectorId].updatesFrozen == 0, \\\"Updates frozen\\\");\\n        require(_oldVector.totalClaimedViaVector == _newVector.totalClaimedViaVector, \\\"Total claimed different\\\");\\n        require(Ownable(_oldVector.contractAddress).owner() == _msgSender(), \\\"Not contract owner\\\");\\n\\n        vectors[vectorId] = _newVector;\\n\\n        emit VectorUpdated(vectorId, _newVector);\\n    }\\n\\n    /**\\n     * @dev Deletes on-chain vector\\n     * @param vectorId ID of vector to delete\\n     */\\n    function deleteVector(uint256 vectorId) external {\\n        Vector memory _oldVector = vectors[vectorId];\\n        require(vectorMutabilities[vectorId].deleteFrozen == 0, \\\"Delete frozen\\\");\\n        require(Ownable(_oldVector.contractAddress).owner() == _msgSender(), \\\"Not contract owner\\\");\\n\\n        delete vectors[vectorId];\\n        delete vectorMutabilities[vectorId];\\n        delete vectorToEditionId[_vectorSupply];\\n\\n        emit VectorDeleted(vectorId);\\n    }\\n\\n    /**\\n     * @dev Pauses on-chain vector\\n     * @param vectorId ID of vector to pause\\n     */\\n    function pauseVector(uint256 vectorId) external {\\n        Vector memory _oldVector = vectors[vectorId];\\n        require(vectorMutabilities[vectorId].pausesFrozen == 0, \\\"Pauses frozen\\\");\\n        require(Ownable(_oldVector.contractAddress).owner() == _msgSender(), \\\"Not contract owner\\\");\\n\\n        vectors[vectorId].paused = 1;\\n\\n        emit VectorPausedOrUnpaused(vectorId, 1);\\n    }\\n\\n    /**\\n     * @dev Unpauses on-chain vector\\n     * @param vectorId ID of vector to unpause\\n     */\\n    function unpauseVector(uint256 vectorId) external {\\n        Vector memory _oldVector = vectors[vectorId];\\n        require(Ownable(_oldVector.contractAddress).owner() == _msgSender(), \\\"Not contract owner\\\");\\n\\n        vectors[vectorId].paused = 0;\\n\\n        emit VectorPausedOrUnpaused(vectorId, 0);\\n    }\\n\\n    /**\\n     * @dev Updates on-chain vector mutability. Protected by vector mutability field updatesFrozen itself\\n     * @param vectorId ID of vector mutability to update\\n     * @param _newVectorMutability New vector mutability details\\n     */\\n    function updateVectorMutability(uint256 vectorId, VectorMutability calldata _newVectorMutability) external {\\n        require(vectorMutabilities[vectorId].updatesFrozen == 0, \\\"Updates frozen\\\");\\n        require(Ownable(vectors[vectorId].contractAddress).owner() == _msgSender(), \\\"Not contract owner\\\");\\n\\n        vectorMutabilities[vectorId] = _newVectorMutability;\\n\\n        emit VectorMutabilityUpdated(vectorId, _newVectorMutability);\\n    }\\n\\n    /**\\n     * @dev Mint on vector pointing to ERC721General collection\\n     * @param vectorId ID of vector\\n     * @param numTokensToMint Number of tokens to mint\\n     * @param mintRecipient Who to mint the NFT(s) to\\n     */\\n    function vectorMintGeneral721(\\n        uint256 vectorId,\\n        uint64 numTokensToMint,\\n        address mintRecipient\\n    ) external payable {\\n        address msgSender = _msgSender();\\n\\n        require(msgSender == tx.origin, \\\"Smart contracts not allowed\\\");\\n\\n        Vector memory _vector = vectors[vectorId];\\n        uint64 newNumClaimedViaVector = _vector.totalClaimedViaVector + numTokensToMint;\\n        uint64 newNumClaimedForUser = userClaims[vectorId][msgSender] + numTokensToMint;\\n\\n        require(_vector.allowlistRoot == 0, \\\"Use allowlist mint\\\");\\n\\n        _vectorMintGeneral721(\\n            vectorId,\\n            _vector,\\n            numTokensToMint,\\n            mintRecipient,\\n            newNumClaimedViaVector,\\n            newNumClaimedForUser\\n        );\\n\\n        vectors[vectorId].totalClaimedViaVector = newNumClaimedViaVector;\\n        userClaims[vectorId][msgSender] = newNumClaimedForUser;\\n    }\\n\\n    /**\\n     * @dev Mint on vector pointing to ERC721General collection, with allowlist\\n     * @param vectorId ID of vector\\n     * @param numTokensToMint Number of tokens to mint\\n     * @param mintRecipient Who to mint the NFT(s) to\\n     * @param proof Proof of minter's inclusion in allowlist\\n     */\\n    function vectorMintGeneral721WithAllowlist(\\n        uint256 vectorId,\\n        uint64 numTokensToMint,\\n        address mintRecipient,\\n        bytes32[] calldata proof\\n    ) external payable {\\n        address msgSender = _msgSender();\\n\\n        require(msgSender == tx.origin, \\\"Smart contracts not allowed\\\");\\n\\n        Vector memory _vector = vectors[vectorId];\\n        uint64 newNumClaimedViaVector = _vector.totalClaimedViaVector + numTokensToMint;\\n        uint64 newNumClaimedForUser = userClaims[vectorId][msgSender] + numTokensToMint;\\n\\n        // merkle tree allowlist validation\\n        bytes32 leaf = keccak256(abi.encodePacked(msgSender));\\n        require(MerkleProof.verify(proof, _vector.allowlistRoot, leaf), \\\"Invalid proof\\\");\\n\\n        _vectorMintGeneral721(\\n            vectorId,\\n            _vector,\\n            numTokensToMint,\\n            mintRecipient,\\n            newNumClaimedViaVector,\\n            newNumClaimedForUser\\n        );\\n\\n        vectors[vectorId].totalClaimedViaVector = newNumClaimedViaVector;\\n        userClaims[vectorId][msgSender] = newNumClaimedForUser;\\n    }\\n\\n    /**\\n     * @dev Mint on am ERC721General collection with a valid claim\\n     * @param claim Claim\\n     * @param claimSignature Signed + encoded claim\\n     * @param mintRecipient Who to mint the NFT(s) to\\n     */\\n    function gatedMintGeneral721(\\n        Claim calldata claim,\\n        bytes calldata claimSignature,\\n        address mintRecipient\\n    ) external payable {\\n        _processGatedMintClaim(claim, claimSignature);\\n        // mint NFT(s)\\n        if (claim.numTokensToMint == 1) {\\n            IERC721GeneralMint(claim.contractAddress).mintOneToOneRecipient(mintRecipient);\\n        } else {\\n            IERC721GeneralMint(claim.contractAddress).mintAmountToOneRecipient(mintRecipient, claim.numTokensToMint);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint on am ERC721General collection with a valid claim, using meta-tx packets\\n     * @param claim Claim\\n     * @param claimSignature Signed + encoded claim\\n     * @param mintRecipient Who to mint the NFT(s) to\\n     */\\n    function gatedMintPaymentPacketGeneral721(\\n        ClaimWithMetaTxPacket calldata claim,\\n        bytes calldata claimSignature,\\n        address mintRecipient\\n    ) external {\\n        address msgSender = _msgSender();\\n\\n        _verifyAndUpdateClaimWithMetaTxPacket(claim, claimSignature, msgSender);\\n\\n        require(claim.currency != address(0), \\\"Not ERC20 payment\\\");\\n\\n        // make payments\\n        if (claim.pricePerToken > 0) {\\n            _processERC20PaymentWithMetaTxPackets(\\n                claim.currency,\\n                claim.purchaseToCreatorPacket,\\n                claim.purchaseToPlatformPacket,\\n                msgSender,\\n                claim.offchainVectorId,\\n                claim.pricePerToken * claim.numTokensToMint\\n            );\\n        }\\n\\n        // mint NFT(s)\\n        if (claim.numTokensToMint == 1) {\\n            IERC721GeneralMint(claim.contractAddress).mintOneToOneRecipient(mintRecipient);\\n        } else {\\n            IERC721GeneralMint(claim.contractAddress).mintAmountToOneRecipient(mintRecipient, claim.numTokensToMint);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint on vector pointing to ERC721Editions or ERC721SingleEdiion collection\\n     * @param vectorId ID of vector\\n     * @param numTokensToMint Number of tokens to mint\\n     * @param mintRecipient Who to mint the NFT(s) to\\n     */\\n    function vectorMintEdition721(\\n        uint256 vectorId,\\n        uint64 numTokensToMint,\\n        address mintRecipient\\n    ) external payable {\\n        address msgSender = _msgSender();\\n\\n        require(msgSender == tx.origin, \\\"Smart contracts not allowed\\\");\\n\\n        Vector memory _vector = vectors[vectorId];\\n        uint64 newNumClaimedViaVector = _vector.totalClaimedViaVector + numTokensToMint;\\n        uint64 newNumClaimedForUser = userClaims[vectorId][msgSender] + numTokensToMint;\\n\\n        require(_vector.allowlistRoot == 0, \\\"Use allowlist mint\\\");\\n\\n        _vectorMintEdition721(\\n            vectorId,\\n            _vector,\\n            vectorToEditionId[vectorId],\\n            numTokensToMint,\\n            mintRecipient,\\n            newNumClaimedViaVector,\\n            newNumClaimedForUser\\n        );\\n\\n        vectors[vectorId].totalClaimedViaVector = newNumClaimedViaVector;\\n        userClaims[vectorId][msgSender] = newNumClaimedForUser;\\n    }\\n\\n    /**\\n     * @dev Mint on vector pointing to ERC721Editions or ERC721SingleEdiion collection, with allowlist\\n     * @param vectorId ID of vector\\n     * @param numTokensToMint Number of tokens to mint\\n     * @param mintRecipient Who to mint the NFT(s) to\\n     * @param proof Proof of minter's inclusion in allowlist\\n     */\\n    function vectorMintEdition721WithAllowlist(\\n        uint256 vectorId,\\n        uint64 numTokensToMint,\\n        address mintRecipient,\\n        bytes32[] calldata proof\\n    ) external payable {\\n        address msgSender = _msgSender();\\n\\n        require(msgSender == tx.origin, \\\"Smart contracts not allowed\\\");\\n\\n        Vector memory _vector = vectors[vectorId];\\n        uint64 newNumClaimedViaVector = _vector.totalClaimedViaVector + numTokensToMint;\\n        uint64 newNumClaimedForUser = userClaims[vectorId][msgSender] + numTokensToMint;\\n\\n        // merkle tree allowlist validation\\n        bytes32 leaf = keccak256(abi.encodePacked(msgSender));\\n        require(MerkleProof.verify(proof, _vector.allowlistRoot, leaf), \\\"Invalid proof\\\");\\n\\n        _vectorMintEdition721(\\n            vectorId,\\n            _vector,\\n            vectorToEditionId[vectorId],\\n            numTokensToMint,\\n            mintRecipient,\\n            newNumClaimedViaVector,\\n            newNumClaimedForUser\\n        );\\n\\n        vectors[vectorId].totalClaimedViaVector = newNumClaimedViaVector;\\n        userClaims[vectorId][msgSender] = newNumClaimedForUser;\\n    }\\n\\n    /**\\n     * @dev Mint on an ERC721Editions or ERC721SingleEdiion collection with a valid claim\\n     * @param _claim Claim\\n     * @param _signature Signed + encoded claim\\n     * @param _recipient Who to mint the NFT(s) to\\n     */\\n    function gatedMintEdition721(\\n        Claim calldata _claim,\\n        bytes calldata _signature,\\n        address _recipient\\n    ) external payable {\\n        _processGatedMintClaim(_claim, _signature);\\n        // mint NFT(s)\\n        if (_claim.numTokensToMint == 1) {\\n            IERC721EditionMint(_claim.contractAddress).mintOneToRecipient(_claim.editionId, _recipient);\\n        } else {\\n            IERC721EditionMint(_claim.contractAddress).mintAmountToRecipient(\\n                _claim.editionId,\\n                _recipient,\\n                _claim.numTokensToMint\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint on an ERC721Editions or ERC721SingleEdiion collection with a valid claim, using meta-tx packets\\n     * @param claim Claim\\n     * @param claimSignature Signed + encoded claim\\n     * @param mintRecipient Who to mint the NFT(s) to\\n     */\\n    function gatedMintPaymentPacketEdition721(\\n        ClaimWithMetaTxPacket calldata claim,\\n        bytes calldata claimSignature,\\n        address mintRecipient\\n    ) external {\\n        address msgSender = _msgSender();\\n\\n        _verifyAndUpdateClaimWithMetaTxPacket(claim, claimSignature, msgSender);\\n\\n        require(claim.currency != address(0), \\\"Has to be ERC20 payment\\\");\\n\\n        // make payments\\n        if (claim.pricePerToken > 0) {\\n            _processERC20PaymentWithMetaTxPackets(\\n                claim.currency,\\n                claim.purchaseToCreatorPacket,\\n                claim.purchaseToPlatformPacket,\\n                msgSender,\\n                claim.offchainVectorId,\\n                claim.pricePerToken * claim.numTokensToMint\\n            );\\n        }\\n\\n        // mint NFT(s)\\n        if (claim.numTokensToMint == 1) {\\n            IERC721EditionMint(claim.contractAddress).mintOneToRecipient(claim.editionId, mintRecipient);\\n        } else {\\n            IERC721EditionMint(claim.contractAddress).mintAmountToRecipient(\\n                claim.editionId,\\n                mintRecipient,\\n                claim.numTokensToMint\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw native gas token owed to platform\\n     */\\n    function withdrawNativeGasToken() external onlyPlatform {\\n        uint256 withdrawnValue = address(this).balance;\\n        (bool sentToPlatform, bytes memory dataPlatform) = _platform.call{ value: withdrawnValue }(\\\"\\\");\\n        require(sentToPlatform, \\\"Failed to send Ether to platform\\\");\\n\\n        emit NativeGasTokenWithdrawn(withdrawnValue);\\n    }\\n\\n    /**\\n     * @dev Returns platform executors\\n     */\\n    function platformExecutors() external view returns (address[] memory) {\\n        return _platformExecutors.values();\\n    }\\n\\n    /**\\n     * @dev Returns claim ids used for an offchain vector\\n     * @param vectorId ID of offchain vector\\n     */\\n    function getClaimNoncesUsedForOffchainVector(bytes32 vectorId) external view returns (bytes32[] memory) {\\n        return _offchainVectorsToNoncesUsed[vectorId].values();\\n    }\\n\\n    /**\\n     * @dev Returns number of NFTs minted by user on vector\\n     * @param vectorId ID of offchain vector\\n     * @param user Minting user\\n     */\\n    function getNumClaimedPerUserOffchainVector(bytes32 vectorId, address user) external view returns (uint256) {\\n        return offchainVectorsClaimState[vectorId].numClaimedPerUser[user];\\n    }\\n\\n    /**\\n     * @dev Verify that claim and claim signature are valid for a mint\\n     * @param claim Claim\\n     * @param signature Signed + encoded claim\\n     * @param expectedMsgSender Expected claimer to verify claim for\\n     */\\n    function verifyClaim(\\n        Claim calldata claim,\\n        bytes calldata signature,\\n        address expectedMsgSender\\n    ) external view returns (bool) {\\n        address signer = _claimSigner(claim, signature);\\n        require(expectedMsgSender == claim.claimer, \\\"Sender not claimer\\\");\\n\\n        return\\n            _isPlatformExecutor(signer) &&\\n            !_offchainVectorsToNoncesUsed[claim.offchainVectorId].contains(claim.claimNonce) &&\\n            block.timestamp <= claim.claimExpiryTimestamp &&\\n            (claim.maxClaimableViaVector == 0 ||\\n                claim.numTokensToMint + offchainVectorsClaimState[claim.offchainVectorId].numClaimed <=\\n                claim.maxClaimableViaVector) &&\\n            (claim.maxClaimablePerUser == 0 ||\\n                claim.numTokensToMint +\\n                    offchainVectorsClaimState[claim.offchainVectorId].numClaimedPerUser[expectedMsgSender] <=\\n                claim.maxClaimablePerUser);\\n    }\\n\\n    /**\\n     * @dev Verify that claim and claim signature are valid for a mint (claim version with meta-tx packets)\\n     * @param claim Claim\\n     * @param signature Signed + encoded claim\\n     * @param expectedMsgSender Expected claimer to verify claim for\\n     */\\n    function verifyClaimWithMetaTxPacket(\\n        ClaimWithMetaTxPacket calldata claim,\\n        bytes calldata signature,\\n        address expectedMsgSender\\n    ) external view returns (bool) {\\n        address signer = _claimWithMetaTxPacketSigner(claim, signature);\\n        require(expectedMsgSender == claim.claimer, \\\"Sender not claimer\\\");\\n\\n        return\\n            _isPlatformExecutor(signer) &&\\n            !_offchainVectorsToNoncesUsed[claim.offchainVectorId].contains(claim.claimNonce) &&\\n            block.timestamp <= claim.claimExpiryTimestamp &&\\n            (claim.maxClaimableViaVector == 0 ||\\n                claim.numTokensToMint + offchainVectorsClaimState[claim.offchainVectorId].numClaimed <=\\n                claim.maxClaimableViaVector) &&\\n            (claim.maxClaimablePerUser == 0 ||\\n                claim.numTokensToMint +\\n                    offchainVectorsClaimState[claim.offchainVectorId].numClaimedPerUser[expectedMsgSender] <=\\n                claim.maxClaimablePerUser);\\n    }\\n\\n    /**\\n     * @dev Returns if nonce is used for the vector\\n     * @param vectorId ID of offchain vector\\n     * @param nonce Nonce being checked\\n     */\\n    function isNonceUsed(bytes32 vectorId, bytes32 nonce) external view returns (bool) {\\n        return _offchainVectorsToNoncesUsed[vectorId].contains(nonce);\\n    }\\n\\n    /* solhint-disable no-empty-blocks */\\n    /**\\n     * @dev Limit upgrades of contract to MintManager owner\\n     * @param // New implementation address\\n     */\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    /* solhint-enable no-empty-blocks */\\n\\n    /**\\n     * @dev Used for meta-transactions\\n     */\\n    function _msgSender()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    /**\\n     * @dev Used for meta-transactions\\n     */\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (bytes calldata) {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n\\n    /**\\n     * @dev Process, verify, and update the state of a gated mint claim\\n     * @param claim Claim\\n     * @param claimSignature Signed + encoded claim\\n     */\\n    function _processGatedMintClaim(Claim calldata claim, bytes calldata claimSignature) private {\\n        address msgSender = _msgSender();\\n\\n        _verifyAndUpdateClaim(claim, claimSignature, msgSender);\\n\\n        // make payments\\n        if (claim.currency == address(0) && claim.pricePerToken > 0) {\\n            // pay in native gas token\\n            uint256 amount = claim.numTokensToMint * claim.pricePerToken;\\n            _processNativeGasTokenPayment(amount, claim.paymentRecipient, claim.offchainVectorId);\\n        } else if (claim.pricePerToken > 0) {\\n            // pay in ERC20\\n            uint256 amount = claim.numTokensToMint * claim.pricePerToken;\\n            _processERC20Payment(amount, claim.paymentRecipient, msgSender, claim.currency, claim.offchainVectorId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Verify, and update the state of a gated mint claim\\n     * @param claim Claim\\n     * @param signature Signed + encoded claim\\n     * @param msgSender Expected claimer\\n     */\\n    function _verifyAndUpdateClaim(\\n        Claim calldata claim,\\n        bytes calldata signature,\\n        address msgSender\\n    ) private {\\n        address signer = _claimSigner(claim, signature);\\n        require(msgSender == claim.claimer, \\\"Sender not claimer\\\");\\n\\n        // cannot cache here due to nested mapping\\n        uint256 expectedNumClaimedViaVector = offchainVectorsClaimState[claim.offchainVectorId].numClaimed +\\n            claim.numTokensToMint;\\n        uint256 expectedNumClaimedByUser = offchainVectorsClaimState[claim.offchainVectorId].numClaimedPerUser[\\n            msgSender\\n        ] + claim.numTokensToMint;\\n\\n        require(\\n            _isPlatformExecutor(signer) &&\\n                !_offchainVectorsToNoncesUsed[claim.offchainVectorId].contains(claim.claimNonce) &&\\n                block.timestamp <= claim.claimExpiryTimestamp &&\\n                (expectedNumClaimedViaVector <= claim.maxClaimableViaVector || claim.maxClaimableViaVector == 0) &&\\n                (expectedNumClaimedByUser <= claim.maxClaimablePerUser || claim.maxClaimablePerUser == 0),\\n            \\\"Invalid claim\\\"\\n        );\\n\\n        _offchainVectorsToNoncesUsed[claim.offchainVectorId].add(claim.claimNonce); // mark claim nonce as used\\n        // update claim state\\n        offchainVectorsClaimState[claim.offchainVectorId].numClaimed = expectedNumClaimedViaVector;\\n        offchainVectorsClaimState[claim.offchainVectorId].numClaimedPerUser[msgSender] = expectedNumClaimedByUser;\\n    }\\n\\n    /**\\n     * @dev Verify, and update the state of a gated mint claim (version w/ meta-tx packets)\\n     * @param claim Claim\\n     * @param signature Signed + encoded claim\\n     * @param msgSender Expected claimer\\n     */\\n    function _verifyAndUpdateClaimWithMetaTxPacket(\\n        ClaimWithMetaTxPacket calldata claim,\\n        bytes calldata signature,\\n        address msgSender\\n    ) private {\\n        address signer = _claimWithMetaTxPacketSigner(claim, signature);\\n        require(msgSender == claim.claimer, \\\"Sender not claimer\\\");\\n\\n        // cannot cache here due to nested mapping\\n        uint256 expectedNumClaimedViaVector = offchainVectorsClaimState[claim.offchainVectorId].numClaimed +\\n            claim.numTokensToMint;\\n        uint256 expectedNumClaimedByUser = offchainVectorsClaimState[claim.offchainVectorId].numClaimedPerUser[\\n            msgSender\\n        ] + claim.numTokensToMint;\\n\\n        require(\\n            _isPlatformExecutor(signer) &&\\n                !_offchainVectorsToNoncesUsed[claim.offchainVectorId].contains(claim.claimNonce) &&\\n                block.timestamp <= claim.claimExpiryTimestamp &&\\n                (expectedNumClaimedViaVector <= claim.maxClaimableViaVector || claim.maxClaimableViaVector == 0) &&\\n                (expectedNumClaimedByUser <= claim.maxClaimablePerUser || claim.maxClaimablePerUser == 0),\\n            \\\"Invalid claim\\\"\\n        );\\n\\n        _offchainVectorsToNoncesUsed[claim.offchainVectorId].add(claim.claimNonce); // mark claim nonce as used\\n        // update claim state\\n        offchainVectorsClaimState[claim.offchainVectorId].numClaimed = expectedNumClaimedViaVector;\\n        offchainVectorsClaimState[claim.offchainVectorId].numClaimedPerUser[msgSender] = expectedNumClaimedByUser;\\n    }\\n\\n    /**\\n     * @dev Process a mint on an on-chain vector\\n     * @param _vectorId ID of vector being minted on\\n     * @param _vector Vector being minted on\\n     * @param numTokensToMint Number of NFTs to mint on vector\\n     * @param newNumClaimedViaVector New number of NFTs minted via vector after this ones\\n     * @param newNumClaimedForUser New number of NFTs minted by user via vector after this ones\\n     */\\n    function _processVectorMint(\\n        uint256 _vectorId,\\n        Vector memory _vector,\\n        uint64 numTokensToMint,\\n        uint256 newNumClaimedViaVector,\\n        uint256 newNumClaimedForUser\\n    ) private {\\n        require(\\n            _vector.maxTotalClaimableViaVector >= newNumClaimedViaVector || _vector.maxTotalClaimableViaVector == 0,\\n            \\\"> maxClaimableViaVector\\\"\\n        );\\n        require(\\n            _vector.maxUserClaimableViaVector >= newNumClaimedForUser || _vector.maxUserClaimableViaVector == 0,\\n            \\\"> maxClaimablePerUser\\\"\\n        );\\n        require(_vector.paused == 0, \\\"Vector paused\\\");\\n        require(\\n            (_vector.startTimestamp <= block.timestamp || _vector.startTimestamp == 0) &&\\n                (block.timestamp <= _vector.endTimestamp || _vector.endTimestamp == 0),\\n            \\\"Invalid mint time\\\"\\n        );\\n        require(numTokensToMint > 0, \\\"Have to mint something\\\");\\n        require(numTokensToMint <= _vector.tokenLimitPerTx, \\\"Too many per tx\\\");\\n\\n        if (_vector.currency == address(0) && _vector.pricePerToken > 0) {\\n            // pay in native gas token\\n            uint256 amount = numTokensToMint * _vector.pricePerToken;\\n            _processNativeGasTokenPayment(amount, _vector.paymentRecipient, bytes32(_vectorId));\\n        } else if (_vector.pricePerToken > 0) {\\n            // pay in ERC20\\n            uint256 amount = numTokensToMint * _vector.pricePerToken;\\n            _processERC20Payment(amount, _vector.paymentRecipient, _msgSender(), _vector.currency, bytes32(_vectorId));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint on vector pointing to ERC721General collection\\n     * @param _vectorId ID of vector\\n     * @param _vector Vector being minted on\\n     * @param numTokensToMint Number of tokens to mint\\n     * @param mintRecipient Who to mint the NFT(s) to\\n     * @param newNumClaimedViaVector New number of NFTs minted via vector after this ones\\n     * @param newNumClaimedForUser New number of NFTs minted by user via vector after this ones\\n     */\\n    function _vectorMintGeneral721(\\n        uint256 _vectorId,\\n        Vector memory _vector,\\n        uint64 numTokensToMint,\\n        address mintRecipient,\\n        uint256 newNumClaimedViaVector,\\n        uint256 newNumClaimedForUser\\n    ) private {\\n        _processVectorMint(_vectorId, _vector, numTokensToMint, newNumClaimedViaVector, newNumClaimedForUser);\\n        if (numTokensToMint == 1) {\\n            IERC721GeneralMint(_vector.contractAddress).mintOneToOneRecipient(mintRecipient);\\n        } else {\\n            IERC721GeneralMint(_vector.contractAddress).mintAmountToOneRecipient(mintRecipient, numTokensToMint);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint on vector pointing to ERC721Editions or ERC721SingleEdiion collection\\n     * @param _vectorId ID of vector\\n     * @param _vector Vector being minted on\\n     * @param editionId ID of edition being minted on\\n     * @param numTokensToMint Number of tokens to mint\\n     * @param mintRecipient Who to mint the NFT(s) to\\n     * @param newNumClaimedViaVector New number of NFTs minted via vector after this ones\\n     * @param newNumClaimedForUser New number of NFTs minted by user via vector after this ones\\n     */\\n    function _vectorMintEdition721(\\n        uint256 _vectorId,\\n        Vector memory _vector,\\n        uint256 editionId,\\n        uint64 numTokensToMint,\\n        address mintRecipient,\\n        uint256 newNumClaimedViaVector,\\n        uint256 newNumClaimedForUser\\n    ) private {\\n        _processVectorMint(_vectorId, _vector, numTokensToMint, newNumClaimedViaVector, newNumClaimedForUser);\\n        if (numTokensToMint == 1) {\\n            IERC721EditionMint(_vector.contractAddress).mintOneToRecipient(editionId, mintRecipient);\\n        } else {\\n            IERC721EditionMint(_vector.contractAddress).mintAmountToRecipient(\\n                editionId,\\n                mintRecipient,\\n                numTokensToMint\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Process payment in native gas token, sending to creator and platform\\n     * @param totalAmount Total amount being paid\\n     * @param recipient Creator recipient of payment\\n     * @param vectorId ID of vector (on-chain or off-chain)\\n     */\\n    function _processNativeGasTokenPayment(\\n        uint256 totalAmount,\\n        address payable recipient,\\n        bytes32 vectorId\\n    ) private {\\n        require(totalAmount == msg.value, \\\"Invalid amount\\\");\\n\\n        uint256 amountToCreator = (totalAmount * 95) / 100;\\n        (bool sentToRecipient, bytes memory dataRecipient) = recipient.call{ value: amountToCreator }(\\\"\\\");\\n        require(sentToRecipient, \\\"Failed to send Ether to recipient\\\");\\n\\n        emit NativeGasTokenPayment(recipient, vectorId, amountToCreator, 9500);\\n    }\\n\\n    /**\\n     * @dev Process payment in ERC20, sending to creator and platform\\n     * @param totalAmount Total amount being paid\\n     * @param recipient Creator recipient of payment\\n     * @param payer Payer\\n     * @param currency ERC20 currency\\n     * @param vectorId ID of vector (on-chain or off-chain)\\n     */\\n    function _processERC20Payment(\\n        uint256 totalAmount,\\n        address recipient,\\n        address payer,\\n        address currency,\\n        bytes32 vectorId\\n    ) private {\\n        uint256 amountToCreator = (totalAmount * 95) / 100;\\n\\n        IERC20(currency).transferFrom(payer, recipient, amountToCreator);\\n        IERC20(currency).transferFrom(payer, _platform, totalAmount - amountToCreator);\\n\\n        emit ERC20Payment(currency, recipient, vectorId, payer, amountToCreator, 9500);\\n    }\\n\\n    /**\\n     * @dev Process payment in ERC20 with meta-tx packets, sending to creator and platform\\n     * @param currency ERC20 currency\\n     * @param purchaseToCreatorPacket Meta-tx packet facilitating payment to creator recipient\\n     * @param purchaseToPlatformPacket Meta-tx packet facilitating payment to platform\\n     * @param msgSender Claimer\\n     * @param vectorId ID of vector (on-chain or off-chain)\\n     * @param amount Total amount paid\\n     */\\n    function _processERC20PaymentWithMetaTxPackets(\\n        address currency,\\n        PurchaserMetaTxPacket calldata purchaseToCreatorPacket,\\n        PurchaserMetaTxPacket calldata purchaseToPlatformPacket,\\n        address msgSender,\\n        bytes32 vectorId,\\n        uint256 amount\\n    ) private {\\n        uint256 previousBalance = IERC20(currency).balanceOf(msgSender);\\n        INativeMetaTransaction(currency).executeMetaTransaction(\\n            msgSender,\\n            purchaseToCreatorPacket.functionSignature,\\n            purchaseToCreatorPacket.sigR,\\n            purchaseToCreatorPacket.sigS,\\n            purchaseToCreatorPacket.sigV\\n        );\\n\\n        INativeMetaTransaction(currency).executeMetaTransaction(\\n            msgSender,\\n            purchaseToPlatformPacket.functionSignature,\\n            purchaseToPlatformPacket.sigR,\\n            purchaseToPlatformPacket.sigS,\\n            purchaseToPlatformPacket.sigV\\n        );\\n\\n        require(IERC20(currency).balanceOf(msgSender) <= previousBalance - amount, \\\"Invalid amount transacted\\\");\\n\\n        emit ERC20PaymentMetaTxPackets(\\n            currency,\\n            msgSender,\\n            vectorId,\\n            purchaseToCreatorPacket,\\n            purchaseToPlatformPacket,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Recover claim signature signer\\n     * @param claim Claim\\n     * @param signature Claim signature\\n     */\\n    function _claimSigner(Claim calldata claim, bytes calldata signature) private view returns (address) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(bytes.concat(_claimABIEncoded1(claim), _claimABIEncoded2(claim.offchainVectorId)))\\n            ).recover(signature);\\n    }\\n\\n    /**\\n     * @dev Recover claimWithMetaTxPacket signature signer\\n     * @param claim Claim\\n     * @param signature Claim signature\\n     */\\n    function _claimWithMetaTxPacketSigner(ClaimWithMetaTxPacket calldata claim, bytes calldata signature)\\n        private\\n        view\\n        returns (address)\\n    {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    bytes.concat(\\n                        _claimWithMetaTxABIEncoded1(claim),\\n                        _claimWithMetaTxABIEncoded2(claim.claimNonce, claim.offchainVectorId)\\n                    )\\n                )\\n            ).recover(signature);\\n    }\\n\\n    /**\\n     * @dev Returns true if account passed in is a platform executor\\n     * @param _executor Account being checked\\n     */\\n    function _isPlatformExecutor(address _executor) private view returns (bool) {\\n        return _platformExecutors.contains(_executor);\\n    }\\n\\n    /* solhint-disable max-line-length */\\n    /**\\n     * @dev Get claim typehash\\n     */\\n    function _getClaimTypeHash() private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                \\\"Claim(address currency,address contractAddress,address claimer,address paymentRecipient,uint256 pricePerToken,uint64 numTokensToMint,uint256 maxClaimableViaVector,uint256 maxClaimablePerUser,uint256 editionId,uint256 claimExpiryTimestamp,bytes32 claimNonce,bytes32 offchainVectorId)\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Get claimWithMetaTxPacket typehash\\n     */\\n    function _getClaimWithMetaTxPacketTypeHash() private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                \\\"ClaimWithMetaTxPacket(address currency,address contractAddress,address claimer,uint256 pricePerToken,uint64 numTokensToMint,PurchaserMetaTxPacket purchaseToCreatorPacket,PurchaserMetaTxPacket purchaseToPlatformPacket,uint256 maxClaimableViaVector,uint256 maxClaimablePerUser,uint256 editionId,uint256 claimExpiryTimestamp,bytes32 claimNonce,bytes32 offchainVectorId)\\\"\\n            );\\n    }\\n\\n    /* solhint-enable max-line-length */\\n\\n    /**\\n     * @dev Return abi-encoded claim part one\\n     * @param claim Claim\\n     */\\n    function _claimABIEncoded1(Claim calldata claim) private pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                _getClaimTypeHash(),\\n                claim.currency,\\n                claim.contractAddress,\\n                claim.claimer,\\n                claim.paymentRecipient,\\n                claim.pricePerToken,\\n                claim.numTokensToMint,\\n                claim.maxClaimableViaVector,\\n                claim.maxClaimablePerUser,\\n                claim.editionId,\\n                claim.claimExpiryTimestamp,\\n                claim.claimNonce\\n            );\\n    }\\n\\n    /**\\n     * @dev Return abi-encoded claim part two\\n     * @param offchainVectorId Offchain vector ID of claim\\n     */\\n    function _claimABIEncoded2(bytes32 offchainVectorId) private pure returns (bytes memory) {\\n        return abi.encode(offchainVectorId);\\n    }\\n\\n    /**\\n     * @dev Return abi-encoded claimWithMetaTxPacket part one\\n     * @param claim Claim\\n     */\\n    function _claimWithMetaTxABIEncoded1(ClaimWithMetaTxPacket calldata claim) private pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                _getClaimWithMetaTxPacketTypeHash(),\\n                claim.currency,\\n                claim.contractAddress,\\n                claim.claimer,\\n                claim.pricePerToken,\\n                claim.numTokensToMint,\\n                claim.purchaseToCreatorPacket,\\n                claim.purchaseToPlatformPacket,\\n                claim.maxClaimableViaVector,\\n                claim.maxClaimablePerUser,\\n                claim.editionId,\\n                claim.claimExpiryTimestamp\\n            );\\n    }\\n\\n    /**\\n     * @dev Return abi-encoded claimWithMetaTxPacket part two\\n     * @param claimNonce Claim's unique identifier\\n     * @param offchainVectorId Offchain vector ID of claim\\n     */\\n    function _claimWithMetaTxABIEncoded2(bytes32 claimNonce, bytes32 offchainVectorId)\\n        private\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encode(claimNonce, offchainVectorId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mint/interfaces/INativeMetaTransaction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title NativeMetaTransaction interface. Used by eg. wETH on Polygon\\n * @author ishan@highlight.xyz\\n */\\ninterface INativeMetaTransaction {\\n    /**\\n     * @dev Meta-transaction object\\n     * @param nonce Account nonce\\n     * @param from Account to be considered as sender\\n     * @param functionSignature Function to call on contract, with arguments encoded\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    /**\\n     * @dev Execute meta transaction on contract containing EIP-712 stuff natively\\n     * @param userAddress User to be considered as sender\\n     * @param functionSignature Function to call on contract, with arguments encoded\\n     * @param sigR Elliptic curve signature component\\n     * @param sigS Elliptic curve signature component\\n     * @param sigV Elliptic curve signature component\\n     */\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) external payable returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @author OpenZeppelin, modified by ishan@highlight.xyz to make compliant to upgradeable contracts\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\n/* solhint-disable */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private _CACHED_CHAIN_ID;\\n\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP721Upgradeable_initialize(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        /* solhint-disable max-line-length */\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        /* solhint-enable max-line-length */\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 name,\\n        bytes32 version\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, name, version, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/TestMintManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../mint/MintManager.sol\\\";\\n\\n/**\\n * @author ishan@highlight.xyz\\n * @dev Mock MintManager\\n */\\ncontract TestMintManager is MintManager {\\n    /**\\n     * @dev Test function to test upgrades\\n     */\\n    function test() external pure returns (string memory) {\\n        return \\\"test\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mint/PermissionsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IPermissionsRegistry.sol\\\";\\nimport \\\"../utils/ERC165/ERC165.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title Highlight permissions registry\\n * @author ishan@highlight.xyz, sarib@highlight.xyz\\n * @dev Allows for O(1) swapping of the platform executor.\\n */\\ncontract PermissionsRegistry is IPermissionsRegistry, Ownable, ERC165 {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    /**\\n     * @dev Whitelisted currencies for system\\n     */\\n    EnumerableSetUpgradeable.AddressSet internal _whitelistedCurrencies;\\n\\n    /**\\n     * @dev Platform transaction executors\\n     */\\n    EnumerableSetUpgradeable.AddressSet internal _platformExecutors;\\n\\n    /**\\n     * @notice Initialize the registry with an initial platform executor and the platform vault\\n     */\\n    constructor(address _initialExecutor, address _initialOwner) {\\n        _platformExecutors.add(_initialExecutor);\\n        _transferOwnership(_initialOwner);\\n    }\\n\\n    /**\\n     * @dev Add platform executor. Expected to be protected by a smart contract wallet.\\n     */\\n    function addPlatformExecutor(address _executor) external onlyOwner {\\n        require(_executor != address(0), \\\"Cannot set to null address\\\");\\n        require(_platformExecutors.add(_executor), \\\"Already added\\\");\\n        emit PlatformExecutorAdded(_executor);\\n    }\\n\\n    /**\\n     * @dev Deprecate the platform executor.\\n     */\\n    function deprecatePlatformExecutor(address _executor) external onlyOwner {\\n        require(_platformExecutors.remove(_executor), \\\"Not deprecated\\\");\\n        emit PlatformExecutorDeprecated(_executor);\\n    }\\n\\n    /**\\n     * @dev Whitelists a currency\\n     */\\n    function whitelistCurrency(address _currency) external onlyOwner {\\n        require(_whitelistedCurrencies.add(_currency), \\\"Already whitelisted\\\");\\n        emit CurrencyWhitelisted(_currency);\\n    }\\n\\n    /**\\n     * @dev Unwhitelists a currency\\n     */\\n    function unwhitelistCurrency(address _currency) external onlyOwner {\\n        require(_whitelistedCurrencies.remove(_currency), \\\"Not whitelisted\\\");\\n        emit CurrencyUnwhitelisted(_currency);\\n    }\\n\\n    /**\\n     * @dev Returns true if executor is a platform executor\\n     */\\n    function isPlatformExecutor(address _executor) external view returns (bool) {\\n        return _platformExecutors.contains(_executor);\\n    }\\n\\n    /**\\n     * @dev Returns platform executors\\n     */\\n    function platformExecutors() external view returns (address[] memory) {\\n        return _platformExecutors.values();\\n    }\\n\\n    /**\\n     * @dev Returns true if a currency is whitelisted\\n     */\\n    function isCurrencyWhitelisted(address _currency) external view returns (bool) {\\n        return _whitelistedCurrencies.contains(_currency);\\n    }\\n\\n    /**\\n     * @dev Returns whitelisted currencies\\n     */\\n    function whitelistedCurrencies() external view returns (address[] memory) {\\n        return _whitelistedCurrencies.values();\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\\n        return interfaceId == type(IPermissionsRegistry).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mint/interfaces/IPermissionsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Highlight permissions registry interface\\n * @author ishan@highlight.xyz, sarib@highlight.xyz\\n */\\ninterface IPermissionsRegistry {\\n    /**\\n     * @notice Emitted when a platform executor is added\\n     */\\n    event PlatformExecutorAdded(address indexed newExecutor);\\n\\n    /**\\n     * @notice Emitted when a platform executor is deprecated\\n     */\\n    event PlatformExecutorDeprecated(address indexed oldExecutor);\\n\\n    /**\\n     * @notice Emitted when a currrency is whitelisted system wide\\n     */\\n    event CurrencyWhitelisted(address indexed currency);\\n\\n    /**\\n     * @notice Emitted when a currrency is unwhitelisted system wide\\n     */\\n    event CurrencyUnwhitelisted(address indexed currency);\\n\\n    /**\\n     * @dev Swap the platform executor. Expected to be protected by a smart contract wallet.\\n     */\\n    function addPlatformExecutor(address _executor) external;\\n\\n    /**\\n     * @dev Deprecate the platform executor.\\n     */\\n    function deprecatePlatformExecutor(address _executor) external;\\n\\n    /**\\n     * @dev Whitelists a currency\\n     */\\n    function whitelistCurrency(address _currency) external;\\n\\n    /**\\n     * @dev Unwhitelists a currency\\n     */\\n    function unwhitelistCurrency(address _currency) external;\\n\\n    /**\\n     * @dev Returns true if executor is the platform executor\\n     */\\n    function isPlatformExecutor(address executor) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the platform executor\\n     */\\n    function platformExecutors() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns true if a currency is whitelisted\\n     */\\n    function isCurrencyWhitelisted(address _currency) external view returns (bool);\\n\\n    /**\\n     * @dev Returns whitelisted currencies\\n     */\\n    function whitelistedCurrencies() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC165/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC165/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/tokenManager/TransferAndBurnLockedTokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"./InterfaceSupportTokenManager.sol\\\";\\nimport \\\"./interfaces/IPostTransfer.sol\\\";\\nimport \\\"./interfaces/IPostBurn.sol\\\";\\n\\n/**\\n * @author ishan@highlight.xyz\\n * @dev A basic token manager / sample implementation that locks burns / transfers\\n */\\ncontract TransferAndBurnLockedTokenManager is ITokenManager, IPostTransfer, IPostBurn, InterfaceSupportTokenManager {\\n    /**\\n     * @dev See {ITokenManager-canUpdateMetadata}\\n     */\\n    function canUpdateMetadata(\\n        address sender,\\n        uint256, /* id */\\n        bytes calldata /* newTokenUri */\\n    ) external view override returns (bool) {\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n\\n    /**\\n     * @dev See {ITokenManager-canSwap}\\n     */\\n    function canSwap(\\n        address sender,\\n        uint256, /* id */\\n        address /* newTokenManager */\\n    ) external view override returns (bool) {\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n\\n    /**\\n     * @dev See {ITokenManager-canRemoveItself}\\n     */\\n    function canRemoveItself(\\n        address sender,\\n        uint256 /* id */\\n    ) external view override returns (bool) {\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n\\n    /**\\n     * @dev See {IPostTransfer-postSafeTransferFrom}\\n     */\\n    function postSafeTransferFrom(\\n        address, /* operator */\\n        address, /* from */\\n        address, /* to */\\n        uint256, /* id */\\n        bytes memory /* data */\\n    ) external pure override {\\n        revert(\\\"Transfers disallowed\\\");\\n    }\\n\\n    /**\\n     * @dev See {IPostTransfer-postTransferFrom}\\n     */\\n    function postTransferFrom(\\n        address, /* operator */\\n        address, /* from */\\n        address, /* to */\\n        uint256 /* id */\\n    ) external pure override {\\n        revert(\\\"Transfers disallowed\\\");\\n    }\\n\\n    /**\\n     * @dev See {IPostBurn-postBurn}\\n     */\\n    function postBurn(\\n        address, /* operator */\\n        address, /* sender */\\n        uint256 /* id */\\n    ) external pure override {\\n        revert(\\\"Burns disallowed\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(InterfaceSupportTokenManager)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IPostTransfer).interfaceId ||\\n            interfaceId == type(IPostBurn).interfaceId ||\\n            InterfaceSupportTokenManager.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenManager/InterfaceSupportTokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/ITokenManager.sol\\\";\\nimport \\\"../utils/ERC165/IERC165.sol\\\";\\n\\n/**\\n * @author ishan@highlight.xyz\\n * @dev Abstract contract to be inherited by all valid token managers\\n */\\nabstract contract InterfaceSupportTokenManager {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(ITokenManager).interfaceId || _supportsERC165Interface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Used to show support for IERC165, without inheriting contract from IERC165 implementations\\n     */\\n    function _supportsERC165Interface(bytes4 interfaceId) internal pure returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenManager/NonTransferableTokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"./InterfaceSupportTokenManager.sol\\\";\\nimport \\\"./interfaces/IPostTransfer.sol\\\";\\n\\n/**\\n * @author ishan@highlight.xyz\\n * @dev A basic token manager that prevents transfers\\n */\\ncontract NonTransferableTokenManager is ITokenManager, IPostTransfer, InterfaceSupportTokenManager {\\n    /**\\n     * @dev See {ITokenManager-canUpdateMetadata}\\n     */\\n    function canUpdateMetadata(\\n        address sender,\\n        uint256, /* id */\\n        bytes calldata /* newTokenUri */\\n    ) external view override returns (bool) {\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n\\n    /**\\n     * @dev See {ITokenManager-canSwap}\\n     */\\n    function canSwap(\\n        address sender,\\n        uint256, /* id */\\n        address /* newTokenManager */\\n    ) external view override returns (bool) {\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n\\n    /**\\n     * @dev See {ITokenManager-canRemoveItself}\\n     */\\n    function canRemoveItself(\\n        address sender,\\n        uint256 /* id */\\n    ) external view override returns (bool) {\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n\\n    /**\\n     * @dev See {IPostTransfer-postSafeTransferFrom}\\n     */\\n    function postSafeTransferFrom(\\n        address, /* operator */\\n        address, /* from */\\n        address, /* to */\\n        uint256, /* id */\\n        bytes memory /* data */\\n    ) external pure override {\\n        revert(\\\"Transfers disallowed\\\");\\n    }\\n\\n    /**\\n     * @dev See {IPostTransfer-postTransferFrom}\\n     */\\n    function postTransferFrom(\\n        address, /* operator */\\n        address, /* from */\\n        address, /* to */\\n        uint256 /* id */\\n    ) external pure override {\\n        revert(\\\"Transfers disallowed\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(InterfaceSupportTokenManager)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IPostTransfer).interfaceId ||\\n            InterfaceSupportTokenManager.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenManager/TotalLockedTokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"./InterfaceSupportTokenManager.sol\\\";\\n\\n/**\\n * @author ishan@highlight.xyz\\n * @dev A basic token manager / sample implementation that locks swaps / removals / metadata updates\\n */\\ncontract TotalLockedTokenManager is ITokenManager, InterfaceSupportTokenManager {\\n    /**\\n     * @dev See {ITokenManager-canUpdateMetadata}\\n     */\\n    function canUpdateMetadata(\\n        address, /* sender */\\n        uint256, /* id */\\n        bytes calldata /* newTokenUri */\\n    ) external pure override returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev See {ITokenManager-canSwap}\\n     */\\n    function canSwap(\\n        address, /* sender */\\n        uint256, /* id */\\n        address /* newTokenManager */\\n    ) external pure override returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev See {ITokenManager-canRemoveItself}\\n     */\\n    function canRemoveItself(\\n        address, /* sender */\\n        uint256 /* id */\\n    ) external pure override returns (bool) {\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenManager/OwnerOnlyTokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"./InterfaceSupportTokenManager.sol\\\";\\n\\n/**\\n * @author ishan@highlight.xyz\\n * @dev A basic token manager / sample implementation that only lets owner perform operations\\n */\\ncontract OwnerOnlyTokenManager is ITokenManager, InterfaceSupportTokenManager {\\n    /**\\n     * @dev See {ITokenManager-canUpdateMetadata}\\n     */\\n    function canUpdateMetadata(\\n        address sender,\\n        uint256, /* id */\\n        bytes calldata /* newTokenUri */\\n    ) external view override returns (bool) {\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n\\n    /**\\n     * @dev See {ITokenManager-canSwap}\\n     */\\n    function canSwap(\\n        address sender,\\n        uint256, /* id */\\n        address /* newTokenManager */\\n    ) external view override returns (bool) {\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n\\n    /**\\n     * @dev See {ITokenManager-canRemoveItself}\\n     */\\n    function canRemoveItself(\\n        address sender,\\n        uint256 /* id */\\n    ) external view override returns (bool) {\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenManager/LockedTokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"./InterfaceSupportTokenManager.sol\\\";\\n\\n/**\\n * @author ishan@highlight.xyz\\n * @dev A basic token manager / sample implementation that locks swaps / removals\\n */\\ncontract LockedTokenManager is ITokenManager, InterfaceSupportTokenManager {\\n    /**\\n     * @dev See {ITokenManager-canUpdateMetadata}\\n     */\\n    function canUpdateMetadata(\\n        address sender,\\n        uint256, /* id */\\n        bytes calldata /* newTokenUri */\\n    ) external view override returns (bool) {\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n\\n    /**\\n     * @dev See {ITokenManager-canSwap}\\n     */\\n    function canSwap(\\n        address, /* sender */\\n        uint256, /* id */\\n        address /* newTokenManager */\\n    ) external pure override returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev See {ITokenManager-canRemoveItself}\\n     */\\n    function canRemoveItself(\\n        address, /* sender */\\n        uint256 /* id */\\n    ) external pure override returns (bool) {\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../ERC165/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\n/* solhint-disable */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC721/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../ERC165/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\n/* solhint-disable */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\n/* solhint-disable */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC721/ERC721URIStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC721.sol\\\";\\n\\n/**\\n * @title Appending URI storage utilities onto template ERC721 contract\\n * @author ishan@highlight.xyz and OpenZeppelin\\n * @dev ERC721 token with storage based token URI management. OpenZeppelin template edited by Highlight\\n */\\n/* solhint-disable */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    /**\\n     * @dev Optional token-grouping mapping for uris. Edition IDs / Token IDs depending on implementing contract\\n     */\\n    mapping(uint256 => string) internal _tokenURIs;\\n\\n    /**\\n     * @dev Hashed rotation key data\\n     */\\n    bytes internal _hashedRotationKeyData;\\n\\n    /**\\n     * @dev Hashed base uri data\\n     */\\n    bytes internal _hashedBaseURIData;\\n\\n    /**\\n     * @dev Rotation key\\n     */\\n    uint256 internal _rotationKey;\\n\\n    // TODO: change to support multiple baseURIs per contract, and multiple nextTokenIds / supplies\\n    /**\\n     * @dev Contract baseURI\\n     */\\n    string public baseURI;\\n\\n    /**\\n     * @dev Set contract baseURI\\n     */\\n    function _setBaseURI(string calldata newBaseURI) internal {\\n        string memory currentBaseURI = _baseURI();\\n        require(bytes(currentBaseURI).length == 0, \\\"Already set\\\");\\n        require(bytes(newBaseURI).length > 0, \\\"Empty string\\\");\\n\\n        baseURI = newBaseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n\\n        // If there is no token URI, return the base URI.\\n        if (bytes(_tokenURI).length == 0) {\\n            return super.tokenURI(tokenId);\\n        }\\n\\n        return _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    // just remove the original function in ERC721\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/EthereumWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract EthereumWETH is ERC20, Ownable {\\n    constructor() ERC20(\\\"EthereumWETH\\\", \\\"EWETH\\\") {}\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/test/MaticWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * WETH on Polygon slightly modified by ishan at highlight.xyz for testing purposes and to compile w/ solidity 0.8.10\\n */\\n\\n/* solhint-disable */\\ncontract AccessControlMixin is AccessControl {\\n    string private _revertMsg;\\n\\n    function _setupContractId(string memory contractId) internal {\\n        _revertMsg = string(abi.encodePacked(contractId, \\\": INSUFFICIENT_PERMISSIONS\\\"));\\n    }\\n\\n    modifier only(bytes32 role) {\\n        require(hasRole(role, _msgSender()), _revertMsg);\\n        _;\\n    }\\n}\\n\\ninterface IChildToken {\\n    function deposit(address user, bytes calldata depositData) external;\\n}\\n\\ncontract EIP712Base is Initializable {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(bytes(\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"));\\n    bytes32 internal domainSeperator;\\n\\n    // supposed to be called once while initializing.\\n    // one of the contractsa that inherits this contract follows proxy pattern\\n    // so it is not possible to do this in a constructor\\n    function _initializeEIP712(string memory name, string memory version) internal initializer {\\n        _setDomainSeperator(name, version);\\n    }\\n\\n    function _setDomainSeperator(string memory name, string memory version) internal {\\n        domainSeperator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                address(this),\\n                bytes32(getChainId())\\n            )\\n        );\\n    }\\n\\n    function getDomainSeperator() public view returns (bytes32) {\\n        return domainSeperator;\\n    }\\n\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash));\\n    }\\n}\\n\\ncontract NativeMetaTransaction is EIP712Base {\\n    using SafeMath for uint256;\\n    bytes32 private constant META_TRANSACTION_TYPEHASH =\\n        keccak256(bytes(\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"));\\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\\n    mapping(address => uint256) nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) public payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(verify(userAddress, metaTx, sigR, sigS, sigV), \\\"Signer and signature do not match\\\");\\n\\n        // increase nonce for user (to avoid re-use)\\n        nonces[userAddress] = nonces[userAddress].add(1);\\n\\n        emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\\n\\n        // Append userAddress and relayer address at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\\n        require(success, \\\"Function call not successful\\\");\\n\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(META_TRANSACTION_TYPEHASH, metaTx.nonce, metaTx.from, keccak256(metaTx.functionSignature))\\n            );\\n    }\\n\\n    function getNonce(address user) public view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n        return signer == ecrecover(toTypedMessageHash(hashMetaTransaction(metaTx)), sigV, sigR, sigS);\\n    }\\n}\\n\\ncontract ChainConstants {\\n    string public constant ERC712_VERSION = \\\"1\\\";\\n\\n    uint256 public constant ROOT_CHAIN_ID = 1;\\n    bytes public constant ROOT_CHAIN_ID_BYTES = hex\\\"01\\\";\\n\\n    uint256 public constant CHILD_CHAIN_ID = 137;\\n    bytes public constant CHILD_CHAIN_ID_BYTES = hex\\\"89\\\";\\n}\\n\\nabstract contract ContextMixin {\\n    function msgSender() internal view returns (address sender) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n}\\n\\ncontract ChildERC20 is ERC20, IChildToken, AccessControlMixin, NativeMetaTransaction, ChainConstants, ContextMixin {\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address childChainManager\\n    ) public ERC20(name_, symbol_) {\\n        _setupContractId(\\\"ChildERC20\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(DEPOSITOR_ROLE, childChainManager);\\n        _initializeEIP712(name_, ERC712_VERSION);\\n        _mint(_msgSender(), 100000000000000000000); // initially mint 100 wETH to deployer\\n    }\\n\\n    function _msgSender() internal view override returns (address sender) {\\n        return ContextMixin.msgSender();\\n    }\\n\\n    /**\\n     * @notice called when token is deposited on root chain\\n     * @dev Should be callable only by ChildChainManager\\n     * Should handle deposit by minting the required amount for user\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom deposit is being done\\n     * @param depositData abi encoded amount\\n     */\\n    function deposit(address user, bytes calldata depositData) external override only(DEPOSITOR_ROLE) {\\n        uint256 amount = abi.decode(depositData, (uint256));\\n        _mint(user, amount);\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw tokens back to root chain\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n     * @param amount amount of tokens to withdraw\\n     */\\n    function withdraw(uint256 amount) external {\\n        _burn(_msgSender(), amount);\\n    }\\n}\\n\\ncontract MaticWETH is ChildERC20 {\\n    constructor(address childChainManager) public ChildERC20(\\\"Wrapped Ether\\\", \\\"WETH\\\", childChainManager) {}\\n}\\n\\n/* solhint-enable */\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC1967/ERC1967Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @title Appending ERC1967Proxy to use UUPS\\n * @author sarib@highlight.xyz and OpenZeppelin\\n * @dev Implements an upgradeable proxy. OpenZeppelin template edited by Highlight\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCallUUPS(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/metatx/MinimalForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (metatx/MinimalForwarder.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\n/**\\n * @dev Simple minimal forwarder to be used together with an ERC2771 compatible contract. See {ERC2771Context}.\\n */\\ncontract MinimalForwarder is EIP712 {\\n    using ECDSA for bytes32;\\n\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n    }\\n\\n    bytes32 private constant _TYPEHASH =\\n        keccak256(\\\"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)\\\");\\n\\n    mapping(address => uint256) private _nonces;\\n\\n    constructor() EIP712(\\\"MinimalForwarder\\\", \\\"0.0.1\\\") {}\\n\\n    function execute(ForwardRequest calldata req, bytes calldata signature)\\n        public\\n        payable\\n        returns (bool, bytes memory)\\n    {\\n        /* solhint-disable reason-string */\\n        require(verify(req, signature), \\\"MinimalForwarder: signature does not match request\\\");\\n        /* solhint-enable reason-string */\\n        _nonces[req.from] = req.nonce + 1;\\n\\n        /* solhint-disable avoid-low-level-calls */\\n        (bool success, bytes memory returndata) = req.to.call{ gas: req.gas, value: req.value }(\\n            abi.encodePacked(req.data, req.from)\\n        );\\n        /* solhint-enable avoid-low-level-calls */\\n\\n        require(success, string(returndata));\\n\\n        // Validate that the relayer has sent enough gas for the call.\\n        // See https://ronan.eth.link/blog/ethereum-gas-dangers/\\n        if (gasleft() <= req.gas / 63) {\\n            // We explicitly trigger invalid opcode to consume all gas and bubble-up the effects, since\\n            // neither revert or assert consume all gas since Solidity 0.8.0\\n            // https://docs.soliditylang.org/en/v0.8.0/control-structures.html#panic-via-assert-and-error-via-require\\n            /* solhint-disable no-inline-assembly */\\n            assembly {\\n                invalid()\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        }\\n\\n        return (success, returndata);\\n    }\\n\\n    function getNonce(address from) public view returns (uint256) {\\n        return _nonces[from];\\n    }\\n\\n    function verify(ForwardRequest calldata req, bytes calldata signature) public view returns (bool) {\\n        address signer = _hashTypedDataV4(\\n            keccak256(abi.encode(_TYPEHASH, req.from, req.to, req.value, req.gas, req.nonce, keccak256(req.data)))\\n        ).recover(signature);\\n        return _nonces[req.from] == req.nonce && signer == req.from;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC165/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\n/* solhint-disable */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/royaltyManager/InterfaceSupportRoyaltyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IRoyaltyManager.sol\\\";\\nimport \\\"../utils/ERC165/IERC165.sol\\\";\\n\\n/**\\n * @author ishan@highlight.xyz\\n * @dev Abstract contract to be inherited by all valid royalty managers\\n */\\nabstract contract InterfaceSupportRoyaltyManager {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IRoyaltyManager).interfaceId || _supportsERC165Interface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Used to show support for IERC165, without inheriting contract from IERC165 implementations\\n     * @param interfaceId Interface ID\\n     */\\n    function _supportsERC165Interface(bytes4 interfaceId) internal pure returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/royaltyManager/OwnerOnlyRoyaltyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"./InterfaceSupportRoyaltyManager.sol\\\";\\n\\n/**\\n * @author ishan@highlight.xyz\\n * @dev A basic royalty manager / sample implementation that only lets owner perform operations\\n */\\ncontract OwnerOnlyRoyaltyManager is IRoyaltyManager, InterfaceSupportRoyaltyManager {\\n    /**\\n     * @dev See {IRoyaltyManager-canSetGranularRoyalty}\\n     */\\n    function canSetGranularRoyalty(\\n        uint256, /* id */\\n        Royalty calldata, /* royalty */\\n        address sender\\n    ) external view override returns (bool) {\\n        // owner can set granular royalty (same as without royalty manager)\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n\\n    /**\\n     * @dev See {IRoyaltyManager-canSetDefaultRoyalty}\\n     */\\n    function canSetDefaultRoyalty(\\n        Royalty calldata, /* royalty */\\n        address sender\\n    ) external view override returns (bool) {\\n        // owner can set granular royalty (same as without royalty manager)\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n\\n    /**\\n     * @dev See {IRoyaltyManager-canSwap}\\n     */\\n    function canSwap(\\n        address, /* newRoyaltyManager */\\n        address sender\\n    ) external view override returns (bool) {\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n\\n    /**\\n     * @dev See {IRoyaltyManager-canRemoveItself}\\n     */\\n    function canRemoveItself(address sender) external view override returns (bool) {\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/royaltyManager/LockedRoyaltyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"./InterfaceSupportRoyaltyManager.sol\\\";\\n\\n/**\\n * @author ishan@highlight.xyz\\n * @dev A basic royalty manager / sample implementation that locks swaps / removals / setting of royalties\\n */\\ncontract LockedRoyaltyManager is IRoyaltyManager, InterfaceSupportRoyaltyManager {\\n    /**\\n     * @dev See {IRoyaltyManager-canSetGranularRoyalty}\\n     */\\n    function canSetGranularRoyalty(\\n        uint256, /* id */\\n        Royalty calldata, /* royalty */\\n        address /* sender */\\n    ) external pure override returns (bool) {\\n        // owner can set granular royalty (same as without royalty manager)\\n        return false;\\n    }\\n\\n    /**\\n     * @dev See {IRoyaltyManager-canSetDefaultRoyalty}\\n     */\\n    function canSetDefaultRoyalty(\\n        Royalty calldata, /* royalty */\\n        address /* sender */\\n    ) external pure override returns (bool) {\\n        // owner can set granular royalty (same as without royalty manager)\\n        return false;\\n    }\\n\\n    /**\\n     * @dev See {IRoyaltyManager-canSwap}\\n     */\\n    function canSwap(\\n        address, /* newRoyaltyManager */\\n        address /* sender */\\n    ) external pure override returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev See {IRoyaltyManager-canRemoveItself}\\n     */\\n    function canRemoveItself(\\n        address /* sender */\\n    ) external pure override returns (bool) {\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/royaltyManager/test/InvalidRoyaltyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IRoyaltyManager.sol\\\";\\nimport \\\"../../utils/Ownable.sol\\\";\\n\\n/**\\n * @author ishan@highlight.xyz\\n * @dev A basic royalty manager / sample implementation that locks swaps / removals, \\n        but doesn't implement supportsInterface\\n */\\ncontract InvalidRoyaltyManager is IRoyaltyManager {\\n    /**\\n     * @dev See {IRoyaltyManager-canSetGranularRoyalty}\\n     */\\n    function canSetGranularRoyalty(\\n        uint256, /* id */\\n        Royalty calldata, /* royalty */\\n        address sender\\n    ) external view override returns (bool) {\\n        // owner can set granular royalty (same as without royalty manager)\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n\\n    /**\\n     * @dev See {IRoyaltyManager-canSetDefaultRoyalty}\\n     */\\n    function canSetDefaultRoyalty(\\n        Royalty calldata, /* royalty */\\n        address sender\\n    ) external view override returns (bool) {\\n        // owner can set granular royalty (same as without royalty manager)\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n\\n    /**\\n     * @dev See {IRoyaltyManager-canSwap}\\n     */\\n    function canSwap(\\n        address, /* newRoyaltyManager */\\n        address /* sender */\\n    ) external pure override returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev See {IRoyaltyManager-canRemoveItself}\\n     */\\n    function canRemoveItself(\\n        address /* sender */\\n    ) external pure override returns (bool) {\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenManager/test/InvalidTokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\nimport \\\"../../utils/Ownable.sol\\\";\\n\\n/**\\n * @author ishan@highlight.xyz\\n * @dev A basic token manager / sample implementation that locks swaps / removals, \\n        but doesn't implement supportsInterface\\n */\\ncontract InvalidTokenManager is ITokenManager {\\n    /**\\n     * @dev See {ITokenManager-canUpdateMetadata}\\n     */\\n    function canUpdateMetadata(\\n        address sender,\\n        uint256, /* id */\\n        bytes calldata /* newTokenUri */\\n    ) external view override returns (bool) {\\n        return Ownable(msg.sender).owner() == sender;\\n    }\\n\\n    /**\\n     * @dev See {ITokenManager-canSwap}\\n     */\\n    function canSwap(\\n        address, /* sender */\\n        uint256, /* id */\\n        address /* newTokenManager */\\n    ) external pure override returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev See {ITokenManager-canRemoveItself}\\n     */\\n    function canRemoveItself(\\n        address, /* sender */\\n        uint256 /* id */\\n    ) external pure override returns (bool) {\\n        return false;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mintManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_editionsMetadataRendererAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc721EditionsImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc721SingleEditionImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc721GeneralImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"editionsMetadataRendererAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721EditionsImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721GeneralImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721SingleEditionImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"predictERC721EditionCollectionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"predictERC721GeneralCollectionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"predictERC721SingleEditionCollectionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royaltyPercentageBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct IRoyaltyManager.Royalty\",\"name\":\"_defaultRoyalty\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_defaultTokenManager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"setupERC721EditionCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royaltyPercentageBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct IRoyaltyManager.Royalty\",\"name\":\"_defaultRoyalty\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_defaultTokenManager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attributes\",\"type\":\"string\"}],\"internalType\":\"struct IEditionsMetadataRenderer.TokenEditionInfo\",\"name\":\"_editionInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"setupERC721EditionCollectionWithEdition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royaltyPercentageBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct IRoyaltyManager.Royalty\",\"name\":\"_defaultRoyalty\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_defaultTokenManager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"limitSupply\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"setupERC721GeneralCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royaltyPercentageBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct IRoyaltyManager.Royalty\",\"name\":\"_defaultRoyalty\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_defaultTokenManager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attributes\",\"type\":\"string\"}],\"internalType\":\"struct IEditionsMetadataRenderer.TokenEditionInfo\",\"name\":\"_editionInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"setupERC721SingleEditionCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CollectionFactory", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007ab179690168f06d4f897a6c0b749c1524f4c7720000000000000000000000001bf979282181f2b7a640d17ab5d2e25125f2de5e0000000000000000000000006dc049e267f78ef06b83954f557a205366d4569100000000000000000000000021fed85e54507164fd6c9eb76870aff41098106b000000000000000000000000e019ff8033d9c761985a3ee1fa5d97cc9cf6d5c0000000000000000000000000a1cef877695e24df6643f5b6b47eb6fcef214a38", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "none"}]}