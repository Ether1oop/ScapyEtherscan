{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Operator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./lib/TransferHelper.sol\\\";\\nimport \\\"./FundsBasic.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract Operator is Ownable, FundsBasic {\\n    using TransferHelper for address;\\n\\n    event FlipRunning(bool _prev, bool _curr);\\n    event SwapFeeTo(address _prev, address _curr);\\n    event GasFeeTo(address _prev, address _curr);\\n    event SetWhitelist(address _addr, bool _isWhitelist);\\n    event FundsProvider(address _prev, address _curr);\\n\\n    event Swap(\\n        bytes id,\\n        bytes uniqueId,\\n        ACTION action,\\n        address srcToken,\\n        address dstToken,\\n        address tokenFrom,\\n        address tokenTo,\\n        uint256 retAmt,\\n        uint256 srcAmt,\\n        uint256 feeAmt\\n    );\\n\\n    // 1inch router address: 0x1111111254fb6c44bAC0beD2854e76F90643097d\\n    address public immutable oneInchRouter;\\n\\n    // USDT intermediate token\\n    address public immutable imToken;\\n\\n    // swap fee will tranfer to this address, provided by Finance Team\\n    address public swapFeeTo;\\n\\n    // used for cross swap, provided by Finance Team\\n    address public gasFeeTo;\\n\\n    // used for cross swap, this is a usdt vault\\n    address public getFundsProvider;\\n\\n    // running or pause, false by default\\n    bool public isRunning;\\n\\n    // used for cross swap, provided by Wallet Team\\n    mapping(address => bool) public whitelist;\\n\\n    // used for emit event\\n    enum ACTION {\\n        // swap in a specific blockchain\\n        INNER_SWAP,\\n        // swap for cross chain scenario, this is the first step, transfer token from EOA to FundsProvider\\n        CROSS_FIRST,\\n        // swap for cross chain scenario, this is the second step, transfer token from FundsProvider to EOA\\n        CROSS_SECOND\\n    }\\n\\n    // ACCESS CONTROL\\n    modifier onlyRunning() {\\n        require(isRunning, \\\"not running!\\\");\\n        _;\\n    }\\n\\n    modifier onlyEOA() {\\n        require(_msgSender() == tx.origin, \\\"not an eoa!\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhitelist() {\\n        require(whitelist[_msgSender()], \\\"not in whitelist!\\\");\\n        _;\\n    }\\n\\n    // @notice this is the function we call 1inch\\n    // function swap( IAggregationExecutor caller, SwapDescription calldata desc, bytes calldata data ) external payable returns ( uint256 returnAmount, uint256 spentAmount, uint256 gasLeft )\\n    // ONEINCH_SELECTOR = bytes4(keccak256(bytes(\\\"swap(address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes)\\\")));\\n    bytes4 private constant ONEINCH_SELECTOR = 0x7c025200;\\n\\n    constructor(\\n        address _oneInchRouter,\\n        address _imToken,\\n        address _fundsProvider,\\n        address payable _swapFeeTo,\\n        address payable _gasFeeTo\\n    ) {\\n        oneInchRouter = _oneInchRouter;\\n        imToken = _imToken;\\n        getFundsProvider = _fundsProvider;\\n        swapFeeTo = _swapFeeTo;\\n        gasFeeTo = _gasFeeTo;\\n\\n        emit FundsProvider(address(0), getFundsProvider);\\n        emit SwapFeeTo(address(0), swapFeeTo);\\n        emit GasFeeTo(address(0), gasFeeTo);\\n    }\\n\\n    /**\\n     * @notice swap for inner swap, will be called by user EOA, no access limitation\\n     * @param _id id\\n     * @param _uniqueId used for cross chain\\n     * @param _swapFeeAmt fee changed by us\\n     * @param _data data provided by 1inch api\\n     */\\n    function doSwap(\\n        bytes memory _id,\\n        bytes memory _uniqueId,\\n        uint256 _swapFeeAmt,\\n        bytes calldata _data\\n    ) external payable onlyRunning onlyEOA {\\n        _swap(_id, _uniqueId, _msgSender(), swapFeeTo, _swapFeeAmt, _data);\\n    }\\n\\n    /**\\n     * @notice when usdt as src token to do cross swap\\n     * @param _id id\\n     * @param _uniqueId used for cross chain\\n     * @param _amt swap amount\\n     * @param _swapFeeAmt fee changed by us\\n     */\\n    function fromUCross(\\n        bytes memory _id,\\n        bytes memory _uniqueId,\\n        uint256 _amt,\\n        uint256 _swapFeeAmt\\n    ) external onlyRunning onlyEOA {\\n        require(_amt > 0, \\\"invalid amt!\\\");\\n        address(imToken).safeTransferFrom(_msgSender(), getFundsProvider, _amt);\\n\\n        if (_swapFeeAmt > 0) {\\n            address(imToken).safeTransferFrom(\\n                _msgSender(),\\n                swapFeeTo,\\n                _swapFeeAmt\\n            );\\n        }\\n\\n        emit Swap(\\n            _id,\\n            _uniqueId,\\n            ACTION.CROSS_FIRST,\\n            address(imToken),\\n            address(imToken),\\n            _msgSender(),\\n            getFundsProvider,\\n            _amt,\\n            _amt,\\n            _swapFeeAmt\\n        );\\n    }\\n\\n    /**\\n     * @notice for cross chain swap, can only be called by bybit special EOA\\n     * @param _id id\\n     * @param _uniqueId used for cross chain\\n     * @param _gasFeeAmt usdt fee changed by us\\n     * @param _data data provided by 1inch api\\n     */\\n    function crossSwap(\\n        bytes memory _id,\\n        bytes memory _uniqueId,\\n        uint256 _gasFeeAmt,\\n        bytes calldata _data\\n    ) external onlyRunning onlyWhitelist {\\n        _swap(_id, _uniqueId, getFundsProvider, gasFeeTo, _gasFeeAmt, _data);\\n    }\\n\\n    /**\\n     * @notice when usdt as dst token to do cross swap\\n     * @param _id id\\n     * @param _uniqueId used for cross chain\\n     * @param _amt usdt amount that will send to user EOA directly\\n     * @param _gasFeeAmt usdt fee changed by us\\n     */\\n    function toUCross(\\n        bytes memory _id,\\n        bytes memory _uniqueId,\\n        uint256 _amt,\\n        uint256 _gasFeeAmt,\\n        address _to\\n    ) external onlyRunning onlyWhitelist {\\n        require(_amt > 0, \\\"invalid amt!\\\");\\n        address(imToken).safeTransferFrom(getFundsProvider, _to, _amt);\\n\\n        if (_gasFeeAmt > 0) {\\n            address(imToken).safeTransferFrom(\\n                getFundsProvider,\\n                gasFeeTo,\\n                _gasFeeAmt\\n            );\\n        }\\n        emit Swap(\\n            _id,\\n            _uniqueId,\\n            ACTION.CROSS_SECOND,\\n            address(imToken),\\n            address(imToken),\\n            _msgSender(),\\n            getFundsProvider,\\n            _amt,\\n            _amt,\\n            _gasFeeAmt\\n        );\\n    }\\n\\n    struct LocalVars {\\n        uint256 value;\\n        bool success;\\n        bytes retData;\\n        uint256 retAmt;\\n    }\\n\\n    // 1inch Data Struct\\n    struct SwapDescription {\\n        IERC20 srcToken;\\n        IERC20 dstToken;\\n        address payable srcReceiver; // don't use\\n        address payable dstReceiver;\\n        uint256 amount;\\n        uint256 minretAmt;\\n        uint256 flags;\\n        bytes permit;\\n    }\\n\\n    /**\\n     * @notice internal swap function, will call 1inch\\n     * @param _id id\\n     * @param _uniqueId used for cross chain\\n     * @param _payer could be EOA or funds provider\\n     * @param _feeTo _feeTo can either be swapFee or gasFee\\n     * @param _feeAmt _feeAmt\\n     * @param _data data provided by 1inch api\\n     */\\n    function _swap(\\n        bytes memory _id,\\n        bytes memory _uniqueId,\\n        address _payer,\\n        address _feeTo,\\n        uint256 _feeAmt,\\n        bytes calldata _data\\n    ) internal {\\n        LocalVars memory vars;\\n        require(\\n            _data.length > 4 && bytes4(_data[0:4]) == ONEINCH_SELECTOR,\\n            \\\"invalid selector!\\\"\\n        );\\n\\n        SwapDescription memory desc;\\n        (, desc, ) = abi.decode(_data[4:], (address, SwapDescription, bytes));\\n\\n        require(\\n            address(desc.srcToken) != address(0) &&\\n                address(desc.dstToken) != address(0) &&\\n                desc.amount != 0 &&\\n                desc.dstReceiver != address(0),\\n            \\\"invalid calldata!\\\"\\n        );\\n\\n        // default: INNER_SWAP\\n        ACTION action;\\n\\n        if (desc.dstReceiver == getFundsProvider) {\\n            // receiver is fundsProvider means this is the first step for cross swap\\n            action = ACTION.CROSS_FIRST;\\n        } else if (_payer == getFundsProvider) {\\n            // when fundsProvider provide usdt means this is the second step for cross swap\\n            action = ACTION.CROSS_SECOND;\\n        } else {\\n            // means this is a inner swap, thus the payer should be equal to the receiver\\n            require(_payer == desc.dstReceiver, \\\"fromAddr should be eaqul to toAddr!\\\");\\n        }\\n\\n        // From EOA NATIVE_TOKEN\\n        if (address(desc.srcToken) == NATIVE_TOKEN) {\\n            require(\\n                msg.value == desc.amount + _feeAmt,\\n                \\\"msg.value should eaqul to amount set in api\\\"\\n            );\\n\\n            // transfer fee to 'feeTo'\\n            if (_feeAmt > 0) {\\n                address(_feeTo).safeTransferETH(_feeAmt);\\n            }\\n\\n            // will pass to 1inch\\n            vars.value = desc.amount;\\n        } else {\\n            // From EOA ERC20 Token\\n            require(msg.value == 0, \\\"msg.value should be 0\\\");\\n\\n            // fetch token that will be used for swapping\\n            // need funds provider Approve to OP first\\n            address(desc.srcToken).safeTransferFrom(\\n                _payer,\\n                address(this),\\n                desc.amount\\n            );\\n\\n            if (_feeAmt > 0) {\\n                // transfer fee to '_feeTo'\\n                address(desc.srcToken).safeTransferFrom(\\n                    _payer,\\n                    _feeTo,\\n                    _feeAmt\\n                );\\n            }\\n\\n            // approve uint256 max to 1inch for erc20\\n            // op will not keep money, so it would be safe\\n            if (\\n                desc.srcToken.allowance(address(this), oneInchRouter) <\\n                desc.amount\\n            ) {\\n                address(desc.srcToken).safeApprove(\\n                    oneInchRouter,\\n                    type(uint256).max\\n                );\\n            }\\n        }\\n\\n        // call swap\\n        (vars.success, vars.retData) = oneInchRouter.call{value: vars.value}(\\n            _data\\n        );\\n        if (!vars.success) revert(\\\"1inch swap failed\\\");\\n\\n        // function swap( IAggregationExecutor caller, SwapDescription calldata desc, bytes calldata data )\\n        // external\\n        // payable\\n        // returns ( uint256 returnAmount, uint256 spentAmount, uint256 gasLeft )\\n\\n        vars.retAmt = abi.decode(vars.retData, (uint256));\\n        require(vars.retAmt > 0, \\\"swap retAmt should not be 0!\\\");\\n\\n        emit Swap(\\n            _id,\\n            _uniqueId,\\n            action,\\n            address(desc.srcToken),\\n            address(desc.dstToken),\\n            _payer,\\n            desc.dstReceiver,\\n            vars.retAmt,\\n            desc.amount,\\n            _feeAmt\\n        );\\n    }\\n\\n    /**\\n     * @notice start or stop this operator\\n     */\\n    function flipRunning() external onlyOwner {\\n        isRunning = !isRunning;\\n        emit FlipRunning(!isRunning, isRunning);\\n    }\\n\\n    /**\\n     * @notice set new swapFeeTo\\n     * @param _newSwapFeeTo new address\\n     */\\n    function setSwapFeeTo(address _newSwapFeeTo) external onlyOwner {\\n        emit SwapFeeTo(swapFeeTo, _newSwapFeeTo);\\n        swapFeeTo = _newSwapFeeTo;\\n    }\\n\\n    /**\\n     * @notice set new gasFeeTo\\n     * @param _newGasFeeTo new address\\n     */\\n    function setGasFeeTo(address _newGasFeeTo) external onlyOwner {\\n        emit GasFeeTo(gasFeeTo, _newGasFeeTo);\\n        gasFeeTo = _newGasFeeTo;\\n    }\\n\\n    /**\\n     * @notice set special caller whitelist\\n     * @param _addrArr new address array\\n     * @param _flags new state array for addresses\\n     */\\n    function setWhitelist(address[] calldata _addrArr, bool[] calldata _flags)\\n        external\\n        onlyOwner\\n    {\\n        require(_addrArr.length == _flags.length, \\\"input length mismatch!\\\");\\n        for (uint256 i; i < _addrArr.length; i++) {\\n            whitelist[_addrArr[i]] = _flags[i];\\n            emit SetWhitelist(_addrArr[i], _flags[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice set new funds provider\\n     * @param _newFundsProvider new address\\n     */\\n    function setFundsProvider(address _newFundsProvider) external onlyOwner {\\n        emit FundsProvider(getFundsProvider, _newFundsProvider);\\n        getFundsProvider = _newFundsProvider;\\n    }\\n\\n    function pull(\\n        address _token,\\n        uint256 _amt,\\n        address _to\\n    ) external override onlyOwner returns (uint256 amt) {\\n        amt = _pull(_token, _amt, _to);\\n    }\\n\\n    // will delete later\\n    function useless() external pure returns (uint256) {\\n        return 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/FundsBasic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"./lib/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract FundsBasic {\\n    address internal constant NATIVE_TOKEN =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    using TransferHelper for address;\\n    bool internal locked;\\n\\n    modifier noReentrant() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    // EVENTS\\n    // event Push(address token, uint256 amt);\\n    event Pull(address token, uint256 amt, address to);\\n\\n    /**\\n     * @notice deposit token into contract\\n     * @param _token token address\\n     * @param _amt amount in decimals\\n     * @return amt actual amount\\n     */\\n    // function push(address _token, uint256 _amt)\\n    //     external\\n    //     payable\\n    //     virtual\\n    //     returns (uint256 amt);\\n\\n    /**\\n     * @notice withdraw token from this contract\\n     * @param _token token address\\n     * @param _amt amount in decimals\\n     * @return amt actual amount\\n     */\\n    function pull(\\n        address _token,\\n        uint256 _amt,\\n        address _to\\n    ) external virtual returns (uint256 amt);\\n\\n    // INTERNAL FUNCTION\\n    // function _push(address _token, uint256 _amt)\\n    //     internal\\n    //     virtual\\n    //     returns (uint256 amt)\\n    // {\\n    //     amt = _amt;\\n\\n    //     if (_token != NATIVE_TOKEN) {\\n    //         require(msg.value == 0, \\\"Invalid msg.value\\\");\\n    //         _token.safeTransferFrom(msg.sender, address(this), _amt);\\n    //     } else {\\n    //         require(msg.value == _amt, \\\"Invalid Amount\\\");\\n    //     }\\n    //     emit Push(_token, _amt);\\n    // }\\n\\n    function _pull(\\n        address _token,\\n        uint256 _amt,\\n        address _to\\n    ) internal noReentrant returns (uint256 amt) {\\n        amt = _amt;\\n        if (_token == NATIVE_TOKEN) {\\n            _to.safeTransferETH(_amt);\\n        } else {\\n            _token.safeTransfer(_to, _amt);\\n        }\\n        emit Pull(_token, _amt, _to);\\n    }\\n\\n    /**\\n     * @notice get balances of the given tokens\\n     * @param _tokens array of token addresses, support NATIVE TOKEN\\n     * @return balances balance array\\n     */\\n    function getBalance(address[] memory _tokens)\\n        external\\n        view\\n        returns (uint256[] memory balances)\\n    {\\n        balances = new uint256[](_tokens.length);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            if (_tokens[i] == NATIVE_TOKEN) {\\n                balances[i] = address(this).balance;\\n            } else {\\n                balances[i] = IERC20(_tokens[i]).balanceOf(address(this));\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper:safeApprove: approve failed\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper:safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper:transferFrom: transferFrom failed\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper:safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oneInchRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_imToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundsProvider\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_swapFeeTo\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_gasFeeTo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_prev\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_curr\",\"type\":\"bool\"}],\"name\":\"FlipRunning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_prev\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_curr\",\"type\":\"address\"}],\"name\":\"FundsProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_prev\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_curr\",\"type\":\"address\"}],\"name\":\"GasFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Pull\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isWhitelist\",\"type\":\"bool\"}],\"name\":\"SetWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"id\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"uniqueId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum Operator.ACTION\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"retAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmt\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_prev\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_curr\",\"type\":\"address\"}],\"name\":\"SwapFeeTo\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_uniqueId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gasFeeAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"crossSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_uniqueId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_swapFeeAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"doSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipRunning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_uniqueId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapFeeAmt\",\"type\":\"uint256\"}],\"name\":\"fromUCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasFeeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundsProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneInchRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"pull\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFundsProvider\",\"type\":\"address\"}],\"name\":\"setFundsProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGasFeeTo\",\"type\":\"address\"}],\"name\":\"setGasFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSwapFeeTo\",\"type\":\"address\"}],\"name\":\"setSwapFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrArr\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_flags\",\"type\":\"bool[]\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_uniqueId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasFeeAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"toUCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useless\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Operator", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001111111254fb6c44bac0bed2854e76f90643097d000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e8191108261f3234f1c2aca52a0d5c11795aef9e000000000000000000000000e8191108261f3234f1c2aca52a0d5c11795aef9e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}