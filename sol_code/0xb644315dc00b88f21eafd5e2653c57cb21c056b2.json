{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\npragma experimental ABIEncoderV2;\r\n\r\n////// lib/openzeppelin-contracts/contracts/utils/Context.sol\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\n/* pragma solidity ^0.8.0; */\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/access/Ownable.sol\r\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n\r\n/* pragma solidity ^0.8.0; */\r\n\r\n/* import \"../utils/Context.sol\"; */\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\r\n\r\n/* pragma solidity ^0.8.0; */\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\ninterface ISpiralChef {\r\n    function userBurntForNum(uint256 burnNum, address user) external view returns (uint256);\r\n    function userAmount(uint256 _pid, address user) external view returns (uint256);\r\n}\r\n\r\ncontract Apollo is Context, IERC20, Ownable {\r\n\r\n    struct UserInfo {\r\n        uint16 rateNum;\r\n        uint64 burnt;\r\n        uint64 balances;\r\n        uint104 lastRate;\r\n    }\r\n\r\n    struct TransferInfo {\r\n        bool swapEnabled;\r\n        bool swapping;\r\n        uint16 buyTotal;\r\n        uint16 buyLP;\r\n        uint16 buyRew;\r\n        uint16 buyBurn;\r\n        uint16 sellTotal;\r\n        uint16 sellLP;\r\n        uint16 sellRew;\r\n        uint16 sellBurn;\r\n        uint16 timePeriod;\r\n        uint32 preTradingUntil;\r\n        uint64 swapTokensAtAmount;\r\n    }\r\n\r\n    struct SupplyInfo {\r\n        bool actBurn;\r\n        uint8 burnRef;\r\n        uint16 ampRate;\r\n        uint16 rateNum; \r\n        uint88 rSupply;\r\n        uint104 currentRate;\r\n    }\r\n\r\n    struct MainBalances{\r\n        uint64 thisBalance;\r\n        uint64 deadBalance;\r\n        uint64 pairBalance;\r\n    }\r\n\r\n    string private _name = 'Apollo';\r\n    string private _symbol = 'APOLLO';\r\n    uint8 private _decimals = 9;\r\n\r\n    uint104 private constant MAX_UINT104 = ~uint104(0);\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 1 * 1e8 * 1e9;\r\n    uint256 public constant maxFee = 200;\r\n    TransferInfo public transferInfoStor;\r\n    SupplyInfo public currentSupply;\r\n    MainBalances public mainBalances;\r\n\r\n    mapping(uint256 => SupplyInfo) public supplyInfo;\r\n    mapping(address => UserInfo) public userInfo;\r\n    mapping(address => bool) public rewardsExcluded;\r\n    mapping(address => bool) public feesExcluded;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    ISpiralChef public immutable spiralChef;\r\n    IUniswapV2Router02 public constant mainRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public fundAddress;\r\n    address public immutable mainPair;\r\n    address public immutable pairedToken;\r\n    address public constant deadAddress = address(0xdead);\r\n    bool public showDead = true;    \r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeFromRewards(address indexed account, bool isExcluded);\r\n    event Burnt(address indexed account, uint256 amount);\r\n\r\n    constructor (address _fundAddress, address _pairedToken, ISpiralChef _spiralChef) {\r\n        userInfo[_msgSender()] = UserInfo(0, 0, uint64(INITIAL_FRAGMENTS_SUPPLY), uint104(MAX_UINT104));\r\n        currentSupply = SupplyInfo(false,0,20,0,uint64(INITIAL_FRAGMENTS_SUPPLY), MAX_UINT104);\r\n        mainPair = IUniswapV2Factory(mainRouter.factory()).createPair(address(this), _pairedToken);\r\n        transferInfoStor = TransferInfo(true, false, 70,10,20,0,70,10,20,0,0,~uint32(0),1 * 1e2 * 1e9);\r\n        pairedToken = _pairedToken;\r\n        fundAddress = _fundAddress;\r\n        spiralChef = _spiralChef;\r\n        rewardsExcluded[mainPair] = true;\r\n        rewardsExcluded[address(this)] = true;\r\n        rewardsExcluded[deadAddress] = true;\r\n        feesExcluded[deadAddress] = true;\r\n        _approve(address(this), address(mainRouter), ~uint(256));\r\n\r\n        emit Transfer(address(0), _msgSender(), INITIAL_FRAGMENTS_SUPPLY);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return INITIAL_FRAGMENTS_SUPPLY - mainBalances.deadBalance;\r\n    }\r\n\r\n    function deadSupply() public view returns (uint256) {\r\n        return mainBalances.deadBalance;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (account == address(this)) return mainBalances.thisBalance;\r\n        if (account == mainPair) return mainBalances.pairBalance;\r\n        if (account == deadAddress && showDead) return mainBalances.deadBalance;\r\n        if (rewardsExcluded[account]) return userInfo[account].balances;\r\n        UserInfo memory accountInfo = userInfo[account];\r\n        if (accountInfo.rateNum == currentSupply.rateNum) {\r\n            return _reflectionBalance(accountInfo, currentSupply);\r\n        }\r\n        return _reflectionBalance(accountInfo, supplyInfo[accountInfo.rateNum]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        require(_allowances[sender][_msgSender()]-amount >= 0, \"ERC20: transfer amount exceeds allowance\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()]-amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function rewardsEarned(address account) external view returns (uint256) {\r\n        require(!rewardsExcluded[account]);\r\n        UserInfo memory accountInfo = userInfo[account];\r\n        if (accountInfo.rateNum == currentSupply.rateNum) {\r\n            return _reflectionBalance(accountInfo, currentSupply) - accountInfo.balances;\r\n        }\r\n        return _reflectionBalance(accountInfo, supplyInfo[accountInfo.rateNum]) - accountInfo.balances;\r\n    }\r\n\r\n    // change the minimum amount of tokens to sell from fees\r\n    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner {\r\n        transferInfoStor.swapTokensAtAmount = uint64(newAmount);\r\n    }\r\n\r\n    // only use to disable contract sales if absolutely necessary (emergency use only)\r\n    function updateSwapEnabled(bool enabled) external onlyOwner {\r\n        transferInfoStor.swapEnabled = enabled;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) external onlyOwner {\r\n        feesExcluded[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function excludeFromRewards(address account, bool excluded) public onlyOwner {\r\n        require(account != address(this) && account != deadAddress && account != mainPair);\r\n        UserInfo memory accountInfo = userInfo[account];\r\n        SupplyInfo memory supply = currentSupply;\r\n        if (!rewardsExcluded[account] && excluded) {\r\n            if (supply.rateNum == accountInfo.rateNum) {   \r\n                accountInfo.balances = uint64(_reflectionBalance(accountInfo, supply));\r\n                supply.rSupply -= uint88(_getUserBurnt(accountInfo)*supply.ampRate+accountInfo.balances);\r\n                currentSupply = supply;\r\n            }\r\n            else {\r\n                accountInfo.balances = uint64(_reflectionBalance(accountInfo, supplyInfo[accountInfo.rateNum]));\r\n            }\r\n            rewardsExcluded[account] = true;\r\n        }\r\n        else if (rewardsExcluded[account] && !excluded) {\r\n            accountInfo.lastRate = supply.currentRate;\r\n            accountInfo.rateNum = supply.rateNum;\r\n            supply.rSupply += uint88(_getUserBurnt(accountInfo)*supply.ampRate+accountInfo.balances);\r\n            rewardsExcluded[account] = false;\r\n            currentSupply = supply;\r\n        }\r\n        userInfo[account] = accountInfo;\r\n        emit ExcludeFromRewards(account, excluded);\r\n    }\r\n\r\n    function updateFundAddress(address _fundAddress) external onlyOwner {\r\n        fundAddress = _fundAddress;\r\n    }\r\n\r\n    function setPreTradingUntil(uint256 _preTradingUntil) external onlyOwner {\r\n        transferInfoStor.preTradingUntil = uint32(_preTradingUntil);\r\n    }\r\n\r\n    function setTimePeriod(uint256 _timePeriod) external onlyOwner {\r\n        transferInfoStor.timePeriod = uint16(_timePeriod);\r\n    }\r\n\r\n    function updaterateNums(address[] memory addr) external onlyOwner {\r\n        uint256 length = addr.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            _updateUser(addr[i]);\r\n        }\r\n    }\r\n\r\n    function updateBurnRef(uint256 _burnRef, bool _actBurn) external onlyOwner {\r\n        require (_burnRef < 100);\r\n        currentSupply.burnRef = uint8(_burnRef);\r\n        currentSupply.actBurn = _actBurn;\r\n    }\r\n\r\n    function updateAmpRate(uint256 _ampRate) external onlyOwner {\r\n        require(_ampRate < 1000);\r\n        SupplyInfo memory _currentSupply = currentSupply;\r\n        require(_currentSupply.rateNum + 1 != ~uint16(0));\r\n        supplyInfo[_currentSupply.rateNum] = _currentSupply;\r\n        currentSupply = SupplyInfo(_currentSupply.actBurn, _currentSupply.burnRef, uint16(_ampRate), uint16(_currentSupply.rateNum + 1), 0, MAX_UINT104);\r\n    }\r\n\r\n    function updateTax(uint256 _buyLP, uint256 _buyRew, uint256 _buyBurn, uint256 _buyTotal, uint256 _sellLP, uint256 _sellRew, uint256 _sellBurn, uint256 _sellTotal) external onlyOwner {\r\n        require (_buyTotal <= maxFee);\r\n        require (_sellTotal <= maxFee);\r\n        require (_buyLP + _buyRew + _buyBurn <= _buyTotal);\r\n        require (_sellLP + _sellRew + _sellBurn <= _sellTotal);\r\n        transferInfoStor.buyLP = uint16(_buyLP);\r\n        transferInfoStor.buyRew = uint16(_buyRew);\r\n        transferInfoStor.buyBurn = uint16(_buyBurn);\r\n        transferInfoStor.buyTotal = uint16(_buyTotal);\r\n        transferInfoStor.sellLP = uint16(_sellLP);\r\n        transferInfoStor.sellRew = uint16(_sellRew);\r\n        transferInfoStor.sellBurn = uint16(_sellBurn);\r\n        transferInfoStor.sellTotal = uint16(_sellTotal);\r\n        _approve(address(this), address(mainRouter), ~uint(256));\r\n    }\r\n\r\n    function setShowDead(bool _showDead) external onlyOwner {\r\n        showDead = _showDead;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (from == to) {\r\n            _updateUser(from);\r\n            return;\r\n        }\r\n        require(amount != 0);\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 tokensForReflection;\r\n        if (from != owner() && to != owner()) {\r\n            uint256 contractBalance = mainBalances.thisBalance;\r\n            TransferInfo memory transferInfo = transferInfoStor;\r\n            bool canSwap = contractBalance > transferInfo.swapTokensAtAmount;\r\n            \r\n            if (\r\n                mainPair == to &&\r\n                !feesExcluded[from] &&\r\n                !feesExcluded[to] &&\r\n                canSwap &&\r\n                transferInfoStor.swapEnabled &&\r\n                !transferInfoStor.swapping\r\n            ) {\r\n                transferInfoStor.swapping = true;\r\n                \r\n                if (contractBalance > transferInfo.swapTokensAtAmount * 20) {\r\n                    contractBalance = transferInfo.swapTokensAtAmount * 20;\r\n                }\r\n\r\n                swapBack(contractBalance);\r\n\r\n                transferInfoStor.swapping = false;\r\n            }\r\n\r\n            bool takeFee = !transferInfoStor.swapping;\r\n            if (feesExcluded[from] || feesExcluded[to]) {\r\n                takeFee = false;\r\n            }\r\n\r\n            if (takeFee) {\r\n                (uint256 fees, uint256 tokensForLiquidity, uint256 tokensForBurn) = (0,0,0);\r\n\r\n                    // on sell\r\n                    if (to == mainPair && transferInfo.sellTotal != 0) {\r\n                        fees = amount*transferInfo.sellTotal/1000;\r\n                        tokensForReflection = amount*transferInfo.sellRew/1000;\r\n                        tokensForLiquidity = amount*transferInfo.sellLP/1000;\r\n                        tokensForBurn = amount*transferInfo.sellBurn/1000;\r\n                        if (fees > 0) {\r\n                            _tokenTransfer(from, address(this), fees);\r\n                            if (tokensForLiquidity > 0) {\r\n                                _tokenTransfer(address(this), to, tokensForLiquidity);\r\n                            }\r\n                            if (tokensForBurn > 0) {\r\n                                _tokenTransfer(address(this), deadAddress, tokensForBurn);\r\n                            }\r\n                        }\r\n                    }\r\n                    // on buy\r\n                    else if (from == mainPair && transferInfo.buyTotal != 0) {\r\n                        fees = amount*transferInfo.buyTotal/1000;\r\n                        tokensForReflection = amount*transferInfo.buyRew/1000;\r\n                        tokensForLiquidity = amount*transferInfo.buyLP/1000;\r\n                        tokensForBurn = amount*transferInfo.buyBurn/1000;\r\n                        if (fees > 0) {\r\n                            _tokenTransfer(from, address(this), fees - tokensForLiquidity);\r\n                            if (tokensForBurn > 0) {\r\n                                _tokenTransfer(address(this), deadAddress, tokensForBurn);\r\n                            }\r\n                        }\r\n                    }\r\n                    amount -= fees;\r\n\r\n                    if (block.timestamp < transferInfo.preTradingUntil + 7200 && mainPair != to) {\r\n                        uint256 staked = spiralChef.userAmount(0, to)*10;\r\n                        uint256 burnt = spiralChef.userBurntForNum(0, to);\r\n                        if (block.timestamp >= transferInfo.preTradingUntil && burnt >= 1000) {\r\n                            staked = staked*5;\r\n                        }\r\n                        require(staked >= (balanceOf(to) + amount));\r\n                        require(block.timestamp >= transferInfo.preTradingUntil - burnt*transferInfo.timePeriod);\r\n                    }\r\n                }\r\n        }\r\n        _tokenTransfer(from, to, amount);\r\n\r\n        if (tokensForReflection > 0) {\r\n            (currentSupply, tokensForReflection) = _reflect(currentSupply, tokensForReflection);\r\n            mainBalances.thisBalance -= uint64(tokensForReflection);\r\n        }\r\n    }\r\n\r\n    function _updateUser(address user) internal {\r\n        UserInfo memory userAcc = userInfo[user];\r\n        SupplyInfo memory supply = currentSupply;\r\n        if (rewardsExcluded[user] || userAcc.rateNum == supply.rateNum) {\r\n            return;\r\n        }\r\n        userAcc.balances = uint64(_reflectionBalance(userAcc, supplyInfo[userAcc.rateNum]));\r\n        supply.rSupply += uint88(_getUserBurnt(userAcc)*supply.ampRate + userAcc.balances); \r\n        userAcc.rateNum = supply.rateNum;\r\n        userAcc.lastRate = supply.currentRate;\r\n        userInfo[user] = userAcc;\r\n        currentSupply = supply;\r\n    }\r\n\r\n    function _tokenTransfer(address from, address to, uint256 amount) internal {\r\n        emit Transfer(from, to, amount);\r\n\r\n        if (rewardsExcluded[from] && !rewardsExcluded[to]) {\r\n            _transferFromExcluded(from, to, amount);\r\n        } else if (!rewardsExcluded[from] && rewardsExcluded[to]) {\r\n            if (to == deadAddress) {\r\n                _transferToDead(from, amount);\r\n            } else {\r\n                _transferToExcluded(from, to, amount);}\r\n        } else if (!rewardsExcluded[from] && !rewardsExcluded[to]) {\r\n            _transferStandard(from, to, amount);\r\n        } else if (rewardsExcluded[from] && rewardsExcluded[to]) {\r\n            _transferBothExcluded(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function _transferToDead(address from, uint256 amount) internal {\r\n        UserInfo memory fromAcc = userInfo[from];\r\n        SupplyInfo memory supply = currentSupply;\r\n        uint256 deadAmount;\r\n        if (fromAcc.rateNum == supply.rateNum) {\r\n            supply.rSupply -= uint88(_getUserBurnt(fromAcc)*supply.ampRate + amount);\r\n            fromAcc.balances = uint64(_reflectionBalance(fromAcc, supply) - amount);\r\n            supply.rSupply -= fromAcc.balances;\r\n        }\r\n        else {\r\n            fromAcc.balances = uint64(_reflectionBalance(fromAcc, supplyInfo[fromAcc.rateNum]) - amount);\r\n        }\r\n        uint256 brAmount = amount*(supply.burnRef)/100;\r\n        if (supply.actBurn) {\r\n            fromAcc.burnt += uint64(amount - brAmount);\r\n        }\r\n        else {\r\n            fromAcc.burnt += uint64(amount);\r\n        }\r\n        amount -= brAmount;\r\n        deadAmount += amount;\r\n        if (brAmount != 0) {\r\n            (supply, amount) = _reflect(supply, brAmount);\r\n            deadAmount += brAmount - amount; \r\n        }\r\n        supply.rSupply += uint88(_getUserBurnt(fromAcc)*supply.ampRate + fromAcc.balances);\r\n        fromAcc.lastRate = supply.currentRate;\r\n        fromAcc.rateNum = supply.rateNum;\r\n        userInfo[from] = fromAcc;\r\n        mainBalances.deadBalance += uint64(deadAmount);\r\n        currentSupply = supply; \r\n\r\n        emit Burnt(from, deadAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address from, address to, uint256 amount) internal {\r\n        UserInfo memory toAcc = userInfo[to];\r\n        SupplyInfo memory supply = currentSupply;\r\n        if (from == address(this)) {\r\n            mainBalances.thisBalance -= uint64(amount);\r\n        }\r\n        else if (from == mainPair) {\r\n            mainBalances.pairBalance -= uint64(amount);\r\n        } \r\n        else {\r\n            userInfo[from].balances -= uint64(amount);\r\n        } \r\n        uint256 oldToBurnt; \r\n        uint256 newToBurnt;\r\n        if (toAcc.rateNum == supply.rateNum) {\r\n            oldToBurnt = _getUserBurnt(toAcc)*supply.ampRate;\r\n            toAcc.balances = uint64(_reflectionBalance(toAcc, supply) + amount);\r\n        }\r\n        else {\r\n            newToBurnt =  _reflectionBalance(toAcc, supplyInfo[toAcc.rateNum]);\r\n            toAcc.balances = uint64(newToBurnt + amount);\r\n        }\r\n        toAcc.lastRate = supply.currentRate; \r\n        toAcc.rateNum = supply.rateNum;\r\n        newToBurnt += _getUserBurnt(toAcc)*supply.ampRate;\r\n        supply.rSupply = uint88(supply.rSupply + newToBurnt - oldToBurnt + amount);\r\n        userInfo[to] = toAcc;\r\n        currentSupply = supply;\r\n    }\r\n\r\n    function _transferToExcluded(address from, address to, uint256 amount) internal {\r\n        UserInfo memory fromAcc = userInfo[from];\r\n        SupplyInfo memory supply = currentSupply;\r\n        if (to == address(this)) {\r\n            mainBalances.thisBalance += uint64(amount);\r\n        } \r\n        else if (to == mainPair) {\r\n            mainBalances.pairBalance += uint64(amount);\r\n        }\r\n        else {\r\n            userInfo[to].balances += uint64(amount);\r\n        }\r\n        uint256 oldFromBurnt; \r\n        uint256 newFromBurnt;\r\n        if (fromAcc.rateNum == supply.rateNum) {\r\n            oldFromBurnt = _getUserBurnt(fromAcc)*supply.ampRate;\r\n            fromAcc.balances = uint64(_reflectionBalance(fromAcc, supply) - amount);\r\n        }\r\n        else {\r\n            newFromBurnt = _reflectionBalance(fromAcc, supplyInfo[fromAcc.rateNum]);\r\n            fromAcc.balances = uint64(newFromBurnt - amount);\r\n        }\r\n        fromAcc.lastRate = supply.currentRate;\r\n        fromAcc.rateNum = supply.rateNum;\r\n        newFromBurnt += _getUserBurnt(fromAcc)*supply.ampRate;\r\n        supply.rSupply = uint88(supply.rSupply + newFromBurnt - oldFromBurnt - amount);\r\n        userInfo[from] = fromAcc;\r\n        currentSupply = supply;\r\n    }\r\n\r\n    function _transferStandard(address from, address to, uint256 amount) internal {\r\n        UserInfo memory fromAcc = userInfo[from];\r\n        UserInfo memory toAcc = userInfo[to];\r\n        SupplyInfo memory supply = currentSupply;\r\n        uint256 oldFromBurnt; \r\n        uint256 oldToBurnt; \r\n        uint256 newFromBurnt;\r\n        uint256 newToBurnt;\r\n        if (fromAcc.rateNum == supply.rateNum) {\r\n            oldFromBurnt = _getUserBurnt(fromAcc)*supply.ampRate + amount;\r\n            fromAcc.balances = uint64(_reflectionBalance(fromAcc, supply) - amount);\r\n        }\r\n        else{\r\n            fromAcc.balances = uint64(_reflectionBalance(fromAcc, supplyInfo[fromAcc.rateNum]) - amount);\r\n            newFromBurnt = fromAcc.balances;\r\n        }\r\n        if (toAcc.rateNum == supply.rateNum) {\r\n            oldToBurnt = _getUserBurnt(toAcc)*supply.ampRate;\r\n            toAcc.balances = uint64(_reflectionBalance(toAcc, supply) + amount);\r\n            newToBurnt = amount;\r\n        }\r\n        else {\r\n            toAcc.balances = uint64(_reflectionBalance(toAcc, supplyInfo[toAcc.rateNum]) + amount);\r\n            newToBurnt =  toAcc.balances;\r\n        }\r\n        fromAcc.lastRate = supply.currentRate;\r\n        toAcc.lastRate = supply.currentRate;\r\n        fromAcc.rateNum = supply.rateNum;\r\n        toAcc.rateNum = supply.rateNum;\r\n        newToBurnt += _getUserBurnt(toAcc)*supply.ampRate;\r\n        newFromBurnt += _getUserBurnt(fromAcc)*supply.ampRate;\r\n        supply.rSupply = uint88(supply.rSupply + newFromBurnt + newToBurnt - oldFromBurnt - oldToBurnt);\r\n        userInfo[from] = fromAcc;\r\n        userInfo[to] = toAcc;\r\n        currentSupply = supply;\r\n    }\r\n\r\n    function _transferBothExcluded(address from, address to, uint256 amount) internal {\r\n        if (from == address(this)) {\r\n            mainBalances.thisBalance -= uint64(amount);\r\n        }\r\n        else if (from == mainPair) {\r\n            mainBalances.pairBalance -= uint64(amount);\r\n        }\r\n        else if (from == deadAddress) {\r\n            mainBalances.deadBalance -= uint64(amount);\r\n        } \r\n        else {\r\n            userInfo[from].balances -= uint64(amount);\r\n        } \r\n        if (to == address(this)) {\r\n            mainBalances.thisBalance += uint64(amount);\r\n        } \r\n        else if (to == mainPair) {\r\n            mainBalances.pairBalance += uint64(amount);\r\n        }\r\n        else if (to == deadAddress) {\r\n            mainBalances.deadBalance += uint64(amount);\r\n        }\r\n        else {\r\n            userInfo[to].balances += uint64(amount);\r\n        }\r\n    }\r\n\r\n    function _getUserBurnt(UserInfo memory accountInfo) private pure returns (uint256) {\r\n        return accountInfo.burnt > accountInfo.balances ? accountInfo.balances : accountInfo.burnt;\r\n    }\r\n\r\n    function _reflectionBalance(UserInfo memory accountInfo, SupplyInfo memory supply) private pure returns (uint256) {\r\n        uint256 burnt = _getUserBurnt(accountInfo);\r\n        return accountInfo.balances != 0 ? (burnt*supply.ampRate+accountInfo.balances)*accountInfo.lastRate/supply.currentRate-burnt*supply.ampRate : 0;\r\n    }\r\n\r\n    function _reflect(SupplyInfo memory supply, uint256 amount) private pure returns (SupplyInfo memory, uint256) {\r\n        amount = amount < supply.rSupply/100 ? amount : supply.rSupply/100;\r\n        if (amount != 0) {\r\n            uint256 rTotalBalances = uint256(supply.rSupply)*supply.currentRate;\r\n            supply.rSupply += uint88(amount);\r\n            uint104 currentRate = uint104(rTotalBalances/supply.rSupply);\r\n            currentRate = currentRate != 0 ? currentRate : 1;\r\n            supply.currentRate = currentRate;\r\n        }\r\n        return (supply, amount);\r\n    } \r\n\r\n    function swapBack(uint256 tokenAmount) private {\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pairedToken;\r\n        \r\n        mainRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            fundAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairedToken\",\"type\":\"address\"},{\"internalType\":\"contract ISpiralChef\",\"name\":\"_spiralChef\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"actBurn\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"burnRef\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"ampRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rateNum\",\"type\":\"uint16\"},{\"internalType\":\"uint88\",\"name\":\"rSupply\",\"type\":\"uint88\"},{\"internalType\":\"uint104\",\"name\":\"currentRate\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feesExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainBalances\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"thisBalance\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadBalance\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairBalance\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_preTradingUntil\",\"type\":\"uint256\"}],\"name\":\"setPreTradingUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_showDead\",\"type\":\"bool\"}],\"name\":\"setShowDead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timePeriod\",\"type\":\"uint256\"}],\"name\":\"setTimePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showDead\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spiralChef\",\"outputs\":[{\"internalType\":\"contract ISpiralChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supplyInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"actBurn\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"burnRef\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"ampRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rateNum\",\"type\":\"uint16\"},{\"internalType\":\"uint88\",\"name\":\"rSupply\",\"type\":\"uint88\"},{\"internalType\":\"uint104\",\"name\":\"currentRate\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferInfoStor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapping\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"buyTotal\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buyLP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buyRew\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buyBurn\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellTotal\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellLP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellRew\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellBurn\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"timePeriod\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"preTradingUntil\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ampRate\",\"type\":\"uint256\"}],\"name\":\"updateAmpRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnRef\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_actBurn\",\"type\":\"bool\"}],\"name\":\"updateBurnRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundAddress\",\"type\":\"address\"}],\"name\":\"updateFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyRew\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellRew\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTotal\",\"type\":\"uint256\"}],\"name\":\"updateTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"updaterateNums\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"rateNum\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"burnt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"balances\",\"type\":\"uint64\"},{\"internalType\":\"uint104\",\"name\":\"lastRate\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Apollo", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000027d5b0d8077811358b848d95b2ef231d2980958b000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000e9422393f9843e62bd28e84cf9ac61d2b63d0466", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dcd092135f46733584e756366930597da29537dc7cbbf1278556e115dfd41ed4"}]}