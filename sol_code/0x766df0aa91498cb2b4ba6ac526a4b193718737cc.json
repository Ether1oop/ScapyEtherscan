{"status": "1", "message": "OK", "result": [{"SourceCode": "// $$\\      $$\\  $$$$$$\\  $$$$$$$\\                                                                                                                        \r\n// $$ | $\\  $$ |$$  __$$\\ $$  __$$\\                                                                                                                       \r\n// $$ |$$$\\ $$ |$$ /  \\__|$$ |  $$ |                                                                                                                      \r\n// $$ $$ $$\\$$ |$$ |      $$$$$$$  |                                                                                                                      \r\n// $$$$  _$$$$ |$$ |      $$  ____/                                                                                                                       \r\n// $$$  / \\$$$ |$$ |  $$\\ $$ |                                                                                                                            \r\n// $$  /   \\$$ |\\$$$$$$$/|$$ |                                                                                                                            \r\n// \\__/     \\__/ \\_____/ |$$ |\r\n//\r\n//\r\n// \u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2003\u2003\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\r\n// \u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\r\n// \u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2003\u2003\u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\r\n// \u2591\u2591\u2588\u2588\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2003\u2003\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\r\n// \u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2003\u2003\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\r\n// \u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2003\u2003\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2003\u2003\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\r\n//\r\n\r\n// Website: https://www.worldcuppot.io/\r\n// Telegram: https://t.me/worldcuppot\r\n// Twitter: https://twitter.com/worldcuppot\r\n// Roadmap: https://www.worldcuppot.io/#roadmap\r\n// WCPDapp: https://dapp.worldcuppot.io/\r\n//\r\n//\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: BettingV2.sol\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\n\r\n\r\n\r\ncontract MasterWCP is Ownable {\r\n    using Counters for Counters.Counter;\r\n    using SafeERC20 for IERC20;\r\n\r\n    Counters.Counter private _bettingIdCounter;\r\n\r\n    address public admin;\r\n    uint256 public bettingFee = 1e4; // 10%\r\n\r\n    struct Betting {\r\n        BettingInfo bettingInfo;\r\n        uint256 totalBetsA;\r\n        uint256 totalBetsB;\r\n        uint256 totalBetsDraw;\r\n        uint256 finalBettingAmount;\r\n        uint256 fee;\r\n        uint256 usersCountTeamA;\r\n        uint256 usersCountTeamB;\r\n        uint256 usersCountDraw;\r\n        bool isBetLive;\r\n        bool isBetStart;\r\n        IERC20 token;\r\n    }\r\n\r\n    struct BettingInfo {\r\n        string title;\r\n        string description;\r\n        string teamA;\r\n        string teamB;\r\n    }\r\n\r\n    enum ResultStatus {\r\n        NotDeclare, // 0\r\n        WinnerA, // 1\r\n        WinnerB, // 2\r\n        Draw, // 3\r\n        Cancel // 4\r\n    }\r\n\r\n    mapping(uint256 => Betting) bettingDetails;\r\n    mapping(uint256 => ResultStatus) public resultStatus;\r\n\r\n    mapping(address => mapping(uint256 => uint256)) userBets;\r\n    mapping(address => mapping(uint256 => uint8)) userChoice;\r\n    mapping(address => mapping(uint256 => bool)) userClaimed;\r\n\r\n    event NewBetting(uint256 indexed id);\r\n    event Bet(uint256 indexed _id, uint256 _team, uint256 _amount);\r\n    event DeclareResult(uint256 indexed id, uint256 indexed choice);\r\n    event Claim(\r\n        uint256 indexed id,\r\n        address indexed user,\r\n        uint256 indexed amount\r\n    );\r\n\r\n    modifier isBettingIdexist(uint256 _id) {\r\n        require(\r\n            _id > 0 && _id <= _bettingIdCounter.current(),\r\n            \"BettingId does not exist\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isBetStart(uint256 _id) {\r\n        Betting memory _bettingDetails = bettingDetails[_id];\r\n        require(_bettingDetails.isBetStart, \"Betting not started yet\");\r\n        _;\r\n    }\r\n\r\n    modifier isBetLive(uint256 _id) {\r\n        Betting memory _bettingDetails = bettingDetails[_id];\r\n        require(_bettingDetails.isBetLive, \"Betting not live\");\r\n        _;\r\n    }\r\n\r\n    modifier notStart(uint256 _id) {\r\n        Betting memory _bettingDetails = bettingDetails[_id];\r\n        require(!(_bettingDetails.isBetStart), \"Betting already started\");\r\n        _;\r\n    }\r\n\r\n    modifier notDeclare(uint256 _id) {\r\n        require(\r\n            resultStatus[_id] == ResultStatus.NotDeclare,\r\n            \"result already delcare\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier minAmount(uint256 _amnt) {\r\n        require(_amnt > 0, \"bet value 0\");\r\n        _;\r\n    }\r\n\r\n    modifier declare(uint256 _id) {\r\n        require(resultStatus[_id] != ResultStatus.NotDeclare, \"not delcare\");\r\n        _;\r\n    }\r\n\r\n    modifier notClaimed(address _user, uint256 _id) {\r\n        require(!userClaimed[_user][_id], \"claimed!\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _admin) {\r\n        admin = _admin;\r\n    }\r\n\r\n    function bet(\r\n        uint256 _id,\r\n        uint8 _option,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        isBettingIdexist(_id)\r\n        notDeclare(_id)\r\n        isBetLive(_id)\r\n        minAmount(_amount)\r\n        returns (bool)\r\n    {\r\n        require(_option == 1 || _option == 2 || _option == 3, \"bet: invalid choice\");\r\n        Betting storage _bettingDetails = bettingDetails[_id];\r\n\r\n        address _user = msg.sender;\r\n        uint256 previousBet = userBets[_user][_id];\r\n\r\n        if (_option == 1) {\r\n            _bettingDetails.totalBetsA += _amount;\r\n            if (previousBet > 0) {\r\n                require(userChoice[_user][_id] == 1, \"bet: wrong choice\");\r\n                userBets[_user][_id] += _amount;\r\n            } else {\r\n                userBets[_user][_id] = _amount;\r\n                userChoice[_user][_id] = 1;\r\n                unchecked {\r\n                    _bettingDetails.usersCountTeamA++;\r\n                }\r\n            }\r\n        } else if (_option == 2) {\r\n            _bettingDetails.totalBetsB += _amount;\r\n            if (previousBet > 0) {\r\n                require(userChoice[_user][_id] == 2, \"bet: wrong choice\");\r\n                userBets[_user][_id] += _amount;\r\n            } else {\r\n                userBets[_user][_id] = _amount;\r\n                userChoice[_user][_id] = 2;\r\n                unchecked {\r\n                    _bettingDetails.usersCountTeamB++;\r\n                }\r\n            }\r\n        } else {\r\n            _bettingDetails.totalBetsDraw += _amount;\r\n            if (previousBet > 0) {\r\n                require(userChoice[_user][_id] == 3, \"bet: wrong choice\");\r\n                userBets[_user][_id] += _amount;\r\n            } else {\r\n                userBets[_user][_id] = _amount;\r\n                userChoice[_user][_id] = 3;\r\n                unchecked {\r\n                    _bettingDetails.usersCountDraw++;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Bet(_id, _option, _amount);\r\n        _bettingDetails.token.safeTransferFrom(_user, address(this), _amount);\r\n        return true;\r\n    }\r\n\r\n    function claim(uint256 _id)\r\n        external\r\n        isBettingIdexist(_id)\r\n        declare(_id)\r\n        notClaimed(msg.sender, _id)\r\n        returns (bool)\r\n    {\r\n        Betting memory _bettingDetails = bettingDetails[_id];\r\n        address _user = msg.sender;\r\n        uint256 claimAmount = getUserClaimAmount(_user, _id);\r\n        userClaimed[_user][_id] = true;\r\n        emit Claim(_id, _user, claimAmount);\r\n        if (claimAmount > 0) {\r\n            _bettingDetails.token.safeTransfer(_user, claimAmount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function createBetting(\r\n        string calldata _title,\r\n        string calldata _description,\r\n        string calldata _teamA,\r\n        string calldata _teamB,\r\n        IERC20 _token\r\n    ) external onlyOwner returns (bool) {\r\n        _bettingIdCounter.increment();\r\n        uint256 _id = _bettingIdCounter.current();\r\n        Betting storage _bettingDetails = bettingDetails[_id];\r\n\r\n        _bettingDetails.bettingInfo.title = _title;\r\n        _bettingDetails.bettingInfo.description = _description;\r\n        _bettingDetails.bettingInfo.teamA = _teamA;\r\n        _bettingDetails.bettingInfo.teamB = _teamB;\r\n        _bettingDetails.token = _token;\r\n        _bettingDetails.fee = bettingFee;\r\n        emit NewBetting(_id);\r\n        return true;\r\n    }\r\n\r\n    function declareResult(uint256 _id, ResultStatus _result)\r\n        external\r\n        isBettingIdexist(_id)\r\n        notDeclare(_id)\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        resultStatus[_id] = _result;\r\n        require(_result != ResultStatus.NotDeclare, \"declareResult: invalid\");\r\n        bettingDetails[_id].isBetLive = false;\r\n        emit DeclareResult(_id, uint256(_result));\r\n        if (_result != ResultStatus.Cancel) {\r\n            Betting memory _bettingDetails = bettingDetails[_id];\r\n            uint256 totalBets = _bettingDetails.totalBetsA +\r\n                _bettingDetails.totalBetsB +\r\n                _bettingDetails.totalBetsDraw;\r\n            uint256 feeAmount = (totalBets * _bettingDetails.fee) / 1e5;\r\n            bettingDetails[_id].finalBettingAmount = totalBets - feeAmount;\r\n            _bettingDetails.token.safeTransfer(admin, feeAmount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function changeBettingInfo(\r\n        uint256 _id,\r\n        string calldata _title,\r\n        string calldata _description,\r\n        string calldata _teamA,\r\n        string calldata _teamB\r\n    ) external isBettingIdexist(_id) notStart(_id) returns (bool) {\r\n        BettingInfo storage _bettingDetailsInfo = bettingDetails[_id]\r\n            .bettingInfo;\r\n        _bettingDetailsInfo.title = _title;\r\n        _bettingDetailsInfo.description = _description;\r\n        _bettingDetailsInfo.teamA = _teamA;\r\n        _bettingDetailsInfo.teamB = _teamB;\r\n        return true;\r\n    }\r\n\r\n    function changeBettingToken(uint256 _id, IERC20 _token)\r\n        external\r\n        isBettingIdexist(_id)\r\n        notStart(_id)\r\n        returns (bool)\r\n    {\r\n        bettingDetails[_id].token = _token;\r\n        return true;\r\n    }\r\n\r\n    function changeFee(uint256 _newfee) external onlyOwner returns (bool) {\r\n        bettingFee = _newfee;\r\n        return true;\r\n    }\r\n\r\n    function changeAdmin(address _admin) external onlyOwner returns (bool) {\r\n        admin = _admin;\r\n        return true;\r\n    }\r\n\r\n    function startBetting(uint256 _id)\r\n        external\r\n        onlyOwner\r\n        isBettingIdexist(_id)\r\n        notDeclare(_id)\r\n        returns (bool)\r\n    {\r\n        bettingDetails[_id].isBetStart = true;\r\n        bettingDetails[_id].isBetLive = true;\r\n        return true;\r\n    }\r\n\r\n    function stopBetting(uint256 _id)\r\n        external\r\n        onlyOwner\r\n        isBettingIdexist(_id)\r\n        isBetStart(_id)\r\n        returns (bool)\r\n    {\r\n        bettingDetails[_id].isBetLive = false;\r\n        return true;\r\n    }\r\n\r\n    function resumeBetting(uint256 _id)\r\n        external\r\n        onlyOwner\r\n        isBettingIdexist(_id)\r\n        isBetStart(_id)\r\n        notDeclare(_id)\r\n        returns (bool)\r\n    {\r\n        bettingDetails[_id].isBetLive = true;\r\n        return true;\r\n    }\r\n\r\n    function isBettingLive(uint256 _id) external view returns (bool) {\r\n        if (_id > _bettingIdCounter.current()) {\r\n            return false;\r\n        }\r\n        return bettingDetails[_id].isBetLive;\r\n    }\r\n\r\n    function isBettingStart(uint256 _id) external view returns (bool) {\r\n        if (_id > _bettingIdCounter.current()) {\r\n            return false;\r\n        }\r\n        return bettingDetails[_id].isBetStart;\r\n    }\r\n\r\n    function getTotalBettingIds() external view returns (uint256) {\r\n        return _bettingIdCounter.current();\r\n    }\r\n\r\n    function getBettingResult(uint256 _id)\r\n        external\r\n        view\r\n        returns (string memory)\r\n    {\r\n        BettingInfo memory _bettingInfo = bettingDetails[_id].bettingInfo;\r\n        string memory prefix = \"Winer is \";\r\n\r\n        uint256 status = uint256(resultStatus[_id]);\r\n        if (status == 0) {\r\n            return \"Not Declared\";\r\n        } else if (status == 1) {\r\n            return string(abi.encodePacked(prefix, _bettingInfo.teamA));\r\n        } else if (status == 2) {\r\n            return string(abi.encodePacked(prefix, _bettingInfo.teamB));\r\n        } else if (status == 3) {\r\n            return \"Match Draw\";\r\n        } else {\r\n            return \"Match Cancel\";\r\n        }\r\n    }\r\n\r\n    function getBettingFullDetails(uint256 _id)\r\n        external\r\n        view\r\n        returns (Betting memory)\r\n    {\r\n        return bettingDetails[_id];\r\n    }\r\n\r\n    function getBettingInfo(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n            string memory,\r\n            string memory,\r\n            string memory,\r\n            string memory\r\n        )\r\n    {\r\n        BettingInfo memory _bettingInfo = bettingDetails[_id].bettingInfo;\r\n        return (\r\n            _bettingInfo.title,\r\n            _bettingInfo.description,\r\n            _bettingInfo.teamA,\r\n            _bettingInfo.teamB\r\n        );\r\n    }\r\n\r\n    function getTotalBets(uint256 _id) external view returns (uint256) {\r\n        Betting memory _bettingDetails = bettingDetails[_id];\r\n        uint256 totalBets = _bettingDetails.totalBetsA +\r\n            _bettingDetails.totalBetsB +\r\n            _bettingDetails.totalBetsDraw;\r\n        return totalBets;\r\n    }\r\n\r\n    function getIndividualBets(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        Betting memory _bettingDetails = bettingDetails[_id];\r\n        return (\r\n            _bettingDetails.totalBetsA,\r\n            _bettingDetails.totalBetsB,\r\n            _bettingDetails.totalBetsDraw\r\n        );\r\n    }\r\n\r\n    function getFinalBettingAmount(uint256 _id)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return bettingDetails[_id].finalBettingAmount;\r\n    }\r\n\r\n    function getBettingToken(uint256 _id) external view returns (address) {\r\n        return address(bettingDetails[_id].token);\r\n    }\r\n\r\n    function getUsersCount(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        Betting memory _bettingDetails = bettingDetails[_id];\r\n        return (\r\n            _bettingDetails.usersCountTeamA,\r\n            _bettingDetails.usersCountTeamB,\r\n            _bettingDetails.usersCountDraw\r\n        );\r\n    }\r\n\r\n    function getUserBets(address _user, uint256 _id)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return userBets[_user][_id];\r\n    }\r\n\r\n    function getUserChoice(address _user, uint256 _id)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return userChoice[_user][_id];\r\n    }\r\n\r\n    function getUserClaim(address _user, uint256 _id)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return userClaimed[_user][_id];\r\n    }\r\n\r\n    function getUserClaimAmount(address _user, uint256 _id)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Betting memory _bettingDetails = bettingDetails[_id];\r\n        ResultStatus resultstatus = resultStatus[_id];\r\n        uint256 amount = userBets[_user][_id];\r\n        uint8 choice = userChoice[_user][_id];\r\n\r\n        if (resultstatus == ResultStatus.NotDeclare) {\r\n            return 0;\r\n        } else if (resultstatus == ResultStatus.Cancel) {\r\n            return amount;\r\n        } else if (resultstatus == ResultStatus.WinnerA) {\r\n            return\r\n                (choice == 1)\r\n                    ? (_bettingDetails.finalBettingAmount * amount) /\r\n                        (_bettingDetails.totalBetsA)\r\n                    : 0;\r\n        } else if (resultstatus == ResultStatus.WinnerB) {\r\n            return\r\n                (choice == 2)\r\n                    ? (_bettingDetails.finalBettingAmount * amount) /\r\n                        (_bettingDetails.totalBetsB)\r\n                    : 0;\r\n        } else {\r\n            return\r\n                (choice == 3)\r\n                    ? (_bettingDetails.finalBettingAmount * amount) /\r\n                        (_bettingDetails.totalBetsDraw)\r\n                    : 0;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_team\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"}],\"name\":\"DeclareResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NewBetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_option\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bettingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_teamA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_teamB\",\"type\":\"string\"}],\"name\":\"changeBettingInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"changeBettingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newfee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_teamA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_teamB\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createBetting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"enum MasterWCP.ResultStatus\",\"name\":\"_result\",\"type\":\"uint8\"}],\"name\":\"declareResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBettingFullDetails\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"teamA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"teamB\",\"type\":\"string\"}],\"internalType\":\"struct MasterWCP.BettingInfo\",\"name\":\"bettingInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalBetsA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBetsB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBetsDraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalBettingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usersCountTeamA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usersCountTeamB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usersCountDraw\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBetLive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBetStart\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct MasterWCP.Betting\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBettingInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBettingResult\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBettingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getFinalBettingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getIndividualBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTotalBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBettingIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUserBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUserChoice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUserClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUserClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUsersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isBettingLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isBettingStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resultStatus\",\"outputs\":[{\"internalType\":\"enum MasterWCP.ResultStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"resumeBetting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"startBetting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"stopBetting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterWCP", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000224641905f59e9638983b35abcad2ef9b93593fa", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4b7e2323c97ce2f2c92ac4220e47c3157f8072a44061b9e20c740e42d5cf5d09"}]}