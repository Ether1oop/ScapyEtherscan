{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RACTokenDistributor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20 {\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n}\\n\\n/// @title RAC Token Distributor Smart Contract\\n/// @author HIFI Labs Inc.\\n/// @notice This contract allows an address to claim tokens if they have any pending tokens to claim\\n\\ncontract RACTokenDistributor is Ownable {\\n  /// @notice instantiates RAC token\\n  IERC20 racInstance;\\n\\n  /// @notice maps and address to an withdrawable rac token amount\\n  mapping(address => uint256) public claimableTokensPerAddress;\\n\\n  /// @notice Emitted when user can claim tokens\\n  /// @param user The address of user\\n  /// @param amountClaimable amount of claimable tokens for the user\\n  event ClaimableRACTokens(address indexed user, uint256 amountClaimable);\\n\\n  /// @notice Emitted when user claims\\n  /// @param user The address of user\\n  /// @param amountClaimed amount claimed\\n  event RACClaimed(address indexed user, uint256 amountClaimed);\\n\\n  /// @notice create a constructor to initialize racInstance\\n  /// @param erc20Address The address of erc20 token\\n  constructor(address erc20Address) {\\n    racInstance = IERC20(erc20Address);\\n  }\\n\\n  /// @notice withdraws contract rac token balance\\n  /// @param _address address to send rac tokens to\\n  /// @dev this function is callable by only admin\\n  function withdrawContractBalance(address _address) external onlyOwner {\\n    uint256 contractBalance = racInstance.balanceOf(address(this));\\n\\n    require(\\n\\n      contractBalance > 0,\\n      \\\"there are no tokens to transfer\\\"\\n    );\\n\\n    racInstance.transfer(_address, contractBalance);\\n  }\\n\\n  /// @notice batch set claimable tokens per address\\n  /// @param _users arrays of users\\n  /// @param _claimableTokens arrays of subscription types which users will be mapped to respectively\\n  /// @param _shouldAccumulate specifies if new value should be added with existing claimable balance\\n  /// @dev this function is callable by only admin\\n  function batchUpdateClaimableRACTokensPerAddress(\\n    address[] calldata _users,\\n    uint256[] calldata _claimableTokens,\\n    bool _shouldAccumulate\\n  ) external onlyOwner {\\n    require(\\n      _users.length == _claimableTokens.length,\\n      \\\"users and claimableTokens length mismatch\\\"\\n    );\\n\\n    for (uint256 i = 0; i < _users.length; i++) {\\n      if (_shouldAccumulate) {\\n        claimableTokensPerAddress[_users[i]] += _claimableTokens[i];\\n      } else {\\n        claimableTokensPerAddress[_users[i]] = _claimableTokens[i];\\n      }\\n      emit ClaimableRACTokens(_users[i], _claimableTokens[i]);\\n    }\\n  }\\n\\n  /// @notice function to claim available RAC Tokens\\n  function claimRACTokens() external {\\n    uint256 claimableTokens = claimableTokensPerAddress[msg.sender];\\n\\n    require(\\n      claimableTokens > 0,\\n      \\\"there are no tokens to claim for this address\\\"\\n    );\\n\\n    claimableTokensPerAddress[msg.sender] = 0;\\n\\n    bool sent = racInstance.transfer(msg.sender, claimableTokens);\\n\\n    require(sent, \\\"Token transfer failed\\\");\\n\\n    emit RACClaimed(msg.sender, claimableTokens);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimable\",\"type\":\"uint256\"}],\"name\":\"ClaimableRACTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"RACClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimableTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_shouldAccumulate\",\"type\":\"bool\"}],\"name\":\"batchUpdateClaimableRACTokensPerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRACTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableTokensPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawContractBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RACTokenDistributor", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c22b30e4cce6b78aaaadae91e44e73593929a3e9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}