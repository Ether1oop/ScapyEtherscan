{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IDEXPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IAntiSnipe {\r\n  function setTokenOwner(address owner, address pair) external;\r\n\r\n  function onPreTransferCheck(\r\n    address sender,\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external returns (bool checked);\r\n}\r\n\r\ncontract Kaeri is IERC20, Ownable {\r\n    using Address for address;\r\n    \r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    string constant _name = \"Kaeri\";\r\n    string constant _symbol = \"KAERI\";\r\n    uint8 constant _decimals = 9;\r\n\r\n    uint256 _totalSupply = 1_000_000_000 * (10 ** _decimals);\r\n\r\n    //For ease to the end-user these checks do not adjust for burnt tokens and should be set accordingly.\r\n    uint256 _maxTxAmount = 5; //0.5%\r\n    uint256 _maxWalletSize = 10; //1%\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => uint256) lastSell;\r\n    mapping (address => uint256) lastSellAmount;\r\n\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n\r\n    uint256 marketingFee = 40;\r\n    uint256 marketingSellFee = 40;\r\n    uint256 liquidityFee = 20;\r\n    uint256 liquiditySellFee = 20;\r\n    uint256 totalBuyFee = marketingFee + liquidityFee;\r\n    uint256 totalSellFee = marketingSellFee + liquiditySellFee;\r\n    uint256 feeDenominator = 1000;\r\n\r\n    uint256 antiDumpTax = 200;\r\n    uint256 antiDumpPeriod = 30 minutes;\r\n    uint256 antiDumpThreshold = 21;\r\n    bool antiDumpReserve0 = true;\r\n\r\n    address public constant liquidityReceiver = DEAD;\r\n    address payable public immutable marketingReceiver;\r\n\r\n    uint256 targetLiquidity = 10;\r\n    uint256 targetLiquidityDenominator = 100;\r\n\r\n    IDEXRouter public immutable router;\r\n    \r\n    address constant routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    mapping (address => bool) liquidityPools;\r\n    mapping (address => bool) liquidityProviders;\r\n\r\n    address public pair;\r\n\r\n    uint256 public launchedAt;\r\n    uint256 public launchedTime;\r\n    uint256 public deadBlocks;\r\n \r\n    IAntiSnipe public antisnipe;\r\n    bool public protectionEnabled = false;\r\n    bool public protectionDisabled = false;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply / 400; //0.25%\r\n    uint256 public swapMinimum = _totalSupply / 10000; //0.01%\r\n    uint256 public maxSwapPercent = 75;\r\n\r\n    uint256 public unlocksAt;\r\n    address public locker;\r\n\r\n    mapping (address => bool) public whitelist;\r\n    bool public whitelistEnabled = true;\r\n\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor (address _liquidityProvider, address _marketingWallet) {\r\n        marketingReceiver = payable(_marketingWallet);\r\n\r\n        router = IDEXRouter(routerAddress);\r\n        _allowances[_liquidityProvider][routerAddress] = type(uint256).max;\r\n        _allowances[address(this)][routerAddress] = type(uint256).max;\r\n        \r\n        isFeeExempt[_liquidityProvider] = true;\r\n        liquidityProviders[_liquidityProvider] = true;\r\n\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[_liquidityProvider] = true;\r\n        isTxLimitExempt[routerAddress] = true;\r\n\r\n        _balances[_liquidityProvider] = _totalSupply;\r\n        emit Transfer(address(0), _liquidityProvider, _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure returns (uint8) { return _decimals; }\r\n    function symbol() external pure returns (string memory) { return _symbol; }\r\n    function name() external pure returns (string memory) { return _name; }\r\n    function getOwner() external view returns (address) { return owner(); }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below address(0)\");\r\n        unchecked {\r\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the address(0) address\");\r\n        require(spender != address(0), \"ERC20: approve to the address(0) address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(_balances[sender] >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        require(amount > 0, \"No tokens transferred\");\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        checkTxLimit(sender, amount);\r\n        \r\n        if (!liquidityPools[recipient] && recipient != DEAD) {\r\n            if (!isTxLimitExempt[recipient]) checkWalletLimit(recipient, amount);\r\n        }\r\n\r\n        if(!launched()){ require(liquidityProviders[sender] || liquidityProviders[recipient] || (whitelistEnabled && whitelist[recipient]), \"Contract not launched yet.\"); }\r\n\r\n        if(!liquidityPools[sender] && shouldTakeFee(sender) && _balances[sender] - amount == 0) {\r\n            amount -= 1;\r\n        }\r\n\r\n        _balances[sender] -= amount;\r\n\r\n        uint256 amountReceived = shouldTakeFee(sender) && shouldTakeFee(recipient) ? takeFee(sender, recipient, amount) : amount;\r\n        \r\n        if(shouldSwapBack(sender, recipient)){ if (amount > 0) swapBack(amount); }\r\n        \r\n        if(recipient != DEAD)\r\n            _balances[recipient] += amountReceived;\r\n        else\r\n            _totalSupply -= amountReceived;\r\n            \r\n        if (launched() && protectionEnabled && shouldTakeFee(sender))\r\n            antisnipe.onPreTransferCheck(msg.sender, sender, recipient, amount);\r\n\r\n        emit Transfer(sender, (recipient != DEAD ? recipient : address(0)), amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function checkWalletLimit(address recipient, uint256 amount) internal view {\r\n        require(_balances[recipient] + amount <= getMaximumWallet(), \"Transfer amount exceeds the bag size.\");\r\n    }\r\n\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= getTransactionLimit() || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n    function getTotalFee(bool selling) public view returns (uint256) {\r\n        if(launchedAt + deadBlocks > block.number){ return feeDenominator - 1; }\r\n        return (selling ? totalSellFee : totalBuyFee);\r\n    }\r\n\r\n    function checkImpactEstimate(uint256 amount) public view returns (uint256) {\r\n        (uint112 reserve0, uint112 reserve1,) = IDEXPair(pair).getReserves();\r\n        return amount * 1000 / ((antiDumpReserve0 ? reserve0 : reserve1) + amount);\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = 0;\r\n        if(liquidityPools[recipient] && antiDumpTax > 0) {\r\n            uint256 impactEstimate = checkImpactEstimate(amount);\r\n            \r\n            if (block.timestamp > lastSell[sender] + antiDumpPeriod) {\r\n                lastSell[sender] = block.timestamp;\r\n                lastSellAmount[sender] = 0;\r\n            }\r\n            \r\n            lastSellAmount[sender] += impactEstimate;\r\n            \r\n            if (lastSellAmount[sender] >= antiDumpThreshold) {\r\n                feeAmount = ((amount * totalSellFee * antiDumpTax) / 100) / feeDenominator;\r\n            }\r\n        }\r\n\r\n        if (feeAmount == 0)\r\n            feeAmount = (amount * getTotalFee(liquidityPools[recipient])) / feeDenominator;\r\n\r\n        _balances[address(this)] += feeAmount;\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function shouldSwapBack(address sender, address recipient) internal view returns (bool) {\r\n        return !liquidityPools[sender]\r\n        && !isFeeExempt[sender]\r\n        && !inSwap\r\n        && swapEnabled\r\n        && liquidityPools[recipient]\r\n        && _balances[address(this)] >= swapMinimum &&\r\n        totalBuyFee + totalSellFee > 0;\r\n    }\r\n\r\n    function swapBack(uint256 amount) internal swapping {\r\n        uint256 totalFee = totalBuyFee + totalSellFee;\r\n        uint256 amountToSwap = amount - (amount * maxSwapPercent / 100) < swapThreshold ? amount * maxSwapPercent / 100 : swapThreshold;\r\n        if (_balances[address(this)] < amountToSwap) amountToSwap = _balances[address(this)];\r\n        \r\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee + liquiditySellFee;\r\n        uint256 amountToLiquify = ((amountToSwap * dynamicLiquidityFee) / totalFee) / 2;\r\n        amountToSwap -= amountToLiquify;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        \r\n        //Guaranteed swap desired to prevent trade blockages\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 contractBalance = address(this).balance;\r\n        uint256 totalETHFee = totalFee - dynamicLiquidityFee / 2;\r\n\r\n        uint256 amountLiquidity = (contractBalance * dynamicLiquidityFee) / totalETHFee / 2;\r\n        uint256 amountMarketing = contractBalance - amountLiquidity;\r\n\r\n        if(amountToLiquify > 0) {\r\n            //Guaranteed swap desired to prevent trade blockages, return values ignored\r\n            router.addLiquidityETH{value: amountLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                liquidityReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountLiquidity, amountToLiquify);\r\n        }\r\n        \r\n        if (amountMarketing > 0) {\r\n            (bool sentMarketing, ) = marketingReceiver.call{value: amountMarketing}(\"\");\r\n            if(!sentMarketing) {\r\n                //Failed to transfer to marketing wallet\r\n            }\r\n        }\r\n    }\r\n\r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - (balanceOf(DEAD) + balanceOf(address(0)));\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n        return (accuracy * balanceOf(pair)) / getCirculatingSupply();\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\r\n        require(owner() == _msgSender(), \"Caller is not authorized\");\r\n        isFeeExempt[owner()] = false;\r\n        isTxLimitExempt[owner()] = false;\r\n        liquidityProviders[owner()] = false;\r\n        _allowances[owner()][routerAddress] = 0;\r\n        super.transferOwnership(newOwner);\r\n    }\r\n\r\n    function lockContract(uint256 _weeks) external onlyOwner {\r\n        require(locker == address(0), \"Contract already locked\");\r\n        require(_weeks > 0, \"No lock period specified\");\r\n        unlocksAt = block.timestamp + (_weeks * 1 weeks);\r\n        locker = owner();\r\n        super.renounceOwnership();\r\n    }\r\n\r\n    function unlockContract() external {\r\n        require(locker != address(0) && (msg.sender == locker || liquidityProviders[msg.sender]), \"Caller is not authorized\");\r\n        require(unlocksAt <= block.timestamp, \"Contract still locked\");\r\n        super.transferOwnership(locker);\r\n        locker = address(0);\r\n        unlocksAt = 0;\r\n    }\r\n\r\n    function renounceOwnership() public virtual override onlyOwner {\r\n        isFeeExempt[owner()] = false;\r\n        isTxLimitExempt[owner()] = false;\r\n        liquidityProviders[owner()] = false;\r\n        _allowances[owner()][routerAddress] = 0;\r\n        super.renounceOwnership();\r\n    }\r\n\r\n    function _checkOwner() internal view virtual override {\r\n        require(owner() != address(0) && (owner() == _msgSender() || liquidityProviders[_msgSender()]), \"Ownable: caller is not authorized\");\r\n    }\r\n\r\n    function setProtectionEnabled(bool _protect) external onlyOwner {\r\n        if (_protect)\r\n            require(!protectionDisabled, \"Protection disabled\");\r\n        protectionEnabled = _protect;\r\n        emit ProtectionToggle(_protect);\r\n    }\r\n    \r\n    function setProtection(address _protection, bool _call) external onlyOwner {\r\n        if (_protection != address(antisnipe)){\r\n            require(!protectionDisabled, \"Protection disabled\");\r\n            antisnipe = IAntiSnipe(_protection);\r\n        }\r\n        if (_call)\r\n            antisnipe.setTokenOwner(address(this), pair);\r\n        \r\n        emit ProtectionSet(_protection);\r\n    }\r\n    \r\n    function disableProtection() external onlyOwner {\r\n        protectionDisabled = true;\r\n        emit ProtectionDisabled();\r\n    }\r\n    \r\n    function setLiquidityProvider(address _provider, bool _set) external onlyOwner {\r\n        require(_provider != pair && _provider != routerAddress, \"Can't alter trading contracts in this manner.\");\r\n        isFeeExempt[_provider] = _set;\r\n        liquidityProviders[_provider] = _set;\r\n        isTxLimitExempt[_provider] = _set;\r\n        emit LiquidityProviderSet(_provider, _set);\r\n    }\r\n\r\n    function extractETH() external onlyOwner {\r\n        uint256 bal = balanceOf(address(this));\r\n            if(bal > 0) {\r\n            (bool sent, ) = msg.sender.call{value: bal}(\"\");\r\n                require(sent,\"Failed to transfer funds\");\r\n        }\r\n    }\r\n\r\n    function setAntiDumpTax(uint256 _tax, uint256 _period, uint256 _threshold, bool _reserve0) external onlyOwner {\r\n        require(_threshold >= 10 && _tax <= 300 && (_tax == 0 || _tax >= 100) && _period <= 1 hours, \"Parameters out of bounds\");\r\n        antiDumpTax = _tax;\r\n        antiDumpPeriod = _period;\r\n        antiDumpThreshold = _threshold;\r\n        antiDumpReserve0 = _reserve0;\r\n        emit AntiDumpTaxSet(_tax, _period, _threshold);\r\n    }\r\n\r\n    function launch(uint256 _deadBlocks, bool _whitelistMode) external payable onlyOwner {\r\n        require(launchedAt == 0 && _deadBlocks < 7);\r\n        require(msg.value > 0, \"Insufficient funds\");\r\n        uint256 toLP = msg.value;\r\n\r\n        IDEXFactory factory = IDEXFactory(router.factory());\r\n        address ETH = router.WETH();\r\n\r\n        pair = factory.getPair(ETH, address(this));\r\n        if(pair == address(0))\r\n            pair = factory.createPair(ETH, address(this));\r\n\r\n        liquidityPools[pair] = true;\r\n        isFeeExempt[address(this)] = true;\r\n        liquidityProviders[address(this)] = true;\r\n\r\n        router.addLiquidityETH{value: toLP}(address(this),balanceOf(address(this)),0,0,msg.sender,block.timestamp);\r\n\r\n        whitelistEnabled = _whitelistMode;\r\n\r\n        if (!_whitelistMode) {\r\n            deadBlocks = _deadBlocks;\r\n            launchedAt = block.number;\r\n            launchedTime = block.timestamp;\r\n            emit TradingLaunched();\r\n        }\r\n    }\r\n\r\n    function endWhitelist(uint256 _deadBlocks) external onlyOwner {\r\n        require(!launched() && _deadBlocks < 7);\r\n        deadBlocks = _deadBlocks;\r\n        whitelistEnabled = false;\r\n        launchedAt = block.number;\r\n        launchedTime = block.timestamp;\r\n        emit TradingLaunched();\r\n    }\r\n\r\n    function updateWhitelist(address[] calldata _addresses, bool _enabled) external onlyOwner {\r\n        require(whitelistEnabled, \"Whitelist disabled\");\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            whitelist[_addresses[i]] = _enabled;\r\n        }\r\n    }\r\n\r\n    function setTxLimit(uint256 thousandths) external onlyOwner {\r\n        require(thousandths > 0 , \"Transaction limits too low\");\r\n        _maxTxAmount = thousandths;\r\n        emit TransactionLimitSet(getTransactionLimit());\r\n    }\r\n\r\n    function getTransactionLimit() public view returns (uint256) {\r\n        if(!launched()) return 0;\r\n        return getCirculatingSupply() * _maxTxAmount / 1000;\r\n    }\r\n    \r\n    function setMaxWallet(uint256 thousandths) external onlyOwner() {\r\n        require(thousandths > 1, \"Wallet limits too low\");\r\n        _maxWalletSize = thousandths;\r\n        emit MaxWalletSet(getMaximumWallet());\r\n    }\r\n\r\n    function getMaximumWallet() public view returns (uint256) {\r\n        if(!launched()) return 0;\r\n        return getCirculatingSupply() * _maxWalletSize / 1000;\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        require(holder != address(0), \"Invalid address\");\r\n        isFeeExempt[holder] = exempt;\r\n        emit FeeExemptSet(holder, exempt);\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        require(holder != address(0), \"Invalid address\");\r\n        isTxLimitExempt[holder] = exempt;\r\n        emit TrasactionLimitExemptSet(holder, exempt);\r\n    }\r\n\r\n    function setFees(uint256 _liquidityFee, uint256 _liquiditySellFee, uint256 _marketingFee, uint256 _marketingSellFee, uint256 _feeDenominator) external onlyOwner {\r\n        require((_liquidityFee / 2) * 2 == _liquidityFee, \"Liquidity fee must be an even number due to rounding\");\r\n        require((_liquiditySellFee / 2) * 2 == _liquiditySellFee, \"Liquidity fee must be an even number due to rounding\");\r\n        liquidityFee = _liquidityFee;\r\n        liquiditySellFee = _liquiditySellFee;\r\n        marketingFee = _marketingFee;\r\n        marketingSellFee = _marketingSellFee;\r\n        totalBuyFee = _liquidityFee + _marketingFee;\r\n        totalSellFee = _liquiditySellFee + _marketingSellFee;\r\n        feeDenominator = _feeDenominator;\r\n        require(totalBuyFee + totalSellFee <= feeDenominator / 5, \"Fees too high\");\r\n        emit FeesSet(totalBuyFee, totalSellFee, feeDenominator);\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _denominator, uint256 _denominatorMin) external onlyOwner {\r\n        require(_denominator > 0 && _denominatorMin > 0, \"Denominators must be greater than 0\");\r\n        swapEnabled = _enabled;\r\n        swapMinimum = _totalSupply / _denominatorMin;\r\n        swapThreshold = _totalSupply / _denominator;\r\n        emit SwapSettingsSet(swapMinimum, swapThreshold, swapEnabled);\r\n    }\r\n\r\n    function setTargetLiquidity(uint256 _target, uint256 _denominator) external onlyOwner {\r\n        targetLiquidity = _target;\r\n        targetLiquidityDenominator = _denominator;\r\n        emit TargetLiquiditySet(_target * 100 / _denominator);\r\n    }\r\n\r\n    function addLiquidityPool(address _pool, bool _enabled) external onlyOwner {\r\n        require(_pool != address(0), \"Invalid address\");\r\n        liquidityPools[_pool] = _enabled;\r\n        emit LiquidityPoolSet(_pool, _enabled);\r\n    }\r\n\r\n\tfunction airdrop(address[] calldata _addresses, uint256[] calldata _amount) external onlyOwner\r\n    {\r\n        require(_addresses.length == _amount.length, \"Array lengths don't match\");\r\n        bool previousSwap = swapEnabled;\r\n        swapEnabled = false;\r\n        //This function may run out of gas intentionally to prevent partial airdrops\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            require(!liquidityPools[_addresses[i]] && _addresses[i] != address(0), \"Can't airdrop the liquidity pool or address 0\");\r\n            _transferFrom(msg.sender, _addresses[i], _amount[i] * (10 ** _decimals));\r\n        }\r\n        swapEnabled = previousSwap;\r\n        emit AirdropSent(msg.sender);\r\n    }\r\n\r\n    event AutoLiquify(uint256 amount, uint256 amountToken);\r\n    event ProtectionSet(address indexed protection);\r\n    event ProtectionDisabled();\r\n    event LiquidityProviderSet(address indexed provider, bool isSet);\r\n    event TradingLaunched();\r\n    event TransactionLimitSet(uint256 limit);\r\n    event MaxWalletSet(uint256 limit);\r\n    event FeeExemptSet(address indexed wallet, bool isExempt);\r\n    event TrasactionLimitExemptSet(address indexed wallet, bool isExempt);\r\n    event FeesSet(uint256 totalBuyFees, uint256 totalSellFees, uint256 denominator);\r\n    event SwapSettingsSet(uint256 minimum, uint256 maximum, bool enabled);\r\n    event LiquidityPoolSet(address indexed pool, bool enabled);\r\n    event AirdropSent(address indexed from);\r\n    event AntiDumpTaxSet(uint256 rate, uint256 period, uint256 threshold);\r\n    event TargetLiquiditySet(uint256 percent);\r\n    event ProtectionToggle(bool isEnabled);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"AirdropSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"AntiDumpTaxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"FeeExemptSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBuyFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSellFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"FeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"LiquidityPoolSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"LiquidityProviderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"MaxWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ProtectionDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protection\",\"type\":\"address\"}],\"name\":\"ProtectionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"ProtectionToggle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapSettingsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"TargetLiquiditySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingLaunched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"TransactionLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"TrasactionLimitExemptSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"addLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antisnipe\",\"outputs\":[{\"internalType\":\"contract IAntiSnipe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"checkImpactEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadBlocks\",\"type\":\"uint256\"}],\"name\":\"endWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"selling\",\"type\":\"bool\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadBlocks\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_whitelistMode\",\"type\":\"bool\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weeks\",\"type\":\"uint256\"}],\"name\":\"lockContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_reserve0\",\"type\":\"bool\"}],\"name\":\"setAntiDumpTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquiditySellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"setLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thousandths\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protection\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_call\",\"type\":\"bool\"}],\"name\":\"setProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_protect\",\"type\":\"bool\"}],\"name\":\"setProtectionEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominatorMin\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thousandths\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlocksAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Kaeri", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007612f7276c95e472809ef6193f63252c8eadbd2c000000000000000000000000a721985fae98153158896e512779dc72aa636ae9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://67daeb64f3d81208cf4761c54ac0e0a067e4373556eed4be27c050669582d9b8"}]}