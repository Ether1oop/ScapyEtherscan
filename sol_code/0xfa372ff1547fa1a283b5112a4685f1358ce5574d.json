{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\ncontract Comp {\r\n  /// @notice EIP-20 token name for this token\r\n  string public constant name = \"Bonded dAMM\";\r\n\r\n  /// @notice EIP-20 token symbol for this token\r\n  string public constant symbol = \"BDAMM\";\r\n\r\n  /// @notice EIP-20 token decimals for this token\r\n  uint8 public constant decimals = 18;\r\n\r\n  /// @notice Total number of tokens in circulation\r\n  uint256 public constant totalSupply = 250000000e18; // 250 million bdAMM\r\n\r\n  /// @notice Allowance amounts on behalf of others\r\n  mapping(address => mapping(address => uint96)) internal allowances;\r\n\r\n  /// @notice Official record of token balances for each account\r\n  mapping(address => uint96) internal balances;\r\n\r\n  /// @notice A record of each accounts delegate\r\n  mapping(address => address) public delegates;\r\n\r\n  /// @notice A checkpoint for marking number of votes from a given block\r\n  struct Checkpoint {\r\n    uint32 fromBlock;\r\n    uint96 votes;\r\n  }\r\n\r\n  /// @notice A record of votes checkpoints for each account, by index\r\n  mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\r\n\r\n  /// @notice The number of checkpoints for each account\r\n  mapping(address => uint32) public numCheckpoints;\r\n\r\n  /// @notice The EIP-712 typehash for the contract's domain\r\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n  bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n  /// @notice A record of states for signing / validating signatures\r\n  mapping(address => uint256) public nonces;\r\n\r\n  /// @notice An event thats emitted when an account changes its delegate\r\n  event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n  /// @notice An event thats emitted when a delegate account's vote balance changes\r\n  event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\r\n\r\n  /// @notice The standard EIP-20 transfer event\r\n  event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n  /// @notice The standard EIP-20 approval event\r\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n  /**\r\n   * @notice Construct a new Comp token\r\n   * @param account The initial account to grant all the tokens\r\n   */\r\n  constructor(address account) public {\r\n    balances[account] = uint96(totalSupply);\r\n    emit Transfer(address(0), account, totalSupply);\r\n  }\r\n\r\n  /**\r\n   * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\r\n   * @param account The address of the account holding the funds\r\n   * @param spender The address of the account spending the funds\r\n   * @return The number of tokens approved\r\n   */\r\n  function allowance(address account, address spender) external view returns (uint256) {\r\n    return allowances[account][spender];\r\n  }\r\n\r\n  /**\r\n   * @notice Approve `spender` to transfer up to `amount` from `src`\r\n   * @dev This will overwrite the approval amount for `spender`\r\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n   * @param spender The address of the account which may transfer tokens\r\n   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\r\n   * @return Whether or not the approval succeeded\r\n   */\r\n  function approve(address spender, uint256 rawAmount) external returns (bool) {\r\n    uint96 amount;\r\n    if (rawAmount == type(uint256).max) {\r\n      amount = type(uint96).max;\r\n    } else {\r\n      amount = safe96(rawAmount, \"BDAMM::approve: amount exceeds 96 bits\");\r\n    }\r\n\r\n    allowances[msg.sender][spender] = amount;\r\n\r\n    emit Approval(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Get the number of tokens held by the `account`\r\n   * @param account The address of the account to get the balance of\r\n   * @return The number of tokens held\r\n   */\r\n  function balanceOf(address account) external view returns (uint256) {\r\n    return balances[account];\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n   * @param dst The address of the destination account\r\n   * @param rawAmount The number of tokens to transfer\r\n   * @return Whether or not the transfer succeeded\r\n   */\r\n  function transfer(address dst, uint256 rawAmount) external returns (bool) {\r\n    uint96 amount = safe96(rawAmount, \"BDAMM::transfer: amount exceeds 96 bits\");\r\n    _transferTokens(msg.sender, dst, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` tokens from `src` to `dst`\r\n   * @param src The address of the source account\r\n   * @param dst The address of the destination account\r\n   * @param rawAmount The number of tokens to transfer\r\n   * @return Whether or not the transfer succeeded\r\n   */\r\n  function transferFrom(\r\n    address src,\r\n    address dst,\r\n    uint256 rawAmount\r\n  ) external returns (bool) {\r\n    address spender = msg.sender;\r\n    uint96 spenderAllowance = allowances[src][spender];\r\n    uint96 amount = safe96(rawAmount, \"BDAMM::approve: amount exceeds 96 bits\");\r\n\r\n    if (spender != src && spenderAllowance != type(uint96).max) {\r\n      uint96 newAllowance = sub96(spenderAllowance, amount, \"BDAMM::transferFrom: transfer amount exceeds spender allowance\");\r\n      allowances[src][spender] = newAllowance;\r\n\r\n      emit Approval(src, spender, newAllowance);\r\n    }\r\n\r\n    _transferTokens(src, dst, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Delegate votes from `msg.sender` to `delegatee`\r\n   * @param delegatee The address to delegate votes to\r\n   */\r\n  function delegate(address delegatee) public {\r\n    return _delegate(msg.sender, delegatee);\r\n  }\r\n\r\n  /**\r\n   * @notice Delegates votes from signatory to `delegatee`\r\n   * @param delegatee The address to delegate votes to\r\n   * @param nonce The contract state required to match the signature\r\n   * @param expiry The time at which to expire the signature\r\n   * @param v The recovery byte of the signature\r\n   * @param r Half of the ECDSA signature pair\r\n   * @param s Half of the ECDSA signature pair\r\n   */\r\n  function delegateBySig(\r\n    address delegatee,\r\n    uint256 nonce,\r\n    uint256 expiry,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) public {\r\n    bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\r\n    bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\r\n    bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    address signatory = ecrecover(digest, v, r, s);\r\n    require(signatory != address(0), \"BDAMM::delegateBySig: invalid signature\");\r\n    require(nonce == nonces[signatory]++, \"BDAMM::delegateBySig: invalid nonce\");\r\n    require(block.timestamp <= expiry, \"BDAMM::delegateBySig: signature expired\");\r\n    return _delegate(signatory, delegatee);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the current votes balance for `account`\r\n   * @param account The address to get votes balance\r\n   * @return The number of current votes for `account`\r\n   */\r\n  function getCurrentVotes(address account) external view returns (uint96) {\r\n    uint32 nCheckpoints = numCheckpoints[account];\r\n    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Determine the prior number of votes for an account as of a block number\r\n   * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n   * @param account The address of the account to check\r\n   * @param blockNumber The block number to get the vote balance at\r\n   * @return The number of votes the account had as of the given block\r\n   */\r\n  function getPriorVotes(address account, uint256 blockNumber) public view returns (uint96) {\r\n    require(blockNumber < block.number, \"BDAMM::getPriorVotes: not yet determined\");\r\n\r\n    uint32 nCheckpoints = numCheckpoints[account];\r\n    if (nCheckpoints == 0) {\r\n      return 0;\r\n    }\r\n\r\n    // First check most recent balance\r\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n      return checkpoints[account][nCheckpoints - 1].votes;\r\n    }\r\n\r\n    // Next check implicit zero balance\r\n    if (checkpoints[account][0].fromBlock > blockNumber) {\r\n      return 0;\r\n    }\r\n\r\n    uint32 lower = 0;\r\n    uint32 upper = nCheckpoints - 1;\r\n    while (upper > lower) {\r\n      uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n      Checkpoint memory cp = checkpoints[account][center];\r\n      if (cp.fromBlock == blockNumber) {\r\n        return cp.votes;\r\n      } else if (cp.fromBlock < blockNumber) {\r\n        lower = center;\r\n      } else {\r\n        upper = center - 1;\r\n      }\r\n    }\r\n    return checkpoints[account][lower].votes;\r\n  }\r\n\r\n  function _delegate(address delegator, address delegatee) internal {\r\n    address currentDelegate = delegates[delegator];\r\n    uint96 delegatorBalance = balances[delegator];\r\n    delegates[delegator] = delegatee;\r\n\r\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n  }\r\n\r\n  function _transferTokens(\r\n    address src,\r\n    address dst,\r\n    uint96 amount\r\n  ) internal {\r\n    require(src != address(0), \"BDAMM::_transferTokens: cannot transfer from the zero address\");\r\n    require(dst != address(0), \"BDAMM::_transferTokens: cannot transfer to the zero address\");\r\n\r\n    balances[src] = sub96(balances[src], amount, \"BDAMM::_transferTokens: transfer amount exceeds balance\");\r\n    balances[dst] = add96(balances[dst], amount, \"BDAMM::_transferTokens: transfer amount overflows\");\r\n    emit Transfer(src, dst, amount);\r\n\r\n    _moveDelegates(delegates[src], delegates[dst], amount);\r\n  }\r\n\r\n  function _moveDelegates(\r\n    address srcRep,\r\n    address dstRep,\r\n    uint96 amount\r\n  ) internal {\r\n    if (srcRep != dstRep && amount > 0) {\r\n      if (srcRep != address(0)) {\r\n        uint32 srcRepNum = numCheckpoints[srcRep];\r\n        uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n        uint96 srcRepNew = sub96(srcRepOld, amount, \"BDAMM::_moveVotes: vote amount underflows\");\r\n        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n      }\r\n\r\n      if (dstRep != address(0)) {\r\n        uint32 dstRepNum = numCheckpoints[dstRep];\r\n        uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n        uint96 dstRepNew = add96(dstRepOld, amount, \"BDAMM::_moveVotes: vote amount overflows\");\r\n        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _writeCheckpoint(\r\n    address delegatee,\r\n    uint32 nCheckpoints,\r\n    uint96 oldVotes,\r\n    uint96 newVotes\r\n  ) internal {\r\n    uint32 blockNumber = safe32(block.number, \"BDAMM::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n    if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n    } else {\r\n      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n      numCheckpoints[delegatee] = nCheckpoints + 1;\r\n    }\r\n\r\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n  }\r\n\r\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\r\n    require(n < 2**32, errorMessage);\r\n    return uint32(n);\r\n  }\r\n\r\n  function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\r\n    require(n < 2**96, errorMessage);\r\n    return uint96(n);\r\n  }\r\n\r\n  function add96(\r\n    uint96 a,\r\n    uint96 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint96) {\r\n    uint96 c = a + b;\r\n    require(c >= a, errorMessage);\r\n    return c;\r\n  }\r\n\r\n  function sub96(\r\n    uint96 a,\r\n    uint96 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint96) {\r\n    require(b <= a, errorMessage);\r\n    return a - b;\r\n  }\r\n\r\n  function getChainId() internal view returns (uint256) {\r\n    uint256 chainId;\r\n    assembly {\r\n      chainId := chainid()\r\n    }\r\n    return chainId;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Comp", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "250", "ConstructorArguments": "000000000000000000000000f2e055d3204ad73c7c51de2668435b76c727a92f", "EVMVersion": "Default", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://445954a94a5ac1599985951c86b737e55fdb81f1a84159c31e6d64ac4f4959a8"}]}