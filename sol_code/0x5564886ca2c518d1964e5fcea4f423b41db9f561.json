{"status": "1", "message": "OK", "result": [{"SourceCode": "contract NameRegister {\r\n  function addr(bytes32 _name) constant returns (address o_owner) {}\r\n  function name(address _owner) constant returns (bytes32 o_name) {}\r\n}\r\ncontract Registrar is NameRegister {\r\n  event Changed(bytes32 indexed name);\r\n  event PrimaryChanged(bytes32 indexed name, address indexed addr);\r\n  function owner(bytes32 _name) constant returns (address o_owner) {}\r\n  function addr(bytes32 _name) constant returns (address o_address) {}\r\n  function subRegistrar(bytes32 _name) constant returns (address o_subRegistrar) {}\r\n  function content(bytes32 _name) constant returns (bytes32 o_content) {}\r\n  function name(address _owner) constant returns (bytes32 o_name) {}\r\n}\r\n\r\ncontract GlobalRegistrar is Registrar {\r\n  struct Record {\r\n    address owner;\r\n    address primary;\r\n    address subRegistrar;\r\n    bytes32 content;\r\n    uint value;\r\n    uint renewalDate;\r\n  }\r\n  function Registrar() {\r\n    // TODO: Populate with hall-of-fame.\r\n  }\r\n  function reserve(bytes32 _name) {\r\n    // Don't allow the same name to be overwritten.\r\n    // TODO: bidding mechanism\r\n    if (m_toRecord[_name].owner == 0) {\r\n      m_toRecord[_name].owner = msg.sender;\r\n      Changed(_name);\r\n    }\r\n  }\r\n  /*\r\n  TODO\r\n  > 12 chars: free\r\n  <= 12 chars: auction:\r\n  1. new names are auctioned\r\n  - 7 day period to collect all bid bytes32es + deposits\r\n  - 1 day period to collect all bids to be considered (validity requires associated deposit to be >10% of bid)\r\n  - all valid bids are burnt except highest - difference between that and second highest is returned to winner\r\n  2. remember when last auctioned/renewed\r\n  3. anyone can force renewal process:\r\n  - 7 day period to collect all bid bytes32es + deposits\r\n  - 1 day period to collect all bids & full amounts - bids only uncovered if sufficiently high.\r\n  - 1% of winner burnt; original owner paid rest.\r\n  */\r\n  modifier onlyrecordowner(bytes32 _name) { if (m_toRecord[_name].owner == msg.sender) _ }\r\n  function transfer(bytes32 _name, address _newOwner) onlyrecordowner(_name) {\r\n    m_toRecord[_name].owner = _newOwner;\r\n    Changed(_name);\r\n  }\r\n  function disown(bytes32 _name) onlyrecordowner(_name) {\r\n    if (m_toName[m_toRecord[_name].primary] == _name)\r\n    {\r\n      PrimaryChanged(_name, m_toRecord[_name].primary);\r\n      m_toName[m_toRecord[_name].primary] = \"\";\r\n    }\r\n    delete m_toRecord[_name];\r\n    Changed(_name);\r\n  }\r\n  function setAddress(bytes32 _name, address _a, bool _primary) onlyrecordowner(_name) {\r\n    m_toRecord[_name].primary = _a;\r\n    if (_primary)\r\n    {\r\n      PrimaryChanged(_name, _a);\r\n      m_toName[_a] = _name;\r\n    }\r\n    Changed(_name);\r\n  }\r\n  function setSubRegistrar(bytes32 _name, address _registrar) onlyrecordowner(_name) {\r\n    m_toRecord[_name].subRegistrar = _registrar;\r\n    Changed(_name);\r\n  }\r\n  function setContent(bytes32 _name, bytes32 _content) onlyrecordowner(_name) {\r\n    m_toRecord[_name].content = _content;\r\n    Changed(_name);\r\n  }\r\n  function owner(bytes32 _name) constant returns (address) { return m_toRecord[_name].owner; }\r\n  function addr(bytes32 _name) constant returns (address) { return m_toRecord[_name].primary; }\r\n//  function subRegistrar(bytes32 _name) constant returns (address) { return m_toRecord[_name].subRegistrar; } // TODO: bring in on next iteration.\r\n  function register(bytes32 _name) constant returns (address) { return m_toRecord[_name].subRegistrar; }  // only possible for now\r\n  function content(bytes32 _name) constant returns (bytes32) { return m_toRecord[_name].content; }\r\n  function name(address _owner) constant returns (bytes32 o_name) { return m_toName[_owner]; }\r\n  mapping (address => bytes32) m_toName;\r\n  mapping (bytes32 => Record) m_toRecord;\r\n}", "ABI": "[{\"constant\": true,\"inputs\": [{\"name\": \"_owner\",\"type\": \"address\"}],\"name\": \"name\",\"outputs\": [{\"name\": \"o_name\",\"type\": \"bytes32\"}],\"type\": \"function\",\"payable\": false,\"stateMutability\": \"view\"},{\"constant\": true,\"inputs\": [{\"name\": \"_name\",\"type\": \"bytes32\"}],\"name\": \"owner\",\"outputs\": [{\"name\": \"\",\"type\": \"address\"}],\"type\": \"function\",\"payable\": false,\"stateMutability\": \"view\"},{\"constant\": true,\"inputs\": [{\"name\": \"_name\",\"type\": \"bytes32\"}],\"name\": \"content\",\"outputs\": [{\"name\": \"\",\"type\": \"bytes32\"}],\"type\": \"function\",\"payable\": false,\"stateMutability\": \"view\"},{\"constant\": true,\"inputs\": [{\"name\": \"_name\",\"type\": \"bytes32\"}],\"name\": \"addr\",\"outputs\": [{\"name\": \"\",\"type\": \"address\"}],\"type\": \"function\",\"payable\": false,\"stateMutability\": \"view\"},{\"constant\": false,\"inputs\": [{\"name\": \"_name\",\"type\": \"bytes32\"}],\"name\": \"reserve\",\"outputs\": [],\"type\": \"function\",\"payable\": true,\"stateMutability\": \"payable\"},{\"constant\": true,\"inputs\": [{\"name\": \"_name\",\"type\": \"bytes32\"}],\"name\": \"subRegistrar\",\"outputs\": [{\"name\": \"o_subRegistrar\",\"type\": \"address\"}],\"type\": \"function\",\"payable\": false,\"stateMutability\": \"view\"},{\"constant\": false,\"inputs\": [{\"name\": \"_name\",\"type\": \"bytes32\"},{\"name\": \"_newOwner\",\"type\": \"address\"}],\"name\": \"transfer\",\"outputs\": [],\"type\": \"function\",\"payable\": true,\"stateMutability\": \"payable\"},{\"constant\": false,\"inputs\": [{\"name\": \"_name\",\"type\": \"bytes32\"},{\"name\": \"_registrar\",\"type\": \"address\"}],\"name\": \"setSubRegistrar\",\"outputs\": [],\"type\": \"function\",\"payable\": true,\"stateMutability\": \"payable\"},{\"constant\": false,\"inputs\": [],\"name\": \"Registrar\",\"outputs\": [],\"type\": \"function\",\"payable\": true,\"stateMutability\": \"payable\"},{\"constant\": false,\"inputs\": [{\"name\": \"_name\",\"type\": \"bytes32\"},{\"name\": \"_a\",\"type\": \"address\"},{\"name\": \"_primary\",\"type\": \"bool\"}],\"name\": \"setAddress\",\"outputs\": [],\"type\": \"function\",\"payable\": true,\"stateMutability\": \"payable\"},{\"constant\": false,\"inputs\": [{\"name\": \"_name\",\"type\": \"bytes32\"},{\"name\": \"_content\",\"type\": \"bytes32\"}],\"name\": \"setContent\",\"outputs\": [],\"type\": \"function\",\"payable\": true,\"stateMutability\": \"payable\"},{\"constant\": false,\"inputs\": [{\"name\": \"_name\",\"type\": \"bytes32\"}],\"name\": \"disown\",\"outputs\": [],\"type\": \"function\",\"payable\": true,\"stateMutability\": \"payable\"},{\"constant\": true,\"inputs\": [{\"name\": \"_name\",\"type\": \"bytes32\"}],\"name\": \"register\",\"outputs\": [{\"name\": \"\",\"type\": \"address\"}],\"type\": \"function\",\"payable\": false,\"stateMutability\": \"view\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": true,\"name\": \"name\",\"type\": \"bytes32\"}],\"name\": \"Changed\",\"type\": \"event\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": true,\"name\": \"name\",\"type\": \"bytes32\"},{\"indexed\": true,\"name\": \"addr\",\"type\": \"address\"}],\"name\": \"PrimaryChanged\",\"type\": \"event\"},{\"type\": \"fallback\",\"payable\": true,\"stateMutability\": \"payable\"}]", "ContractName": "globalregistrar", "CompilerVersion": "v0.1.1+commit.6ff4cd6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}