{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.11.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.7.3\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.7.3\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.7.3\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.7.3\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/EthericeStaking.sol\r\npragma solidity 0.8.16;\r\n\r\n\r\n\r\ninterface TokenContractInterface {\r\n    function calcDay() external view returns (uint256);\r\n\r\n    function lobbyEntry(uint256 _day) external view returns (uint256);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function dev_addr() external view returns (address);\r\n}\r\n\r\ncontract EthericeStaking is Ownable, ReentrancyGuard {\r\n    event NewStake(\r\n        address indexed addr,\r\n        uint256 timestamp,\r\n        uint256 indexed stakeId,\r\n        uint256 stakeAmount,\r\n        uint256 stakeDuration\r\n    );\r\n    event StakeCollected(\r\n        address indexed addr,\r\n        uint256 timestamp,\r\n        uint256 indexed stakeId,\r\n        uint256 stakeAmount,\r\n        uint256 divsReceived\r\n    );\r\n    event SellStakeRequest(\r\n        address indexed addr,\r\n        uint256 timestamp,\r\n        uint256 indexed stakeId,\r\n        uint256 price\r\n    );\r\n    event CancelStakeSellRequest(\r\n        address indexed addr,\r\n        uint256 timestamp,\r\n        uint256 indexed stakeId\r\n    );\r\n    event StakeSold(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 timestamp,\r\n        uint256 sellAmount,\r\n        uint256 indexed stakeId\r\n    );\r\n    event NewLoanRequest(\r\n        address indexed addr,\r\n        uint256 timestamp,\r\n        uint256 loanAmount,\r\n        uint256 interestAmount,\r\n        uint256 duration,\r\n        uint256 indexed stakeId\r\n    );\r\n    event LoanRequestFilled(\r\n        address indexed filledBy,\r\n        uint256 timestamp,\r\n        address indexed receivedBy,\r\n        uint256 loanamount,\r\n        uint256 indexed stakeId\r\n    );\r\n    event LoanRepaid(\r\n        address indexed paidTo,\r\n        uint256 timestamp,\r\n        uint256 interestAmount,\r\n        uint256 loanamount,\r\n        uint256 indexed stakeId\r\n    );\r\n    event CancelLoanRequest(\r\n        address indexed addr,\r\n        uint256 timestamp,\r\n        uint256 indexed stakeId\r\n    );\r\n\r\n    struct stake {\r\n        address owner;\r\n        uint256 tokensStaked;\r\n        uint256 startDay;\r\n        uint256 endDay;\r\n        uint256 forSalePrice;\r\n        uint256 loanRepayments; // loan repayments made on this stake (deduct from divs on withdrawal)\r\n        bool hasCollected;\r\n    }\r\n\r\n    /* A map for each  stakeId => struct stake */\r\n    mapping(uint256 => stake) public mapStakes;\r\n    uint256 public lastStakeIndex;\r\n    /* Address => stakeId for a users stakes */\r\n    mapping(address => uint256[]) internal _userStakes;\r\n\r\n    struct loan {\r\n        address requestedBy;\r\n        address filledBy;\r\n        uint256 loanAmount;\r\n        uint256 loanInterest;\r\n        uint256 loanDuration;\r\n        uint256 startDay;\r\n        uint256 endDay;\r\n    }\r\n    /* A map for each loan loanId => struct loan */\r\n    mapping(uint256 => loan) public mapLoans;\r\n    /* Address => stakeId for a users loans (address is the person filling the loan not receiving it) */\r\n    mapping(address => uint256[]) internal _userLends;\r\n\r\n    /** Hold amount of eth owed to dev fees */\r\n    uint256 public devFees;\r\n\r\n    /** Total ETH in the dividend pool for each day */\r\n    mapping(uint256 => uint256) public dayDividendPool;\r\n\r\n    /** Total tokens that have been staked each day */\r\n    mapping(uint256 => uint256) public tokensInActiveStake;\r\n\r\n    /** TokenContract object  */\r\n    TokenContractInterface public _tokenContract;\r\n\r\n    /** Ensures that token contract can't be changed for securiy */\r\n    bool public tokenContractAddressSet = false;\r\n\r\n    /** The amount of days each days divs would be spread over */\r\n    uint256 public maxDividendRewardDays = 30;\r\n\r\n    /** The max amount of days user can stake */\r\n    uint256 public maxStakeDays = 60;\r\n\r\n    uint256 constant public devSellStakeFee = 10;\r\n    uint256 constant public devLoanFeePercent = 2;\r\n\r\n    address public deployer;\r\n\r\n    constructor() {\r\n        deployer = msg.sender;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /**\r\n        @dev Set the contract address, must be run before any eth is posted\r\n        to the contract\r\n        @param _address the token contract address\r\n    */\r\n    function setTokenContractAddress(address _address) external {\r\n        require(_address != address(0), \"Address cannot be zero\");\r\n        require(tokenContractAddressSet == false, \"Token contract address already set\");\r\n        require(msg.sender==deployer, \"Only deployer can set this value\");\r\n        require(owner() != deployer, \"Ownership must be transferred before contract start\");\r\n        tokenContractAddressSet = true;\r\n        _tokenContract = TokenContractInterface(_address);\r\n    }\r\n\r\n    /**\r\n        @dev runs when and eth is sent to the divs contract and distros\r\n        it out across the total div days\r\n    */\r\n    function receiveDivs() external payable {\r\n        // calcDay will return 2 when we're processing the divs from day 1\r\n        uint256 _day =  _tokenContract.calcDay();\r\n        require(_day > 1, \"receive divs not yet enabled\");\r\n        // We process divs for previous day;\r\n        _day--;\r\n\r\n        require(msg.sender == address(_tokenContract), \"Unauthorized\");\r\n        uint256 _daysToSplitRewardsOver = _day < maxDividendRewardDays\r\n            ? _day\r\n            : maxDividendRewardDays;\r\n\r\n        if(_day == 1) {\r\n            _daysToSplitRewardsOver = 2 ;\r\n        }\r\n        \r\n        uint256 _totalDivsPerDay = msg.value / _daysToSplitRewardsOver ;\r\n        \r\n        for (uint256 i = 1; i <= _daysToSplitRewardsOver; ) {\r\n            dayDividendPool[_day + i] += _totalDivsPerDay;\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        @dev update the max days dividends are spread over\r\n        @param _newMaxRewardDays the max days\r\n    */\r\n    function updateMaxDividendRewardDays(uint256 _newMaxRewardDays) external onlyOwner {\r\n        require((_newMaxRewardDays <= 60 && _newMaxRewardDays >= 10), \"New value must be <= 60 & >= 10\");\r\n        maxDividendRewardDays = _newMaxRewardDays;\r\n    }\r\n\r\n    /**\r\n     * @dev set the max staking days\r\n     * @param _amount the number of days\r\n     */\r\n    function updateMaxStakeDays(uint256 _amount) external onlyOwner {\r\n        require((_amount <= 300 && _amount > 30), \"New value must be <= 300 and > 30\");\r\n        maxStakeDays = _amount;\r\n    }\r\n\r\n    /**\r\n     * @dev User creates a new stake \r\n     * @param _amount total tokens to stake\r\n     * @param _days must be less than max stake days. \r\n     * the more days the higher the gas fee\r\n     */\r\n    function newStake(uint256 _amount, uint256 _days) external nonReentrant {\r\n        require(_days > 1, \"Staking: Staking days < 1\");\r\n        require(\r\n            _days <= maxStakeDays,\r\n            \"Staking: Staking days > max_stake_days\"\r\n        );\r\n\r\n        uint256 _currentDay = _tokenContract.calcDay();\r\n        require(_currentDay > 0, \"Staking not enabled\");\r\n\r\n        bool success = _tokenContract.transferFrom(msg.sender, address(this), _amount);\r\n        require(success, \"Transfer failed\");\r\n\r\n\r\n        uint256 _stakeId = _getNextStakeId();\r\n\r\n        uint256 _endDay =_currentDay + 1 + _days;\r\n        uint256 _startDay = _currentDay + 1;\r\n        mapStakes[_stakeId] = stake({\r\n            owner: msg.sender,\r\n            tokensStaked: _amount,\r\n            startDay: _startDay,\r\n            endDay: _endDay,\r\n            forSalePrice: 0,\r\n            hasCollected: false,\r\n            loanRepayments: 0\r\n        });\r\n\r\n        for (uint256 i = _startDay; i < _endDay ;) {\r\n            tokensInActiveStake[i] += _amount;\r\n\r\n            unchecked{ i++; }\r\n        }\r\n\r\n        _userStakes[msg.sender].push(_stakeId);\r\n\r\n        emit NewStake(msg.sender, block.timestamp, _stakeId, _amount, _days);\r\n    }\r\n\r\n    /** \r\n     * @dev Get the next stake id index \r\n     */\r\n    function _getNextStakeId() internal returns (uint256) {\r\n        lastStakeIndex++;\r\n        return lastStakeIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev called by user to collect an outstading stake\r\n     */\r\n    function collectStake(uint256 _stakeId) external nonReentrant {\r\n        stake storage _stake = mapStakes[_stakeId];\r\n        uint256 currentDay = _tokenContract.calcDay();\r\n        \r\n        require(_stake.owner == msg.sender, \"Unauthorised\");\r\n        require(_stake.hasCollected == false, \"Already Collected\");\r\n        require( currentDay > _stake.endDay , \"Stake hasn't ended\");\r\n\r\n        // Check for outstanding loans\r\n        loan storage _loan = mapLoans[_stakeId];\r\n        if(_loan.filledBy != address(0)){\r\n            // Outstanding loan has not been paid off \r\n            // so do that now\r\n            repayLoan(_stakeId);\r\n        } else if (_loan.requestedBy != address(0)) {\r\n            _clearLoan(_stakeId);   \r\n        }\r\n\r\n        // Get new instance of loan after potential updates\r\n        _loan = mapLoans[_stakeId];\r\n\r\n         // Get the loan from storage again \r\n         // and check its cleard before we move on\r\n        require(_loan.filledBy == address(0), \"Stake has unpaid loan\");\r\n        require(_loan.requestedBy == address(0), \"Stake has outstanding loan request\");\r\n            \r\n        uint256 profit = calcStakeCollecting(_stakeId);\r\n        mapStakes[_stakeId].hasCollected = true;\r\n\r\n        // Send user the stake back\r\n        bool success = _tokenContract.transfer(\r\n            msg.sender,\r\n            _stake.tokensStaked\r\n        );\r\n        require(success, \"Transfer failed\");\r\n\r\n        // Send the user divs\r\n        Address.sendValue( payable(_stake.owner) , profit);\r\n\r\n        emit StakeCollected(\r\n            _stake.owner,\r\n            block.timestamp,\r\n            _stakeId,\r\n            _stake.tokensStaked,\r\n            profit\r\n        );\r\n    }\r\n\r\n    /** \r\n     * Added an auth wrapper to the cancel loan request\r\n     * so it cant be canceled by just anyone externally\r\n     */\r\n    function cancelLoanRequest(uint256 _stakeId) external {\r\n        stake storage _stake = mapStakes[_stakeId];\r\n        require(msg.sender == _stake.owner, \"Unauthorised\");\r\n        _cancelLoanRequest(_stakeId);\r\n    }\r\n\r\n    function _cancelLoanRequest(uint256 _stakeId) internal {\r\n        mapLoans[_stakeId] = loan({\r\n            requestedBy: address(0),\r\n            filledBy: address(0),\r\n            loanAmount: 0,\r\n            loanInterest: 0,\r\n            loanDuration: 0,\r\n            startDay: 0,\r\n            endDay: 0\r\n        });\r\n\r\n        emit CancelLoanRequest(\r\n            msg.sender,\r\n            block.timestamp,\r\n            _stakeId\r\n        );\r\n    }\r\n\r\n    function _clearLoan(uint256 _stakeId) internal {\r\n        loan storage _loan = mapLoans[_stakeId];\r\n         if(_loan.filledBy == address(0)) {\r\n                // Just an unfilled loan request so we can cancel it off\r\n                _cancelLoanRequest(_stakeId);\r\n            } else  {\r\n                // Loan was filled so if its not been claimed yet we need to \r\n                // send the repayment back to the loaner\r\n                repayLoan(_stakeId);\r\n            }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculating a stakes ETH divs payout value by looping through each day of it\r\n     * @param _stakeId Id of the target stake\r\n     */\r\n    function calcStakeCollecting(uint256 _stakeId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 currentDay = _tokenContract.calcDay();\r\n        uint256 userDivs;\r\n        stake memory _stake = mapStakes[_stakeId];\r\n\r\n        for (\r\n            uint256 _day = _stake.startDay;\r\n            _day < _stake.endDay && _day < currentDay;\r\n        ) {\r\n            userDivs +=\r\n                (dayDividendPool[_day] * _stake.tokensStaked) /\r\n                tokensInActiveStake[_day];\r\n\r\n                unchecked {\r\n                    _day++;\r\n                }\r\n        }\r\n\r\n        delete currentDay;\r\n        delete _stake;\r\n\r\n        // remove any loans returned amount from the total\r\n        return (userDivs - _stake.loanRepayments);\r\n    }\r\n\r\n    function listStakeForSale(uint256 _stakeId, uint256 _price) external {\r\n        stake memory _stake = mapStakes[_stakeId];\r\n        require(_stake.owner == msg.sender, \"Unauthorised\");\r\n        require(_stake.hasCollected == false, \"Already Collected\");\r\n\r\n        uint256 _currentDay = _tokenContract.calcDay();\r\n        require(_stake.endDay >= _currentDay, \"Stake has ended\");\r\n\r\n         // can't list a stake for sale whilst we have an outstanding loan against it\r\n        loan storage _loan = mapLoans[_stakeId];\r\n        require(_loan.requestedBy == address(0), \"Stake has an outstanding loan request\");\r\n\r\n        mapStakes[_stakeId].forSalePrice = _price;\r\n\r\n        emit SellStakeRequest(msg.sender, block.timestamp, _stakeId, _price);\r\n\r\n        delete _currentDay;\r\n        delete _stake;\r\n    }\r\n\r\n    function cancelStakeSellRequest(uint256 _stakeId) external {\r\n        require(mapStakes[_stakeId].owner == msg.sender, \"Unauthorised\");\r\n        require(mapStakes[_stakeId].forSalePrice > 0, \"Stake is not for sale\");\r\n        mapStakes[_stakeId].forSalePrice = 0;\r\n\r\n        emit CancelStakeSellRequest(\r\n            msg.sender,\r\n            block.timestamp,\r\n            _stakeId\r\n        );\r\n    }\r\n\r\n    function buyStake(uint256 _stakeId) external payable nonReentrant {\r\n        stake memory _stake = mapStakes[_stakeId];\r\n        require(_stake.forSalePrice > 0, \"Stake not for sale\");\r\n        require(_stake.owner != msg.sender, \"Can't buy own stakes\");\r\n\r\n        loan storage _loan = mapLoans[_stakeId];\r\n        require(_loan.filledBy == address(0), \"Can't buy stake with unpaid loan\");\r\n\r\n        uint256 _currentDay = _tokenContract.calcDay();\r\n        require(\r\n            _stake.endDay > _currentDay,\r\n            \"stake can't be brought after it has ended\"\r\n        );\r\n        require(_stake.hasCollected == false, \"Stake already collected\");\r\n        require(msg.value >= _stake.forSalePrice, \"msg.value is < stake price\");\r\n\r\n        uint256 _devShare = (_stake.forSalePrice * devSellStakeFee) / 100;\r\n        uint256 _sellAmount =  _stake.forSalePrice - _devShare;\r\n\r\n        dayDividendPool[_currentDay] += _devShare / 2;\r\n        devFees += _devShare / 2;\r\n\r\n        _userStakes[msg.sender].push(_stakeId);\r\n\r\n        mapStakes[_stakeId].owner = msg.sender;\r\n        mapStakes[_stakeId].forSalePrice = 0;\r\n\r\n        Address.sendValue(payable(_stake.owner), _sellAmount);\r\n\r\n        emit StakeSold(\r\n            _stake.owner,\r\n            msg.sender,\r\n            block.timestamp,\r\n            _sellAmount,\r\n            _stakeId\r\n        );\r\n\r\n        delete _stake;\r\n    }\r\n\r\n    /**\r\n     * @dev send the devFees to the dev wallet\r\n     */\r\n    function flushDevTaxes() external nonReentrant{\r\n        address _devWallet = _tokenContract.dev_addr();\r\n        uint256 _devFees = devFees;\r\n        devFees = 0;\r\n        Address.sendValue(payable(_devWallet), _devFees);\r\n    }\r\n\r\n    function requestLoanOnStake(\r\n        uint256 _stakeId,\r\n        uint256 _loanAmount,\r\n        uint256 _interestAmount,\r\n        uint256 _duration\r\n    ) external {\r\n\r\n        stake storage _stake = mapStakes[_stakeId];\r\n        require(_stake.owner == msg.sender, \"Unauthorised\");\r\n        require(_stake.hasCollected == false, \"Already Collected\");\r\n\r\n        uint256 _currentDay = _tokenContract.calcDay();\r\n        require(_stake.endDay > (_currentDay + _duration), \"Loan must expire before stake end day\");\r\n\r\n        loan storage _loan = mapLoans[_stakeId];\r\n        require(_loan.filledBy == address(0), \"Stake already has outstanding loan\");\r\n\r\n        uint256 userDivs = calcStakeCollecting(_stakeId);\r\n        require(userDivs > ( _stake.loanRepayments + _loanAmount + _interestAmount), \"Loan amount is > divs earned so far\");\r\n\r\n\r\n        mapLoans[_stakeId] = loan({\r\n            requestedBy: msg.sender,\r\n            filledBy: address(0),\r\n            loanAmount: _loanAmount,\r\n            loanInterest: _interestAmount,\r\n            loanDuration: _duration,\r\n            startDay: 0,\r\n            endDay: 0\r\n        });\r\n\r\n        emit NewLoanRequest(\r\n            msg.sender,\r\n            block.timestamp,\r\n            _loanAmount,\r\n            _interestAmount,\r\n            _duration,\r\n            _stakeId\r\n        );\r\n    }\r\n\r\n    function fillLoan(uint256 _stakeId) external payable nonReentrant {\r\n        stake storage _stake = mapStakes[_stakeId];\r\n        loan storage _loan = mapLoans[_stakeId];\r\n        \r\n        require(_loan.requestedBy != address(0), \"No active loan on this stake\");\r\n        require(_stake.hasCollected == false, \"Stake Collected\");\r\n\r\n        uint256 _currentDay = _tokenContract.calcDay();\r\n        require(_stake.endDay > _currentDay, \"Stake ended\");\r\n\r\n        require(_stake.endDay > (_currentDay + _loan.loanDuration), \"Loan must expire before stake end day\");\r\n        \r\n        require(_loan.filledBy == address(0), \"Already filled\");\r\n        require(_loan.loanAmount <= msg.value, \"Not enough eth\");\r\n\r\n        require(msg.sender != _stake.owner, \"No lend on own stakes\");\r\n\r\n        if (_stake.forSalePrice > 0) {\r\n            // Can't sell a stake with an outstanding loan so we remove from sale\r\n            mapStakes[_stakeId].forSalePrice = 0;\r\n        }\r\n\r\n        mapLoans[_stakeId] = loan({\r\n            requestedBy: _loan.requestedBy,\r\n            filledBy: msg.sender,\r\n            loanAmount: _loan.loanAmount,\r\n            loanInterest: _loan.loanInterest,\r\n            loanDuration: _loan.loanDuration,\r\n            startDay: _currentDay + 1,\r\n            endDay: _currentDay + 1 + _loan.loanDuration\r\n        });\r\n\r\n        // Deduct fees\r\n        uint256 _devShare = (_loan.loanAmount * devLoanFeePercent) / 100;\r\n        uint256 _loanAmount = _loan.loanAmount - _devShare; \r\n\r\n        dayDividendPool[_currentDay] += _devShare / 2;\r\n        devFees += _devShare / 2;\r\n\r\n        // Send the loan to the requester\r\n        Address.sendValue(payable(_loan.requestedBy), _loanAmount);\r\n\r\n        _userLends[msg.sender].push(_stakeId);\r\n\r\n        emit LoanRequestFilled(\r\n            msg.sender,\r\n            block.timestamp,\r\n            _stake.owner,\r\n            _loanAmount,\r\n            _stakeId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * This function is public so any can call and it\r\n     * will repay the loan to the loaner. Stakes can only\r\n     * have 1 active loan at a time so if the staker wants\r\n     * to take out a new loan they will have to call the \r\n     * repayLoan function first to pay the outstanding \r\n     * loan.\r\n     * This avoids us having to use an array and loop\r\n     * through loans to see which ones need paying back\r\n     * @param _stakeId the stake to repay the loan from \r\n     */\r\n    function repayLoan(uint256 _stakeId) public {\r\n        loan memory _loan = mapLoans[_stakeId];\r\n        require(_loan.requestedBy != address(0), \"No loan on stake\");\r\n        require(_loan.filledBy != address(0), \"Loan not filled\");\r\n\r\n        uint256 _currentDay = _tokenContract.calcDay();\r\n        require(_loan.endDay <= _currentDay, \"Loan duration not met\");\r\n\r\n        // Save the payment here so its deducted from the divs \r\n        // on withdrawal\r\n        mapStakes[_stakeId].loanRepayments += (  _loan.loanAmount + _loan.loanInterest );\r\n\r\n        _cancelLoanRequest(_stakeId);\r\n        \r\n        Address.sendValue(payable(_loan.filledBy), _loan.loanAmount + _loan.loanInterest);\r\n\r\n        // address indexed paidTo,\r\n        // uint256 timestamp,\r\n        // address interestAmount,\r\n        // uint256 loanamount,\r\n        // uint256 stakeId\r\n        emit LoanRepaid(\r\n            _loan.filledBy,\r\n            block.timestamp,\r\n            _loan.loanInterest,\r\n            _loan.loanAmount,\r\n            _stakeId\r\n        );\r\n    }\r\n\r\n    function totalDividendPool() external view returns (uint256) {\r\n        uint256 _day = _tokenContract.calcDay();\r\n        // Prevent start day going to -1 on day 0\r\n        if(_day <= 0) {\r\n            return 0;\r\n        }\r\n        uint256 _startDay = _day;\r\n        uint256 _total;\r\n        for (uint256 i = 0; i <= (_startDay +  maxDividendRewardDays) ; ) {\r\n            _total += dayDividendPool[_startDay + i];\r\n            unchecked {\r\n                 i++;\r\n            }\r\n        }\r\n    \r\n        return _total;\r\n    }\r\n\r\n    function userStakes(address _address) external view returns(uint256[] memory){\r\n        return _userStakes[_address];\r\n    }\r\n\r\n    function userLends(address _address) external view returns (uint256[] memory) {\r\n        return _userLends[_address];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"CancelLoanRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"CancelStakeSellRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paidTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanamount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"filledBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receivedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanamount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"LoanRequestFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"NewLoanRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeDuration\",\"type\":\"uint256\"}],\"name\":\"NewStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SellStakeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"divsReceived\",\"type\":\"uint256\"}],\"name\":\"StakeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"StakeSold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_tokenContract\",\"outputs\":[{\"internalType\":\"contract TokenContractInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"buyStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"calcStakeCollecting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"cancelLoanRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"cancelStakeSellRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"collectStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayDividendPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devLoanFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devSellStakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"fillLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flushDevTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"listStakeForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapLoans\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"requestedBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"filledBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapStakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanRepayments\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasCollected\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDividendRewardDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakeDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"newStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveDivs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"requestLoanOnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTokenContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContractAddressSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensInActiveStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividendPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxRewardDays\",\"type\":\"uint256\"}],\"name\":\"updateMaxDividendRewardDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateMaxStakeDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"userLends\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EthericeStaking", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://126a82cd51b125a36a88ecf18f018542d8e7d70f3419d9e43e3c67709d04dd6a"}]}