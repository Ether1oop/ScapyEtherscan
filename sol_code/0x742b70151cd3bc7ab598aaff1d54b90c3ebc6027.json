{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.9.2 https://hardhat.org\r\n\r\n// File @rari-capital/solmate/src/utils/ReentrancyGuard.sol@v6.2.0\r\n\r\n\r\n\r\n\r\n/// @notice Gas optimized reentrancy protection for smart contracts.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\r\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\r\nabstract contract ReentrancyGuard {\r\n    uint256 private reentrancyStatus = 1;\r\n\r\n    modifier nonReentrant() {\r\n        require(reentrancyStatus == 1, \"REENTRANCY\");\r\n\r\n        reentrancyStatus = 2;\r\n\r\n        _;\r\n\r\n        reentrancyStatus = 1;\r\n    }\r\n}\r\n\r\n\r\n// File @rari-capital/solmate/src/tokens/ERC20.sol@v6.2.0\r\n\r\n\r\n\r\n\r\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\r\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\r\nabstract contract ERC20 {\r\n    /*///////////////////////////////////////////////////////////////\r\n                                  EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public immutable decimals;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             EIP-2612 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n    uint256 internal immutable INITIAL_CHAIN_ID;\r\n\r\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\r\n\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        INITIAL_CHAIN_ID = block.chainid;\r\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        balanceOf[msg.sender] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              EIP-2612 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\r\n\r\n        // Unchecked because the only math done is incrementing\r\n        // the owner's nonce which cannot realistically overflow.\r\n        unchecked {\r\n            bytes32 digest = keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19\\x01\",\r\n                    DOMAIN_SEPARATOR(),\r\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n                )\r\n            );\r\n\r\n            address recoveredAddress = ecrecover(digest, v, r, s);\r\n\r\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\r\n\r\n            allowance[recoveredAddress][spender] = value;\r\n        }\r\n\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\r\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\r\n    }\r\n\r\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                    keccak256(bytes(name)),\r\n                    keccak256(\"1\"),\r\n                    block.chainid,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                       INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user's balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\n\r\n// File @rari-capital/solmate/src/utils/SafeTransferLib.sol@v6.2.0\r\n\r\n\r\n\r\n\r\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\r\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\r\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\r\nlibrary SafeTransferLib {\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ETH OPERATIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function safeTransferETH(address to, uint256 amount) internal {\r\n        bool callStatus;\r\n\r\n        assembly {\r\n            // Transfer the ETH and store if it succeeded or not.\r\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\r\n        }\r\n\r\n        require(callStatus, \"ETH_TRANSFER_FAILED\");\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                           ERC20 OPERATIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function safeTransferFrom(\r\n        ERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool callStatus;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata to memory piece by piece:\r\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\r\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"from\" argument.\r\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\r\n\r\n            // Call the token and store if it succeeded or not.\r\n            // We use 100 because the calldata length is 4 + 32 * 3.\r\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\r\n        }\r\n\r\n        require(didLastOptionalReturnCallSucceed(callStatus), \"TRANSFER_FROM_FAILED\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        ERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool callStatus;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata to memory piece by piece:\r\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\r\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\r\n\r\n            // Call the token and store if it succeeded or not.\r\n            // We use 68 because the calldata length is 4 + 32 * 2.\r\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\r\n        }\r\n\r\n        require(didLastOptionalReturnCallSucceed(callStatus), \"TRANSFER_FAILED\");\r\n    }\r\n\r\n    function safeApprove(\r\n        ERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool callStatus;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata to memory piece by piece:\r\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\r\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\r\n\r\n            // Call the token and store if it succeeded or not.\r\n            // We use 68 because the calldata length is 4 + 32 * 2.\r\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\r\n        }\r\n\r\n        require(didLastOptionalReturnCallSucceed(callStatus), \"APPROVE_FAILED\");\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                         INTERNAL HELPER LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\r\n        assembly {\r\n            // Get how many bytes the call returned.\r\n            let returnDataSize := returndatasize()\r\n\r\n            // If the call reverted:\r\n            if iszero(callStatus) {\r\n                // Copy the revert message into memory.\r\n                returndatacopy(0, 0, returnDataSize)\r\n\r\n                // Revert with the same message.\r\n                revert(0, returnDataSize)\r\n            }\r\n\r\n            switch returnDataSize\r\n            case 32 {\r\n                // Copy the return data into memory.\r\n                returndatacopy(0, 0, returnDataSize)\r\n\r\n                // Set success to whether it returned true.\r\n                success := iszero(iszero(mload(0)))\r\n            }\r\n            case 0 {\r\n                // There was no return data.\r\n                success := 1\r\n            }\r\n            default {\r\n                // It returned some malformed input.\r\n                success := 0\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/core/RLBTRFLY.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.12;\r\n\r\n\r\n\r\n\r\n/// @title RLBTRFLY\r\n/// @author \u2588\u2588\u2588\u2588\r\n\r\n/**\r\n    @notice\r\n    Partially adapted from Convex's CvxLockerV2 contract with some modifications and optimizations for the BTRFLY V2 requirements\r\n*/\r\n\r\ncontract RLBTRFLY is ReentrancyGuard, Ownable {\r\n    using SafeTransferLib for ERC20;\r\n\r\n    /**\r\n        @notice Lock balance details\r\n        @param  amount      uint224  Locked amount in the lock\r\n        @param  unlockTime  uint32   Unlock time of the lock\r\n     */\r\n    struct LockedBalance {\r\n        uint224 amount;\r\n        uint32 unlockTime;\r\n    }\r\n\r\n    /**\r\n        @notice Balance details\r\n        @param  locked           uint224          Overall locked amount\r\n        @param  nextUnlockIndex  uint32           Index of earliest next unlock\r\n        @param  lockedBalances   LockedBalance[]  List of locked balances data\r\n     */\r\n    struct Balance {\r\n        uint224 locked;\r\n        uint32 nextUnlockIndex;\r\n        LockedBalance[] lockedBalances;\r\n    }\r\n\r\n    // 1 epoch = 1 week\r\n    uint32 public constant EPOCH_DURATION = 1 weeks;\r\n    // Full lock duration = 16 epochs\r\n    uint256 public constant LOCK_DURATION = 16 * EPOCH_DURATION;\r\n\r\n    ERC20 public immutable btrflyV2;\r\n\r\n    uint256 public lockedSupply;\r\n\r\n    mapping(address => Balance) public balances;\r\n\r\n    bool public isShutdown;\r\n\r\n    string public constant name = \"Revenue-Locked BTRFLY\";\r\n    string public constant symbol = \"rlBTRFLY\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    event Shutdown();\r\n    event Locked(\r\n        address indexed account,\r\n        uint256 indexed epoch,\r\n        uint256 amount\r\n    );\r\n    event Withdrawn(address indexed account, uint256 amount, bool relock);\r\n\r\n    error ZeroAddress();\r\n    error ZeroAmount();\r\n    error IsShutdown();\r\n    error InvalidNumber(uint256 value);\r\n\r\n    /**\r\n        @param  _btrflyV2  address  BTRFLYV2 token address\r\n     */\r\n    constructor(address _btrflyV2) {\r\n        if (_btrflyV2 == address(0)) revert ZeroAddress();\r\n        btrflyV2 = ERC20(_btrflyV2);\r\n    }\r\n\r\n    /**\r\n        @notice Emergency method to shutdown the current locker contract which also force-unlock all locked tokens\r\n     */\r\n    function shutdown() external onlyOwner {\r\n        if (isShutdown) revert IsShutdown();\r\n\r\n        isShutdown = true;\r\n\r\n        emit Shutdown();\r\n    }\r\n\r\n    /**\r\n        @notice Locked balance of the specified account including those with expired locks\r\n        @param  account  address  Account\r\n        @return amount   uint256  Amount\r\n     */\r\n    function lockedBalanceOf(address account)\r\n        external\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        return balances[account].locked;\r\n    }\r\n\r\n    /**\r\n        @notice Balance of the specified account by only including tokens in active locks\r\n        @param  account  address  Account\r\n        @return amount   uint256  Amount\r\n     */\r\n    function balanceOf(address account) external view returns (uint256 amount) {\r\n        // Using storage as it's actually cheaper than allocating a new memory based variable\r\n        Balance storage userBalance = balances[account];\r\n        LockedBalance[] storage locks = userBalance.lockedBalances;\r\n        uint256 nextUnlockIndex = userBalance.nextUnlockIndex;\r\n\r\n        amount = balances[account].locked;\r\n\r\n        uint256 locksLength = locks.length;\r\n\r\n        // Skip all old records\r\n        for (uint256 i = nextUnlockIndex; i < locksLength; ++i) {\r\n            if (locks[i].unlockTime <= block.timestamp) {\r\n                amount -= locks[i].amount;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Remove amount locked in the next epoch\r\n        if (\r\n            locksLength > 0 &&\r\n            uint256(locks[locksLength - 1].unlockTime) - LOCK_DURATION >\r\n            getCurrentEpoch()\r\n        ) {\r\n            amount -= locks[locksLength - 1].amount;\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n        @notice Pending locked amount at the specified account\r\n        @param  account  address  Account\r\n        @return amount   uint256  Amount\r\n     */\r\n    function pendingLockOf(address account)\r\n        external\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        LockedBalance[] storage locks = balances[account].lockedBalances;\r\n\r\n        uint256 locksLength = locks.length;\r\n\r\n        if (\r\n            locksLength > 0 &&\r\n            uint256(locks[locksLength - 1].unlockTime) - LOCK_DURATION >\r\n            getCurrentEpoch()\r\n        ) {\r\n            return locks[locksLength - 1].amount;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n        @notice Locked balances details for the specifed account\r\n        @param  account     address          Account\r\n        @return total       uint256          Total amount\r\n        @return unlockable  uint256          Unlockable amount\r\n        @return locked      uint256          Locked amount\r\n        @return lockData    LockedBalance[]  List of active locks\r\n     */\r\n    function lockedBalances(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 total,\r\n            uint256 unlockable,\r\n            uint256 locked,\r\n            LockedBalance[] memory lockData\r\n        )\r\n    {\r\n        Balance storage userBalance = balances[account];\r\n        LockedBalance[] storage locks = userBalance.lockedBalances;\r\n        uint256 nextUnlockIndex = userBalance.nextUnlockIndex;\r\n        uint256 idx;\r\n\r\n        for (uint256 i = nextUnlockIndex; i < locks.length; ++i) {\r\n            if (locks[i].unlockTime > block.timestamp) {\r\n                if (idx == 0) {\r\n                    lockData = new LockedBalance[](locks.length - i);\r\n                }\r\n\r\n                lockData[idx] = locks[i];\r\n                locked += lockData[idx].amount;\r\n                ++idx;\r\n            } else {\r\n                unlockable += locks[i].amount;\r\n            }\r\n        }\r\n\r\n        return (userBalance.locked, unlockable, locked, lockData);\r\n    }\r\n\r\n    /**\r\n        @notice Get current epoch\r\n        @return uint256  Current epoch\r\n     */\r\n    function getCurrentEpoch() public view returns (uint256) {\r\n        return (block.timestamp / EPOCH_DURATION) * EPOCH_DURATION;\r\n    }\r\n\r\n    /**\r\n        @notice Locked tokens cannot be withdrawn for the entire lock duration and are eligible to receive rewards\r\n        @param  account  address  Account\r\n        @param  amount   uint256  Amount\r\n     */\r\n    function lock(address account, uint256 amount) external nonReentrant {\r\n        if (account == address(0)) revert ZeroAddress();\r\n        if (amount == 0) revert ZeroAmount();\r\n\r\n        btrflyV2.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        _lock(account, amount);\r\n    }\r\n\r\n    /**\r\n        @notice Perform the actual lock\r\n        @param  account  address  Account\r\n        @param  amount   uint256  Amount\r\n     */\r\n    function _lock(address account, uint256 amount) internal {\r\n        if (isShutdown) revert IsShutdown();\r\n\r\n        Balance storage balance = balances[account];\r\n\r\n        uint224 lockAmount = _toUint224(amount);\r\n\r\n        balance.locked += lockAmount;\r\n        lockedSupply += lockAmount;\r\n\r\n        uint256 lockEpoch = getCurrentEpoch() + EPOCH_DURATION;\r\n        uint256 unlockTime = lockEpoch + LOCK_DURATION;\r\n        LockedBalance[] storage locks = balance.lockedBalances;\r\n        uint256 idx = locks.length;\r\n\r\n        // If the latest user lock is smaller than this lock, add a new entry to the end of the list\r\n        // else, append it to the latest user lock\r\n        if (idx == 0 || locks[idx - 1].unlockTime < unlockTime) {\r\n            locks.push(\r\n                LockedBalance({\r\n                    amount: lockAmount,\r\n                    unlockTime: _toUint32(unlockTime)\r\n                })\r\n            );\r\n        } else {\r\n            locks[idx - 1].amount += lockAmount;\r\n        }\r\n\r\n        emit Locked(account, lockEpoch, amount);\r\n    }\r\n\r\n    /**\r\n        @notice Withdraw all currently locked tokens where the unlock time has passed\r\n        @param  account     address  Account\r\n        @param  relock      bool     Whether should relock\r\n        @param  withdrawTo  address  Target receiver\r\n     */\r\n    function _processExpiredLocks(\r\n        address account,\r\n        bool relock,\r\n        address withdrawTo\r\n    ) internal {\r\n        // Using storage as it's actually cheaper than allocating a new memory based variable\r\n        Balance storage userBalance = balances[account];\r\n        LockedBalance[] storage locks = userBalance.lockedBalances;\r\n        uint224 locked;\r\n        uint256 length = locks.length;\r\n\r\n        if (isShutdown || locks[length - 1].unlockTime <= block.timestamp) {\r\n            locked = userBalance.locked;\r\n            userBalance.nextUnlockIndex = _toUint32(length);\r\n        } else {\r\n            // Using nextUnlockIndex to reduce the number of loops\r\n            uint32 nextUnlockIndex = userBalance.nextUnlockIndex;\r\n\r\n            for (uint256 i = nextUnlockIndex; i < length; ++i) {\r\n                // Unlock time must be less or equal to time\r\n                if (locks[i].unlockTime > block.timestamp) break;\r\n\r\n                // Add to cumulative amounts\r\n                locked += locks[i].amount;\r\n                ++nextUnlockIndex;\r\n            }\r\n\r\n            // Update the account's next unlock index\r\n            userBalance.nextUnlockIndex = nextUnlockIndex;\r\n        }\r\n\r\n        if (locked == 0) revert ZeroAmount();\r\n\r\n        // Update user balances and total supplies\r\n        userBalance.locked -= locked;\r\n        lockedSupply -= locked;\r\n\r\n        emit Withdrawn(account, locked, relock);\r\n\r\n        // Relock or return to user\r\n        if (relock) {\r\n            _lock(withdrawTo, locked);\r\n        } else {\r\n            btrflyV2.safeTransfer(withdrawTo, locked);\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice Withdraw expired locks to a different address\r\n        @param  to  address  Target receiver\r\n     */\r\n    function withdrawExpiredLocksTo(address to) external nonReentrant {\r\n        if (to == address(0)) revert ZeroAddress();\r\n\r\n        _processExpiredLocks(msg.sender, false, to);\r\n    }\r\n\r\n    /**\r\n        @notice Withdraw/relock all currently locked tokens where the unlock time has passed\r\n        @param  relock  bool  Whether should relock\r\n     */\r\n    function processExpiredLocks(bool relock) external nonReentrant {\r\n        _processExpiredLocks(msg.sender, relock, msg.sender);\r\n    }\r\n\r\n    /**\r\n        @notice Validate and cast a uint256 integer to uint224\r\n        @param  value  uint256  Value\r\n        @return        uint224  Casted value\r\n     */\r\n    function _toUint224(uint256 value) internal pure returns (uint224) {\r\n        if (value > type(uint224).max) revert InvalidNumber(value);\r\n\r\n        return uint224(value);\r\n    }\r\n\r\n    /**\r\n        @notice Validate and cast a uint256 integer to uint32\r\n        @param  value  uint256  Value\r\n        @return        uint32   Casted value\r\n     */\r\n    function _toUint32(uint256 value) internal pure returns (uint32) {\r\n        if (value > type(uint32).max) revert InvalidNumber(value);\r\n\r\n        return uint32(value);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_btrflyV2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InvalidNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"relock\",\"type\":\"bool\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EPOCH_DURATION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"locked\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"nextUnlockIndex\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btrflyV2\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"unlockTime\",\"type\":\"uint32\"}],\"internalType\":\"struct RLBTRFLY.LockedBalance[]\",\"name\":\"lockData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingLockOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"relock\",\"type\":\"bool\"}],\"name\":\"processExpiredLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawExpiredLocksTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RLBTRFLY", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c55126051b22ebb829d00368f4b12bde432de5da", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5e049c757d9d5de1a8a2e92ab1fc10c819eb024f7be8bbdf4ad77c30e7e8b6b4"}]}