{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/FeeRouter.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/ISocketRegistry.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract FeeRouter is Ownable,ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Address used to identify if it is a native token transfer or not\\n     */\\n    address private constant NATIVE_TOKEN_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /**\\n     * @notice variable for our registry contract, registry contract is responsible for redirecting to different bridges\\n     */\\n    ISocketRegistry public immutable socket;\\n\\n    // Errors\\n    error IntegratorIdAlreadyRegistered();\\n    error TotalFeeAndPartsMismatch();\\n    error IntegratorIdNotRegistered();\\n    error FeeMisMatch();\\n    error NativeTransferFailed();\\n    error MsgValueMismatch();\\n\\n    // MAX value of totalFeeInBps.\\n    uint32 immutable PRECISION = 1000000;\\n\\n    constructor(address _socketRegistry, address owner_) Ownable(owner_) {\\n        socket = ISocketRegistry(_socketRegistry);\\n    }\\n\\n    // Function to receive Ether. msg.data must be empty\\n    receive() external payable {}\\n\\n    // Events ------------------------------------------------------------------------------------------------------->\\n\\n    /**\\n     * @notice Event emitted when an integrator registers their fee config\\n     */\\n    event RegisterFee(\\n        uint16 integratorId,\\n        uint16 totalFeeInBps,\\n        uint16 part1,\\n        uint16 part2,\\n        uint16 part3,\\n        address feeTaker1,\\n        address feeTaker2,\\n        address feeTaker3\\n    );\\n\\n    /**\\n     * @notice Event emitted when integrator fee config is updated\\n     */\\n    event UpdateFee(\\n        uint16 integratorId,\\n        uint16 totalFeeInBps,\\n        uint16 part1,\\n        uint16 part2,\\n        uint16 part3,\\n        address feeTaker1,\\n        address feeTaker2,\\n        address feeTaker3\\n    );\\n\\n    /**\\n     * @notice Event emitted when fee in tokens are claimed\\n     */\\n    event ClaimFee(\\n        uint16 integratorId,\\n        address tokenAddress,\\n        uint256 amount,\\n        address feeTaker\\n    );\\n\\n    /**\\n     * @notice Event emitted when call registry is successful\\n     */\\n    event BridgeSocket(\\n        uint16 integratorId,\\n        uint256 amount,\\n        address inputTokenAddress,\\n        uint256 toChainId,\\n        uint256 middlewareId,\\n        uint256 bridgeId,\\n        uint256 totalFee\\n    );\\n\\n    /**\\n     * @notice Container for Fee Request\\n     * @member integratorId Id of the integrator registered in the fee config\\n     * @member inputAmount amount sent to the fee router.\\n     * @member UserRequest request that is passed on to the registry\\n     */\\n    struct FeeRequest {\\n        uint16 integratorId;\\n        uint256 inputAmount;\\n        ISocketRegistry.UserRequest userRequest;\\n    }\\n\\n    /**\\n     * @notice Container for Fee Splits\\n     * @member feeTaker address of the entity who will claim the fee\\n     * @member partOfTotalFeesInBps part of total fees that the feeTaker can claim\\n     */\\n    struct FeeSplits {\\n        address feeTaker;\\n        uint16 partOfTotalFeesInBps;\\n    }\\n\\n    /**\\n     * @notice Mapping of valid integrators\\n     */\\n    mapping(uint16 => bool) validIntegrators;\\n\\n    /**\\n     * @notice Mapping of integrator Ids and the total fee that can be cut from the input amount\\n     */\\n    mapping(uint16 => uint16) totalFeeMap;\\n    /**\\n     * @notice Mapping of integrator Ids and FeeSplits. FeeSplits is an array with the max size of 3\\n     * The total fee can be at max split into 3 parts\\n     */\\n    mapping(uint16 => FeeSplits[3]) feeSplitMap;\\n\\n    /**\\n     * @notice Mapping of integratorId and the earned fee per token\\n     */\\n    mapping(uint16 => mapping(address => uint256)) earnedTokenFeeMap;\\n\\n    // CORE FUNCTIONS ------------------------------------------------------------------------------------------------------>\\n\\n    /**\\n     * @notice Owner can register a fee config against an integratorId\\n     * @dev totalFeeInBps and the sum of feesplits should be exactly equal, feeSplits can have a max size of 3\\n     * @param integratorId id of the integrator\\n     * @param totalFeeInBps totalFeeInBps, the max value can be 10000\\n     * @param feeSplits array of FeeSplits\\n     */\\n    function registerFeeConfig(\\n        uint16 integratorId,\\n        uint16 totalFeeInBps,\\n        FeeSplits[3] calldata feeSplits\\n    ) external onlyOwner {\\n        // Not checking for total fee in bps to be 0 as the total fee can be set to 0.\\n        if (validIntegrators[integratorId]) {\\n            revert IntegratorIdAlreadyRegistered();\\n        }\\n\\n        uint16 x = feeSplits[0].partOfTotalFeesInBps +\\n            feeSplits[1].partOfTotalFeesInBps +\\n            feeSplits[2].partOfTotalFeesInBps;\\n\\n        if (x != totalFeeInBps) {\\n            revert TotalFeeAndPartsMismatch();\\n        }\\n\\n        totalFeeMap[integratorId] = totalFeeInBps;\\n        feeSplitMap[integratorId][0] = feeSplits[0];\\n        feeSplitMap[integratorId][1] = feeSplits[1];\\n        feeSplitMap[integratorId][2] = feeSplits[2];\\n        validIntegrators[integratorId] = true;\\n        _emitRegisterFee(integratorId, totalFeeInBps, feeSplits);\\n    }\\n\\n    /**\\n     * @notice Owner can update the fee config against an integratorId\\n     * @dev totalFeeInBps and the sum of feesplits should be exactly equal, feeSplits can have a max size of 3\\n     * @param integratorId id of the integrator\\n     * @param totalFeeInBps totalFeeInBps, the max value can be 10000\\n     * @param feeSplits array of FeeSplits\\n     */\\n    function updateFeeConfig(\\n        uint16 integratorId,\\n        uint16 totalFeeInBps,\\n        FeeSplits[3] calldata feeSplits\\n    ) external onlyOwner {\\n        if (!validIntegrators[integratorId]) {\\n            revert IntegratorIdNotRegistered();\\n        }\\n\\n        uint16 x = feeSplits[0].partOfTotalFeesInBps +\\n            feeSplits[1].partOfTotalFeesInBps +\\n            feeSplits[2].partOfTotalFeesInBps;\\n\\n        if (x != totalFeeInBps) {\\n            revert TotalFeeAndPartsMismatch();\\n        }\\n\\n        totalFeeMap[integratorId] = totalFeeInBps;\\n        feeSplitMap[integratorId][0] = feeSplits[0];\\n        feeSplitMap[integratorId][1] = feeSplits[1];\\n        feeSplitMap[integratorId][2] = feeSplits[2];\\n        _emitUpdateFee(integratorId, totalFeeInBps, feeSplits);\\n    }\\n\\n    /**\\n     * @notice Function that sends the claimed fee to the corresponding integrator config addresses\\n     * @dev native token address to be used to claim native token fee, if earned fee is 0, it will return\\n     * @param integratorId id of the integrator\\n     * @param tokenAddress address of the token to claim fee against\\n     */\\n    function claimFee(uint16 integratorId, address tokenAddress) external nonReentrant {\\n        uint256 earnedFee = earnedTokenFeeMap[integratorId][tokenAddress];\\n        FeeSplits[3] memory integratorFeeSplits = feeSplitMap[integratorId];\\n        earnedTokenFeeMap[integratorId][tokenAddress] = 0;\\n\\n        if (earnedFee == 0) {\\n            return;\\n        }\\n        for (uint8 i = 0; i < 3; i++) {\\n            _calculateAndClaimFee(\\n                integratorId,\\n                earnedFee,\\n                integratorFeeSplits[i].partOfTotalFeesInBps,\\n                totalFeeMap[integratorId],\\n                integratorFeeSplits[i].feeTaker,\\n                tokenAddress\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Function that calls the registry after verifying if the fee is correct\\n     * @dev userRequest amount should match the aount after deducting the fee from the input amount\\n     * @param _feeRequest feeRequest contains the integratorId, the input amount and the user request that is passed to socket registry\\n     */\\n    function callRegistry(FeeRequest calldata _feeRequest) external payable nonReentrant {\\n        if (!validIntegrators[_feeRequest.integratorId]) {\\n            revert IntegratorIdNotRegistered();\\n        }\\n\\n        // Get approval and token addresses.\\n        (\\n            address approvalAddress,\\n            address inputTokenAddress\\n        ) = _getApprovalAndInputTokenAddress(_feeRequest.userRequest);\\n\\n        // Calculate Amount to Send to Registry.\\n        uint256 amountToBridge = _getAmountForRegistry(\\n            _feeRequest.integratorId,\\n            _feeRequest.inputAmount\\n        );\\n\\n        if (_feeRequest.userRequest.amount != amountToBridge) {\\n            revert FeeMisMatch();\\n        }\\n\\n        // Call Registry\\n        if (inputTokenAddress == NATIVE_TOKEN_ADDRESS) {\\n            if (msg.value != _feeRequest.inputAmount) revert MsgValueMismatch();\\n            socket.outboundTransferTo{\\n                value: msg.value - (_feeRequest.inputAmount - amountToBridge)\\n            }(_feeRequest.userRequest);\\n        } else {\\n            _getUserFundsToFeeRouter(\\n                msg.sender,\\n                _feeRequest.inputAmount,\\n                inputTokenAddress\\n            );\\n            IERC20(inputTokenAddress).safeApprove(\\n                approvalAddress,\\n                amountToBridge\\n            );\\n            socket.outboundTransferTo{value: msg.value}(\\n                _feeRequest.userRequest\\n            );\\n        }\\n\\n        // Update the earned fee for the token and integrator.\\n        _updateEarnedFee(\\n            _feeRequest.integratorId,\\n            inputTokenAddress,\\n            _feeRequest.inputAmount,\\n            amountToBridge\\n        );\\n\\n        // Emit Bridge Event\\n        _emitBridgeSocket(_feeRequest, inputTokenAddress, amountToBridge);\\n    }\\n\\n    // INTERNAL UTILITY FUNCTION ------------------------------------------------------------------------------------------------------>\\n\\n    /**\\n     * @notice function that sends the earned fee depending on the inputs\\n     * @dev tokens will not be transferred to zero addresses, earned fee against an integrator id is divided into the splits configured\\n     * @param integratorId id of the integrator\\n     * @param earnedFee amount of tokens earned as fee\\n     * @param part part of the amount that needs to be claimed in bps\\n     * @param total totalfee in bps\\n     * @param feeTaker address that the earned fee will be sent to after calculation\\n     * @param tokenAddress address of the token for claiming fee\\n     */\\n    function _calculateAndClaimFee(\\n        uint16 integratorId,\\n        uint256 earnedFee,\\n        uint16 part,\\n        uint16 total,\\n        address feeTaker,\\n        address tokenAddress\\n    ) internal {\\n        if (feeTaker != address(0)) {\\n            uint256 amountToBeSent = (earnedFee * part) / total;\\n            emit ClaimFee(integratorId, tokenAddress, amountToBeSent, feeTaker);\\n            if (tokenAddress == NATIVE_TOKEN_ADDRESS) {\\n                (bool success, ) = payable(feeTaker).call{\\n                    value: amountToBeSent\\n                }(\\\"\\\");\\n                if (!success) revert NativeTransferFailed();\\n                return;\\n            }\\n            IERC20(tokenAddress).safeTransfer(feeTaker, amountToBeSent);\\n        }\\n    }\\n\\n    /**\\n     * @notice function that returns the approval address and the input token address\\n     * @dev approval address is needed to approve the bridge or middleware implementaton before calling socket registry\\n     * @dev input token address is needed to identify the token in which the fee is being deducted\\n     * @param userRequest socket registry's user request\\n     * @return (address, address) returns the approval address and the inputTokenAddress\\n     */\\n    function _getApprovalAndInputTokenAddress(\\n        ISocketRegistry.UserRequest calldata userRequest\\n    ) internal view returns (address, address) {\\n        if (userRequest.middlewareRequest.id == 0) {\\n            (address routeAddress, , ) = socket.routes(\\n                userRequest.bridgeRequest.id\\n            );\\n            return (routeAddress, userRequest.bridgeRequest.inputToken);\\n        } else {\\n            (address routeAddress, , ) = socket.routes(\\n                userRequest.middlewareRequest.id\\n            );\\n            return (routeAddress, userRequest.middlewareRequest.inputToken);\\n        }\\n    }\\n\\n    /**\\n     * @notice function that transfers amount from the user to this contract.\\n     * @param user address of the user who holds the tokens\\n     * @param amount amount of tokens to transfer\\n     * @param tokenAddress address of the token being bridged\\n     */\\n    function _getUserFundsToFeeRouter(\\n        address user,\\n        uint256 amount,\\n        address tokenAddress\\n    ) internal {\\n        IERC20(tokenAddress).safeTransferFrom(user, address(this), amount);\\n    }\\n\\n    /**\\n     * @notice function that returns an amount after deducting the fee\\n     * @param integratorId id of the integrator\\n     * @param amount input amount to this contract when calling the function callRegistry\\n     * @return uint256 returns the amount after deduciting the fee\\n     */\\n    function _getAmountForRegistry(uint16 integratorId, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return amount - ((amount * totalFeeMap[integratorId]) / PRECISION);\\n    }\\n\\n    /**\\n     * @notice function that updated the earned fee against the integrator Id\\n     * @param integratorId id of the integrator\\n     * @param inputTokenAddress address of the token being bridged\\n     * @param amount input amount to this contract when calling the function callRegistry\\n     * @param registryAmount amount in user request that is passed on to registry\\n     */\\n    function _updateEarnedFee(\\n        uint16 integratorId,\\n        address inputTokenAddress,\\n        uint256 amount,\\n        uint256 registryAmount\\n    ) internal {\\n        earnedTokenFeeMap[integratorId][inputTokenAddress] =\\n            earnedTokenFeeMap[integratorId][inputTokenAddress] +\\n            amount -\\n            registryAmount;\\n    }\\n\\n    /**\\n     * @notice function that emits the event BridgeSocket\\n     */\\n    function _emitBridgeSocket(\\n        FeeRequest calldata _feeRequest,\\n        address tokenAddress,\\n        uint256 registryAmount\\n    ) internal {\\n        emit BridgeSocket(\\n            _feeRequest.integratorId,\\n            _feeRequest.inputAmount,\\n            tokenAddress,\\n            _feeRequest.userRequest.toChainId,\\n            _feeRequest.userRequest.middlewareRequest.id,\\n            _feeRequest.userRequest.bridgeRequest.id,\\n            _feeRequest.inputAmount - registryAmount\\n        );\\n    }\\n\\n    /**\\n     * @notice function that emits the event UpdateFee\\n     */\\n    function _emitUpdateFee(\\n        uint16 integratorId,\\n        uint16 totalFeeInBps,\\n        FeeSplits[3] calldata feeSplits\\n    ) internal {\\n        emit UpdateFee(\\n            integratorId,\\n            totalFeeInBps,\\n            feeSplits[0].partOfTotalFeesInBps,\\n            feeSplits[1].partOfTotalFeesInBps,\\n            feeSplits[2].partOfTotalFeesInBps,\\n            feeSplits[0].feeTaker,\\n            feeSplits[1].feeTaker,\\n            feeSplits[2].feeTaker\\n        );\\n    }\\n\\n    /**\\n     * @notice function that emits the event RegisterFee\\n     */\\n    function _emitRegisterFee(\\n        uint16 integratorId,\\n        uint16 totalFeeInBps,\\n        FeeSplits[3] calldata feeSplits\\n    ) internal {\\n        emit RegisterFee(\\n            integratorId,\\n            totalFeeInBps,\\n            feeSplits[0].partOfTotalFeesInBps,\\n            feeSplits[1].partOfTotalFeesInBps,\\n            feeSplits[2].partOfTotalFeesInBps,\\n            feeSplits[0].feeTaker,\\n            feeSplits[1].feeTaker,\\n            feeSplits[2].feeTaker\\n        );\\n    }\\n\\n    // VIEW FUNCTIONS --------------------------------------------------------------------------------------------------------->\\n\\n    /**\\n     * @notice function that returns the amount in earned fee\\n     * @param integratorId id of the integrator\\n     * @param tokenAddress address of the token\\n     * @return uin256\\n     */\\n    function getEarnedFee(uint16 integratorId, address tokenAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return earnedTokenFeeMap[integratorId][tokenAddress];\\n    }\\n\\n    /**\\n     * @notice function that returns if the integrator id is valid or not\\n     * @param integratorId id of the integrator\\n     * @return bool\\n     */\\n    function getValidIntegrator(uint16 integratorId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return validIntegrators[integratorId];\\n    }\\n\\n    /**\\n     * @notice function that returns the total fee in bps registered against the integrator id\\n     * @param integratorId id of the integrator\\n     * @return uint16\\n     */\\n    function getTotalFeeInBps(uint16 integratorId)\\n        public\\n        view\\n        returns (uint16)\\n    {\\n        return totalFeeMap[integratorId];\\n    }\\n\\n    /**\\n     * @notice function that returns the FeeSplit array registered agains the integrator id\\n     * @param integratorId id of the integrator\\n     * @return feeSplits FeeSplits[3] - array of FeeSplits of size 3\\n     */\\n    function getFeeSplits(uint16 integratorId)\\n        public\\n        view\\n        returns (FeeSplits[3] memory feeSplits)\\n    {\\n        return feeSplitMap[integratorId];\\n    }\\n\\n    // RESCUE FUNCTIONS ------------------------------------------------------------------------------------------------------>\\n\\n    /**\\n     * @notice rescue function for emeregencies\\n     * @dev can only be called by the owner, should only be called during emergencies only\\n     * @param userAddress address of the user receiving funds\\n     * @param token address of the token being rescued\\n     * @param amount amount to be sent to the user\\n     */\\n    function rescueFunds(\\n        address token,\\n        address userAddress,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IERC20(token).safeTransfer(userAddress, amount);\\n    }\\n\\n    /**\\n     * @notice rescue function for emeregencies\\n     * @dev can only be called by the owner, should only be called during emergencies only\\n     * @param userAddress address of the user receiving funds\\n     * @param amount amount to be sent to the user\\n     */\\n    function rescueNative(address payable userAddress, uint256 amount)\\n        external\\n        onlyOwner\\n    {\\n        userAddress.transfer(amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISocketRegistry.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n\\nabstract contract ISocketRegistry {\\n    /**\\n     * @notice Container for Bridge Request\\n     * @member id denotes the underlying bridge to be used\\n     * @member optionalNativeAmount native token amount if not to be included in the value.\\n     * @member inputToken token being bridged\\n     * @member data this can be decoded to get extra data needed for different bridges\\n     */\\n    struct BridgeRequest {\\n        uint256 id;\\n        uint256 optionalNativeAmount;\\n        address inputToken;\\n        bytes data;\\n    }\\n\\n\\n    /**\\n     * @notice Container for Middleware Request\\n     * @member id denotes the underlying middleware to be used\\n     * @member optionalNativeAmount native token amount if not to be included in the value.\\n     * @member inputToken token being sent to middleware, for example swaps\\n     * @member data this can be decoded to get extra data needed for different middlewares\\n     */\\n    struct MiddlewareRequest {\\n        uint256 id;\\n        uint256 optionalNativeAmount;\\n        address inputToken;\\n        bytes data;\\n    }\\n\\n\\n    /**\\n     * @notice Container for User Request\\n     * @member receiverAddress address of the user receiving the bridged amount\\n     * @member toChainId id of the chain being bridged to\\n     * @member amount amount being bridged through registry\\n     * @member middlewareRequest \\n     * @member bridgeRequest \\n     */\\n    struct UserRequest {\\n        address receiverAddress;\\n        uint256 toChainId;\\n        uint256 amount;\\n        MiddlewareRequest middlewareRequest;\\n        BridgeRequest bridgeRequest;\\n    }\\n\\n    /**\\n     * @notice Container for Route Data\\n     * @dev middlwares and bridges are both added into the same routes\\n     * @member route address of the implementation contract fo a bride or middleware\\n     * @member isEnabled bool variable that denotes if the particular route is enabled or disabled\\n     * @member isMiddleware bool variable that denotes if the particular route is a middleware or not\\n     */\\n    struct RouteData {\\n        address route;\\n        bool isEnabled;\\n        bool isMiddleware;\\n    }\\n\\n    /**\\n     * @notice Resgistered Routes on the socket registry\\n     * @dev middlwares and bridges are both added into the same routes\\n     */\\n    RouteData[] public routes;\\n\\n    /**\\n     * @notice Function called in the socket registry for bridging\\n     */\\n    function outboundTransferTo(UserRequest calldata _userRequest)\\n        external\\n        payable\\n        virtual;\\n}\\n\"\r\n    },\r\n    \"src/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nabstract contract Ownable {\\n    address private _owner;\\n    address private _nominee;\\n\\n    event OwnerNominated(address indexed nominee);\\n    event OwnerClaimed(address indexed claimer);\\n\\n    error OnlyOwner();\\n    error OnlyNominee();\\n\\n    constructor(address owner_) {\\n        _claimOwner(owner_);\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner) {\\n            revert OnlyOwner();\\n        }\\n        _;\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function nominee() public view returns (address) {\\n        return _nominee;\\n    }\\n\\n    function nominateOwner(address nominee_) external {\\n        if (msg.sender != _owner) {\\n            revert OnlyOwner();\\n        }\\n        _nominee = nominee_;\\n        emit OwnerNominated(_nominee);\\n    }\\n\\n    function claimOwner() external {\\n        if (msg.sender != _nominee) {\\n            revert OnlyNominee();\\n        }\\n        _claimOwner(msg.sender);\\n    }\\n\\n    function _claimOwner(address claimer_) internal {\\n        _owner = claimer_;\\n        _nominee = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"\": {\r\n        \"__CACHE_BREAKER__\": \"0x0000000000000031363634323733303538383438\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_socketRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FeeMisMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IntegratorIdAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IntegratorIdNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MsgValueMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyNominee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalFeeAndPartsMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"integratorId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"middlewareId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"name\":\"BridgeSocket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"integratorId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTaker\",\"type\":\"address\"}],\"name\":\"ClaimFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"OwnerClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nominee\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"integratorId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"totalFeeInBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"part1\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"part2\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"part3\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTaker1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTaker2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTaker3\",\"type\":\"address\"}],\"name\":\"RegisterFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"integratorId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"totalFeeInBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"part1\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"part2\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"part3\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTaker1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTaker2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTaker3\",\"type\":\"address\"}],\"name\":\"UpdateFee\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"integratorId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionalNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ISocketRegistry.MiddlewareRequest\",\"name\":\"middlewareRequest\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionalNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ISocketRegistry.BridgeRequest\",\"name\":\"bridgeRequest\",\"type\":\"tuple\"}],\"internalType\":\"struct ISocketRegistry.UserRequest\",\"name\":\"userRequest\",\"type\":\"tuple\"}],\"internalType\":\"struct FeeRouter.FeeRequest\",\"name\":\"_feeRequest\",\"type\":\"tuple\"}],\"name\":\"callRegistry\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"integratorId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"claimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"integratorId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getEarnedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"integratorId\",\"type\":\"uint16\"}],\"name\":\"getFeeSplits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"feeTaker\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"partOfTotalFeesInBps\",\"type\":\"uint16\"}],\"internalType\":\"struct FeeRouter.FeeSplits[3]\",\"name\":\"feeSplits\",\"type\":\"tuple[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"integratorId\",\"type\":\"uint16\"}],\"name\":\"getTotalFeeInBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"integratorId\",\"type\":\"uint16\"}],\"name\":\"getValidIntegrator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nominee_\",\"type\":\"address\"}],\"name\":\"nominateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"integratorId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalFeeInBps\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"feeTaker\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"partOfTotalFeesInBps\",\"type\":\"uint16\"}],\"internalType\":\"struct FeeRouter.FeeSplits[3]\",\"name\":\"feeSplits\",\"type\":\"tuple[3]\"}],\"name\":\"registerFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"socket\",\"outputs\":[{\"internalType\":\"contract ISocketRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"integratorId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalFeeInBps\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"feeTaker\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"partOfTotalFeesInBps\",\"type\":\"uint16\"}],\"internalType\":\"struct FeeRouter.FeeSplits[3]\",\"name\":\"feeSplits\",\"type\":\"tuple[3]\"}],\"name\":\"updateFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FeeRouter", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000c30141b657f4216252dc59af2e7cdb9d8792e1b00000000000000000000000005fd7d0d6b91cc4787bcb86ca47e0bd4ea0346d34", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bb31059d7cb4c0283df9324939a67a9a88e9ff819c1b04e31a147b688714dc34"}]}