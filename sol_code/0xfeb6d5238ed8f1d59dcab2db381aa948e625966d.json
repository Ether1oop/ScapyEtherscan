{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.7;\r\n//SPDX-License-Identifier: UNLICENCED\r\n/*\r\n    DogeTV\r\n    8% tax on buy and sell, 8% tax on transfers\r\n    starting taxes: 20/25%\r\n    contract dev: @CryptoBatmanBSC\r\n    Telegram:\r\n    https://t.me/dogetvofficial\r\n    Website: \r\n    https://Dogetv.app \r\n*/\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface INFTREWARDS {\r\n    function Deposit(uint256 amount) external returns (bool success);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    \r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ncontract DogeTV is IERC20, Auth {\r\n\r\n    struct DogeTvPackage{\r\n        uint256 price;\r\n        uint256 durationDays;\r\n        uint256 packageID;\r\n        string name;\r\n        bool isOnlySpecial;\r\n    }\r\n\r\n    struct SubbedTvPackage{\r\n        uint256 subbedTime;\r\n        uint256 expiration_time;\r\n        uint256 packageID;\r\n        uint256 packageVariant;\r\n        bool wasDiscounted;\r\n        bool isSpecial;\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n    // fees. all uint8 for gas efficiency and storage.\r\n    /* @dev   \r\n        all fees are set with 1 decimal places added, please remember this when setting fees.\r\n    */\r\n    uint8 public liquidityFee = 20;\r\n    uint8 public marketingFee = 60;\r\n    uint8 public totalFee = 80;\r\n\r\n    uint8 public initialSellFee = 250;\r\n    uint8 public initialBuyFee = 200;\r\n\r\n    /*\r\n    @dev:\r\n        these are multipled by 10 so that you can have fractional percents\r\n    */\r\n    uint8 public specialPercentHigh = 20;\r\n    uint8 public specialPercentLow = 16;\r\n\r\n    uint8 public discountPercentHigh = 15;\r\n    uint8 public discountPercentLow = 10;\r\n\r\n\r\n    // denominator. uint 16 for storage efficiency - makes the above fees all to 1 dp.\r\n    uint16 public AllfeeDenominator = 1000;\r\n    \r\n    // trading control;\r\n    bool public canTrade = false;\r\n    uint256 public launchedAt;\r\n    \r\n    \r\n    // tokenomics - uint256 BN but located here fro storage efficiency\r\n    uint256 _totalSupply = 1 * 10**7 * (10 **_decimals); //10 mil\r\n    uint256 public _maxTxAmount = _totalSupply / 100; // 1%\r\n    uint256 public _maxHoldAmount = _totalSupply / 50; // 2%\r\n    uint256 public swapThreshold = _totalSupply / 500; // 0.2%\r\n\r\n    //Important addresses    \r\n    address USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7; // mainnet tether, used to get price;\r\n    //address USDT = 0xF99a0CbEa2799f8d4b51709024454F74eD63a86D;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    address public autoLiquidityReceiver;\r\n    address public marketingFeeReceiver;\r\n\r\n    address public pair;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    mapping (address => bool) public pairs;\r\n\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n    mapping (address => bool) isMaxHoldExempt;\r\n    mapping (address => bool) isBlacklisted;\r\n\r\n    mapping (address => SubbedTvPackage) public userSubs;\r\n\r\n    IDEXRouter public router;\r\n    INFTREWARDS public NftStakingContract;\r\n\r\n\r\n    bool public swapEnabled = true;\r\n    bool inSwap;\r\n    mapping(uint =>  DogeTvPackage) public DtvPackages;\r\n    //DogeTvPackage[] public DtvPackages;\r\n    address[] public subbedUsers;\r\n    uint public totalSubs;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    string constant _name = \"Doge-TV\";\r\n    string constant _symbol = \"$DGTV\";\r\n    uint8 constant _decimals = 18;\r\n\r\n    bool public initialTaxesEnabled = true;\r\n\r\n    constructor (address tokenOwner) Auth(tokenOwner) {\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //Mainnet Uniswap\r\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this)); // ETH pair\r\n        pairs[pair] = true;\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n        isMaxHoldExempt[pair] = true;\r\n        isMaxHoldExempt[DEAD] = true;\r\n        isMaxHoldExempt[ZERO] = true;\r\n        \r\n        owner = tokenOwner;\r\n        DummyNFT nftctrct = new DummyNFT(address(this), owner);\r\n        NftStakingContract = INFTREWARDS(nftctrct);\r\n        isTxLimitExempt[owner] = true;\r\n        isFeeExempt[owner] = true;\r\n        authorizations[owner] = true;\r\n        isMaxHoldExempt[owner] = true;\r\n        autoLiquidityReceiver = owner;\r\n        marketingFeeReceiver = owner;\r\n\r\n        _balances[owner] = _totalSupply;\r\n\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender];} \r\n\r\n    \r\n    function getEstimatedTokenForUSDT(uint USDTAmount) public view returns (uint) {\r\n            address[] memory path = new address[](3);\r\n                path[0] = USDT;\r\n                path[1] = router.WETH();\r\n                path[2] = address(this);\r\n            return router.getAmountsOut(USDTAmount, path)[2];\r\n    }\r\n    \r\n    function setBlacklistedStatus(address walletToBlacklist, bool isBlacklistedBool)external authorized{\r\n        isBlacklisted[walletToBlacklist] = isBlacklistedBool;\r\n    }\r\n\r\n    function setBlacklistArray(address[] calldata walletToBlacklistArray)external authorized{\r\n        for(uint i = 0; i < walletToBlacklistArray.length; i++){\r\n            isBlacklisted[walletToBlacklistArray[i]] = true;\r\n        }\r\n    }\r\n\r\n    function getPackageWithId(uint ID) internal view returns (DogeTvPackage memory package){\r\n                return DtvPackages[ID];\r\n    }\r\n\r\n    function subToPackage(uint _packageID, uint durationVariant)external returns(bool success){\r\n            /*\r\n             struct SubbedTvPackage{\r\n                uint256 expiration_time;\r\n                uint256 packageID;\r\n                bool wasDiscounted;\r\n                bool isSpecial;\r\n            }\r\n            */\r\n            DogeTvPackage memory pack = getPackageWithId(_packageID);\r\n            // get the price in token\r\n            uint256 tokenPrice = getEstimatedTokenForUSDT(pack.price);\r\n            \r\n            require(_balances[msg.sender] >= tokenPrice, \"DogeTV, You dont have enough token for this\");\r\n            uint divisor = 1;\r\n            bool isfree = false;\r\n            bool isDiscounted = false;\r\n            uint256 percentageHeld = ((_balances[msg.sender]*10) / _totalSupply) * 100;\r\n            if(percentageHeld >= discountPercentLow && percentageHeld <= discountPercentHigh){\r\n                divisor = 2;\r\n                isDiscounted = true;\r\n            }\r\n            if(percentageHeld > specialPercentLow){\r\n                isfree = true;\r\n            }\r\n            if(pack.isOnlySpecial){\r\n                require(isfree, \"DogeTV: this package is not available to anyone not holding the requirements\");\r\n            }\r\n            tokenPrice = tokenPrice / divisor;\r\n            SubbedTvPackage memory packageSubbed;\r\n            if(!isfree){\r\n                require(!pack.isOnlySpecial, \"DTV, only high percentage holders can have this package\");\r\n                _balances[msg.sender] -= tokenPrice;\r\n                _balances[DEAD] += tokenPrice /2;\r\n                emit Transfer(msg.sender, DEAD, tokenPrice/2);\r\n                _balances[address(NftStakingContract)]+= tokenPrice/2;\r\n                NftStakingContract.Deposit(tokenPrice/2);\r\n                emit Transfer(msg.sender, address(NftStakingContract), tokenPrice/2);\r\n            }\r\n            \r\n            packageSubbed.packageID =  pack.packageID;\r\n            packageSubbed.wasDiscounted = isDiscounted;\r\n            packageSubbed.isSpecial = isfree;\r\n            packageSubbed.subbedTime = block.timestamp;\r\n            packageSubbed.packageVariant = durationVariant;\r\n            packageSubbed.expiration_time = block.timestamp + pack.durationDays * 86400;\r\n            emit PackageSubbed(msg.sender, pack.name);\r\n            userSubs[msg.sender] = packageSubbed;\r\n            subbedUsers.push(msg.sender);\r\n            return true;\r\n    }\r\n\r\n    function checkSubs(address user)internal view returns (bool wasdiscounted, bool isSpecial){\r\n        return (userSubs[user].wasDiscounted,userSubs[user].isSpecial );\r\n    }\r\n\r\n    function getSubbedUsersLength()external view returns (uint SubbedUsersLength){\r\n        return subbedUsers.length;\r\n    }\r\n\r\n    function setNFTContract(INFTREWARDS ctrct)external authorized{\r\n        NftStakingContract = ctrct;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function setSwapThresholdDivisor(uint divisor)external authorized {\r\n        require(divisor >= 100, \"DogeTV: max sell percent is 1%\");\r\n        swapThreshold = _totalSupply / divisor;\r\n    }\r\n    \r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n    \r\n    function setmaxholdpercentage(uint256 percentageMul10) external authorized {\r\n        require(percentageMul10 >= 5, \"DogeTV, max hold cannot be less than 0.5%\"); // cant change percentage below 0.5%, so everyone can hold the percentage\r\n        _maxHoldAmount = _totalSupply * percentageMul10 / 1000; // percentage based on amount\r\n    }\r\n    \r\n    function allowtrading()external authorized {\r\n        canTrade = true;\r\n    }\r\n    \r\n    function addNewPair(address newPair)external authorized{\r\n        pairs[newPair] = true;\r\n        isMaxHoldExempt[newPair] = true;\r\n    }\r\n    \r\n    function removePair(address pairToRemove)external authorized{\r\n        pairs[pairToRemove] = false;\r\n        isMaxHoldExempt[pairToRemove] = false;\r\n    }\r\n\r\n    function addTVPackage( uint256 ppvID, uint256 _USDTPriceNoDecimals, uint256 _durationDays, string calldata packName, bool onlyTopHolders) external authorized {\r\n        DogeTvPackage memory packageToAdd;\r\n        packageToAdd.durationDays = _durationDays;\r\n        packageToAdd.packageID = ppvID;\r\n        packageToAdd.name = packName;\r\n        packageToAdd.price = _USDTPriceNoDecimals * 10 ** 18;\r\n        packageToAdd.isOnlySpecial = onlyTopHolders;\r\n        DtvPackages[ppvID] = packageToAdd;\r\n    }\r\n\r\n    function changeTvPackagePrice(uint256 _ID, uint256 newPrice) external authorized returns(bool success){\r\n                DtvPackages[_ID].price = newPrice * 10 ** 18;\r\n                return true;\r\n    }\r\n\r\n    function removeTvPackage(uint256 _ID) external authorized returns(bool success){\r\n                delete DtvPackages[_ID];\r\n                return true;\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != uint256(_totalSupply)){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\r\n        if(!canTrade){\r\n            require(sender == owner, \"DogeTV, Only owner or presale Contract allowed to add LP\"); // only owner allowed to trade or add liquidity\r\n        }\r\n        if(sender != owner && recipient != owner){\r\n            if(!pairs[recipient] && !isMaxHoldExempt[recipient]){\r\n                require (balanceOf(recipient) + amount <= _maxHoldAmount, \"DogeTV, cant hold more than max hold dude, sorry\");\r\n            }\r\n        }\r\n        \r\n        checkTxLimit(sender, recipient, amount);\r\n        require(!isBlacklisted[sender] && !isBlacklisted[recipient], \"DogeTV, Sorry bro, youre blacklisted\");\r\n        if(!launched() && pairs[recipient]){ require(_balances[sender] > 0); launch(); }\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount, \"DogeTV, Insufficient Balance\");\r\n\r\n        if(pairs[recipient]){\r\n            // its a sell\r\n            /*\r\n                struct SubbedTvPackage{\r\n                    uint256 subbedTime;\r\n                    uint256 expiration_time;\r\n                    uint256 packageID;\r\n                    uint256 packageVariant;\r\n                    bool wasDiscounted;\r\n                    bool isSpecial;\r\n                }\r\n            */\r\n            (bool discounted, bool special) = checkSubs(sender);\r\n            if(special){\r\n                if((_balances[sender] * 10 /100) < specialPercentLow){ // theyve crossed the threshold\r\n                    delete userSubs[sender];\r\n                    emit SubWithdrawn(sender);\r\n                }\r\n            }\r\n            if(discounted){\r\n                 if((_balances[sender] * 10 /100) < discountPercentLow){ // theyve crossed the threshold\r\n                     userSubs[sender].expiration_time = userSubs[sender].subbedTime + ((userSubs[sender].expiration_time - userSubs[sender].subbedTime) / 2);\r\n                     if(userSubs[sender].expiration_time >= block.timestamp){\r\n                        delete userSubs[sender];\r\n                        emit SubWithdrawn(sender);\r\n                     }\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 amountReceived = 0;\r\n        if(!shouldTakeFee(sender) || !shouldTakeFee(recipient)){\r\n            amountReceived = amount;\r\n        }else{\r\n            bool isbuy = pairs[sender];\r\n            amountReceived = takeFee(sender, isbuy, amount);\r\n        }\r\n\r\n        if(shouldSwapBack(recipient)){ swapBack(); }\r\n\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function checkTxLimit(address sender, address reciever, uint256 amount) internal view {\r\n        if(sender != owner && reciever != owner){\r\n            require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n        }\r\n    }\r\n\r\n    function shouldTakeFee(address endpt) internal view returns (bool) {\r\n        \r\n        return !isFeeExempt[endpt];\r\n    }\r\n\r\n    function takeFee(address sender, bool isBuy, uint256 amount) internal returns (uint256) {\r\n        uint fee = totalFee;\r\n        if(initialTaxesEnabled){\r\n            fee = initialSellFee;\r\n            if(isBuy){\r\n                fee = initialBuyFee;\r\n            }\r\n        }\r\n\r\n        uint256 feeAmount = amount.mul(fee).div(AllfeeDenominator);\r\n        \r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function setInitialfees(uint8 _initialBuyFeePercentMul10, uint8 _initialSellFeePercentMul10) external authorized {\r\n        if(initialBuyFee >= _initialBuyFeePercentMul10){initialBuyFee = _initialBuyFeePercentMul10;}else{initialTaxesEnabled = false;}\r\n        if(initialSellFee >= _initialSellFeePercentMul10){initialSellFee = _initialSellFeePercentMul10;}else{initialTaxesEnabled = false;}\r\n    }\r\n\r\n    // returns any mis-sent tokens to the marketing wallet\r\n    function claimtokensback(IERC20 tokenAddress) external authorized {\r\n        payable(marketingFeeReceiver).transfer(address(this).balance);\r\n        tokenAddress.transfer(marketingFeeReceiver, tokenAddress.balanceOf(address(this)));\r\n    }\r\n\r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function launch() internal {\r\n        launchedAt = block.timestamp;\r\n    }\r\n\r\n    function stopInitialTax()external authorized{\r\n        // this can only ever be called once\r\n        initialTaxesEnabled = false;\r\n    }\r\n\r\n    function setTxLimit(uint256 amount) external authorized {\r\n        require(amount >= _totalSupply / 200, \"DogeTV, must be higher than 0.5%\");\r\n        require(amount > _maxTxAmount, \"DogeTV, can only ever increase the tx limit\");\r\n        _maxTxAmount = amount;\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external authorized {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n    /*\r\n    Dev sets the individual buy fees\r\n    */\r\n    function setFees(uint8 _liquidityFeeMul10, uint8 _marketingFeeMul10) external authorized {\r\n        require(_liquidityFeeMul10 + _marketingFeeMul10 <= 80, \"DogeTV taxes can never exceed 8%\");\r\n        require(_liquidityFeeMul10 + _marketingFeeMul10 <= totalFee, \"Dogetv, taxes can only ever change ratio\");\r\n        liquidityFee = _liquidityFeeMul10;\r\n        marketingFee = _marketingFeeMul10;\r\n       \r\n        totalFee = _liquidityFeeMul10 + (_marketingFeeMul10) ;\r\n    }\r\n\r\n    function setSpecialPackPercentages(uint8 percentLowerMul10, uint8 percentHigherMul10) external authorized {\r\n        \r\n        specialPercentHigh = percentHigherMul10;\r\n        specialPercentLow = percentLowerMul10;\r\n       \r\n    }\r\n\r\n    function setDiscountPackPercentages(uint8 percentLowerMul10, uint8 percentHigherMul10) external authorized {\r\n        \r\n        discountPercentHigh = percentHigherMul10;\r\n        discountPercentLow = percentLowerMul10;\r\n       \r\n    }\r\n    \r\n    function swapBack() internal swapping {\r\n        uint256 amountToLiquify = 0;\r\n        if(liquidityFee > 0){\r\n            amountToLiquify = swapThreshold.mul(liquidityFee).div(totalFee).div(2); // leave some tokens for liquidity addition\r\n        }\r\n        \r\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify); // swap everything bar the liquidity tokens. we need to add a pair\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        uint256 balanceBefore = address(this).balance;\r\n        \r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 100\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\r\n        \r\n        uint256 totalETHFee = totalFee - (liquidityFee /2);\r\n        if(totalETHFee > 0){\r\n            uint256 amountETHMarketing = 0;\r\n            if(marketingFee > 0){\r\n                amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee);\r\n                payable(marketingFeeReceiver).transfer(amountETHMarketing);\r\n            }\r\n            if(amountToLiquify > 0){\r\n                \r\n                uint256 amountETHLiquidity = amountETH - amountETHMarketing;\r\n                router.addLiquidityETH{value: amountETHLiquidity}(\r\n                    address(this),\r\n                    amountToLiquify,\r\n                    0,\r\n                    0,\r\n                    autoLiquidityReceiver,\r\n                    block.timestamp\r\n                );\r\n                emit AutoLiquify(amountETHLiquidity, amountToLiquify);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setFeeReceivers(address _autoLiquidityReceiver, address _marketingFeeReceiver) external authorized {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external authorized {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n    \r\n    function shouldSwapBack(address recipient) internal view returns (bool) {\r\n        return !inSwap\r\n        && swapEnabled\r\n        && pairs[recipient]\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    event AutoLiquify(uint256 amountPairToken, uint256 amountToken);\r\n    event PackageSubbed(address user,string packName);\r\n    event SubWithdrawn(address user);\r\n\r\n}\r\n\r\ncontract DummyNFT is INFTREWARDS {\r\n\r\n    address public owner;\r\n    IERC20 public rewardToken;\r\n    uint256 oldBalance;\r\n\r\n    function Deposit(uint amount) external override returns (bool success) {\r\n        require(oldBalance + amount == rewardToken.balanceOf(address(this)));\r\n        // reflect the amount here\r\n        oldBalance = rewardToken.balanceOf(address(this));\r\n        return true;\r\n\r\n    }\r\n\r\n    function claimTokensBack()external {\r\n        require(msg.sender == owner);\r\n        rewardToken.transfer(msg.sender, rewardToken.balanceOf(address(this)));\r\n        oldBalance = rewardToken.balanceOf(address(this));\r\n    }\r\n\r\n     constructor (address rewardsToken, address _owner){\r\n         owner = _owner;\r\n         rewardToken = IERC20(rewardsToken);\r\n     }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPairToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"packName\",\"type\":\"string\"}],\"name\":\"PackageSubbed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SubWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AllfeeDenominator\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DtvPackages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packageID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isOnlySpecial\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NftStakingContract\",\"outputs\":[{\"internalType\":\"contract INFTREWARDS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxHoldAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"addNewPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ppvID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_USDTPriceNoDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationDays\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"packName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"onlyTopHolders\",\"type\":\"bool\"}],\"name\":\"addTVPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowtrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeTvPackagePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"claimtokensback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountPercentHigh\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountPercentLow\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmount\",\"type\":\"uint256\"}],\"name\":\"getEstimatedTokenForUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubbedUsersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"SubbedUsersLength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialBuyFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSellFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTaxesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairToRemove\",\"type\":\"address\"}],\"name\":\"removePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ID\",\"type\":\"uint256\"}],\"name\":\"removeTvPackage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"walletToBlacklistArray\",\"type\":\"address[]\"}],\"name\":\"setBlacklistArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletToBlacklist\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlacklistedBool\",\"type\":\"bool\"}],\"name\":\"setBlacklistedStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"percentLowerMul10\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"percentHigherMul10\",\"type\":\"uint8\"}],\"name\":\"setDiscountPackPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeMul10\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_marketingFeeMul10\",\"type\":\"uint8\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_initialBuyFeePercentMul10\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_initialSellFeePercentMul10\",\"type\":\"uint8\"}],\"name\":\"setInitialfees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INFTREWARDS\",\"name\":\"ctrct\",\"type\":\"address\"}],\"name\":\"setNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"percentLowerMul10\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"percentHigherMul10\",\"type\":\"uint8\"}],\"name\":\"setSpecialPackPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setSwapThresholdDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentageMul10\",\"type\":\"uint256\"}],\"name\":\"setmaxholdpercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"specialPercentHigh\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"specialPercentLow\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopInitialTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packageID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationVariant\",\"type\":\"uint256\"}],\"name\":\"subToPackage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subbedUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSubs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userSubs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"subbedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packageID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packageVariant\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wasDiscounted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSpecial\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DogeTV", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000fdc977660c0603320ebcdcb63bff2123a97153d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ed4f843aaa4999fbad0c59cb38d286e671c0ee0ce22b8b91de90e281d1d708e0"}]}