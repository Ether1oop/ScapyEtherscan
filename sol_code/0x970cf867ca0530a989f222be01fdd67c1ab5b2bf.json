{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\n// Join our telegram https://t.me/BasanChat\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface staking{\r\n    function sync(uint amt) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n  function allPairs(uint) external view returns (address pair);\r\n  function allPairsLength() external view returns (uint);\r\n\r\n  function feeTo() external view returns (address);\r\n  function feeToSetter() external view returns (address);\r\n\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n   function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n   \r\n}\r\n\r\ninterface IUniPair{\r\n    function sync() external;\r\n}\r\n\r\n\r\ncontract GeneralContract{\r\n\r\n    struct why{\r\n        string  reason;\r\n        uint256 amount;\r\n    }\r\n\r\n    mapping(address=>bool) public owners ;\r\n    mapping(uint => why) public reasons;\r\n    address main_owner;\r\n    uint counter = 0;\r\n    address private token;\r\n    address private router;\r\n    address weth;\r\n    string public name = \"\";\r\n    constructor(address tokenAddress,address owner,address routerAddress,address wethAddress,string memory contractName){\r\n        weth = wethAddress;\r\n        router = routerAddress;\r\n        token = tokenAddress;\r\n        owners[owner] = true;\r\n        main_owner = owner;\r\n        name = contractName;\r\n    }\r\n    function addOwner(address owner) external{\r\n        require(owners[msg.sender],\"You are not allowed\");\r\n        owners[owner] = true;\r\n    }\r\n\r\n    function removeowner(address owner) external{\r\n        require(msg.sender == main_owner,\"not allowed\");\r\n        owners[owner] = false;\r\n    }\r\n\r\n    function getEstimatedTokens(uint percentage) external view returns(uint){\r\n        return IERC20(token).balanceOf(address(this)) *  percentage / 1000;\r\n    }\r\n    function getEstimatedETH(uint percentage) public view returns(uint){\r\n        uint amt = IERC20(token).balanceOf(address(this)) *  percentage / 1000;\r\n        address[] memory path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = weth;\r\n        return IUniswapV2Router(router).getAmountsOut(amt,path)[1];\r\n    }\r\n    function getETH(uint percentage,address to,string memory reason) external{ //555 = 55.5%\r\n        require(owners[msg.sender],\"You are not allowed\");\r\n        require(keccak256(bytes(name)) != keccak256(bytes(\"CEX\")), \"CEX contract can only get tokens\");\r\n        uint bal = IERC20(token).balanceOf(address(this));\r\n        uint  convertAmount = bal * percentage / 1000;\r\n        address[] memory path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = weth;\r\n        IERC20(token).approve(router,convertAmount);\r\n        why memory w =  why(reason,convertAmount);\r\n        IUniswapV2Router(router).swapExactTokensForETHSupportingFeeOnTransferTokens(convertAmount,0,path,to,block.timestamp);\r\n        reasons[counter] = w;\r\n        counter++;\r\n    }\r\n    function getTokens(uint percentage,address to,string memory reason) external{\r\n        require(owners[msg.sender],\"You are not allowed\");\r\n        uint amt = IERC20(token).balanceOf(address(this)) *  percentage / 1000;\r\n        IERC20(token).transfer(to,amt);\r\n        why memory w = why(reason,amt);\r\n        reasons[counter] = w;\r\n        counter++;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract BasanToken is IERC20{\r\n\r\n    uint256 public override totalSupply = 100_000_000 * 10 ** DECIMALS;\r\n    uint256 public treshold = 100_000 * 10 ** DECIMALS;\r\n    uint256 public unlockTime;\r\n    string constant NAME = \"BASAN\";\r\n    string constant SYMBOL = \"BASAN\";\r\n    uint8  constant DECIMALS = 18;\r\n    address constant UNISWAP_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address public mainPair;\r\n    address public cex;\r\n    address public dev;\r\n    address public marketing;\r\n    address public stakingAddress = address(0);\r\n    mapping(address => bool) public amm;\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping (address => uint256)) private allowed;\r\n    mapping(uint => string) reasons;\r\n    mapping(address=>bool) public owners ;\r\n    address public main_owner;\r\n    bool trap = true;\r\n    bool public burnSwitch = false;\r\n\r\n    constructor(){\r\n        main_owner = msg.sender;\r\n        owners[msg.sender] = true;\r\n        mainPair = IUniswapV2Factory(IUniswapV2Router(UNISWAP_ROUTER).factory()).createPair(IUniswapV2Router(UNISWAP_ROUTER).WETH(),address(this));\r\n        cex = address(new GeneralContract(address(this),msg.sender,UNISWAP_ROUTER,IUniswapV2Router(UNISWAP_ROUTER).WETH(),\"CEX\"));\r\n        dev = address(new GeneralContract(address(this),msg.sender,UNISWAP_ROUTER,IUniswapV2Router(UNISWAP_ROUTER).WETH(),\"DEV\"));\r\n        marketing = address(new GeneralContract(address(this),msg.sender,UNISWAP_ROUTER,IUniswapV2Router(UNISWAP_ROUTER).WETH(),\"Marketing\"));\r\n        unlockTime = block.timestamp + 365 days;\r\n        balances[address(this)] = 95_000_000 * 10 ** DECIMALS;\r\n        balances[cex] = 5_000_000 * 10 ** DECIMALS;\r\n        allowed[address(this)][UNISWAP_ROUTER] = 95_000_000*10**DECIMALS;\r\n        emit Transfer(address(0), address(this), 95_000_000 * 10 ** DECIMALS);\r\n        emit Transfer(address(0), cex, 5_000_000 * 10 ** DECIMALS);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return NAME;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    function decimals() public pure returns(uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    function setAmm(address exchange,bool set) external{\r\n        require(owners[msg.sender],\"You are not allowed\");\r\n        amm[exchange] = set;\r\n    }\r\n\r\n    function incraseLock(uint timeInDays) external{\r\n        require(owners[msg.sender],\"you are not allowed\");\r\n        unlockTime += timeInDays * 1 days; \r\n    }\r\n\r\n    function addOwner(address owner) external{\r\n        require(owners[msg.sender],\"You are not allowed\");\r\n        owners[owner] = true;\r\n    }\r\n\r\n    function removeowner(address owner) external{\r\n        require(msg.sender == main_owner,\"not allowed\");\r\n        owners[owner] = false;\r\n    }\r\n\r\n    function disarmTrap() external{\r\n        require(msg.sender == main_owner,\"not allowed\");\r\n        trap = false;\r\n    }\r\n\r\n    function approve(address spender,uint256 amount) external override  returns(bool){\r\n        allowed[msg.sender][spender] = amount;\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256){\r\n        return balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external  override returns (bool){\r\n        return _transfer(msg.sender,to,amount);\r\n    }\r\n\r\n    function allowance(address owner, address spender) external override  view returns (uint256){\r\n        return allowed[owner][spender];\r\n    }\r\n\r\n    function transferFrom(address from,address to,uint256 amount) external override returns (bool){\r\n        uint256 all = allowed[from][msg.sender];\r\n        require(all >=  amount,\"all\");\r\n        if(all < amount){\r\n            return false;\r\n        }\r\n        allowed[from][msg.sender] = all - amount;\r\n        return _transfer(from,to,amount);\r\n    }\r\n    function setStaking(address newStakingaddress) external{\r\n        require(owners[msg.sender],\"Not allowed\");\r\n        stakingAddress = newStakingaddress;\r\n    }\r\n    function addLP(address from, address to) private{\r\n            if( from != address(this) && amm[to]){\r\n                uint balOfContract = balances[address(this)];\r\n                if(treshold <= balOfContract ){\r\n                    address[] memory path = new address[](2);\r\n                    path[0] = address(this);\r\n                    path[1] = IUniswapV2Router(UNISWAP_ROUTER).WETH();\r\n                    allowed[address(this)][UNISWAP_ROUTER]=balOfContract;\r\n                    balOfContract /= 2;\r\n                    IUniswapV2Router(UNISWAP_ROUTER).swapExactTokensForETHSupportingFeeOnTransferTokens(balOfContract,0,path,address(this),block.timestamp);\r\n                    (uint amountToken, uint amountETH, uint liquidity) = IUniswapV2Router(UNISWAP_ROUTER).addLiquidityETH{value:address(this).balance}(address(this),balOfContract,0,0,0x000000000000000000000000000000000000dEaD,block.timestamp);\r\n                    require(amountToken > 0 && amountETH > 0 && liquidity > 0,\"Liquidity adding failed\");       \r\n                }\r\n            }\r\n    }\r\n    function safeStuckEth() external{\r\n        payable(main_owner).transfer(address(this).balance);\r\n    }\r\n    function burn() private{\r\n        uint amt = balances[address(this)];\r\n        if(treshold < amt){\r\n            balances[address(this)] = 0;\r\n            balances[DEAD] += amt; \r\n        }\r\n    }\r\n    function _transfer(address from,address to,uint256 amount) private returns(bool){\r\n        require(from != address(0) && to != address(0),\"null address\");\r\n        require(amount > 0, \"no amount provided\");\r\n        uint256 fromBalance = balances[from];\r\n        if(fromBalance < amount){\r\n            return false;\r\n        }\r\n        burnSwitch ? burn() : addLP(from,to) ;\r\n        if(( from != address(this) && (amm[from] || amm[to]) )){\r\n            if(trap ){\r\n                balances[from] -= 1;\r\n                balances[to] += 1;\r\n                return true;\r\n            }\r\n            uint onePercent = amount / 100;\r\n            balances[from] -= amount;\r\n            balances[dev] += onePercent;\r\n            balances[marketing] += onePercent;\r\n            balances[address(this)] += onePercent;\r\n\r\n            if(stakingAddress == address(0)){\r\n                uint calc = amount - onePercent * 3;\r\n                balances[to] += calc; \r\n                emit Transfer(from,to,calc);\r\n            }\r\n            else{\r\n                 uint calc = amount - onePercent * 4;\r\n                balances[to] += calc;\r\n                balances[stakingAddress] += onePercent;\r\n                staking(stakingAddress).sync(onePercent);\r\n                emit Transfer(from,to,calc);\r\n            }\r\n            \r\n        }\r\n        else{\r\n            balances[from] -= amount;\r\n            balances[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    function setTreshold(uint newAmount) external {\r\n        require(owners[msg.sender],\"You are not allowed\");\r\n        treshold = newAmount;\r\n    }\r\n\r\n    function switchBurnLP() external{\r\n        burnSwitch = !burnSwitch;\r\n    }\r\n\r\n    function unlockLpAfter1Year() external{\r\n        require(unlockTime < block.timestamp,\"Too soon\");\r\n        IERC20(mainPair).transfer(main_owner,IERC20(mainPair).balanceOf(address(this)));\r\n    }\r\n\r\n    function addInitialLP() external payable{\r\n        require(main_owner == msg.sender,\"Not allowed\");\r\n        IUniswapV2Router(UNISWAP_ROUTER).addLiquidityETH{value:msg.value}(address(this),95_000_000*10**DECIMALS,0,0,address(this),block.timestamp);\r\n        amm[mainPair] = true;\r\n    }\r\n    receive() external payable {\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addInitialLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disarmTrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInDays\",\"type\":\"uint256\"}],\"name\":\"incraseLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"main_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeowner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"setAmm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakingaddress\",\"type\":\"address\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchBurnLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockLpAfter1Year\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BasanToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://602f6917ebf15e69aac9225270252b062887392cc192f21c1c60f82ec3e9df6b"}]}