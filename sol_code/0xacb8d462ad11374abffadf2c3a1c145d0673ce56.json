{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StrikeBoostFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/IBoostToken.sol\\\";\\nimport \\\"./interfaces/IStrikeBoostFarm.sol\\\";\\nimport \\\"./interfaces/IERC721Receiver.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IVStrike.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/EnumerableSet.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./libraries/ReentrancyGuard.sol\\\";\\n\\n// StrikeFarm is the master of Farm.\\n//\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once STRIKE is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\ncontract StrikeBoostFarm is IStrikeBoostFarm, Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 pendingAmount; // non-eligible lp amount for reward\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 depositedDate; // Latest deposited date\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of STRIKEs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accRewardPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n        uint256[] boostFactors;\\n        uint256 boostRewardDebt; // Boost Reward debt. See explanation below.\\n        uint256 boostedDate; // Latest boosted date\\n        uint256 accBoostReward;\\n        uint256 accBaseReward;\\n    }\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. STRIKEs to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that STRIKEs distribution occurs.\\n        uint256 accRewardPerShare; // Accumulated STRIKEs per share, times 1e12. See below.\\n        uint256 totalBoostCount; // Total valid boosted accounts count.\\n        uint256 rewardEligibleSupply; // total LP supply of users which staked boost token.\\n    }\\n    // The STRIKE TOKEN!\\n    address public strk;\\n    // The vSTRIKE TOKEN!\\n    address public vStrk;\\n    // The Reward TOKEN!\\n    address public rewardToken;\\n    // Block number when bonus STRIKE period ends.\\n    uint256 public bonusEndBlock;\\n    // STRIKE tokens created per block.\\n    uint256 public rewardPerBlock;\\n    // Bonus muliplier for early STRIKEex makers.\\n    uint256 public constant BONUS_MULTIPLIER = 10;\\n    // VSTRIKE minting rate\\n    uint256 public constant VSTRK_RATE = 10;\\n    // Info of each pool.\\n    PoolInfo[] private poolInfo;\\n    // Total STRIKE amount deposited in STRIKE single pool. To reduce tx-fee, not included in struct PoolInfo.\\n    uint256 private lpSupplyOfStrikePool;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // claimable time limit for base reward\\n    uint256 public claimBaseRewardTime = 1 days;\\n    uint256 public unstakableTime = 2 days;\\n    uint256 public initialBoostMultiplier = 20;\\n    uint256 public boostMultiplierFactor = 10;\\n\\n    // Boosting Part\\n    // Minimum vaild boost NFT count\\n    uint16 public minimumValidBoostCount = 1;\\n    // Maximum boost NFT count\\n    uint16 public maximumBoostCount = 20;\\n    // NFT contract for boosting\\n    IBoostToken public boostFactor;\\n    // Boosted with NFT or not\\n    mapping (uint256 => bool) public isBoosted;\\n    // claimable time limit for boost reward\\n    uint256 public claimBoostRewardTime = 30 days;\\n    // boosted user list\\n    mapping(uint256 => address[]) private boostedUsers;\\n\\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when STRIKE mining starts.\\n    uint256 public startBlock;\\n    uint256 private accMulFactor = 1e12;\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event ClaimBaseRewards(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event ClaimBoostRewards(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event Boost(address indexed user, uint256 indexed pid, uint256 tokenId);\\n    event UnBoost(address indexed user, uint256 indexed pid, uint256 tokenId);\\n\\n    constructor(\\n        address _strk,\\n        address _rewardToken,\\n        address _vStrk,\\n        address _boost,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock,\\n        uint256 _bonusEndBlock\\n    ) public {\\n        strk = _strk;\\n        rewardToken = _rewardToken;\\n        vStrk = _vStrk;\\n        boostFactor = IBoostToken(_boost);\\n        rewardPerBlock = _rewardPerBlock;\\n        bonusEndBlock = _bonusEndBlock;\\n        startBlock = _startBlock;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n\\n    function getPoolInfo(uint _pid) external view returns (\\n        IERC20 lpToken,\\n        uint256 lpSupply,\\n        uint256 allocPoint,\\n        uint256 lastRewardBlock,\\n        uint accRewardPerShare,\\n        uint totalBoostCount,\\n        uint256 rewardEligibleSupply\\n    ) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 amount;\\n        if (strk == address(pool.lpToken)) {\\n            amount = lpSupplyOfStrikePool;\\n        } else {\\n            amount = pool.lpToken.balanceOf(address(this));\\n        }\\n        return (\\n            pool.lpToken,\\n            amount,\\n            pool.allocPoint,\\n            pool.lastRewardBlock,\\n            pool.accRewardPerShare,\\n            pool.totalBoostCount,\\n            pool.rewardEligibleSupply\\n        );\\n    }\\n\\n    function getUserInfo(uint256 _pid, address _user) external view returns(\\n        uint256 amount,\\n        uint256 pendingAmount,\\n        uint256 rewardDebt,\\n        uint256 depositedDate,\\n        uint256[] memory boostFactors,\\n        uint256 boostRewardDebt,\\n        uint256 boostedDate,\\n        uint256 accBoostReward,\\n        uint256 accBaseReward\\n    ) {\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        return (\\n            user.amount,\\n            user.pendingAmount,\\n            user.rewardDebt,\\n            user.depositedDate,\\n            user.boostFactors,\\n            user.boostRewardDebt,\\n            user.boostedDate,\\n            user.accBoostReward,\\n            user.accBaseReward\\n        );\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock =\\n            block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accRewardPerShare: 0,\\n                totalBoostCount: 0,\\n                rewardEligibleSupply: 0\\n            })\\n        );\\n    }\\n\\n    // Update the given pool's STRIKE allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Update the given STRIKE per block. Can only be called by the owner.\\n    function setRewardPerBlock(\\n        uint256 speed\\n    ) public onlyOwner {\\n        rewardPerBlock = speed;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_to <= bonusEndBlock) {\\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n        } else if (_from >= bonusEndBlock) {\\n            return _to.sub(_from);\\n        } else {\\n            return\\n                bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\\n                    _to.sub(bonusEndBlock)\\n                );\\n        }\\n    }\\n\\n    function getValidBoostFactors(uint256 userBoostFactors) internal view returns (uint256) {\\n        uint256 validBoostFactors = userBoostFactors > minimumValidBoostCount ? userBoostFactors - minimumValidBoostCount : 0;\\n\\n        return validBoostFactors;\\n    }\\n\\n    function getBoostMultiplier(uint256 boostFactorCount) internal view returns (uint256) {\\n        if (boostFactorCount <= minimumValidBoostCount) {\\n            return 0;\\n        }\\n        uint256 initBoostCount = boostFactorCount.sub(minimumValidBoostCount + 1);\\n\\n        return initBoostCount.mul(boostMultiplierFactor).add(initialBoostMultiplier);\\n    }\\n\\n    // View function to see pending STRIKEs on frontend.\\n    function pendingReward(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accRewardPerShare = pool.accRewardPerShare;\\n\\n        if (block.number > pool.lastRewardBlock && pool.rewardEligibleSupply > 0) {\\n            uint256 multiplier =\\n                getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 reward =\\n                multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(\\n                    totalAllocPoint\\n                );\\n            accRewardPerShare = accRewardPerShare.add(\\n                reward.mul(accMulFactor).div(pool.rewardEligibleSupply)\\n            );\\n        }\\n        uint256 boostMultiplier = getBoostMultiplier(user.boostFactors.length);\\n        uint256 baseReward = user.amount.mul(accRewardPerShare).div(accMulFactor).sub(user.rewardDebt);\\n        uint256 boostReward = boostMultiplier.mul(baseReward).div(100).add(user.accBoostReward).sub(user.boostRewardDebt);\\n        return baseReward.add(boostReward).add(user.accBaseReward);\\n    }\\n\\n    // View function to see pending STRIKEs on frontend.\\n    function pendingBaseReward(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accRewardPerShare = pool.accRewardPerShare;\\n\\n        if (block.number > pool.lastRewardBlock && pool.rewardEligibleSupply > 0) {\\n            uint256 multiplier =\\n                getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 reward =\\n                multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(\\n                    totalAllocPoint\\n                );\\n            accRewardPerShare = accRewardPerShare.add(\\n                reward.mul(accMulFactor).div(pool.rewardEligibleSupply)\\n            );\\n        }\\n\\n        uint256 newReward = user.amount.mul(accRewardPerShare).div(accMulFactor).sub(user.rewardDebt);\\n        return newReward.add(user.accBaseReward);\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n\\n        if (pool.rewardEligibleSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 reward =\\n            multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(\\n                totalAllocPoint\\n            );\\n        pool.accRewardPerShare = pool.accRewardPerShare.add(\\n            reward.mul(accMulFactor).div(pool.rewardEligibleSupply)\\n        );\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Check the eligible user or not for reward\\n    function checkRewardEligible(uint boost) internal view returns(bool) {\\n        if (boost >= minimumValidBoostCount) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    // Check claim eligible\\n    function checkRewardClaimEligible(uint depositedTime) internal view returns(bool) {\\n        if (block.timestamp - depositedTime > claimBaseRewardTime) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    // Claim base lp reward\\n    function _claimBaseRewards(uint256 _pid, address _user) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        bool claimEligible = checkRewardClaimEligible(user.depositedDate);\\n\\n        uint256 accRewardPerShare = pool.accRewardPerShare;\\n        uint256 boostMultiplier = getBoostMultiplier(user.boostFactors.length);\\n\\n        uint256 baseReward = user.amount.mul(accRewardPerShare).div(accMulFactor).sub(user.rewardDebt);\\n        uint256 boostReward = boostMultiplier.mul(baseReward).div(100);\\n        user.accBoostReward = user.accBoostReward.add(boostReward);\\n        uint256 rewards;\\n\\n        if (claimEligible && baseReward > 0) {\\n            rewards = baseReward.add(user.accBaseReward);\\n            safeRewardTransfer(_user, rewards);\\n            user.accBaseReward = 0;\\n        } else {\\n            rewards = 0;\\n            user.accBaseReward = baseReward.add(user.accBaseReward);\\n        }\\n\\n        emit ClaimBaseRewards(_user, _pid, rewards);\\n\\n        user.depositedDate = block.timestamp;\\n    }\\n\\n    function claimBaseRewards(uint256 _pid) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        bool claimEligible = checkRewardClaimEligible(user.depositedDate);\\n        require(claimEligible == true, \\\"not claim eligible\\\");\\n        updatePool(_pid);\\n        _claimBaseRewards(_pid, msg.sender);\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\\n    }\\n\\n    // Deposit LP tokens to STRIKEswap for STRIKE allocation.\\n    function deposit(uint256 _pid, uint256 _amount) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        bool rewardEligible = checkRewardEligible(user.boostFactors.length);\\n\\n        _claimBaseRewards(_pid, msg.sender);\\n\\n        pool.lpToken.safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            _amount\\n        );\\n        if (strk == address(pool.lpToken)) {\\n            lpSupplyOfStrikePool = lpSupplyOfStrikePool.add(_amount);\\n        }\\n        if (rewardEligible) {\\n            user.amount = user.amount.add(user.pendingAmount).add(_amount);\\n            pool.rewardEligibleSupply = pool.rewardEligibleSupply.add(_amount);\\n            user.pendingAmount = 0;\\n        } else {\\n            user.pendingAmount = user.pendingAmount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\\n        if (_amount > 0) {\\n            IVStrike(vStrk).mint(msg.sender, _amount.mul(VSTRK_RATE));\\n        }\\n        user.boostedDate = block.timestamp;\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from STRIKEexFarm.\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount + user.pendingAmount >= _amount, \\\"withdraw: not good\\\");\\n        require(block.timestamp - user.depositedDate > unstakableTime, \\\"not eligible to withdraw\\\");\\n        updatePool(_pid);\\n        _claimBaseRewards(_pid, msg.sender);\\n        if (user.amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.rewardEligibleSupply = pool.rewardEligibleSupply.sub(_amount);\\n        } else {\\n            user.pendingAmount = user.pendingAmount.sub(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\\n        // will loose unclaimed boost reward\\n        user.accBoostReward = 0;\\n        user.boostRewardDebt = 0;\\n        user.boostedDate = block.timestamp;\\n        if (strk == address(pool.lpToken)) {\\n            lpSupplyOfStrikePool = lpSupplyOfStrikePool.sub(_amount);\\n        }\\n        if (_amount > 0) {\\n            IVStrike(vStrk).burnFrom(msg.sender, _amount.mul(VSTRK_RATE));\\n        }\\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // transfer VSTRIKE\\n    function move(uint256 _pid, address _sender, address _recipient, uint256 _vstrikeAmount) override external nonReentrant {\\n        require(vStrk == msg.sender);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage sender = userInfo[_pid][_sender];\\n        UserInfo storage recipient = userInfo[_pid][_recipient];\\n\\n        uint256 amount = _vstrikeAmount.div(VSTRK_RATE);\\n\\n        require(sender.amount + sender.pendingAmount >= amount, \\\"transfer exceeds amount\\\");\\n        require(block.timestamp - sender.depositedDate > unstakableTime, \\\"not eligible to undtake\\\");\\n        updatePool(_pid);\\n        _claimBaseRewards(_pid, _sender);\\n\\n        if (sender.amount > 0) {\\n            sender.amount = sender.amount.sub(amount);\\n        } else {\\n            sender.pendingAmount = sender.pendingAmount.sub(amount);\\n        }\\n        sender.rewardDebt = sender.amount.mul(pool.accRewardPerShare).div(accMulFactor);\\n        sender.boostedDate = block.timestamp;\\n        // will loose unclaimed boost reward\\n        sender.accBoostReward = 0;\\n        sender.boostRewardDebt = 0;\\n\\n        bool claimEligible = checkRewardClaimEligible(recipient.depositedDate);\\n        bool rewardEligible = checkRewardEligible(recipient.boostFactors.length);\\n\\n        if (claimEligible && rewardEligible) {\\n            _claimBaseRewards(_pid, _recipient);\\n        }\\n\\n        if (rewardEligible) {\\n            recipient.amount = recipient.amount.add(recipient.pendingAmount).add(amount);\\n            recipient.pendingAmount = 0;\\n        } else {\\n            recipient.pendingAmount = recipient.pendingAmount.add(amount);\\n        }\\n        recipient.rewardDebt = recipient.amount.mul(pool.accRewardPerShare).div(accMulFactor);\\n        recipient.boostedDate = block.timestamp;\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount.add(user.pendingAmount));\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n        if (user.amount > 0) {\\n            pool.rewardEligibleSupply = pool.rewardEligibleSupply.sub(user.amount);\\n        }\\n        user.amount = 0;\\n        user.pendingAmount = 0;\\n        user.rewardDebt = 0;\\n        user.boostRewardDebt = 0;\\n        user.accBoostReward = 0;\\n    }\\n\\n    // Safe rewardToken transfer function, just in case if rounding error causes pool to not have enough STRIKEs.\\n    function safeRewardTransfer(address _to, uint256 _amount) internal {\\n        uint256 availableBal = IERC20(rewardToken).balanceOf(address(this));\\n\\n        // Protect users liquidity\\n        if (strk == rewardToken) {\\n            if (availableBal > lpSupplyOfStrikePool) {\\n                availableBal = availableBal - lpSupplyOfStrikePool;\\n            } else {\\n                availableBal = 0;\\n            }\\n        }\\n\\n        if (_amount > availableBal) {\\n            IERC20(rewardToken).transfer(_to, availableBal);\\n        } else {\\n            IERC20(rewardToken).transfer(_to, _amount);\\n        }\\n    }\\n\\n    function setAccMulFactor(uint256 _factor) external onlyOwner {\\n        accMulFactor = _factor;\\n    }\\n\\n    function updateInitialBoostMultiplier(uint _initialBoostMultiplier) external onlyOwner {\\n        initialBoostMultiplier = _initialBoostMultiplier;\\n    }\\n\\n    function updatedBoostMultiplierFactor(uint _boostMultiplierFactor) external onlyOwner {\\n        boostMultiplierFactor = _boostMultiplierFactor;\\n    }\\n\\n    // Update reward token address by owner.\\n    function updateRewardToken(address _reward) external onlyOwner {\\n        rewardToken = _reward;\\n    }\\n\\n    // Update claimBaseRewardTime\\n    function updateClaimBaseRewardTime(uint256 _claimBaseRewardTime) external onlyOwner {\\n        claimBaseRewardTime = _claimBaseRewardTime;\\n    }\\n\\n    // Update unstakableTime\\n    function updateUnstakableTime(uint256 _unstakableTime) external onlyOwner {\\n        unstakableTime = _unstakableTime;\\n    }\\n\\n    // NFT Boosting\\n    // get boosted users\\n    function getBoostedUserCount(uint256 _pid) external view returns(uint256) {\\n        return boostedUsers[_pid].length;\\n    }\\n\\n    // View function to see pending STRIKEs on frontend.\\n    function pendingBoostReward(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accRewardPerShare = pool.accRewardPerShare;\\n\\n        if (block.number > pool.lastRewardBlock && pool.rewardEligibleSupply > 0) {\\n            uint256 multiplier =\\n                getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 reward =\\n                multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(\\n                    totalAllocPoint\\n                );\\n            accRewardPerShare = accRewardPerShare.add(\\n                reward.mul(accMulFactor).div(pool.rewardEligibleSupply)\\n            );\\n        }\\n\\n        uint256 boostMultiplier = getBoostMultiplier(user.boostFactors.length);\\n        uint256 baseReward = user.amount.mul(accRewardPerShare).div(accMulFactor).sub(user.rewardDebt);\\n        uint256 boostReward = boostMultiplier.mul(baseReward).div(100);\\n        return user.accBoostReward.sub(user.boostRewardDebt).add(boostReward);\\n    }\\n\\n    // for deposit reward token to contract\\n    function getTotalPendingBoostRewards() external view returns (uint256) {\\n        uint256 totalRewards;\\n        for (uint i; i < poolInfo.length; i++) {\\n            PoolInfo storage pool = poolInfo[i];\\n            uint256 accRewardPerShare = pool.accRewardPerShare;\\n\\n            for (uint j; j < boostedUsers[i].length; j++) {\\n                UserInfo storage user = userInfo[i][boostedUsers[i][j]];\\n\\n                if (block.number > pool.lastRewardBlock && pool.rewardEligibleSupply > 0) {\\n                    uint256 multiplier =\\n                        getMultiplier(pool.lastRewardBlock, block.number);\\n                    uint256 reward =\\n                        multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(\\n                            totalAllocPoint\\n                        );\\n                    accRewardPerShare = accRewardPerShare.add(\\n                        reward.mul(accMulFactor).div(pool.rewardEligibleSupply)\\n                    );\\n                }\\n                uint256 boostMultiplier = getBoostMultiplier(user.boostFactors.length);\\n                uint256 baseReward = user.amount.mul(accRewardPerShare).div(accMulFactor).sub(user.rewardDebt);\\n                uint256 initBoostReward = boostMultiplier.mul(baseReward).div(100);\\n                uint256 boostReward = user.accBoostReward.sub(user.boostRewardDebt).add(initBoostReward);\\n                totalRewards = totalRewards.add(boostReward);\\n            }\\n        }\\n\\n        return totalRewards;\\n    }\\n\\n    // for deposit reward token to contract\\n    function getClaimablePendingBoostRewards() external view returns (uint256) {\\n        uint256 totalRewards;\\n        for (uint i; i < poolInfo.length; i++) {\\n            PoolInfo storage pool = poolInfo[i];\\n            uint256 accRewardPerShare = pool.accRewardPerShare;\\n\\n            for (uint j; j < boostedUsers[i].length; j++) {\\n                UserInfo storage user = userInfo[i][boostedUsers[i][j]];\\n\\n                if (block.timestamp - user.boostedDate >= claimBoostRewardTime) {\\n                    if (block.number > pool.lastRewardBlock && pool.rewardEligibleSupply > 0) {\\n                        uint256 multiplier =\\n                            getMultiplier(pool.lastRewardBlock, block.number);\\n                        uint256 reward =\\n                            multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(\\n                                totalAllocPoint\\n                            );\\n                        accRewardPerShare = accRewardPerShare.add(\\n                            reward.mul(accMulFactor).div(pool.rewardEligibleSupply)\\n                        );\\n                    }\\n                    uint256 boostMultiplier = getBoostMultiplier(user.boostFactors.length);\\n                    uint256 baseReward = user.amount.mul(accRewardPerShare).div(accMulFactor).sub(user.rewardDebt);\\n                    uint256 initBoostReward = boostMultiplier.mul(baseReward).div(100);\\n                    uint256 boostReward = user.accBoostReward.sub(user.boostRewardDebt).add(initBoostReward);\\n                    totalRewards = totalRewards.add(boostReward);\\n                }\\n            }\\n        }\\n\\n        return totalRewards;\\n    }\\n\\n    // Claim boost reward\\n    function claimBoostReward(uint256 _pid) external {\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(block.timestamp - user.boostedDate > claimBoostRewardTime, \\\"not eligible to claim\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        updatePool(_pid);\\n        _claimBaseRewards(_pid, msg.sender);\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\\n        uint256 boostReward = user.accBoostReward.sub(user.boostRewardDebt);\\n        safeRewardTransfer(msg.sender, boostReward);\\n        emit ClaimBoostRewards(msg.sender, _pid, boostReward);\\n        user.boostRewardDebt = user.boostRewardDebt.add(boostReward);\\n        user.boostedDate = block.timestamp;\\n    }\\n\\n    function _boost(uint256 _pid, uint _tokenId) internal {\\n        require (isBoosted[_tokenId] == false, \\\"already boosted\\\");\\n\\n        boostFactor.transferFrom(msg.sender, address(this), _tokenId);\\n        // boostFactor.updateStakeTime(_tokenId, true);\\n\\n        isBoosted[_tokenId] = true;\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        if (user.pendingAmount > 0) {\\n            user.amount = user.pendingAmount;\\n            pool.rewardEligibleSupply = pool.rewardEligibleSupply.add(user.amount);\\n            user.pendingAmount = 0;\\n        }\\n        user.boostFactors.push(_tokenId);\\n        pool.totalBoostCount = pool.totalBoostCount + 1;\\n\\n        emit Boost(msg.sender, _pid, _tokenId);\\n    }\\n\\n    function boost(uint256 _pid, uint _tokenId) external {\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount + user.pendingAmount > 0, \\\"no stake tokens\\\");\\n        require(user.boostFactors.length + 1 <= maximumBoostCount);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (user.boostFactors.length == 0) {\\n            boostedUsers[_pid].push(msg.sender);\\n        }\\n        updatePool(_pid);\\n        _claimBaseRewards(_pid, msg.sender);\\n\\n        _boost(_pid, _tokenId);\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\\n        user.boostedDate = block.timestamp;\\n    }\\n\\n    function boostPartially(uint _pid, uint tokenAmount) external {\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount + user.pendingAmount > 0, \\\"no stake tokens\\\");\\n        require(user.boostFactors.length + tokenAmount <= maximumBoostCount);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (user.boostFactors.length == 0) {\\n            boostedUsers[_pid].push(msg.sender);\\n        }\\n        uint256 ownerTokenCount = boostFactor.balanceOf(msg.sender);\\n        require(tokenAmount <= ownerTokenCount);\\n        updatePool(_pid);\\n        _claimBaseRewards(_pid, msg.sender);\\n\\n        for (uint i; i < tokenAmount; i++) {\\n            uint _tokenId = boostFactor.tokenOfOwnerByIndex(msg.sender, 0);\\n\\n            _boost(_pid, _tokenId);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\\n        user.boostedDate = block.timestamp;\\n    }\\n\\n    function boostAll(uint _pid, uint256[] memory _tokenIds) external {\\n        uint256 tokenIdLength = _tokenIds.length;\\n        require(tokenIdLength > 0, \\\"\\\");\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount + user.pendingAmount > 0, \\\"no stake tokens\\\");\\n        uint256 ownerTokenCount = boostFactor.balanceOf(msg.sender);\\n        require(ownerTokenCount > 0, \\\"\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (user.boostFactors.length == 0) {\\n            boostedUsers[_pid].push(msg.sender);\\n        }\\n        uint256 availableTokenAmount = maximumBoostCount - user.boostFactors.length;\\n        require(availableTokenAmount > 0, \\\"overflow maximum boosting\\\");\\n\\n        if (tokenIdLength < availableTokenAmount) {\\n            availableTokenAmount = tokenIdLength;\\n        }\\n        updatePool(_pid);\\n        _claimBaseRewards(_pid, msg.sender);\\n\\n        for (uint256 i; i < availableTokenAmount; i++) {\\n            _boost(_pid, _tokenIds[i]);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\\n        user.boostedDate = block.timestamp;\\n    }\\n\\n    function _unBoost(uint _pid, uint _tokenId) internal {\\n        require (isBoosted[_tokenId] == true);\\n\\n        boostFactor.transferFrom(address(this), msg.sender, _tokenId);\\n        // boostFactor.updateStakeTime(_tokenId, false);\\n\\n        isBoosted[_tokenId] = false;\\n\\n        emit UnBoost(msg.sender, _pid, _tokenId);\\n    }\\n\\n    function unBoost(uint _pid, uint _tokenId) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.boostFactors.length > 0, \\\"\\\");\\n        uint factorLength = user.boostFactors.length;\\n\\n        updatePool(_pid);\\n        _claimBaseRewards(_pid, msg.sender);\\n\\n        bool found = false;\\n        uint dfId; // will be deleted factor index\\n        for (uint j; j < factorLength; j++) {\\n            if (_tokenId == user.boostFactors[j]) {\\n                dfId = j;\\n                found = true;\\n                break;\\n            }\\n        }\\n        require(found, \\\"not found boosted tokenId\\\");\\n        _unBoost(_pid, _tokenId);\\n        user.boostFactors[dfId] = user.boostFactors[factorLength - 1];\\n        user.boostFactors.pop();\\n        pool.totalBoostCount = pool.totalBoostCount - 1;\\n\\n        user.boostedDate = block.timestamp;\\n        // will loose unclaimed boost reward\\n        user.accBoostReward = 0;\\n        user.boostRewardDebt = 0;\\n\\n        uint boostedUserCount = boostedUsers[_pid].length;\\n        if (user.boostFactors.length == 0) {\\n            user.pendingAmount = user.amount;\\n            user.amount = 0;\\n            pool.rewardEligibleSupply = pool.rewardEligibleSupply.sub(user.pendingAmount);\\n\\n            uint index;\\n            for (uint j; j < boostedUserCount; j++) {\\n                if (address(msg.sender) == address(boostedUsers[_pid][j])) {\\n                    index = j;\\n                    break;\\n                }\\n            }\\n            boostedUsers[_pid][index] = boostedUsers[_pid][boostedUserCount - 1];\\n            boostedUsers[_pid].pop();\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\\n    }\\n\\n    function unBoostPartially(uint _pid, uint tokenAmount) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.boostFactors.length > 0, \\\"\\\");\\n        require(tokenAmount <= user.boostFactors.length, \\\"\\\");\\n        uint factorLength = user.boostFactors.length;\\n\\n        updatePool(_pid);\\n        _claimBaseRewards(_pid, msg.sender);\\n\\n        for (uint i = 1; i <= tokenAmount; i++) {\\n            uint index = factorLength - i;\\n            uint _tokenId = user.boostFactors[index];\\n\\n            _unBoost(_pid, _tokenId);\\n            user.boostFactors.pop();\\n            pool.totalBoostCount = pool.totalBoostCount - 1;\\n        }\\n        user.boostedDate = block.timestamp;\\n        // will loose unclaimed boost reward\\n        user.accBoostReward = 0;\\n        user.boostRewardDebt = 0;\\n\\n        uint boostedUserCount = boostedUsers[_pid].length;\\n        if (user.boostFactors.length == 0) {\\n            user.pendingAmount = user.amount;\\n            user.amount = 0;\\n            pool.rewardEligibleSupply = pool.rewardEligibleSupply.sub(user.pendingAmount);\\n\\n            uint index;\\n            for (uint j; j < boostedUserCount; j++) {\\n                if (address(msg.sender) == address(boostedUsers[_pid][j])) {\\n                    index = j;\\n                    break;\\n                }\\n            }\\n            boostedUsers[_pid][index] = boostedUsers[_pid][boostedUserCount - 1];\\n            boostedUsers[_pid].pop();\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\\n    }\\n\\n    function unBoostAll(uint _pid) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint factorLength = user.boostFactors.length;\\n        require(factorLength > 0, \\\"\\\");\\n\\n        updatePool(_pid);\\n        _claimBaseRewards(_pid, msg.sender);\\n\\n        for (uint i = 0; i < factorLength; i++) {\\n            uint _tokenId = user.boostFactors[i];\\n            _unBoost(_pid, _tokenId);\\n        }\\n        delete user.boostFactors;\\n        pool.totalBoostCount = pool.totalBoostCount - factorLength;\\n        user.boostedDate = block.timestamp;\\n\\n        // will loose unclaimed boost reward\\n        user.accBoostReward = 0;\\n        user.boostRewardDebt = 0;\\n\\n        uint boostedUserCount = boostedUsers[_pid].length;\\n        if (user.boostFactors.length == 0) {\\n            user.pendingAmount = user.amount;\\n            user.amount = 0;\\n            pool.rewardEligibleSupply = pool.rewardEligibleSupply.sub(user.pendingAmount);\\n\\n            uint index;\\n            for (uint j; j < boostedUserCount; j++) {\\n                if (address(msg.sender) == address(boostedUsers[_pid][j])) {\\n                    index = j;\\n                    break;\\n                }\\n            }\\n            boostedUsers[_pid][index] = boostedUsers[_pid][boostedUserCount - 1];\\n            boostedUsers[_pid].pop();\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\\n    }\\n\\n    // Update boostFactor address. Can only be called by the owner.\\n    function setBoostFactor(\\n        address _address\\n    ) external onlyOwner {\\n        boostFactor = IBoostToken(_address);\\n    }\\n\\n    // Update claimBoostRewardTime\\n    function updateClaimBoostRewardTime(uint256 _claimBoostRewardTime) external onlyOwner {\\n        claimBoostRewardTime = _claimBoostRewardTime;\\n    }\\n\\n    // Update minimum valid boost token count. Can only be called by the owner.\\n    function updateMinimumValidBoostCount(uint16 _count) external onlyOwner {\\n        minimumValidBoostCount = _count;\\n    }\\n\\n    // Update maximum valid boost token count. Can only be called by the owner.\\n    function updateMaximumBoostCount(uint16 _count) external onlyOwner {\\n        maximumBoostCount = _count;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBoostToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\ninterface IBoostToken is IERC721Enumerable {\\n    function updateStakeTime(uint tokenId, bool isStake) external;\\n\\n    function getTokenOwner(uint tokenId) external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStrikeBoostFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IStrikeBoostFarm {\\n    function move(uint256 pid, address sender, address recipient, uint256 amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n    external returns (bytes4);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVStrike.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IVStrike {\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Mint} event.\\n     */\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n    function burnFrom(address account, uint256 amount) external;\\n}\"\r\n    },\r\n    \"contracts/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n\\n// P1 - P3: OK\\npragma solidity 0.6.12;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\n// T1 - T4: OK\\ncontract OwnableData {\\n    // V1 - V5: OK\\n    address public owner;\\n    // V1 - V5: OK\\n    address public pendingOwner;\\n}\\n\\n// T1 - T4: OK\\ncontract Ownable is OwnableData {\\n    // E1: OK\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () internal {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    // F1 - F9: OK\\n    // C1 - C21: OK\\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    // F1 - F9: OK\\n    // C1 - C21: OK\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    // M1 - M5: OK\\n    // C1 - C21: OK\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/libraries/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strk\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vStrk\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boost\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Boost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimBaseRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimBoostRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"UnBoost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VSTRK_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"boost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"boostAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostFactor\",\"outputs\":[{\"internalType\":\"contract IBoostToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostMultiplierFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"boostPartially\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBaseRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimBaseRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimBoostReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBoostRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getBoostedUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimablePendingBoostRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoostCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEligibleSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPendingBoostRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"boostFactors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"boostRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBoostReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBaseReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialBoostMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isBoosted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumBoostCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumValidBoostCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vstrikeAmount\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBaseReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBoostReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_factor\",\"type\":\"uint256\"}],\"name\":\"setAccMulFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBoostFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strk\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"unBoostAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"unBoostPartially\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakableTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimBaseRewardTime\",\"type\":\"uint256\"}],\"name\":\"updateClaimBaseRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimBoostRewardTime\",\"type\":\"uint256\"}],\"name\":\"updateClaimBoostRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialBoostMultiplier\",\"type\":\"uint256\"}],\"name\":\"updateInitialBoostMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_count\",\"type\":\"uint16\"}],\"name\":\"updateMaximumBoostCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_count\",\"type\":\"uint16\"}],\"name\":\"updateMinimumValidBoostCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"updateRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakableTime\",\"type\":\"uint256\"}],\"name\":\"updateUnstakableTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boostMultiplierFactor\",\"type\":\"uint256\"}],\"name\":\"updatedBoostMultiplierFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBoostReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBaseReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vStrk\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StrikeBoostFarm", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000074232704659ef37c08995e386a2e26cc27a8d7b100000000000000000000000074232704659ef37c08995e386a2e26cc27a8d7b1000000000000000000000000f966e86d31751f005c6932fcffd91fcd7907abf7000000000000000000000000474d72f1a6a7884b62edacc8d24d0815d01a65a200000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000000000000000e72bb00000000000000000000000000000000000000000000000000000000000e72bb0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}