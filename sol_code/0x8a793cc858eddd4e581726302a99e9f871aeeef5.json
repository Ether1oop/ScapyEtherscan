{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/IMDStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/ICollegeCredit.sol\\\";\\r\\nimport \\\"./CollegeCredit.sol\\\";\\r\\n\\r\\ncontract IMDStaking is Ownable {\\r\\n    event Staked(address indexed user, address indexed token, uint256[] tokenIds, uint256 timestamp);\\r\\n    event Unstaked(address indexed user, address indexed token, uint256[] tokenIds, uint256 timestamp);\\r\\n    event ClaimDividend(address indexed user, address indexed token, uint256 amount);\\r\\n\\r\\n    struct StakedToken {\\r\\n        uint256 stakeTimestamp;\\r\\n        uint256 nextToken;\\r\\n        address owner;\\r\\n    }\\r\\n\\r\\n    struct StakableTokenAttributes {\\r\\n        /**\\r\\n         * The minimum yield per period.\\r\\n         */\\r\\n        uint256 minYield;\\r\\n        /**\\r\\n         * The maximum yield per period.\\r\\n         */\\r\\n        uint256 maxYield;\\r\\n        /**\\r\\n         * The amount that yield increases per period.\\r\\n         */\\r\\n        uint256 step;\\r\\n        /**\\r\\n         * The amount of time needed to earn 1 yield.\\r\\n         */\\r\\n        uint256 yieldPeriod;\\r\\n        /**\\r\\n         * A mapping from token ids to information about that token's staking.\\r\\n         */\\r\\n        mapping(uint256 => StakedToken) stakedTokens;\\r\\n        /**\\r\\n         * A mapping from the user's address to their root staked token\\r\\n         */\\r\\n        mapping(address => uint256) firstStaked;\\r\\n        /**\\r\\n         * A mapping of modifiers to rewards for each staker's\\r\\n         * address.\\r\\n         */\\r\\n        mapping(address => int256) rewardModifier;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * The reward token (college credit) to be issued to stakers.\\r\\n     */\\r\\n    ICollegeCredit public rewardToken;\\r\\n\\r\\n    /**\\r\\n     * A mapping of token addresses to staking configurations.\\r\\n     */\\r\\n    mapping(address => StakableTokenAttributes) public stakableTokenAttributes;\\r\\n\\r\\n    /**\\r\\n     * The constructor for the staking contract, builds the initial reward token and stakable token.\\r\\n     * @param _token the first stakable token address.\\r\\n     * @param _minYield the minimum yield for the stakable token.\\r\\n     * @param _maxYield the maximum yield for the stakable token.\\r\\n     * @param _step the amount yield increases per yield period.\\r\\n     * @param _yieldPeriod the length (in seconds) of a yield period (the amount of period after which a yield is calculated)\\r\\n     */\\r\\n    constructor(\\r\\n        address _token,\\r\\n        uint256 _minYield,\\r\\n        uint256 _maxYield,\\r\\n        uint256 _step,\\r\\n        uint256 _yieldPeriod\\r\\n    ) {\\r\\n        _addStakableToken(_token, _minYield, _maxYield, _step, _yieldPeriod);\\r\\n\\r\\n        rewardToken = new CollegeCredit();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Mints the reward token to an account.\\r\\n     * @dev owner only.\\r\\n     * @param _recipient the recipient of the minted tokens.\\r\\n     * @param _amount the amount of tokens to mint.\\r\\n     */\\r\\n    function mintRewardToken(address _recipient, uint256 _amount)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        rewardToken.mint(_recipient, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Adds a new token that can be staked in the contract.\\r\\n     * @param _token the first stakable token address.\\r\\n     * @param _minYield the minimum yield for the stakable token.\\r\\n     * @param _maxYield the maximum yield for the stakable token.\\r\\n     * @param _step the amount yield increases per yield period.\\r\\n     * @param _yieldPeriod the length (in seconds) of a yield period (the amount of period after which a yield is calculated).\\r\\n     * @dev owner only, doesn't allow adding already staked tokens.\\r\\n     */\\r\\n    function addStakableToken(\\r\\n        address _token,\\r\\n        uint256 _minYield,\\r\\n        uint256 _maxYield,\\r\\n        uint256 _step,\\r\\n        uint256 _yieldPeriod\\r\\n    ) external onlyOwner {\\r\\n        require(!_isStakable(_token), \\\"Already exists\\\");\\r\\n        _addStakableToken(_token, _minYield, _maxYield, _step, _yieldPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Stakes a given token id from a given contract.\\r\\n     * @param _token the address of the stakable token.\\r\\n     * @param _tokenId the id of the token to stake.\\r\\n     * @dev the contract must be approved to transfer that token first.\\r\\n     *      the address must be a stakable token.\\r\\n     */\\r\\n    function stake(address _token, uint256 _tokenId) external {\\r\\n        require(_isStakable(_token), \\\"Not stakable\\\");\\r\\n\\r\\n        uint256[] memory tokenIds = new uint256[](1);\\r\\n        tokenIds[0] = _tokenId;\\r\\n\\r\\n        _bulkStakeFor(msg.sender, _token, tokenIds);\\r\\n        emit Staked(msg.sender, _token, tokenIds, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Stakes a given token id from a given contract.\\r\\n     * @param _token the address of the stakable token.\\r\\n     * @param _tokenIds the ids of the tokens to stake.\\r\\n     * @dev the contract must be approved to transfer that token first.\\r\\n     *      the address must be a stakable token.\\r\\n     */\\r\\n    function stakeMany(address _token, uint256[] calldata _tokenIds) external {\\r\\n        require(_isStakable(_token), \\\"Not stakable\\\");\\r\\n        _bulkStakeFor(msg.sender, _token, _tokenIds);\\r\\n\\r\\n        emit Staked(msg.sender, _token, _tokenIds, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unstakes a given token held by the calling user.\\r\\n     * @param _token the address of the token contract that the token belongs to.\\r\\n     * @param _tokenId the id of the token to unstake.\\r\\n     * @dev reverts if the token is not owned by the caller.\\r\\n     */\\r\\n    function unstake(address _token, uint256 _tokenId) external {\\r\\n        require(_isStakable(_token), \\\"Not stakable\\\");\\r\\n        require(\\r\\n            stakableTokenAttributes[_token].stakedTokens[_tokenId].owner ==\\r\\n                msg.sender,\\r\\n            \\\"Not owner\\\"\\r\\n        );\\r\\n\\r\\n        uint256[] memory tokenIds = new uint256[](1);\\r\\n        tokenIds[0] = _tokenId;\\r\\n\\r\\n        _unstake(_token, _tokenId);\\r\\n        emit Unstaked(msg.sender, _token, tokenIds, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unstakes the given tokens held by the calling user.\\r\\n     * @param _token the address of the token contract that the tokens belong to.\\r\\n     * @param _tokenIds the ids of the tokens to unstake.\\r\\n     * @dev reverts if the token(s) are not owned by the caller.\\r\\n     */\\r\\n    function unstakeMany(address _token, uint256[] calldata _tokenIds)\\r\\n        external\\r\\n    {\\r\\n        require(_isStakable(_token), \\\"Not stakable\\\");\\r\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\r\\n            require(\\r\\n                stakableTokenAttributes[_token]\\r\\n                    .stakedTokens[_tokenIds[i]]\\r\\n                    .owner == msg.sender,\\r\\n                \\\"Not owner\\\"\\r\\n            );\\r\\n\\r\\n            _unstake(_token, _tokenIds[i]);\\r\\n        }\\r\\n\\r\\n        emit Unstaked(msg.sender, _token, _tokenIds, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Claims the rewards for the caller.\\r\\n     * @param _token the token for which we are claiming rewards.\\r\\n     */\\r\\n    function claimRewards(address _token) external {\\r\\n        require(_isStakable(_token), \\\"Not stakable\\\");\\r\\n        uint256 dividend = _withdrawRewards(msg.sender, _token);\\r\\n\\r\\n        emit ClaimDividend(msg.sender, _token, dividend);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gets the College Credit dividend of the provided user.\\r\\n     * @param _user the user whose dividend we are checking.\\r\\n     * @param _token the token in which we are checking.\\r\\n     */\\r\\n    function dividendOf(address _user, address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(_isStakable(_token), \\\"Not stakable\\\");\\r\\n        return _dividendOf(_user, _token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unstakes a given token held by the calling user AND withdraws all dividends.\\r\\n     * @param _token the address of the token contract that the token belongs to.\\r\\n     * @param _tokenId the id of the token to unstake.\\r\\n     * @dev reverts if the token is not owned by the caller.\\r\\n     */\\r\\n    function unstakeAndClaimRewards(address _token, uint256 _tokenId) external {\\r\\n        require(_isStakable(_token), \\\"Not stakable\\\");\\r\\n        require(\\r\\n            stakableTokenAttributes[_token].stakedTokens[_tokenId].owner ==\\r\\n                msg.sender,\\r\\n            \\\"Not owner\\\"\\r\\n        );\\r\\n        uint256 dividend = _withdrawRewards(msg.sender, _token);\\r\\n        _unstake(_token, _tokenId);\\r\\n\\r\\n        uint256[] memory tokenIds = new uint256[](1);\\r\\n        tokenIds[0] = _tokenId;\\r\\n\\r\\n        emit ClaimDividend(msg.sender, _token, dividend);\\r\\n        emit Unstaked(msg.sender, _token, tokenIds, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unstakes the given tokens held by the calling user AND withdraws all dividends.\\r\\n     * @param _token the address of the token contract that the token belongs to.\\r\\n     * @param _tokenIds the ids of the tokens to unstake.\\r\\n     * @dev reverts if the tokens are not owned by the caller.\\r\\n     */\\r\\n    function unstakeManyAndClaimRewards(\\r\\n        address _token,\\r\\n        uint256[] calldata _tokenIds\\r\\n    ) external {\\r\\n        require(_isStakable(_token), \\\"Not stakable\\\");\\r\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\r\\n            require(\\r\\n                stakableTokenAttributes[_token]\\r\\n                    .stakedTokens[_tokenIds[i]]\\r\\n                    .owner == msg.sender,\\r\\n                \\\"Not owner\\\"\\r\\n            );\\r\\n            _unstake(_token, _tokenIds[i]);\\r\\n        }\\r\\n        uint256 dividend = _withdrawRewards(msg.sender, _token);\\r\\n\\r\\n        emit ClaimDividend(msg.sender, _token, dividend);\\r\\n        emit Unstaked(msg.sender, _token, _tokenIds, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gets the total amount of tokens staked for the given user in the given contract.\\r\\n     * @param _user the user whose stakes are being counted.\\r\\n     * @param _token the address of the contract whose staked tokens we are skimming.\\r\\n     * @dev reverts if called on an invalid token address.\\r\\n     */\\r\\n    function totalStakedFor(address _user, address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(_isStakable(_token), \\\"Not stakable\\\");\\r\\n        return _totalStaked(_user, _token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gets the total amount staked for a given token address.\\r\\n     * @param _token the address to get the amount staked from.\\r\\n     */\\r\\n    function totalStaked(address _token) external view returns (uint256) {\\r\\n        require(_isStakable(_token), \\\"Not stakable\\\");\\r\\n        return _totalStaked(_token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gets all of the token ids that a user has staked from a given contract.\\r\\n     * @param _user the user whose token ids are being analyzed.\\r\\n     * @param _token the address of the token contract being analyzed.\\r\\n     * @return an array of token ids staked by that user.\\r\\n     * @dev reverts if called on an invalid token address.\\r\\n     */\\r\\n    function stakedTokenIds(address _user, address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        require(_isStakable(_token), \\\"Not stakable\\\");\\r\\n        return _stakedTokenIds(_user, _token);\\r\\n    }\\r\\n\\r\\n    // --------------- INTERNAL FUNCTIONS -----------------\\r\\n\\r\\n    /**\\r\\n     * Gets the total amount staked for a given token address.\\r\\n     * @param _token the address to get the amount staked from.\\r\\n     */\\r\\n    function _totalStaked(address _token) internal view returns (uint256) {\\r\\n        return IERC721(_token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return if the given token address is stakable.\\r\\n     * @param _token the address to a token to query for stakability.\\r\\n     * @dev does not check if is ERC721, that is up to the user.\\r\\n     */\\r\\n    function _isStakable(address _token) internal view returns (bool) {\\r\\n        return stakableTokenAttributes[_token].maxYield != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Adds a given token to the list of stakable tokens.\\r\\n     * @param _token the first stakable token address.\\r\\n     * @param _minYield the minimum yield for the stakable token.\\r\\n     * @param _maxYield the maximum yield for the stakable token.\\r\\n     * @param _step the amount yield increases per yield period.\\r\\n     * @param _yieldPeriod the length (in seconds) of a yield period (the amount of period after which a yield is calculated).\\r\\n     * @dev checks constraints to ensure _isStakable works as well as other logic. Does not check if is already stakable.\\r\\n     */\\r\\n    function _addStakableToken(\\r\\n        address _token,\\r\\n        uint256 _minYield,\\r\\n        uint256 _maxYield,\\r\\n        uint256 _step,\\r\\n        uint256 _yieldPeriod\\r\\n    ) internal {\\r\\n        require(_maxYield > 0, \\\"Invalid max\\\");\\r\\n        require(_minYield > 0, \\\"Invalid min\\\");\\r\\n        require(_yieldPeriod >= 1 minutes, \\\"Invalid period\\\");\\r\\n\\r\\n        stakableTokenAttributes[_token].maxYield = _maxYield;\\r\\n        stakableTokenAttributes[_token].minYield = _minYield;\\r\\n        stakableTokenAttributes[_token].step = _step;\\r\\n        stakableTokenAttributes[_token].yieldPeriod = _yieldPeriod;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Stakes the given token ids from a given contract.\\r\\n     * @param _user the user from which to transfer the token.\\r\\n     * @param _token the address of the stakable token.\\r\\n     * @param _tokenIds the ids of the tokens to stake.\\r\\n     * @dev the contract must be approved to transfer that token first.\\r\\n     *      the address must be a stakable token.\\r\\n     */\\r\\n    function _bulkStakeFor(\\r\\n        address _user,\\r\\n        address _token,\\r\\n        uint256[] memory _tokenIds\\r\\n    ) internal {\\r\\n        uint256 lastStaked = _lastStaked(_user, _token);\\r\\n\\r\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\r\\n            IERC721(_token).transferFrom(_user, address(this), _tokenIds[i]);\\r\\n\\r\\n            StakedToken memory token;\\r\\n            token.owner = _user;\\r\\n            token.stakeTimestamp = block.timestamp;\\r\\n\\r\\n            if (lastStaked == 0)\\r\\n                stakableTokenAttributes[_token].firstStaked[_user] = _tokenIds[i];\\r\\n            else\\r\\n                stakableTokenAttributes[_token]\\r\\n                    .stakedTokens[lastStaked]\\r\\n                    .nextToken = _tokenIds[i];\\r\\n\\r\\n            lastStaked = _tokenIds[i];\\r\\n            stakableTokenAttributes[_token].stakedTokens[_tokenIds[i]] = token;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Retrieves the dividend owed on a particular token with a given timestamp.\\r\\n     * @param _tokenAttributes the attributes of the token provided.\\r\\n     * @param _timestamp the timestamp at which the token was staked.\\r\\n     * @return the dividend owed for that specific token.\\r\\n     */\\r\\n    function _tokenDividend(\\r\\n        StakableTokenAttributes storage _tokenAttributes,\\r\\n        uint256 _timestamp\\r\\n    ) internal view returns (uint256) {\\r\\n        if (_timestamp == 0) return 0;\\r\\n\\r\\n        uint256 periods = (block.timestamp - _timestamp) /\\r\\n            _tokenAttributes.yieldPeriod;\\r\\n\\r\\n        uint256 dividend = 0;\\r\\n        uint256 i = 0;\\r\\n        for (i; i < periods; i++) {\\r\\n            uint256 uncappedYield = _tokenAttributes.minYield +\\r\\n                i *\\r\\n                _tokenAttributes.step;\\r\\n\\r\\n            if (uncappedYield > _tokenAttributes.maxYield) {\\r\\n                dividend += _tokenAttributes.maxYield;\\r\\n                i++;\\r\\n                break;\\r\\n            }\\r\\n            dividend += uncappedYield;\\r\\n        }\\r\\n\\r\\n        dividend += (periods - i) * _tokenAttributes.maxYield;\\r\\n\\r\\n        return dividend;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gets the total amount of tokens staked for the given user in the given contract.\\r\\n     * @param _user the user whose stakes are being counted.\\r\\n     * @param _token the address of the contract whose staked tokens we are skimming.\\r\\n     * @dev does not check if the token address is stakable.\\r\\n     */\\r\\n    function _totalStaked(address _user, address _token)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 tokenCount = 0;\\r\\n\\r\\n        uint256 nextToken = stakableTokenAttributes[_token].firstStaked[_user];\\r\\n        if (nextToken == 0) return 0;\\r\\n\\r\\n        while (nextToken != 0) {\\r\\n            tokenCount++;\\r\\n            nextToken = stakableTokenAttributes[_token]\\r\\n                .stakedTokens[nextToken]\\r\\n                .nextToken;\\r\\n        }\\r\\n\\r\\n        return tokenCount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gets the last token ID staked by the user.\\r\\n     * @param _user the user whose last stake is being found.\\r\\n     * @param _token the address of the contract whose staked tokens we are skimming.\\r\\n     * @dev does not check if the token address is stakable.\\r\\n     */\\r\\n    function _lastStaked(address _user, address _token)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 nextToken = stakableTokenAttributes[_token].firstStaked[_user];\\r\\n        if (nextToken == 0) return 0;\\r\\n\\r\\n        while (\\r\\n            stakableTokenAttributes[_token].stakedTokens[nextToken].nextToken !=\\r\\n            0\\r\\n        ) {\\r\\n            nextToken = stakableTokenAttributes[_token]\\r\\n                .stakedTokens[nextToken]\\r\\n                .nextToken;\\r\\n        }\\r\\n\\r\\n        return nextToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gets the token before the given token id owned by the user.\\r\\n     * @param _user the user staked tokens are being traversed.\\r\\n     * @param _token the address of the contract whose staked tokens we are skimming.\\r\\n     * @param _tokenId the id of the token whose precedent we are looking for\\r\\n     * @dev does not check if the token address is stakable. throws if not found\\r\\n     */\\r\\n    function _tokenBefore(\\r\\n        address _user,\\r\\n        address _token,\\r\\n        uint256 _tokenId\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 nextToken = stakableTokenAttributes[_token].firstStaked[_user];\\r\\n        require(nextToken != 0, \\\"None staked\\\");\\r\\n\\r\\n        if (nextToken == _tokenId) return 0;\\r\\n\\r\\n        while (nextToken != 0) {\\r\\n            uint256 next = stakableTokenAttributes[_token]\\r\\n                .stakedTokens[nextToken]\\r\\n                .nextToken;\\r\\n            if (next == _tokenId) return nextToken;\\r\\n            nextToken = next;\\r\\n        }\\r\\n\\r\\n        revert(\\\"Token not found\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gets all of the token ids that a user has staked from a given contract.\\r\\n     * @param _user the user whose token ids are being analyzed.\\r\\n     * @param _token the address of the token contract being analyzed.\\r\\n     * @return an array of token ids staked by that user.\\r\\n     * @dev does not check if the token address is stakable.\\r\\n     */\\r\\n    function _stakedTokenIds(address _user, address _token)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256 numStaked = _totalStaked(_user, _token);\\r\\n        uint256[] memory tokenIds = new uint256[](numStaked);\\r\\n\\r\\n        if (numStaked == 0) return tokenIds;\\r\\n        uint256 nextToken = stakableTokenAttributes[_token].firstStaked[_user];\\r\\n\\r\\n        uint256 index = 0;\\r\\n        while (nextToken != 0) {\\r\\n            tokenIds[index] = nextToken;\\r\\n            nextToken = stakableTokenAttributes[_token]\\r\\n                .stakedTokens[nextToken]\\r\\n                .nextToken;\\r\\n            index++;\\r\\n        }\\r\\n\\r\\n        return tokenIds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gets the College Credit dividend of the provided user.\\r\\n     * @param _user the user whose dividend we are checking.\\r\\n     * @param _token the token whose dividends we are checking.\\r\\n     */\\r\\n    function _dividendOf(address _user, address _token)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 dividend = 0;\\r\\n        uint256 nextToken = stakableTokenAttributes[_token].firstStaked[_user];\\r\\n\\r\\n        while (nextToken != 0) {\\r\\n            dividend += _tokenDividend(\\r\\n                stakableTokenAttributes[_token],\\r\\n                stakableTokenAttributes[_token]\\r\\n                    .stakedTokens[nextToken]\\r\\n                    .stakeTimestamp\\r\\n            );\\r\\n\\r\\n            nextToken = stakableTokenAttributes[_token]\\r\\n                .stakedTokens[nextToken]\\r\\n                .nextToken;\\r\\n        }\\r\\n\\r\\n        int256 resultantDividend = int256(dividend) +\\r\\n            stakableTokenAttributes[_token].rewardModifier[_user];\\r\\n\\r\\n        require(resultantDividend >= 0, \\\"Underflow\\\");\\r\\n        return uint256(resultantDividend);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unstakes a given token id.\\r\\n     * @param _token the address of the token contract that the token belongs to.\\r\\n     * @param _tokenId the id of the token to unstake.\\r\\n     * @dev does not check permissions.\\r\\n     */\\r\\n    function _unstake(address _token, uint256 _tokenId) internal {\\r\\n        address owner = stakableTokenAttributes[_token]\\r\\n            .stakedTokens[_tokenId]\\r\\n            .owner;\\r\\n\\r\\n        // will fail to get dividend if not staked or bad token contract\\r\\n        uint256 dividend = _tokenDividend(\\r\\n            stakableTokenAttributes[_token],\\r\\n            stakableTokenAttributes[_token]\\r\\n                .stakedTokens[_tokenId]\\r\\n                .stakeTimestamp\\r\\n        );\\r\\n\\r\\n        stakableTokenAttributes[_token].rewardModifier[owner] += int256(\\r\\n            dividend\\r\\n        );\\r\\n\\r\\n        // remove link in chain\\r\\n        uint256 tokenBefore = _tokenBefore(owner, _token, _tokenId);\\r\\n        if (tokenBefore == 0)\\r\\n            stakableTokenAttributes[_token].firstStaked[\\r\\n                owner\\r\\n            ] = stakableTokenAttributes[_token]\\r\\n                .stakedTokens[_tokenId]\\r\\n                .nextToken;\\r\\n        else\\r\\n            stakableTokenAttributes[_token]\\r\\n                .stakedTokens[tokenBefore]\\r\\n                .nextToken = stakableTokenAttributes[_token]\\r\\n                .stakedTokens[_tokenId]\\r\\n                .nextToken;\\r\\n\\r\\n        delete stakableTokenAttributes[_token].stakedTokens[_tokenId];\\r\\n\\r\\n        IERC721(_token).safeTransferFrom(address(this), owner, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Claims the dividend for the user.\\r\\n     * @param _user the user whose rewards are being withdrawn.\\r\\n     * @param _token the token from which rewards are being withdrawn.\\r\\n     * @dev does not check is the user has permission to withdraw. Reverts on zero dividend.\\r\\n     * @return dividend\\r\\n     */\\r\\n    function _withdrawRewards(address _user, address _token) internal returns (uint256) {\\r\\n        uint256 dividend = _dividendOf(_user, _token);\\r\\n        require(dividend > 0, \\\"Zero dividend\\\");\\r\\n\\r\\n        stakableTokenAttributes[_token].rewardModifier[_user] -= int256(\\r\\n            dividend\\r\\n        );\\r\\n\\r\\n        rewardToken.mint(_user, dividend);\\r\\n        return dividend;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICollegeCredit.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.7;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICollegeCredit is IERC20 {\\n    function mint(address recipient, uint256 amount) external;\\n}\"\r\n    },\r\n    \"contracts/CollegeCredit.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.7;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ICollegeCredit.sol\\\";\\n\\ncontract CollegeCredit is ERC20, Ownable, ICollegeCredit {\\n    constructor() ERC20(\\\"College Credit\\\", \\\"CREDIT\\\") {}\\n    \\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n    \\n    function mint(address recipient, uint256 amount) override external onlyOwner {\\n        _mint(recipient, amount);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_step\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yieldPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_step\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yieldPeriod\",\"type\":\"uint256\"}],\"name\":\"addStakableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"dividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract ICollegeCredit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakableTokenAttributes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"step\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"stakedTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unstakeAndClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeManyAndClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IMDStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "0000000000000000000000001103ce6136306fedcc56fe7236b9e52f0c109d490000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000002b5e3af16b18800000000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000000000000093a80", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}