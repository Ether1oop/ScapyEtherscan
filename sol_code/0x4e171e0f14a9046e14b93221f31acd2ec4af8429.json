{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Chainlife_v13.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/**\\r\\n\\r\\n\\r\\n   \u25a1\u25a1\u25a1\u25a1    \u25a1\u25a1    \u25a1\u25a1     \u25a1\u25a1\u25a1     \u25a1\u25a1\u25a1\u25a1  \u25a1\u25a1\u25a1    \u25a1\u25a1  \u25a1\u25a1       \u25a1\u25a1\u25a1\u25a1  \u25a1\u25a1\u25a1\u25a1\u25a1\u25a1\u25a1  \u25a1\u25a1\u25a1\u25a1\u25a1\u25a1\u25a1\\r\\n \u25a1\u25a1    \u25a1\u25a1  \u25a1\u25a1    \u25a1\u25a1   \u25a1\u25a1   \u25a1\u25a1    \u25a1\u25a1   \u25a1\u25a1\u25a1\u25a1   \u25a1\u25a1  \u25a1\u25a1        \u25a1\u25a1   \u25a1\u25a1       \u25a1\u25a1     \\r\\n\u25a1\u25a1         \u25a1\u25a1    \u25a1\u25a1  \u25a1\u25a1     \u25a1\u25a1   \u25a1\u25a1   \u25a1\u25a1 \u25a1\u25a1  \u25a1\u25a1  \u25a1\u25a1        \u25a1\u25a1   \u25a1\u25a1\u25a1\u25a1\u25a1    \u25a1\u25a1\u25a1\u25a1\u25a1  \\r\\n\u25a1\u25a1         \u25a1\u25a1\u25a1\u25a1\u25a1\u25a1\u25a1\u25a1  \u25a1\u25a1\u25a1\u25a1\u25a1\u25a1\u25a1\u25a1\u25a1   \u25a1\u25a1   \u25a1\u25a1  \u25a1\u25a1 \u25a1\u25a1  \u25a1\u25a1        \u25a1\u25a1   \u25a1\u25a1       \u25a1\u25a1     \\r\\n \u25a1\u25a1    \u25a1\u25a1  \u25a1\u25a1    \u25a1\u25a1  \u25a1\u25a1     \u25a1\u25a1   \u25a1\u25a1   \u25a1\u25a1   \u25a1\u25a1\u25a1\u25a1  \u25a1\u25a1        \u25a1\u25a1   \u25a1\u25a1       \u25a1\u25a1     \\r\\n   \u25a1\u25a1\u25a1\u25a1    \u25a1\u25a1    \u25a1\u25a1  \u25a1\u25a1     \u25a1\u25a1  \u25a1\u25a1\u25a1\u25a1  \u25a1\u25a1    \u25a1\u25a1\u25a1  \u25a1\u25a1\u25a1\u25a1\u25a1\u25a1\u25a1  \u25a1\u25a1\u25a1\u25a1  \u25a1\u25a1       \u25a1\u25a1\u25a1\u25a1\u25a1\u25a1\u25a1\\r\\n\\r\\n\\r\\n                                                                        by Matto\\r\\n*/\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ninterface i_ArtBlocks {\\r\\n    function ownerOf(uint256 fullTokenId) external view returns (address);\\r\\n}\\r\\n\\r\\n/** \\r\\n * @title Chainlife\\r\\n * @notice This is a customized ERC-721 contract for Chainlife. All tokens\\r\\n * created and controlled by this contract are licensed CC BY-NC 4.0.\\r\\n * @author Matto\\r\\n * @custom:security-contact monkmatto@protonmail.com / @MonkMatto on Twitter\\r\\n */ \\r\\ncontract Chainlife is ERC721Royalty, Ownable, ReentrancyGuard {\\r\\n  using Counters for Counters.Counter;\\r\\n  using Strings for string;\\r\\n\\r\\n  Counters.Counter public tokensMinted;\\r\\n  string public baseURI;\\r\\n  string public description;\\r\\n  uint8 public mintStage;\\r\\n  bool public scriptsLocked;\\r\\n  address public paymentsAddress;\\r\\n  uint96 public royaltyBPS;\\r\\n  uint256 public mintFee;\\r\\n  uint256 public shiftFee;\\r\\n  uint16 public maxSupply = 4096;\\r\\n  mapping(uint256 => string) public scriptData;\\r\\n  mapping(uint256 => uint8) public preMintWithEnso;\\r\\n  mapping(uint256 => uint8) public preMintWithFOCUS;\\r\\n  mapping(uint256 => int256) public levelShiftOf;\\r\\n  mapping(uint256 => string) public customRuleOf;\\r\\n  mapping(uint256 => bytes32) private tokenEntropyOf;\\r\\n  mapping(uint256 => address) private previousOwnerOf;\\r\\n  mapping(uint256 => uint256) private transferCountOf;\\r\\n  address private ABcontract = 0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270;\\r\\n\\r\\n  constructor() ERC721(\\\"Chainlife\\\", \\\"CHNLF\\\") {}\\r\\n\\r\\n  /** \\r\\n   * CUSTOM EVENTS\\r\\n   * @notice These events are emitted by functions 'SET_CUSTOM_RULE' and \\r\\n   * 'writeScriptData'.\\r\\n   * @dev These will be monitored by the custom backend. They will trigger\\r\\n   * updating the API with data stored in scriptData, as well as data returned\\r\\n   * by the scriptInputsOf() function.\\r\\n   *\\r\\n   * CustomRule Event\\r\\n   * @notice This is emitted whenever SET_CUSTOM_RULE is successfully called.\\r\\n   * @dev indexed keyword is added for later searchability.\\r\\n   * @param tokenId is the token that had a change to its CustomRule.\\r\\n   * @param rule is the rule string that was written to chain.   \\r\\n   * @param byAddress is the address that set the CustomRule (unless set by \\r\\n   * Matto on their behalf).\\r\\n   */\\r\\n  event CustomRule(\\r\\n      uint256 indexed tokenId,\\r\\n      string rule,\\r\\n      address indexed byAddress\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * ScriptData Event\\r\\n   * @notice This is emitted whenever writeScriptData is successfully called.\\r\\n   * @dev indexed keyword is added to scriptIndex for searchability.\\r\\n   * @param scriptIndex is index in the mapping that is being updated.\\r\\n   * @param oldScript is the data being replaced, potentially \\\"\\\".\\r\\n   * @param newScript is the new data stored to chain.\\r\\n   */  \\r\\n  event ScriptData(\\r\\n      uint256 indexed scriptIndex,\\r\\n      string oldScript,\\r\\n      string newScript\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * ShiftLevel Event\\r\\n   * @notice This is emitted whenever SHIFT_LEVEL is successfully called.\\r\\n   * @dev indexed keyword is added for later searchability.\\r\\n   * @param tokenId is the token that had a change to its level shift.\\r\\n   * @param shift is the amount that the token is being shifted.\\r\\n   * @param totalShift is the cumulative shift amount.\\r\\n   * @param byAddress is the address that called SHIFT_LEVEL (unless set by \\r\\n   * Matto on their behalf).\\r\\n   */  \\r\\n  event ShiftLevel(\\r\\n      uint256 indexed tokenId,\\r\\n      int256 shift,\\r\\n      int256 totalShift,\\r\\n      address indexed byAddress\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * MODIFIERS\\r\\n   * @notice These are reusable code to control function execution.\\r\\n   *\\r\\n   * @notice callerIsUser modifier prohibits contracts.\\r\\n   * @dev This modifier will cause transactions to fail if they come from a\\r\\n   * contract because the transaction origin will not match the message sender.\\r\\n   */\\r\\n  modifier callerIsUser() {\\r\\n      require(tx.origin == msg.sender);\\r\\n      _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * OVERRIDES\\r\\n   * @notice These functions are declared as overrides because functions of the \\r\\n   * same name exist in imported contracts.\\r\\n   * @dev 'super._transfer' calls the overridden function.\\r\\n   *\\r\\n   * @notice _baseURI is an internal function that returns a state value.\\r\\n   * @dev This override is needed when using a custom baseURI.\\r\\n   * @return baseURI, which is a state value.\\r\\n   */\\r\\n  function _baseURI()\\r\\n      internal \\r\\n      view \\r\\n      override \\r\\n      returns (string memory) \\r\\n  {\\r\\n      return baseURI;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice _transfer override adds logic to track transfer counts as well as\\r\\n   * the prior owner.\\r\\n   * @dev This override updates mappings and then calls the overridden function.\\r\\n   * @param  _from is the address the token is being sent from.\\r\\n   * @param  _to is the address the token is being sent to.\\r\\n   * @param  _tokenId is the token being transferred.\\r\\n   */\\r\\n  function _transfer(\\r\\n      address _from,\\r\\n      address _to,\\r\\n      uint256 _tokenId\\r\\n  ) \\r\\n      internal \\r\\n      virtual \\r\\n      override \\r\\n  {\\r\\n      transferCountOf[_tokenId]++;\\r\\n      previousOwnerOf[_tokenId] = _from;\\r\\n      super._transfer(_from, _to, _tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * MINTING\\r\\n   * @notice These are functions needed to mint tokens.\\r\\n   * @dev various external functions call the same internal function (_minter)\\r\\n   * if requirements are met.\\r\\n   *\\r\\n   * @notice PREMINT is the restricted access public mint function.\\r\\n   * @dev This allows previous collectors of Art Blocks projects #34 and #181 to\\r\\n   * mint at an earlier stage. Ownership is verified via the ArtBlocks contract\\r\\n   * controlling these tokens. Art Blocks tokenIds are the\\r\\n   * project number * 1 million, plus that project's token 'number.'\\r\\n   * The preMintWith* mappings tracks tokens so they can only be used once.\\r\\n   * The contract owner can bypass the perMintActive requirement.\\r\\n   * MAINNET FOCUS tokenBase: 181000000 | GOERLI tokenBase: 94000000.\\r\\n   * @param projectNumber is the Art Blocks project number of a Matto project,\\r\\n   * either 34 or 181 are acceptable.\\r\\n   * @param tokenNumber is the owned token from the project corresponding\\r\\n   * to the projectNumber that is being used for the premint.\\r\\n   */\\r\\n  function PREMINT(\\r\\n      uint256 projectNumber, \\r\\n      uint256 tokenNumber\\r\\n  )\\r\\n      external\\r\\n      payable\\r\\n      nonReentrant\\r\\n      callerIsUser\\r\\n  {\\r\\n      require(mintStage == 1);\\r\\n      require(projectNumber == 34 || projectNumber == 181);\\r\\n      require(\\r\\n          msg.sender ==\\r\\n              i_ArtBlocks(ABcontract).ownerOf(\\r\\n                  (projectNumber * 1000000) + tokenNumber\\r\\n              )\\r\\n      );\\r\\n      if (projectNumber == 34) {\\r\\n          require(\\r\\n              preMintWithEnso[tokenNumber] == 0,\\r\\n              \\\"Enso already used.\\\"\\r\\n          );\\r\\n          preMintWithEnso[tokenNumber] = 1;\\r\\n      } else {\\r\\n          require(\\r\\n              preMintWithFOCUS[tokenNumber] == 0,\\r\\n              \\\"FOCUS already used.\\\"\\r\\n          );\\r\\n          preMintWithFOCUS[tokenNumber] = 1;\\r\\n      }\\r\\n      _minter(msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice MINT is the regular access public mint function that mints to the\\r\\n   * caller's address.\\r\\n   * @dev Variation of a mint function that uses the msg.sender address as the\\r\\n   * account to mint to. The contract owner can bypass the publicMintActive \\r\\n   * requirement.\\r\\n   */\\r\\n  function MINT() \\r\\n      external \\r\\n      payable \\r\\n      nonReentrant \\r\\n      callerIsUser \\r\\n  {\\r\\n      require(mintStage == 2 || msg.sender == owner());\\r\\n      _minter(msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice MINT_TO_ADDRESS is the regular access public mint function that \\r\\n   * mints to a specified address.\\r\\n   * @dev Variation of a mint function that uses a submitted address as the\\r\\n   * account to mint to. The contract owner can bypass the publicMintActive \\r\\n   * requirement.\\r\\n   * @param to is the address to send the token to.\\r\\n   */\\r\\n  function MINT_TO_ADDRESS(\\r\\n    address to\\r\\n  )\\r\\n      external\\r\\n      payable\\r\\n      nonReentrant\\r\\n      callerIsUser\\r\\n  {\\r\\n      require(mintStage == 2 || msg.sender == owner());\\r\\n      _minter(to);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice _minter is the internal function that generates mints.\\r\\n   * @dev Minting function called by all other public 'MINT' functions.\\r\\n   * The contract owner can bypass the payment requirement.\\r\\n   * @param _to is the address to send the token to.\\r\\n   */\\r\\n  function _minter(\\r\\n      address _to\\r\\n  ) \\r\\n      internal \\r\\n  {\\r\\n      require(\\r\\n          msg.value == mintFee || msg.sender == owner(),\\r\\n          \\\"Incorrect value.\\\"\\r\\n      );\\r\\n      require(\\r\\n          tokensMinted.current() < maxSupply,\\r\\n          \\\"All minted.\\\"\\r\\n      );\\r\\n      uint256 tokenId = tokensMinted.current();\\r\\n      tokensMinted.increment();\\r\\n      _assignTokenData(tokenId);\\r\\n      _safeMint(_to, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice _assignTokenData generates the token's entropy.\\r\\n   * @dev This creates a hash that will be used as token entropy, created\\r\\n   * from various data inputs. Even with concurrent mints in a single block,\\r\\n   * each _tokenId will be unique, resulting in unique hashes.\\r\\n   * @param _tokenId is the token that the data will get assigned to.\\r\\n   */\\r\\n  function _assignTokenData(\\r\\n      uint256 _tokenId\\r\\n  ) \\r\\n      internal \\r\\n  {\\r\\n      tokenEntropyOf[_tokenId] = keccak256(\\r\\n          abi.encodePacked(\\r\\n              \\\"Chainlife\\\",\\r\\n              _tokenId,\\r\\n              block.number,\\r\\n              block.timestamp,\\r\\n              tx.gasprice\\r\\n          )\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * CUSTOM\\r\\n   * @notice These are custom functions for Chainlife.\\r\\n   * \\r\\n   * @notice CUSTOM_RULE allows owners to set a rule on-chain. \\r\\n   * @dev This allows token owners to submit and record data on the blockchain.\\r\\n   * The contract owner can also set these rules on the token owner's behalf.\\r\\n   * Each Chainlife token has the ability to utilize custom rules, but only\\r\\n   * after evolution. Chainlife tokens use the B/S notation for rules:\\r\\n   *\\r\\n   * B{number list}/S{number list}\\r\\n   *\\r\\n   * For example, the rulestring for Conway's Game of Life is B3/S23, meaning \\r\\n   * that any dead cell with 3 living neighbors will be born (B3), and any \\r\\n   * live cells with 2 or 3 neighbors will survive (S23). All other cells \\r\\n   * will die or remain dead.\\r\\n   * @param tokenId is the token whose CustomRule is being updated.\\r\\n   * @param rule is a string that gets stored as a state value. The input string\\r\\n   * should not include any quotation marks.\\r\\n   */\\r\\n  function CUSTOM_RULE(\\r\\n      uint256 tokenId, \\r\\n      string memory rule\\r\\n  ) \\r\\n      external \\r\\n  {\\r\\n      require(\\r\\n          msg.sender == ownerOf(tokenId) || msg.sender == owner(),\\r\\n          \\\"Unauthorized.\\\"\\r\\n      );\\r\\n      emit CustomRule(tokenId, rule, ownerOf(tokenId));\\r\\n      customRuleOf[tokenId] = rule;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice RESET_RULE allows owners to remove a custom rule. \\r\\n   * @dev This replaces the customRuleOf[tokenId] data with an empty string.\\r\\n   * When the generative script receives an empty string, it uses the rule\\r\\n   * that was determined by the token hash at mint.\\r\\n   * @param tokenId is the token whose custom rule is being reset.\\r\\n   */\\r\\n  function RESET_RULE(\\r\\n      uint256 tokenId\\r\\n  ) \\r\\n      external \\r\\n  {\\r\\n      require(\\r\\n          msg.sender == ownerOf(tokenId) || msg.sender == owner(),\\r\\n          \\\"Unauthorized.\\\"\\r\\n      );\\r\\n      emit CustomRule(tokenId, \\\"\\\", ownerOf(tokenId));\\r\\n      customRuleOf[tokenId] = \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice SHIFT_LEVEL allows owners to adjust the level shift value that is \\r\\n   * stored on-chain. Level shifts are additive, eg. submitting a transaction \\r\\n   * with shift value of -5 will subtract 5 from the current level shift value. \\r\\n   * @dev This allows token owners to submit and record data on the blockchain.\\r\\n   * The contract owner can also set these rules on the token owner's behalf.\\r\\n   * Each Chainlife token tracks its level, which is determined by transfer\\r\\n   * count and shift amount.\\r\\n   * @param tokenId is the token whose shift amount is being updated.\\r\\n   * @param shift is a signed integer that gets stored as a state value.\\r\\n   */\\r\\n  function SHIFT_LEVEL(\\r\\n      uint256 tokenId, \\r\\n      int256 shift\\r\\n  ) \\r\\n      external \\r\\n      payable\\r\\n      nonReentrant\\r\\n      callerIsUser      \\r\\n  {\\r\\n      require(\\r\\n          msg.sender == ownerOf(tokenId) || msg.sender == owner(),\\r\\n          \\\"Unauthorized.\\\"\\r\\n      );\\r\\n      uint256 absShift = (shift < 0) ? uint256(-shift) : uint256(shift);\\r\\n      require(\\r\\n          msg.value == absShift * shiftFee || msg.sender == owner(),\\r\\n          \\\"Incorrect value.\\\"\\r\\n      );\\r\\n      int256 totalShift = levelShiftOf[tokenId] + shift;\\r\\n      emit ShiftLevel(tokenId, shift, totalShift, ownerOf(tokenId));\\r\\n      levelShiftOf[tokenId] = totalShift;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice writeScriptData allows storage of the generative script on-chain.\\r\\n   * @dev This will store the generative script needed to reproduce Chainlife\\r\\n   * tokens, along with other information and instructions. Vanilla JavaScript\\r\\n   * and p5.js v1.0.0 are other dependencies.\\r\\n   * @param index identifies where the script data should be stored.\\r\\n   * @param newScript is the new script data.\\r\\n   */\\r\\n  function writeScriptData(\\r\\n      uint256 index, \\r\\n      string memory newScript\\r\\n  )\\r\\n      external\\r\\n      onlyOwner\\r\\n  {\\r\\n      require(!scriptsLocked);\\r\\n      emit ScriptData(index, scriptData[index], newScript);\\r\\n      scriptData[index] = newScript;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice scriptInputsOf returns the input data necessary for the generative\\r\\n   * script to create/recreate a Chainlife token. \\r\\n   * @dev For any given token, this function returns all the on-chain data that\\r\\n   * is needed to be inputted into the generative script to deterministically \\r\\n   * reproduce both the token's artwork and metadata.\\r\\n   * @param tokenId is the token whose inputs will be returned.\\r\\n   * @return scriptInputs are returned in JSON format.\\r\\n   */\\r\\n  function scriptInputsOf(\\r\\n      uint256 tokenId\\r\\n  )\\r\\n      external\\r\\n      view\\r\\n      returns (string memory)\\r\\n  {\\r\\n      string memory entropyString = BytesToHexString.toHex(tokenEntropyOf[tokenId]);\\r\\n      string memory sign = (levelShiftOf[tokenId] < 0) ? \\\"-\\\" : \\\"\\\";\\r\\n      uint256 absLevelShift = (levelShiftOf[tokenId] < 0) ? uint256(-levelShiftOf[tokenId]) : uint256(levelShiftOf[tokenId]);\\r\\n      return\\r\\n          string(\\r\\n              abi.encodePacked(\\r\\n                  '{\\\"token_id\\\":\\\"',\\r\\n                  Strings.toString(tokenId),\\r\\n                  '\\\",\\\"token_entropy\\\":\\\"',\\r\\n                  entropyString,\\r\\n                  '\\\",\\\"previous_owner\\\":\\\"',\\r\\n                  Strings.toHexString(uint160(previousOwnerOf[tokenId]), 20),\\r\\n                  '\\\",\\\"current_owner\\\":\\\"',\\r\\n                  Strings.toHexString(uint160(ownerOf(tokenId)), 20),\\r\\n                  '\\\",\\\"transfer_count\\\":\\\"',\\r\\n                  Strings.toString(transferCountOf[tokenId]),\\r\\n                  '\\\",\\\"level_shift\\\":\\\"',\\r\\n                  sign, Strings.toString(absLevelShift),                  \\r\\n                  '\\\",\\\"custom_rule\\\":\\\"',\\r\\n                  customRuleOf[tokenId],\\r\\n                  '\\\"}'\\r\\n              )\\r\\n          );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * CONTROLS\\r\\n   * @notice These are contract-level controls.\\r\\n   * @dev all should use the onlyOwner modifier.\\r\\n   *\\r\\n   * @notice lockScripts freezes the scriptData storage.\\r\\n   * @dev The project must be fully minted before this function is callable.\\r\\n   */\\r\\n  function lockScripts() \\r\\n      external \\r\\n      onlyOwner \\r\\n  {\\r\\n      require(tokensMinted.current() == maxSupply);\\r\\n      scriptsLocked = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice lowerMaxSupply allows changes to the maximum iteration count,\\r\\n   * a value that is checked against during mint.\\r\\n   * @dev This function will only update the maxSupply variable if the \\r\\n   * submitted value is lower. maxSupply is used in the internal _minter \\r\\n   * function to cap the number of available tokens.\\r\\n   * @param _maxSupply is the new maximum supply.\\r\\n   */\\r\\n  function lowerMaxSupply(\\r\\n      uint16 _maxSupply\\r\\n  ) \\r\\n      external \\r\\n      onlyOwner \\r\\n  {\\r\\n      require(_maxSupply < maxSupply && _maxSupply >= tokensMinted.current());\\r\\n      maxSupply = _maxSupply;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice setMintStage sets the stage of the mint.\\r\\n   * @dev This is used instead of public view booleans to save contract size.\\r\\n   * @param _mintStage is the new stage for the mint: 0 for disabled, 1 for \\r\\n   * premint only, 2 for public mint.\\r\\n   */\\r\\n  function setMintStage(\\r\\n    uint8 _mintStage\\r\\n  ) \\r\\n      external \\r\\n      onlyOwner \\r\\n  {\\r\\n      mintStage = _mintStage;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice setRoyalties updates the royalty address and BPS for the project.\\r\\n   * @dev This function allows changes to the payments address and secondary sale\\r\\n   * royalty amount. After setting values, _setDefaultRoyalty is called in \\r\\n   * order to update the imported EIP-2981 contract functions.\\r\\n   * @param _paymentsAddress is the new payments address.\\r\\n   * @param _royaltyBPS is the new projet royalty amount, measured in \\r\\n   * base percentage points.\\r\\n   */\\r\\n  function setRoyalties(\\r\\n      address _paymentsAddress, \\r\\n      uint96 _royaltyBPS\\r\\n  )\\r\\n      external\\r\\n      onlyOwner\\r\\n  {\\r\\n      paymentsAddress = _paymentsAddress;\\r\\n      royaltyBPS = _royaltyBPS;\\r\\n      _setDefaultRoyalty(paymentsAddress, _royaltyBPS);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice setMintFee sets the price per mint.\\r\\n   * @dev This function allows changes to the payment amount that is required \\r\\n   * for minting.\\r\\n   * @param _mintFee is the cost per mint in Wei.\\r\\n   */\\r\\n  function setMintFee(\\r\\n      uint256 _mintFee\\r\\n  ) \\r\\n      external \\r\\n      onlyOwner \\r\\n  {\\r\\n      mintFee = _mintFee;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice setShiftFee sets the price per level shift.\\r\\n   * @dev This function allows changes to the payment amount that is required \\r\\n   * to shift a token's level.\\r\\n   * @param _shiftFee is the cost per level shift in Wei.\\r\\n   */\\r\\n  function setShiftFee(\\r\\n      uint256 _shiftFee\\r\\n  ) \\r\\n      external \\r\\n      onlyOwner \\r\\n  {\\r\\n      shiftFee = _shiftFee;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice setDescription updates the on-chain description.\\r\\n   * @dev This is separate from other update functions because the description\\r\\n   * size may be large and thus expensive to update.\\r\\n   * @param _description is the new description. Quotation marks are not needed.\\r\\n   */\\r\\n  function setDescription(\\r\\n      string memory _description\\r\\n  ) \\r\\n      external \\r\\n      onlyOwner \\r\\n  {\\r\\n      description = _description;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice setURI sets/updates the project's baseURI.\\r\\n   * @dev baseURI is appended with tokenId and is returned in tokenURI calls.\\r\\n   * @dev _newBaseURI is used instead of _baseURI because an override function\\r\\n   * with that name already exists.\\r\\n   * @param _newBaseURI is the API endpoint base for tokenURI calls.\\r\\n   */\\r\\n  function setURI(\\r\\n      string memory _newBaseURI\\r\\n  ) \\r\\n      external \\r\\n      onlyOwner \\r\\n  {\\r\\n      baseURI = _newBaseURI;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice withdraw is used to send mint and shift funds to the payments\\r\\n   * address.\\r\\n   * @dev Withdraw cannot be called if the payments addresses is not set. \\r\\n   * If a receiving address is a contract using callbacks, the withdraw function\\r\\n   * could run out of gas. Update the receiving address if necessary.\\r\\n   */\\r\\n  function withdraw() \\r\\n      external \\r\\n      onlyOwner \\r\\n  {\\r\\n      require(paymentsAddress != address(0));\\r\\n      payable(paymentsAddress).transfer(address(this).balance);\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * The following library is licensed CC BY-SA 4.0.\\r\\n * @title BytesToHexString Library\\r\\n * @notice Provides a function for converting bytes into a hexidecimal string.\\r\\n * @author Mikhail Vladimirov (with edits by Matto)\\r\\n * @dev Code in this library is based on the thorough example and walkthrough\\r\\n * posted by Mikhail Vladimirov on https://stackoverflow.com/ using the \\r\\n * CC BY-SA 4.0 license.\\r\\n */\\r\\nlibrary BytesToHexString {\\r\\n\\r\\n  /**\\r\\n   * @notice toHex takes bytes data and returns the data as a string.\\r\\n   * @dev This is needed to convert the token entropy (bytes) into a string for\\r\\n   * return in the scriptInputsOf function. This is the function that is called\\r\\n   * first, and it calls toHex16 while processing the return.\\r\\n   * @param _data is the bytes data to convert.\\r\\n   * @return (string)\\r\\n   */\\r\\n  function toHex(bytes32 _data)\\r\\n    internal\\r\\n    pure\\r\\n    returns (string memory) \\r\\n  {\\r\\n    return string(\\r\\n        abi.encodePacked(\\r\\n            \\\"0x\\\",\\r\\n            toHex16(bytes16(_data)),\\r\\n            toHex16(bytes16(_data << 128))\\r\\n        )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice toHex16 is a helper function of toHex.\\r\\n   * @dev For an explanation of the operations, see Mikhail Vladimirov's \\r\\n   * walkthrough for converting bytes to string on https://stackoverflow.com/.\\r\\n   * @param _input is a bytes16 data chunk.\\r\\n   * @return output is a bytes32 data chunk.\\r\\n   */\\r\\n  function toHex16(bytes16 _input)\\r\\n    internal\\r\\n    pure\\r\\n    returns (bytes32 output) \\r\\n  {\\r\\n    output = bytes32(_input) & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 |\\r\\n      (bytes32(_input) & 0x0000000000000000FFFFFFFFFFFFFFFF00000000000000000000000000000000) >> 64;\\r\\n    output = output & 0xFFFFFFFF000000000000000000000000FFFFFFFF000000000000000000000000 |\\r\\n      (output & 0x00000000FFFFFFFF000000000000000000000000FFFFFFFF0000000000000000) >> 32;\\r\\n    output = output & 0xFFFF000000000000FFFF000000000000FFFF000000000000FFFF000000000000 |\\r\\n      (output & 0x0000FFFF000000000000FFFF000000000000FFFF000000000000FFFF00000000) >> 16;\\r\\n    output = output & 0xFF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000 |\\r\\n      (output & 0x00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000) >> 8;\\r\\n    output = (output & 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000) >> 4 |\\r\\n      (output & 0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00) >> 8;\\r\\n    output = bytes32 (0x3030303030303030303030303030303030303030303030303030303030303030 +\\r\\n      uint256(output) +\\r\\n      (uint256(output) + 0x0606060606060606060606060606060606060606060606060606060606060606 >> 4 &\\r\\n      0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F) * 7);\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/ERC721Royalty.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../common/ERC2981.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\\n * information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC721Royalty is ERC2981, ERC721 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n        _resetTokenRoyalty(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/common/ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rule\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"}],\"name\":\"CustomRule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scriptIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldScript\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newScript\",\"type\":\"string\"}],\"name\":\"ScriptData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"shift\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"totalShift\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"}],\"name\":\"ShiftLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rule\",\"type\":\"string\"}],\"name\":\"CUSTOM_RULE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MINT_TO_ADDRESS\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenNumber\",\"type\":\"uint256\"}],\"name\":\"PREMINT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RESET_RULE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"shift\",\"type\":\"int256\"}],\"name\":\"SHIFT_LEVEL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customRuleOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelShiftOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockScripts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_maxSupply\",\"type\":\"uint16\"}],\"name\":\"lowerMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintStage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preMintWithEnso\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preMintWithFOCUS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyBPS\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"scriptData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"scriptInputsOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scriptsLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_mintStage\",\"type\":\"uint8\"}],\"name\":\"setMintStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentsAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_royaltyBPS\",\"type\":\"uint96\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shiftFee\",\"type\":\"uint256\"}],\"name\":\"setShiftFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shiftFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newScript\",\"type\":\"string\"}],\"name\":\"writeScriptData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Chainlife", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}