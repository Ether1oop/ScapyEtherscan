{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address private owner;\r\n\r\n  event NewOwner(address oldOwner, address newOwner);\r\n\r\n  constructor() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function contractOwner() external view returns (address) {\r\n    return owner;\r\n  }\r\n\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == owner;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) external onlyOwner {\r\n    require(_newOwner != address(0), 'Ownable: address is not valid');\r\n    owner = _newOwner;\r\n    emit NewOwner(msg.sender, _newOwner);\r\n  } \r\n}\r\n\r\ncontract InitialD is IERC20, Ownable {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowed;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor () {\r\n        symbol = \"STT\";\r\n        name = \"Smart Trade Token\";\r\n        decimals = 4;\r\n        totalSupply = 10000000000000;\r\n        _balances[msg.sender] = 1000000000000;\r\n    }\r\n\r\n    function transfer(\r\n        address _to, \r\n        uint256 _value\r\n    ) external override returns (bool) {\r\n        require(_to != address(0), 'ERC20: to address is not valid');\r\n        require(_value <= _balances[msg.sender], 'ERC20: insufficient balance');\r\n\r\n        _balances[msg.sender] = _balances[msg.sender] - _value;\r\n        _balances[_to] = _balances[_to] + _value;\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n   function balanceOf(\r\n       address _owner\r\n    ) external override view returns (uint256 balance) {\r\n        return _balances[_owner];\r\n    }\r\n\r\n    function approve(\r\n       address _spender, \r\n       uint256 _value\r\n    ) external override returns (bool) {\r\n        _allowed[msg.sender][_spender] = _value;\r\n        \r\n        emit Approval(msg.sender, _spender, _value);\r\n        \r\n        return true;\r\n   }\r\n\r\n   function transferFrom(\r\n        address _from, \r\n        address _to, \r\n        uint256 _value\r\n    ) external override returns (bool) {\r\n        require(_from != address(0), 'ERC20: from address is not valid');\r\n        require(_to != address(0), 'ERC20: to address is not valid');\r\n        require(_value <= _balances[_from], 'ERC20: insufficient balance');\r\n        require(_value <= _allowed[_from][msg.sender], 'ERC20: transfer from value not allowed');\r\n\r\n        _allowed[_from][msg.sender] = _allowed[_from][msg.sender] - _value;\r\n        _balances[_from] = _balances[_from] - _value;\r\n        _balances[_to] = _balances[_to] + _value;\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        \r\n        return true;\r\n   }\r\n\r\n    function allowance(\r\n        address _owner, \r\n        address _spender\r\n    ) external override view returns (uint256) {\r\n        return _allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(\r\n        address _spender, \r\n        uint256 _addedValue\r\n    ) external returns (bool) {\r\n        _allowed[msg.sender][_spender] = _allowed[msg.sender][_spender] + _addedValue;\r\n\r\n        emit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(\r\n        address _spender, \r\n        uint256 _subtractedValue\r\n    ) external returns (bool) {\r\n        uint256 oldValue = _allowed[msg.sender][_spender];\r\n        \r\n        if (_subtractedValue > oldValue) {\r\n            _allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            _allowed[msg.sender][_spender] = oldValue - _subtractedValue;\r\n        }\r\n        \r\n        emit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\r\n        \r\n        return true;\r\n   }\r\n\r\n    function mintTo(\r\n        address _to,\r\n        uint256 _amount\r\n    ) external onlyOwner returns (bool) {\r\n        require(_to != address(0), 'ERC20: to address is not valid');\r\n\r\n        _balances[_to] = _balances[_to] + _amount;\r\n        totalSupply = totalSupply + _amount;\r\n\r\n        emit Transfer(address(0), _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function burn(\r\n        uint256 _amount\r\n    ) external returns (bool) {\r\n        require(_balances[msg.sender] >= _amount, 'ERC20: insufficient balance');\r\n\r\n        _balances[msg.sender] = _balances[msg.sender] - _amount;\r\n        totalSupply = totalSupply - _amount;\r\n\r\n        emit Transfer(msg.sender, address(0), _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(\r\n        address _from,\r\n        uint256 _amount\r\n    ) external returns (bool) {\r\n        require(_from != address(0), 'ERC20: from address is not valid');\r\n        require(_balances[_from] >= _amount, 'ERC20: insufficient balance');\r\n        require(_amount <= _allowed[_from][msg.sender], 'ERC20: burn from value not allowed');\r\n        \r\n        _allowed[_from][msg.sender] = _allowed[_from][msg.sender] - _amount;\r\n        _balances[_from] = _balances[_from] - _amount;\r\n        totalSupply = totalSupply - _amount;\r\n\r\n        emit Transfer(_from, address(0), _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InitialD", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6447df00dda9541ef9b5ee8cccf4e5a7d11302857ba6794be4f4dc37b2feb235"}]}