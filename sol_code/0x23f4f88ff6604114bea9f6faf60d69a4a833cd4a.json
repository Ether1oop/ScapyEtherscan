{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.16;\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom( address sender, address recipient, uint256 amount) external returns (bool);\r\n   \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Context {\r\n    \r\n    constructor()  {}\r\n\r\n    function _msgSender() internal view returns (address ) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor()  {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract Pausable is Context {\r\n    \r\n    event Paused(address account);\r\n\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ncontract CollarStake is Ownable, ReentrancyGuard, Pausable {\r\n\r\n    IERC20 public CollarToken;\r\n    uint256 public stakeDays = 365;\r\n    uint256 public stakeLimit;\r\n    uint256 public coolDownTime = 10 * 86400;\r\n    uint256 public currentPool;\r\n\r\n    struct UserInfo {\r\n        address staker;\r\n        uint256 poolID;\r\n        uint256 stakeID;\r\n        uint256 stakeAmount;\r\n        uint256 stakeTime;\r\n        uint256 unstakeTime;\r\n        uint256 withdrawTime;\r\n        uint256 stakingDays;\r\n        uint256 APY_percentage;\r\n        uint256 lastClaim;\r\n        uint256 rewardEndTime;\r\n        uint256 rewardAmount;\r\n        bool claimed;\r\n    }\r\n\r\n    struct poolInfo {\r\n        uint256 poolID;\r\n        IERC20 stakeToken;\r\n        uint256 APYpercentage;\r\n        uint256 poolStakeID;\r\n        uint256 totalStakedToken;\r\n        bool UnActive;\r\n    }\r\n    \r\n    struct userID{\r\n        uint256[] stakeIDs;\r\n    }\r\n\r\n    mapping(uint256 => mapping(uint256 => UserInfo)) internal userDetails;\r\n    mapping(address => mapping(uint256 => userID)) internal userIDs;\r\n    mapping(uint256 => poolInfo) internal poolDetails;\r\n\r\n    event emergencySafe(address indexed receiver, address tokenAddressss, uint256 TokenAmount);\r\n    event CreatePool(address indexed creator,uint256 poolID, address stakeToken,uint256 APYPercentage);\r\n    event stakeing(address indexed staker, uint256 stakeID, uint256 stakeAmount, uint256 stakeTime);\r\n    event unstakeing(address indexed staker, uint256 stakeID, uint256 stakeAmount, uint256 UnstakeTime);\r\n    event setAPYPercentage(address indexed owner,uint256 poolID, uint256 newPercentage);\r\n    event withdrawTokens(address indexed staker, uint256 withdrawToken, uint256 withdrawTime);\r\n    event RewardClaimed(address indexed staker,uint256 stakeID, uint256 rewardAmount, uint256 claimTime);\r\n    event adminDeposits(address indexed owner, uint256 RewardDepositamount);\r\n    event UpdatePoolStatus(address indexed owner,uint256 poolID,bool status);\r\n\r\n    constructor ( uint256 _maxTokenStake, address _CollarAddress) {\r\n        stakeLimit = _maxTokenStake;\r\n        CollarToken = IERC20(_CollarAddress);\r\n    }\r\n\r\n    function viewUserDetails(uint256 _poolID, uint256 _stakeID) external view returns(UserInfo memory){\r\n        return userDetails[_poolID][_stakeID];\r\n    }\r\n\r\n    function veiwPools(uint256 _poolID) external view returns(poolInfo memory){\r\n        return poolDetails[_poolID];\r\n    }\r\n\r\n    function userStakeIDs(address _account, uint256 _poolID) external view returns(uint256[] memory stakeIDs){\r\n        return userIDs[_account][_poolID].stakeIDs;\r\n    }\r\n\r\n    function updateMaxTokenStake(uint256 _maxTokenStake) external onlyOwner  {\r\n        stakeLimit = _maxTokenStake;\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unPause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function updatePoolAPYpercentage(uint256 _poolID, uint256 _APYpercentage) external onlyOwner  {\r\n        poolInfo storage pool = poolDetails[_poolID];\r\n        pool.APYpercentage = _APYpercentage;\r\n\r\n        emit setAPYPercentage(msg.sender, _poolID, _APYpercentage);\r\n    }\r\n\r\n    function updateCoolDownTime(uint256 _coolDownTime ) external onlyOwner  {\r\n        coolDownTime = _coolDownTime;\r\n    }\r\n\r\n    function updateCollarToken(address _CollarToken) external onlyOwner  {\r\n        require(_CollarToken != address(0x0),\"Collar is not a zero address\");\r\n        CollarToken = IERC20(_CollarToken);\r\n    }\r\n\r\n    function poolCreation(address _stakeToken, uint256 _APYPercentage) external onlyOwner  {\r\n        currentPool++;\r\n        poolInfo storage pool = poolDetails[currentPool];\r\n        pool.stakeToken = IERC20(_stakeToken);\r\n        pool.APYpercentage = _APYPercentage;\r\n        pool.poolID = currentPool;\r\n\r\n        emit CreatePool(msg.sender, currentPool, _stakeToken, _APYPercentage);\r\n    }\r\n\r\n    function poolStatus(uint256 poolID, bool status) external onlyOwner  {\r\n        poolInfo storage pool = poolDetails[poolID];\r\n        require(pool.poolID > 0,\"Pool Not found\");\r\n        pool.UnActive  = status;\r\n\r\n        emit UpdatePoolStatus(msg.sender, poolID, status);\r\n    }\r\n\r\n    function stake(uint256 _poolID,uint256 _tokenAmount, uint256 _stakeDays) external nonReentrant whenNotPaused {\r\n        require( _tokenAmount > 0 && _tokenAmount < stakeLimit,\"incorrect token amount\");\r\n        poolInfo storage pool = poolDetails[_poolID];\r\n        require(!pool.UnActive,\"pool is not active\");\r\n        pool.poolStakeID++;\r\n        UserInfo storage user = userDetails[_poolID][pool.poolStakeID];\r\n        user.staker = msg.sender;\r\n        user.stakeID = pool.poolStakeID;\r\n        user.poolID = _poolID;\r\n        user.stakeAmount = _tokenAmount;\r\n        user.stakeTime = block.timestamp;\r\n        user.lastClaim = block.timestamp;\r\n        user.rewardEndTime = (block.timestamp + (_stakeDays * (86400)));\r\n        user.APY_percentage = pool.APYpercentage;\r\n        user.stakingDays = _stakeDays;\r\n        pool.totalStakedToken = pool.totalStakedToken + (_tokenAmount);\r\n        userIDs[msg.sender][_poolID].stakeIDs.push(pool.poolStakeID);\r\n\r\n        (pool.stakeToken).transferFrom(msg.sender, address(this), _tokenAmount);\r\n        emit stakeing(msg.sender, pool.poolStakeID, _tokenAmount, block.timestamp);\r\n    }\r\n\r\n    function unstake(uint256 _poolID,uint256 _stakeID) external nonReentrant whenNotPaused {\r\n        UserInfo storage user = userDetails[_poolID][_stakeID];\r\n        require(user.stakeTime > 0 , \"Invalid stake ID\");\r\n        require(user.rewardEndTime <= block.timestamp,\"\");\r\n        require(user.unstakeTime == 0, \"user already claim this ID\");\r\n        require(user.staker == msg.sender,\" invalid user ID\");\r\n        claimReward( _poolID,_stakeID);\r\n        user.unstakeTime = block.timestamp;\r\n       \r\n        \r\n        emit unstakeing(msg.sender, _stakeID, user.stakeAmount, block.timestamp);\r\n    }\r\n\r\n    function withdraw(uint256 _poolID,uint256 _stakeID) external whenNotPaused {\r\n        UserInfo storage user = userDetails[_poolID][_stakeID];\r\n        poolInfo storage pool = poolDetails[_poolID];\r\n        require(user.staker == msg.sender,\" invalid user ID\");\r\n        require(user.unstakeTime != 0,\"User not unstake the tokens\");\r\n        require(user.unstakeTime + (coolDownTime) < block.timestamp, \"Withdraw time not reached\" );\r\n        require(user.withdrawTime == 0, \"This ID already withdrawed\");\r\n        user.withdrawTime = block.timestamp;\r\n        user.claimed = true;\r\n         pool.totalStakedToken = pool.totalStakedToken - (user.stakeAmount);\r\n        (pool.stakeToken).transfer(msg.sender, user.stakeAmount);\r\n       \r\n        emit withdrawTokens(msg.sender, user.stakeAmount, user.withdrawTime);\r\n    }\r\n\r\n    function claimReward(uint256 _poolID,uint256 _stakeID) public whenNotPaused {\r\n        UserInfo storage user = userDetails[_poolID][_stakeID];\r\n        require(user.staker == msg.sender,\" invalid user ID\");\r\n        uint256 rewardAmount = pendingReward(_poolID,_stakeID);\r\n        if(block.timestamp > user.rewardEndTime){\r\n            user.lastClaim = user.rewardEndTime;\r\n        } else{   user.lastClaim = block.timestamp; }\r\n        user.rewardAmount += rewardAmount;\r\n        CollarToken.transfer(msg.sender, rewardAmount); \r\n\r\n        emit RewardClaimed(msg.sender,_stakeID, rewardAmount, user.lastClaim);\r\n    }\r\n\r\n    function pendingReward(uint256 _poolID, uint256 _stakeID) public view returns(uint256 Reward) {\r\n        UserInfo storage user = userDetails[_poolID][_stakeID];\r\n        require(user.unstakeTime == 0, \"ID unstaked\");\r\n        uint256[3] memory localVar;\r\n        if(user.lastClaim < user.rewardEndTime){\r\n            localVar[2] = block.timestamp;\r\n            if(block.timestamp > user.rewardEndTime){ localVar[2] = user.rewardEndTime; }\r\n            \r\n            localVar[0] = (localVar[2]) - (user.lastClaim);\r\n            localVar[1] = (user.APY_percentage) * (1e16) / (stakeDays);\r\n            Reward = user.stakeAmount * (localVar[0]) * (localVar[1]) / (100) / (1e16) / (86400);\r\n        } else {\r\n            Reward = 0;\r\n        }\r\n    }\r\n\r\n    function adminDeposit(uint256 _tokenAmount) external onlyOwner {\r\n        CollarToken.transferFrom(msg.sender, address(this), _tokenAmount);\r\n\r\n        emit adminDeposits(msg.sender, _tokenAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokenStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_CollarAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"APYPercentage\",\"type\":\"uint256\"}],\"name\":\"CreatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdatePoolStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"RewardDepositamount\",\"type\":\"uint256\"}],\"name\":\"adminDeposits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddressss\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TokenAmount\",\"type\":\"uint256\"}],\"name\":\"emergencySafe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"setAPYPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"}],\"name\":\"stakeing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UnstakeTime\",\"type\":\"uint256\"}],\"name\":\"unstakeing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CollarToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"adminDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolDownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_APYPercentage\",\"type\":\"uint256\"}],\"name\":\"poolCreation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"poolStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeDays\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CollarToken\",\"type\":\"address\"}],\"name\":\"updateCollarToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coolDownTime\",\"type\":\"uint256\"}],\"name\":\"updateCoolDownTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokenStake\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokenStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_APYpercentage\",\"type\":\"uint256\"}],\"name\":\"updatePoolAPYpercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"}],\"name\":\"userStakeIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakeIDs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"}],\"name\":\"veiwPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"APYpercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolStakeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedToken\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"UnActive\",\"type\":\"bool\"}],\"internalType\":\"struct CollarStake.poolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"viewUserDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APY_percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct CollarStake.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CollarStake", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000009783b81438c24848f85848f8df31845097341771", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://48b93f9cd2858cdee78a03416829bfb412bf8220ea422a3f8e5b11cd62296887"}]}