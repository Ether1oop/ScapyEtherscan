{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\ninterface ERC721TokenReceiver{\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract CultureCodes is IERC721, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\r\n\t\r\n\tstring public proof;\r\n\tuint256 internal numTokens = 0;\r\n\tuint256 public constant TOKEN_LIMIT = 1000;\r\n\tuint256 public price = 0.15 ether;\t//1000000000000000000 wei = 1 ETH\r\n\r\n    mapping(bytes4 => bool) internal supportedInterfaces;\r\n    mapping (uint256 => address) internal idToOwner;\r\n    mapping (uint256 => address) internal idToApproval;\r\n\tmapping (uint256 => uint256) internal idToOwnerIndex;\r\n    mapping (address => mapping (address => bool)) internal ownerToOperators;\r\n    mapping (address => uint256[]) internal ownerToIds;\r\n    \r\n\r\n    string internal NFTname = \"CultureCodes\";\r\n    string internal NFTsymbol = \"CC\";\r\n\tstring private _contractURI;\r\n\tstring private _tokenBaseURI;\r\n\tbool public locked;\r\n\tbool public publicsale;\r\n    bool public holdermint;\r\n\t\r\n\t\r\n\t\r\n\t//Grants:\r\n\tmapping(address => bool) internal grants;\r\n\tmapping(address => mapping (uint256 => bool)) private _grantedToken;\r\n\taddress private _signerAddress;\r\n\r\n    \r\n\r\n    uint[TOKEN_LIMIT] internal indices;\r\n\t// location where token(the key) is available, the value of map in range from 1 to TOKEN_LIMIT:\r\n\tmapping ( uint256 => uint256) internal availablein;\r\n\t\r\n\r\n\r\n\t\r\n\tmodifier notLocked {\r\n        require(!locked, \"Locked\");\r\n        _;\r\n    }\r\n\t\r\n\r\n    bool private reentrancyLock = false;\r\n\r\n    modifier reentrancyGuard {\r\n        if (reentrancyLock) {\r\n            revert();\r\n        }\r\n        reentrancyLock = true;\r\n        _;\r\n        reentrancyLock = false;\r\n    }\r\n\r\n    modifier canOperate(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender], \"Cannot operate.\");\r\n        _;\r\n    }\r\n\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(\r\n            tokenOwner == msg.sender\r\n            || idToApproval[_tokenId] == msg.sender\r\n            || ownerToOperators[tokenOwner][msg.sender], \"Cannot transfer.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier validNFToken(uint256 _tokenId) {\r\n        require(idToOwner[_tokenId] != address(0), \"Invalid token.\");\r\n        _;\r\n    }\r\n\r\n    constructor() { \r\n        supportedInterfaces[0x01ffc9a7] = true; // ERC165\r\n        supportedInterfaces[0x80ac58cd] = true; // ERC721\r\n        supportedInterfaces[0x780e9d63] = true; // ERC721 Enumerable\r\n        supportedInterfaces[0x5b5e139f] = true; // ERC721 Metadata\r\n\t\tgrants[0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D] = true;\t//free mint granted for BAYC\r\n\t\t_signerAddress = 0xfeFF9016EFBb5fccAdb87444285BFEd17E1a071A;\r\n    }\r\n\r\n\r\n    //ERC 721 and 165\r\n\r\n    function isContract(address _addr) internal view returns (bool addressCheck) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(_addr) } // solhint-disable-line\r\n        addressCheck = size > 0;\r\n    }\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external view override returns (bool) {\r\n        return supportedInterfaces[_interfaceID];\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external override {\r\n        _safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external override {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external override canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from, \"Wrong from address.\");\r\n        require(_to != address(0), \"Cannot send to 0x0.\");\r\n        _transfer(_to, _tokenId);\r\n    }\r\n\r\n    function approve(address _approved, uint256 _tokenId) external override canOperate(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(_approved != tokenOwner);\r\n        idToApproval[_tokenId] = _approved;\r\n        emit Approval(tokenOwner, _approved, _tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external override {\r\n        ownerToOperators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function balanceOf(address _owner) external view override returns (uint256) {\r\n        require(_owner != address(0));\r\n        return _getOwnerNFTCount(_owner);\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) external view override returns (address _owner) {\r\n        require(idToOwner[_tokenId] != address(0));\r\n        _owner = idToOwner[_tokenId];\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId) external view override validNFToken(_tokenId) returns (address) {\r\n        return idToApproval[_tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external override view returns (bool) {\r\n        return ownerToOperators[_owner][_operator];\r\n    }\r\n\r\n    function _transfer(address _to, uint256 _tokenId) internal {\r\n        address from = idToOwner[_tokenId];\r\n        _clearApproval(_tokenId);\r\n\r\n        _removeNFToken(from, _tokenId);\r\n        _addNFToken(_to, _tokenId);\r\n\r\n        emit Transfer(from, _to, _tokenId);\r\n    }\r\n\t\r\n\t\r\n\t\r\n\t\r\n    function randomIndex() internal returns (uint) {\r\n        uint totalSize = TOKEN_LIMIT - numTokens;\r\n        uint index = uint(keccak256(abi.encodePacked(numTokens, msg.sender, block.difficulty, block.timestamp))) % totalSize;\r\n        uint value = 0;\r\n        if (indices[index] != 0) {\r\n            value = indices[index];\r\n        } else {\r\n            value = index;\r\n        }\r\n\r\n        if (indices[totalSize - 1] == 0) {\r\n            indices[index] = totalSize - 1;\r\n        } else {\r\n            indices[index] = indices[totalSize - 1];\r\n        }\r\n       \r\n        return value.add(1);\r\n    }\r\n\r\n\r\n\t\r\n\r\n\t\r\n\tfunction recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n\r\n\t\trequire(signature.length == 65);\t\t\r\n\t\t\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            r := mload(add(signature, 32))\r\n            s := mload(add(signature, 64))\r\n            v := byte(0, mload(add(signature, 96)))\r\n        }\r\n\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        require(v == 27 || v == 28);\r\n        return ecrecover(hash, v, r, s);\r\n\r\n    }\r\n\r\n\t\r\n\t\r\n\tfunction HolderMint(bytes calldata signature, uint256 token ) external payable reentrancyGuard {\r\n\t\trequire(holdermint, \"HOLDERS MINT CLOSED\");\r\n\t\trequire(idToOwner[token] == address(0),\"Token Already Migrated\");\r\n\t\t\r\n\t\tbytes32 hash = keccak256(\r\n\t\t\t\t\t\t\t\tabi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\r\n\t\t\t\t\t\t\t\t\t\t\t\tkeccak256(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmsg.sender,token,address(this)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\trequire(recover(hash, signature)==_signerAddress, \"INVALID SIGNATURE\");\r\n\r\n\t\tuint256 index = TOKEN_LIMIT - numTokens - 1 ;\r\n\t\tuint256 value = indices[index] ;//last available value\t\t\r\n\t\t\r\n\t\tuint256 loc;\r\n\r\n\t\tif(availablein[token-1] == 0)\r\n\t\t\tloc = token-1;\r\n\t\telse\r\n\t\t\tloc = availablein[token-1]-1;\r\n\t\t\r\n\t\tif( value == 0 ){\r\n\t\t\tindices[ loc ] = index;\t\t\r\n\t\t\t}\r\n\t\telse{\r\n\t\t\tindices[ loc ] = value;\r\n\t\t\t}\r\n\t\tavailablein[ indices[loc] ] = loc + 1 ;\r\n\r\n\r\n\r\n\t\t\r\n\t\tnumTokens = numTokens + 1;\r\n        _addNFToken(msg.sender, token);\r\n        emit Transfer(address(0), msg.sender, token);\r\n\r\n    }\r\n\t\r\n\t\r\n\tfunction HolderMintBatch(bytes calldata signature, uint256[] calldata tokens ) external payable reentrancyGuard {\r\n\t\trequire(holdermint, \"HOLDERS MINT CLOSED\");\r\n\t\t\r\n\t\tstring memory tokenlist = toString(tokens[0]);\r\n\t\tfor(uint256 i = 1; i < tokens.length; i++) {\r\n\t\t\ttokenlist = string(                \r\n                abi.encodePacked( tokenlist, \",\", toString(tokens[i]) )\r\n                );\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\tbytes32 hash = keccak256(\r\n\t\t\t\t\t\t\t\tabi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\r\n\t\t\t\t\t\t\t\t\t\t\t\tkeccak256(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmsg.sender,tokenlist,address(this)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\trequire(recover(hash, signature)==_signerAddress, \"INVALID SIGNATURE\");\r\n\r\n\t\tfor(uint256 i = 0; i < tokens.length; i++) {\r\n\t\t\t\tif(idToOwner[tokens[i]] == address(0)){\r\n\t\t\r\n\r\n\t\t\t\tuint256 index = TOKEN_LIMIT - numTokens - 1 ;\r\n\t\t\t\tuint256 value = indices[index] ;//last available value\t\t\r\n\t\t\r\n\t\t\t\tuint256 loc;\r\n\r\n\r\n\t\t\t\tif(availablein[tokens[i]-1] == 0)\r\n\t\t\t\t\tloc = tokens[i]-1;\r\n\t\t\t\telse\r\n\t\t\t\t\tloc = availablein[tokens[i]-1]-1;\r\n\t\t\r\n\t\t\t\tif( value == 0 ){\r\n\t\t\t\t\tindices[ loc ] = index;\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tindices[ loc ] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\tavailablein[ indices[loc] ] = loc + 1 ;\r\n\t\t\r\n\t\t\r\n\t\t\t\tnumTokens = numTokens + 1;\r\n\t\t\t\t_addNFToken(msg.sender, tokens[i]);\r\n\t\t\t\temit Transfer(address(0), msg.sender, tokens[i]);\r\n\t\t\t\t}\r\n\t\t}\r\n\r\n\t\t\r\n\r\n    }\r\n\r\n\t\r\n\tfunction GrantMint(address collection, uint useId) external payable reentrancyGuard {\r\n\t\trequire(publicsale, \"PUBLIC SALE NOT OPEN\");\r\n\t\trequire(grants[collection], \"Collection not granted\");\r\n\t\trequire(IERC721(collection).ownerOf(useId) == msg.sender, \"Not the token owner\");\r\n\t\trequire(!_grantedToken[collection][useId],\"Token Already Granted\");\r\n        require(numTokens.add(1) <= TOKEN_LIMIT, \"Exceed supply\");\r\n\t\t\r\n\t\t_mint(msg.sender);\r\n\t\t\r\n\t\t_grantedToken[collection][useId] = true;\r\n    }\r\n\r\n\tfunction PublicMint(uint quantity) external payable reentrancyGuard {\r\n\t\trequire(publicsale, \"PUBLIC SALE NOT OPEN\");\r\n        require(quantity > 0 , \"Can't be 0\");\r\n        require(numTokens.add(quantity) <= TOKEN_LIMIT, \"Exceed supply\");\r\n        require(msg.value >= price.mul(quantity), \"Insufficient funds.\");\r\n\t\tfor(uint i = 0; i < quantity; i++) {\t\t\t\r\n\t\t\t_mint(msg.sender);\t\t\t\r\n        }\r\n    }\t\r\n\t\r\n    function _mint(address _to ) internal {     \r\n        uint256 _id = randomIndex(); \r\n\t\tnumTokens = numTokens + 1;\r\n        _addNFToken(_to, _id);\r\n        emit Transfer(address(0), _to, _id);\r\n    }\r\n\t\r\n\t\r\n\t\r\n\tfunction withdraw() public onlyOwner {\r\n\t\tpayable(msg.sender).transfer(address(this).balance);\r\n\t\t}\r\n\t\t\r\n\r\n\r\n\r\n    function _addNFToken(address _to, uint256 _tokenId) internal {\r\n        require(idToOwner[_tokenId] == address(0), \"Already owned.\");\r\n        idToOwner[_tokenId] = _to;\r\n\r\n        ownerToIds[_to].push(_tokenId);\r\n        idToOwnerIndex[_tokenId] = ownerToIds[_to].length.sub(1);\r\n    }\r\n\r\n    function _removeNFToken(address _from, uint256 _tokenId) internal {\r\n        require(idToOwner[_tokenId] == _from, \"Incorrect owner.\");\r\n        delete idToOwner[_tokenId];\r\n\r\n        uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\r\n        uint256 lastTokenIndex = ownerToIds[_from].length.sub(1);\r\n\r\n        if (lastTokenIndex != tokenToRemoveIndex) {\r\n            uint256 lastToken = ownerToIds[_from][lastTokenIndex];\r\n            ownerToIds[_from][tokenToRemoveIndex] = lastToken;\r\n            idToOwnerIndex[lastToken] = tokenToRemoveIndex;\r\n        }\r\n\r\n        ownerToIds[_from].pop();\r\n    }\r\n\r\n    function _getOwnerNFTCount(address _owner) internal view returns (uint256) {\r\n        return ownerToIds[_owner].length;\r\n    }\r\n\r\n    function _safeTransferFrom(address _from,  address _to,  uint256 _tokenId,  bytes memory _data) private canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from, \"Incorrect owner.\");\r\n        require(_to != address(0));\r\n\r\n        _transfer(_to, _tokenId);\r\n\r\n        if (isContract(_to)) {\r\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n            require(retval == _ERC721_RECEIVED);\r\n        }\r\n    }\r\n\r\n    function _clearApproval(uint256 _tokenId) private {\r\n        if (idToApproval[_tokenId] != address(0)) {\r\n            delete idToApproval[_tokenId];\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return numTokens;\r\n    }\r\n\r\n    function tokenByIndex(uint256 index) public pure returns (uint256) {\r\n        require(index >= 0 && index < TOKEN_LIMIT);\r\n        return index+1;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\r\n        require(_index < ownerToIds[_owner].length);\r\n        return ownerToIds[_owner][_index];\r\n    }\r\n\r\n\r\n\r\n\r\n\t\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function name() external view returns (string memory _name) {\r\n        _name = NFTname;\r\n    }\r\n\r\n    function symbol() external view returns (string memory _symbol) {\r\n        _symbol = NFTsymbol;\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) external view validNFToken(_tokenId) returns (string memory) {\r\n        return string(abi.encodePacked(_tokenBaseURI, toString(_tokenId)));\r\n    }\r\n\t\r\n\tfunction contractURI() public view returns (string memory) {\r\n        return _contractURI;\r\n    }\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tfunction lockMetadata() external onlyOwner {\r\n        locked = true;\r\n    }\r\n\t\r\n\tfunction setBaseURI(string calldata URI) external onlyOwner notLocked {\r\n        _tokenBaseURI = URI;\r\n    }\r\n\t\r\n\tfunction setContractURI(string calldata URI) external onlyOwner notLocked {\r\n        _contractURI = URI;\r\n    }\r\n\t\r\n\tfunction setSignerAddress(address addr) external onlyOwner {\r\n        _signerAddress = addr;\r\n    }\r\n\t\r\n\tfunction toggleCollection(address collection) external onlyOwner {\r\n        grants[collection] = !grants[collection];\r\n    }\r\n\t\r\n\tfunction toggleHolderMint() external onlyOwner {\r\n        holdermint = !holdermint;\r\n    }\r\n\r\n\tfunction togglePublicSale() external onlyOwner {\r\n        publicsale = !publicsale;\r\n    }\r\n\t\r\n\tfunction setPrice(uint256 _newPrice) public onlyOwner {\r\n        price = _newPrice;\r\n    }\r\n\t\r\n\tfunction setProvenanceHash(string calldata hash) external onlyOwner notLocked {\r\n        proof = hash;\r\n    }\r\n\t\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"useId\",\"type\":\"uint256\"}],\"name\":\"GrantMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"HolderMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"HolderMintBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"PublicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdermint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proof\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicsale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"setProvenanceHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setSignerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"toggleCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleHolderMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CultureCodes", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fd093b68607fe0239bf0ea5e8320bda8ad01fb0943d4df07c06649216dd8246d"}]}