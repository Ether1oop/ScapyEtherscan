{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: Unlicense\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\r\n    function __ERC165_init() internal initializer {\r\n        __ERC165_init_unchained();\r\n    }\r\n\r\n    function __ERC165_init_unchained() internal initializer {\r\n    }\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n/**\r\n * @dev Storage based implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\nabstract contract ERC165StorageUpgradeable is Initializable, ERC165Upgradeable {\r\n    function __ERC165Storage_init() internal initializer {\r\n        __ERC165_init_unchained();\r\n        __ERC165Storage_init_unchained();\r\n    }\r\n\r\n    function __ERC165Storage_init_unchained() internal initializer {\r\n    }\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\nabstract contract HasSecondarySaleFees is ERC165StorageUpgradeable {\r\n    event SecondarySaleFees(\r\n        uint256 tokenId,\r\n        address[] recipients,\r\n        uint256[] bps\r\n    );\r\n\r\n    /*\r\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\r\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\r\n     *\r\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;\r\n\r\n    function _initialize() public initializer {\r\n        _registerInterface(_INTERFACE_ID_FEES);\r\n    }\r\n\r\n    function getFeeRecipients(uint256 id)\r\n        public\r\n        view\r\n        virtual\r\n        returns (address[] memory);\r\n\r\n    function getFeeBps(uint256 id)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint32[] memory);\r\n}\r\n\r\n/**\r\n * @dev Interface used to share common types between AsyncArt Blueprints contracts\r\n * @author Ohimire Labs\r\n */\r\ninterface IBlueprintTypes {\r\n    /**\r\n     * @dev Core administrative accounts \r\n     * @param platform Platform, holder of DEFAULT_ADMIN role\r\n     * @param minter Minter, holder of MINTER_ROLE\r\n     * @param asyncSaleFeesRecipient Recipient of primary sale fees going to platform\r\n     */\r\n    struct Admins {\r\n        address platform;\r\n        address minter;\r\n        address asyncSaleFeesRecipient;\r\n    } \r\n\r\n    /**\r\n     * @dev Object passed in when preparing blueprint \r\n     * @param _capacity Number of NFTs in Blueprint \r\n     * @param _price Price per NFT in Blueprint\r\n     * @param _erc20Token Address of ERC20 currency required to buy NFTs, can be zero address if expected currency is native gas token \r\n     * @param _blueprintMetaData Blueprint metadata uri\r\n     * @param _baseTokenUri Base URI for token, resultant uri for each token is base uri concatenated with token id\r\n     * @param _merkleroot Root of Merkle tree holding whitelisted accounts \r\n     * @param _mintAmountArtist Amount of NFTs of Blueprint mintable by artist\r\n     * @param _mintAmountPlatform Amount of NFTs of Blueprint mintable by platform \r\n     * @param _maxPurchaseAmount Max number of NFTs purchasable in a single transaction\r\n     * @param _saleEndTimestamp Timestamp when the sale ends \r\n     */ \r\n    struct BlueprintPreparationConfig {\r\n        uint64 _capacity;\r\n        uint128 _price;\r\n        address _erc20Token;\r\n        string _blueprintMetaData;\r\n        string _baseTokenUri;\r\n        bytes32 _merkleroot;\r\n        uint32 _mintAmountArtist;\r\n        uint32 _mintAmountPlatform;\r\n        uint64 _maxPurchaseAmount;\r\n        uint128 _saleEndTimestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Object holding primary fee data\r\n     * @param primaryFeeBPS Primary fee percentage allocations, in basis points\r\n     * @param primaryFeeRecipients Primary fee recipients \r\n     */\r\n    struct PrimaryFees {\r\n        uint32[] primaryFeeBPS;\r\n        address[] primaryFeeRecipients;\r\n    }\r\n}\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721Upgradeable is IERC165Upgradeable {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721ReceiverUpgradeable {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\r\n    using AddressUpgradeable for address;\r\n    using StringsUpgradeable for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC165_init_unchained();\r\n        __ERC721_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\r\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n    uint256[44] private __gap;\r\n}\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlUpgradeable {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n/**\r\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n}\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\r\n    function __AccessControl_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC165_init_unchained();\r\n        __AccessControl_init_unchained();\r\n    }\r\n\r\n    function __AccessControl_init_unchained() internal initializer {\r\n    }\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        StringsUpgradeable.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        StringsUpgradeable.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSetUpgradeable {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\r\n */\r\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\r\n    function __AccessControlEnumerable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC165_init_unchained();\r\n        __AccessControl_init_unchained();\r\n        __AccessControlEnumerable_init_unchained();\r\n    }\r\n\r\n    function __AccessControlEnumerable_init_unchained() internal initializer {\r\n    }\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\r\n\r\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\r\n        return _roleMembers[role].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\r\n        return _roleMembers[role].length();\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {grantRole} to track enumerable memberships\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\r\n        super.grantRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {revokeRole} to track enumerable memberships\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\r\n        super.revokeRole(role, account);\r\n        _roleMembers[role].remove(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {renounceRole} to track enumerable memberships\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\r\n        super.renounceRole(role, account);\r\n        _roleMembers[role].remove(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {_setupRole} to track enumerable memberships\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual override {\r\n        super._setupRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\r\n/**\r\n * @dev These functions deal with verification of Merkle Tree proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n *\r\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\r\n * hashing, or use a hash function other than keccak256 for hashing leaves.\r\n * This is because the concatenation of a sorted pair of internal nodes in\r\n * the merkle tree could be reinterpreted as a leaf value.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {verify}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function verifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProofCalldata(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs & pre-images are assumed to be sorted.\r\n     *\r\n     * _Available since v4.4._\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processProof}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\r\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function multiProofVerify(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProof(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {multiProofVerify}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function multiProofVerifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\r\n     * consuming from one or the other at each step according to the instructions given by\r\n     * `proofFlags`.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processMultiProof(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            return hashes[totalHashes - 1];\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processMultiProof}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processMultiProofCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            return hashes[totalHashes - 1];\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\r\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\r\n    }\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Async Art Blueprint NFT contract with true creator provenance\r\n * @author Async Art, Ohimire Labs \r\n */\r\ncontract CreatorBlueprints is\r\n    ERC721Upgradeable,\r\n    HasSecondarySaleFees,\r\n    AccessControlEnumerableUpgradeable,\r\n    ReentrancyGuard\r\n{\r\n    using StringsUpgradeable for uint256;\r\n\r\n    /**\r\n     * @dev Default fee given to platform on primary sales\r\n     */\r\n    uint32 public defaultPlatformPrimaryFeePercentage;    \r\n\r\n    /**\r\n     * @dev Token id of last ERC721 NFT minted\r\n     */ \r\n    uint64 public latestErc721TokenIndex;\r\n\r\n    /**\r\n     * @dev Platform account receiving fees from primary sales\r\n     */\r\n    address public asyncSaleFeesRecipient;\r\n\r\n    /**\r\n     * @dev Account representing platform \r\n     */\r\n    address public platform;\r\n\r\n    /**\r\n     * @dev Account able to perform actions restricted to MINTER_ROLE holder\r\n     */\r\n    address public minterAddress;\r\n\r\n    /**\r\n     * @dev Blueprint artist \r\n     */\r\n    address public artist;\r\n    \r\n    /**\r\n     * @dev Tracks failed transfers of native gas token \r\n     */\r\n    mapping(address => uint256) failedTransferCredits;\r\n\r\n    /**\r\n     * @dev Blueprint, core object of contract\r\n     */\r\n    Blueprints public blueprint;\r\n\r\n    /**\r\n     * @dev Royalty config \r\n     */\r\n    RoyaltyParameters public royaltyParameters;\r\n\r\n    /**\r\n     * @dev Contract-level metadata \r\n     */\r\n    string public contractURI; \r\n\r\n    /**\r\n     * @dev Holders of this role are given minter privileges \r\n     */\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n\r\n    /**\r\n     * @dev Tracks state of Blueprint sale\r\n     */\r\n    enum SaleState {\r\n        not_prepared,\r\n        not_started,\r\n        started,\r\n        paused\r\n    }\r\n\r\n    /**\r\n     * @dev Object holding royalty data\r\n     * @param split Royalty splitter receiving royalties\r\n     * @param royaltyCutBPS Total percentage of token sales sent to split, in basis points \r\n     */\r\n    struct RoyaltyParameters {\r\n        address split;\r\n        uint32 royaltyCutBPS;\r\n    }\r\n\r\n    /**\r\n     * @dev Blueprint\r\n     * @param mintAmountArtist Amount of NFTs of Blueprint mintable by artist\r\n     * @param mintAmountPlatform Amount of NFTs of Blueprint mintable by platform \r\n     * @param capacity Number of NFTs in Blueprint \r\n     * @param erc721TokenIndex Token ID of last NFT minted for Blueprint\r\n     * @param maxPurchaseAmount Max number of NFTs purchasable in a single transaction\r\n     * @param saleEndTimestamp Timestamp when the sale ends \r\n     * @param price Price per NFT in Blueprint\r\n     * @param tokenUriLocked If the token metadata isn't updatable \r\n     * @param ERC20Token Address of ERC20 currency required to buy NFTs, can be zero address if expected currency is native gas token \r\n     * @param baseTokenUri Base URI for token, resultant uri for each token is base uri concatenated with token id\r\n     * @param merkleroot Root of Merkle tree holding whitelisted accounts \r\n     * @param saleState State of sale\r\n     * @param feeRecipientInfo Object containing primary and secondary fee configuration\r\n     */ \r\n    struct Blueprints {\r\n        uint32 mintAmountArtist;\r\n        uint32 mintAmountPlatform;\r\n        uint64 capacity;\r\n        uint64 erc721TokenIndex;\r\n        uint64 maxPurchaseAmount;\r\n        uint128 saleEndTimestamp;\r\n        uint128 price;\r\n        bool tokenUriLocked;        \r\n        address ERC20Token;\r\n        string baseTokenUri;\r\n        bytes32 merkleroot;\r\n        SaleState saleState;    \r\n        IBlueprintTypes.PrimaryFees feeRecipientInfo;\r\n    }\r\n\r\n    /**\r\n     * @dev Creator config of contract\r\n     * @param name Contract name\r\n     * @param symbol Contract symbol\r\n     * @param contractURI Contract-level metadata \r\n     * @param artist Blueprint artist\r\n     */\r\n    struct CreatorBlueprintsInput {\r\n        string name;\r\n        string symbol;\r\n        string contractURI;\r\n        address artist;\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when blueprint seed is revealed\r\n     * @param randomSeed Revealed seed\r\n     */\r\n    event BlueprintSeed(string randomSeed);\r\n\r\n    /**\r\n     * @dev Emitted when NFTs of blueprint are minted\r\n     * @param artist Blueprint artist\r\n     * @param purchaser Purchaser of NFTs\r\n     * @param tokenId NFT minted\r\n     * @param newCapacity New capacity of tokens left in blueprint \r\n     * @param seedPrefix Seed prefix hash\r\n     */\r\n    event BlueprintMinted(\r\n        address artist,\r\n        address purchaser,\r\n        uint128 tokenId,\r\n        uint64 newCapacity,\r\n        bytes32 seedPrefix\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when blueprint is prepared\r\n     * @param artist Blueprint artist\r\n     * @param capacity Number of NFTs in blueprint\r\n     * @param blueprintMetaData Blueprint metadata uri\r\n     * @param baseTokenUri Blueprint's base token uri. Token uris are a result of the base uri concatenated with token id \r\n     */ \r\n    event BlueprintPrepared(\r\n        address artist,\r\n        uint64 capacity,\r\n        string blueprintMetaData,\r\n        string baseTokenUri\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when blueprint sale is started\r\n     */\r\n    event SaleStarted();\r\n\r\n    /**\r\n     * @dev Emitted when blueprint sale is paused\r\n     */\r\n    event SalePaused();\r\n\r\n    /**\r\n     * @dev Emitted when blueprint sale is unpaused\r\n     */\r\n    event SaleUnpaused();\r\n\r\n    /**\r\n     * @dev Emitted when blueprint token uri is updated \r\n     * @param newBaseTokenUri New base uri \r\n     */\r\n    event BlueprintTokenUriUpdated(string newBaseTokenUri);\r\n\r\n    /**\r\n     * @dev Checks blueprint sale state\r\n     */\r\n    modifier isBlueprintPrepared() {\r\n        require(\r\n            blueprint.saleState != SaleState.not_prepared,\r\n            \"!prepared\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if blueprint sale is ongoing\r\n     */\r\n    modifier isSaleOngoing() {\r\n        require(_isSaleOngoing(), \"!ongoing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if quantity of NFTs is available for purchase in blueprint\r\n     * @param _quantity Quantity of NFTs being checked \r\n     */ \r\n    modifier isQuantityAvailableForPurchase(\r\n        uint32 _quantity\r\n    ) {\r\n        require(\r\n            blueprint.capacity >= _quantity,\r\n            \"quantity >\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if sale is still valid, given the sale end timestamp \r\n     * @param _saleEndTimestamp Sale end timestamp \r\n     */ \r\n    modifier isSaleEndTimestampCurrentlyValid(\r\n        uint128 _saleEndTimestamp\r\n    ) {\r\n        require(_isSaleEndTimestampCurrentlyValid(_saleEndTimestamp), \"ended\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Validates royalty parameters. Allow null-equivalent values for certain use-cases\r\n     * @param _royaltyParameters Royalty parameters \r\n     */\r\n    modifier validRoyaltyParameters(\r\n        RoyaltyParameters calldata _royaltyParameters\r\n    ) {\r\n        require(_royaltyParameters.royaltyCutBPS <= 10000);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Iniitalize the implementation \r\n     * @param creatorBlueprintsInput Core parameters for contract initialization \r\n     * @param creatorBlueprintsAdmins Administrative accounts \r\n     * @param _royaltyParameters Initial royalty settings \r\n     * @param extraMinter Additional address to give minter role\r\n     */\r\n    function initialize(\r\n        CreatorBlueprintsInput calldata creatorBlueprintsInput,\r\n        IBlueprintTypes.Admins calldata creatorBlueprintsAdmins,\r\n        RoyaltyParameters calldata _royaltyParameters,\r\n        address extraMinter\r\n    ) public initializer validRoyaltyParameters(_royaltyParameters) {\r\n        // Intialize parent contracts\r\n        ERC721Upgradeable.__ERC721_init(creatorBlueprintsInput.name, creatorBlueprintsInput.symbol);\r\n        HasSecondarySaleFees._initialize();\r\n        AccessControlUpgradeable.__AccessControl_init();\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, creatorBlueprintsAdmins.platform);\r\n        _setupRole(MINTER_ROLE, creatorBlueprintsAdmins.minter);\r\n        if (extraMinter != address(0)) {\r\n            _setupRole(MINTER_ROLE, extraMinter);\r\n        }\r\n\r\n        platform = creatorBlueprintsAdmins.platform;\r\n        minterAddress = creatorBlueprintsAdmins.minter;\r\n        artist = creatorBlueprintsInput.artist;\r\n\r\n        defaultPlatformPrimaryFeePercentage = 2000; // 20%\r\n\r\n        asyncSaleFeesRecipient = creatorBlueprintsAdmins.asyncSaleFeesRecipient;\r\n        contractURI = creatorBlueprintsInput.contractURI; \r\n        royaltyParameters = _royaltyParameters;\r\n    }\r\n\r\n    /**\r\n     * @dev Validates that sale is still ongoing\r\n     */\r\n    function _isSaleOngoing()\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return blueprint.saleState == SaleState.started && _isSaleEndTimestampCurrentlyValid(blueprint.saleEndTimestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if user whitelisted for presale purchase\r\n     * @param _whitelistedQuantity Purchaser's requested quantity. Validated against merkle tree\r\n     * @param proof Corresponding proof for purchaser in merkle tree \r\n     */ \r\n    function _isWhitelistedAndPresale(\r\n        uint32 _whitelistedQuantity,\r\n        bytes32[] calldata proof\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return (_isBlueprintPreparedAndNotStarted() && proof.length != 0 && _verify(_leaf(msg.sender, uint256(_whitelistedQuantity)), blueprint.merkleroot, proof));\r\n    }\r\n \r\n    /**\r\n     * @dev Checks if sale is still valid, given the sale end timestamp \r\n     * @param _saleEndTimestamp Sale end timestamp \r\n     */  \r\n    function _isSaleEndTimestampCurrentlyValid(uint128 _saleEndTimestamp)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _saleEndTimestamp > block.timestamp || _saleEndTimestamp == 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks that blueprint is prepared but sale for it hasn't started \r\n     */\r\n    function _isBlueprintPreparedAndNotStarted()\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return blueprint.saleState == SaleState.not_started;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks that the recipients and allocations arrays of royalties are valid  \r\n     * @param _feeRecipients Fee recipients\r\n     * @param _feeBPS Allocations in percentages for fee recipients (basis points)\r\n     */ \r\n    function feeArrayDataValid(\r\n        address[] memory _feeRecipients,\r\n        uint32[] memory _feeBPS\r\n    ) internal pure returns (bool) {\r\n        require(\r\n            _feeRecipients.length == _feeBPS.length,\r\n            \"invalid\"\r\n        );\r\n        uint32 totalPercent;\r\n        for (uint256 i; i < _feeBPS.length; i++) {\r\n            totalPercent = totalPercent + _feeBPS[i];\r\n        }\r\n        require(totalPercent <= 10000, \"bps >\");\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets values after blueprint preparation\r\n     * @param _blueprintMetaData Blueprint metadata uri \r\n     */\r\n    function setBlueprintPrepared(\r\n        string memory _blueprintMetaData\r\n    ) internal {\r\n        blueprint.saleState = SaleState.not_started;\r\n        //assign the erc721 token index to the blueprint\r\n        blueprint.erc721TokenIndex = latestErc721TokenIndex;\r\n        uint64 _capacity = blueprint.capacity;\r\n        latestErc721TokenIndex += _capacity;\r\n\r\n        emit BlueprintPrepared(\r\n            artist,\r\n            _capacity,\r\n            _blueprintMetaData,\r\n            blueprint.baseTokenUri\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the ERC20 token value of a blueprint\r\n     * @param _erc20Token ERC20 token being set\r\n     */ \r\n    function setErc20Token(address _erc20Token) internal {\r\n        if (_erc20Token != address(0)) {\r\n            blueprint.ERC20Token = _erc20Token;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets up most blueprint parameters \r\n     * @param _erc20Token ERC20 currency \r\n     * @param _baseTokenUri Base token uri for blueprint\r\n     * @param _merkleroot Root of merkle tree allowlist\r\n     * @param _mintAmountArtist Amount that artist can mint of blueprint\r\n     * @param _mintAmountPlatform Amount that platform can mint of blueprint \r\n     * @param _maxPurchaseAmount Max amount of NFTs purchasable in one transaction\r\n     * @param _saleEndTimestamp When the sale ends\r\n     */\r\n    function _setupBlueprint(\r\n        address _erc20Token,\r\n        string memory _baseTokenUri,\r\n        bytes32 _merkleroot,\r\n        uint32 _mintAmountArtist,\r\n        uint32 _mintAmountPlatform,\r\n        uint64 _maxPurchaseAmount,\r\n        uint128 _saleEndTimestamp\r\n    )   internal \r\n        isSaleEndTimestampCurrentlyValid(_saleEndTimestamp)\r\n    {\r\n        setErc20Token(_erc20Token);\r\n\r\n        blueprint.baseTokenUri = _baseTokenUri;\r\n\r\n        if (_merkleroot != 0) {\r\n            blueprint.merkleroot = _merkleroot;\r\n        }\r\n\r\n        blueprint.mintAmountArtist = _mintAmountArtist;\r\n        blueprint.mintAmountPlatform = _mintAmountPlatform;\r\n\r\n        if (_maxPurchaseAmount != 0) {\r\n            blueprint.maxPurchaseAmount = _maxPurchaseAmount;\r\n        }\r\n        \r\n        if (_saleEndTimestamp != 0) {\r\n            blueprint.saleEndTimestamp = _saleEndTimestamp;\r\n        }\r\n    }\r\n\r\n    /** \r\n     * @dev Prepare the blueprint (this is the core operation to set up a blueprint)\r\n     * @param config Object containing values required to prepare blueprint\r\n     * @param _feeRecipientInfo Primary and secondary fees config\r\n     */  \r\n    function prepareBlueprint(\r\n        IBlueprintTypes.BlueprintPreparationConfig calldata config,\r\n        IBlueprintTypes.PrimaryFees calldata _feeRecipientInfo\r\n    )   external \r\n        onlyRole(MINTER_ROLE)\r\n    {\r\n        blueprint.capacity = config._capacity;\r\n        blueprint.price = config._price;\r\n\r\n        _setupBlueprint(\r\n            config._erc20Token,\r\n            config._baseTokenUri,\r\n            config._merkleroot,\r\n            config._mintAmountArtist,\r\n            config._mintAmountPlatform,\r\n            config._maxPurchaseAmount,\r\n            config._saleEndTimestamp\r\n        );\r\n\r\n        setBlueprintPrepared(config._blueprintMetaData);\r\n        setFeeRecipients(_feeRecipientInfo);\r\n    }\r\n\r\n    /**\r\n     * @dev Update a blueprint's artist\r\n     * @param _newArtist New artist\r\n     */\r\n    function updateBlueprintArtist (\r\n        address _newArtist\r\n    ) external onlyRole(MINTER_ROLE) {\r\n        artist = _newArtist;\r\n    }\r\n\r\n    /**\r\n     * @dev Update a blueprint's capacity \r\n     * @param _newCapacity New capacity\r\n     * @param _newLatestErc721TokenIndex Newly adjusted last ERC721 token id \r\n     */\r\n    function updateBlueprintCapacity (\r\n        uint64 _newCapacity,\r\n        uint64 _newLatestErc721TokenIndex\r\n    ) external onlyRole(MINTER_ROLE) {\r\n        require(blueprint.capacity > _newCapacity, \"New cap too large\");\r\n\r\n        blueprint.capacity = _newCapacity;\r\n\r\n        latestErc721TokenIndex = _newLatestErc721TokenIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the primary fees config of blueprint\r\n     * @param _feeRecipientInfo Fees config \r\n     */\r\n    function setFeeRecipients(\r\n        IBlueprintTypes.PrimaryFees memory _feeRecipientInfo\r\n    ) public onlyRole(MINTER_ROLE) {\r\n        require(\r\n            blueprint.saleState != SaleState.not_prepared,\r\n            \"never prepared\"\r\n        );\r\n        if (feeArrayDataValid(_feeRecipientInfo.primaryFeeRecipients, _feeRecipientInfo.primaryFeeBPS)) {\r\n            blueprint.feeRecipientInfo = _feeRecipientInfo;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Begin blueprint's sale\r\n     */\r\n    function beginSale()\r\n        external\r\n        onlyRole(MINTER_ROLE)\r\n        isSaleEndTimestampCurrentlyValid(blueprint.saleEndTimestamp) \r\n    {\r\n        require(\r\n            blueprint.saleState == SaleState.not_started,\r\n            \"sale started or not prepared\"\r\n        );\r\n        blueprint.saleState = SaleState.started;\r\n        emit SaleStarted();\r\n    }\r\n\r\n    /**\r\n     * @dev Pause blueprint's sale\r\n     */\r\n    function pauseSale()\r\n        external\r\n        onlyRole(MINTER_ROLE)\r\n        isSaleOngoing()\r\n    {\r\n        blueprint.saleState = SaleState.paused;\r\n        emit SalePaused();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpause blueprint's sale\r\n     */\r\n    function unpauseSale() external onlyRole(MINTER_ROLE) isSaleEndTimestampCurrentlyValid(blueprint.saleEndTimestamp) {\r\n        require(\r\n            blueprint.saleState == SaleState.paused,\r\n            \"!paused\"\r\n        );\r\n        blueprint.saleState = SaleState.started;\r\n        emit SaleUnpaused();\r\n    }\r\n\r\n    /**\r\n     * @dev Update blueprint's merkle tree root \r\n     * @param oldProof Old proof for leaf being updated, used for validation \r\n     * @param remainingWhitelistAmount Remaining whitelist amount of NFTs \r\n     */\r\n    function _updateMerkleRootForPurchase(\r\n        bytes32[] memory oldProof,\r\n        uint32 remainingWhitelistAmount\r\n    ) \r\n        internal\r\n    {\r\n        bool[] memory proofFlags = new bool[](oldProof.length);\r\n        bytes32[] memory leaves = new bytes32[](1);\r\n        leaves[0] = _leaf(msg.sender, uint256(remainingWhitelistAmount));\r\n        blueprint.merkleroot = MerkleProof.processMultiProof(oldProof, proofFlags, leaves);\r\n    }\r\n\r\n    /**\r\n     * @dev Purchase NFTs of blueprint to a recipient address\r\n     * @param purchaseQuantity How many NFTs to purchase \r\n     * @param whitelistedQuantity How many NFTS are whitelisted for the blueprint \r\n     * @param tokenAmount Payment amount \r\n     * @param proof Merkle tree proof \r\n     * @param nftRecipient Recipient of minted NFTs\r\n     */\r\n    function purchaseBlueprintsTo(\r\n        uint32 purchaseQuantity,\r\n        uint32 whitelistedQuantity,\r\n        uint256 tokenAmount,\r\n        bytes32[] calldata proof,\r\n        address nftRecipient\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        isQuantityAvailableForPurchase(purchaseQuantity)\r\n    {\r\n        if (_isWhitelistedAndPresale(whitelistedQuantity, proof)) {\r\n            require(purchaseQuantity <= whitelistedQuantity, \"> whitelisted amount\");\r\n            _updateMerkleRootForPurchase(proof, whitelistedQuantity - purchaseQuantity);\r\n        } else {\r\n            require(_isSaleOngoing(), \"unavailable\");\r\n        }\r\n\r\n        require(\r\n            blueprint.maxPurchaseAmount == 0 ||\r\n                purchaseQuantity <= blueprint.maxPurchaseAmount,\r\n            \"cannot buy > maxPurchaseAmount in one tx\"\r\n        );\r\n\r\n        _confirmPaymentAmountAndSettleSale(\r\n            purchaseQuantity,\r\n            tokenAmount,\r\n            artist\r\n        );\r\n        _mintQuantity(purchaseQuantity, nftRecipient);\r\n    }\r\n\r\n    /**\r\n     * @dev Purchase NFTs of blueprint to the sender\r\n     * @param purchaseQuantity How many NFTs to purchase \r\n     * @param whitelistedQuantity How many NFTS are whitelisted for the blueprint \r\n     * @param tokenAmount Payment amount \r\n     * @param proof Merkle tree proof \r\n     */ \r\n    function purchaseBlueprints(\r\n        uint32 purchaseQuantity,\r\n        uint32 whitelistedQuantity,\r\n        uint256 tokenAmount,\r\n        bytes32[] calldata proof\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        isQuantityAvailableForPurchase(purchaseQuantity)\r\n    {\r\n        if (_isWhitelistedAndPresale(whitelistedQuantity, proof)) {\r\n            require(purchaseQuantity <= whitelistedQuantity, \"> whitelisted amount\");\r\n            _updateMerkleRootForPurchase(proof, whitelistedQuantity - purchaseQuantity);\r\n        } else {\r\n            require(_isSaleOngoing(), \"unavailable\");\r\n        }\r\n\r\n        require(\r\n            blueprint.maxPurchaseAmount == 0 ||\r\n                purchaseQuantity <= blueprint.maxPurchaseAmount,\r\n            \"cannot buy > maxPurchaseAmount in one tx\"\r\n        );\r\n\r\n        _confirmPaymentAmountAndSettleSale(\r\n            purchaseQuantity,\r\n            tokenAmount,\r\n            artist\r\n        );\r\n\r\n        _mintQuantity(purchaseQuantity, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the artist mint NFTs of the blueprint\r\n     * @param quantity How many NFTs to mint\r\n     */\r\n    function artistMint(\r\n        uint32 quantity\r\n    )\r\n        external\r\n        nonReentrant \r\n    {\r\n        address _artist = artist; // cache\r\n        require(\r\n            _isBlueprintPreparedAndNotStarted() || _isSaleOngoing(),\r\n            \"not pre/public sale\"\r\n        );\r\n        require(\r\n            minterAddress == msg.sender ||\r\n                _artist == msg.sender,\r\n            \"unauthorized\"\r\n        );\r\n\r\n        if (minterAddress == msg.sender) {\r\n            require(\r\n                quantity <= blueprint.mintAmountPlatform,\r\n                \"quantity >\"\r\n            );\r\n            blueprint.mintAmountPlatform -= quantity;\r\n        } else if (_artist == msg.sender) {\r\n            require(\r\n                quantity <= blueprint.mintAmountArtist,\r\n                \"quantity >\"\r\n            );\r\n            blueprint.mintAmountArtist -= quantity;\r\n        }\r\n        _mintQuantity(quantity, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint a quantity of NFTs of blueprint to a recipient \r\n     * @param _quantity Quantity to mint\r\n     * @param _nftRecipient Recipient of minted NFTs\r\n     */\r\n    function _mintQuantity(uint32 _quantity, address _nftRecipient) private {\r\n        uint128 newTokenId = blueprint.erc721TokenIndex;\r\n        uint64 newCap = blueprint.capacity;\r\n        for (uint16 i; i < _quantity; i++) {\r\n            require(newCap > 0, \"quantity > cap\");\r\n            \r\n            _mint(_nftRecipient, newTokenId + i);\r\n\r\n            bytes32 prefixHash = keccak256(\r\n                abi.encodePacked(\r\n                    block.number,\r\n                    block.timestamp,\r\n                    block.coinbase,\r\n                    newCap\r\n                )\r\n            );\r\n            emit BlueprintMinted(\r\n                artist,\r\n                _nftRecipient,\r\n                newTokenId + i,\r\n                newCap,\r\n                prefixHash\r\n            );\r\n            --newCap;\r\n        }\r\n\r\n        blueprint.erc721TokenIndex += _quantity;\r\n        blueprint.capacity = newCap;\r\n    }\r\n\r\n    /**\r\n     * @dev Pay for minting NFTs \r\n     * @param _quantity Quantity of NFTs to purchase\r\n     * @param _tokenAmount Payment amount provided\r\n     * @param _artist Artist of blueprint\r\n     */\r\n    function _confirmPaymentAmountAndSettleSale(\r\n        uint32 _quantity,\r\n        uint256 _tokenAmount,\r\n        address _artist\r\n    ) internal {\r\n        address _erc20Token = blueprint.ERC20Token;\r\n        uint128 _price = blueprint.price;\r\n        if (_erc20Token == address(0)) {\r\n            require(_tokenAmount == 0, \"tokenAmount != 0\");\r\n            require(\r\n                msg.value == _quantity * _price,\r\n                \"$ != expected\"\r\n            );\r\n            _payFeesAndArtist(_erc20Token, msg.value, _artist);\r\n        } else {\r\n            require(msg.value == 0, \"eth value != 0\");\r\n            require(\r\n                _tokenAmount == _quantity * _price,\r\n                \"$ != expected\"\r\n            );\r\n\r\n            IERC20(_erc20Token).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _tokenAmount\r\n            );\r\n            _payFeesAndArtist(_erc20Token, _tokenAmount, _artist);\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////\r\n    ////// MERKLEROOT FUNCTIONS ////////\r\n    ////////////////////////////////////\r\n\r\n    /**\r\n     * Create a merkle tree with address: quantity pairs as the leaves.\r\n     * The msg.sender will be verified if it has a corresponding quantity value in the merkletree\r\n     */\r\n\r\n    /**\r\n     * @dev Create a merkle tree with address: quantity pairs as the leaves.\r\n     *      The msg.sender will be verified if it has a corresponding quantity value in the merkletree\r\n     * @param account Minting account being verified\r\n     * @param quantity Quantity to mint, being verified\r\n     */ \r\n    function _leaf(address account, uint256 quantity)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(account, quantity));\r\n    }\r\n\r\n    /**\r\n     * @dev Verify a leaf's inclusion in a merkle tree with its root and corresponding proof\r\n     * @param leaf Leaf to verify\r\n     * @param merkleroot Merkle tree's root\r\n     * @param proof Corresponding proof for leaf\r\n     */ \r\n    function _verify(\r\n        bytes32 leaf,\r\n        bytes32 merkleroot,\r\n        bytes32[] memory proof\r\n    ) internal pure returns (bool) {\r\n        return MerkleProof.verify(proof, merkleroot, leaf);\r\n    }\r\n\r\n    ////////////////////////////\r\n    /// ONLY ADMIN functions ///\r\n    ////////////////////////////\r\n\r\n    /**\r\n     * @dev Update blueprint's token uri\r\n     * @param newBaseTokenUri New base token uri to update to\r\n     */ \r\n    function updateBlueprintTokenUri(\r\n        string memory newBaseTokenUri\r\n    ) external onlyRole(MINTER_ROLE) isBlueprintPrepared() {\r\n        require(\r\n            !blueprint.tokenUriLocked,\r\n            \"URI locked\"\r\n        );\r\n\r\n        blueprint.baseTokenUri = newBaseTokenUri;\r\n\r\n        emit BlueprintTokenUriUpdated(newBaseTokenUri);\r\n    }\r\n\r\n    /**\r\n     * @dev Lock blueprint's token uri (from changing)\r\n     */  \r\n    function lockBlueprintTokenUri()\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n        isBlueprintPrepared()\r\n    {\r\n        require(\r\n            !blueprint.tokenUriLocked,\r\n            \"URI locked\"\r\n        );\r\n\r\n        blueprint.tokenUriLocked = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Return token's uri\r\n     * @param tokenId ID of token to return uri for\r\n     * @return Token uri, constructed by taking base uri of blueprint, and concatenating token id\r\n     */ \r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"URI query for nonexistent token\"\r\n        );\r\n\r\n        string memory baseURI = blueprint.baseTokenUri;\r\n        return\r\n            bytes(baseURI).length > 0\r\n                ? string(\r\n                    abi.encodePacked(\r\n                        baseURI,\r\n                        \"/\",\r\n                        tokenId.toString(),\r\n                        \"/\",\r\n                        \"token.json\"\r\n                    )\r\n                )\r\n                : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Reveal blueprint's seed by emitting public event \r\n     * @param randomSeed Revealed seed \r\n     */\r\n    function revealBlueprintSeed(string memory randomSeed)\r\n        external\r\n        onlyRole(MINTER_ROLE)\r\n        isBlueprintPrepared()\r\n    {\r\n        emit BlueprintSeed(randomSeed);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the contract-wide recipient of primary sale feess\r\n     * @param _asyncSaleFeesRecipient New async sale fees recipient \r\n     */\r\n    function setAsyncFeeRecipient(address _asyncSaleFeesRecipient)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        asyncSaleFeesRecipient = _asyncSaleFeesRecipient;\r\n    }\r\n\r\n    /**\r\n     * @dev Change the default percentage of primary sales sent to platform\r\n     * @param _basisPoints New default platform primary fee percentage (in basis points)\r\n     */   \r\n    function changeDefaultPlatformPrimaryFeePercentage(uint32 _basisPoints)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(_basisPoints <= 10000);\r\n        defaultPlatformPrimaryFeePercentage = _basisPoints;\r\n    }\r\n\r\n    /**\r\n     * @dev Update royalty config\r\n     * @param _royaltyParameters New royalty parameters\r\n     */  \r\n    function updateRoyaltyParameters(RoyaltyParameters calldata _royaltyParameters) \r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n        validRoyaltyParameters(_royaltyParameters)\r\n    {\r\n        royaltyParameters = _royaltyParameters; \r\n    }\r\n\r\n    /**\r\n     * @dev Update contract-wide platform address, and DEFAULT_ADMIN role ownership\r\n     * @param _platform New platform address\r\n     */   \r\n    function updatePlatformAddress(address _platform)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        grantRole(DEFAULT_ADMIN_ROLE, _platform);\r\n\r\n        revokeRole(DEFAULT_ADMIN_ROLE, platform);\r\n        platform = _platform;\r\n    }\r\n\r\n    /**\r\n     * @dev Update contract-wide minter address, and MINTER_ROLE role ownership\r\n     * @param newMinterAddress New minter address\r\n     */ \r\n    function updateMinterAddress(address newMinterAddress)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        grantRole(MINTER_ROLE, newMinterAddress);\r\n\r\n        revokeRole(MINTER_ROLE, minterAddress);\r\n        minterAddress = newMinterAddress;\r\n    }\r\n\r\n    ////////////////////////////////////\r\n    /// Secondary Fees implementation //\r\n    ////////////////////////////////////\r\n\r\n    /**\r\n     * @dev Pay primary fees owed to primary fee recipients\r\n     * @param _erc20Token ERC20 token used for payment (if used)\r\n     * @param _amount Payment amount \r\n     * @param _artist Artist being paid\r\n     */\r\n    function _payFeesAndArtist(\r\n        address _erc20Token,\r\n        uint256 _amount,\r\n        address _artist\r\n    ) internal {\r\n        address[] memory _primaryFeeRecipients = getPrimaryFeeRecipients();\r\n        uint32[] memory _primaryFeeBPS = getPrimaryFeeBps();\r\n        uint256 feesPaid;\r\n\r\n        for (uint256 i; i < _primaryFeeRecipients.length; i++) {\r\n            uint256 fee = (_amount * _primaryFeeBPS[i])/10000;\r\n            feesPaid = feesPaid + fee;\r\n            _payout(_primaryFeeRecipients[i], _erc20Token, fee);\r\n        }\r\n        if (_amount - feesPaid > 0) {\r\n            _payout(_artist, _erc20Token, (_amount - feesPaid));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Simple payment function to pay an amount of currency to a recipient\r\n     * @param _recipient Recipient of payment \r\n     * @param _erc20Token ERC20 token used for payment (if used)\r\n     * @param _amount Payment amount \r\n     */\r\n    function _payout(\r\n        address _recipient,\r\n        address _erc20Token,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (_erc20Token != address(0)) {\r\n            IERC20(_erc20Token).transfer(_recipient, _amount);\r\n        } else {\r\n            // attempt to send the funds to the recipient\r\n            (bool success, ) = payable(_recipient).call{\r\n                value: _amount,\r\n                gas: 20000\r\n            }(\"\");\r\n            // if it failed, update their credit balance so they can pull it later\r\n            if (!success) {\r\n                failedTransferCredits[_recipient] =\r\n                    failedTransferCredits[_recipient] +\r\n                    _amount;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev When a native gas token payment fails, credits are stored so that the would-be recipient can withdraw them later.\r\n     *      Withdraw failed credits for a recipient\r\n     * @param recipient Recipient owed some amount of native gas token   \r\n     */\r\n    function withdrawAllFailedCredits(address payable recipient) external {\r\n        uint256 amount = failedTransferCredits[msg.sender];\r\n\r\n        require(amount != 0, \"no credits to withdraw\");\r\n\r\n        failedTransferCredits[msg.sender] = 0;\r\n\r\n        (bool successfulWithdraw, ) = recipient.call{value: amount, gas: 20000}(\r\n            \"\"\r\n        );\r\n        require(successfulWithdraw, \"withdraw failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Get primary fee recipients of blueprint \r\n     */ \r\n    function getPrimaryFeeRecipients()\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        if (blueprint.feeRecipientInfo.primaryFeeRecipients.length == 0) {\r\n            address[] memory primaryFeeRecipients = new address[](1);\r\n            primaryFeeRecipients[0] = (asyncSaleFeesRecipient);\r\n            return primaryFeeRecipients;\r\n        } else {\r\n            return blueprint.feeRecipientInfo.primaryFeeRecipients;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get primary fee bps (allocations) of blueprint \r\n     */\r\n    function getPrimaryFeeBps()\r\n        public\r\n        view\r\n        returns (uint32[] memory)\r\n    {\r\n        if (blueprint.feeRecipientInfo.primaryFeeBPS.length == 0) {\r\n            uint32[] memory primaryFeeBPS = new uint32[](1);\r\n            primaryFeeBPS[0] = defaultPlatformPrimaryFeePercentage;\r\n\r\n            return primaryFeeBPS;\r\n        } else {\r\n            return blueprint.feeRecipientInfo.primaryFeeBPS;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get secondary fee recipients of a token \r\n     * @param tokenId Token ID\r\n     */\r\n    function getFeeRecipients(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (address[] memory)\r\n    {\r\n        address[] memory feeRecipients = new address[](1);\r\n        feeRecipients[0] = royaltyParameters.split;\r\n        return feeRecipients;\r\n    }\r\n\r\n    /**\r\n     * @dev Get secondary fee bps (allocations) of a token \r\n     * @param tokenId Token ID\r\n     */\r\n    function getFeeBps(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (uint32[] memory)\r\n    {\r\n        uint32[] memory feeBps = new uint32[](1);\r\n        feeBps[0] = royaltyParameters.royaltyCutBPS;\r\n        return feeBps;\r\n    }\r\n\r\n    /**\r\n     * @dev Support ERC-2981\r\n     * @param _tokenId ID of token to return royalty for\r\n     * @param _salePrice Price that NFT was sold at\r\n     * @return receiver Royalty split\r\n     * @return royaltyAmount Amount to send to royalty split\r\n     */\r\n    function royaltyInfo(\r\n        uint256 _tokenId,\r\n        uint256 _salePrice\r\n    ) external view returns (\r\n        address receiver,\r\n        uint256 royaltyAmount\r\n    ) {\r\n        receiver = royaltyParameters.split;\r\n        royaltyAmount = _salePrice * royaltyParameters.royaltyCutBPS / 10000;\r\n    }\r\n\r\n    /**\r\n     * @dev Used for interoperability purposes\r\n     * @return Returns platform address as owner of contract \r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return platform;\r\n    }\r\n\r\n    ////////////////////////////////////\r\n    /// Required function overide //////\r\n    ////////////////////////////////////\r\n\r\n    /**\r\n     * @dev Override isApprovedForAll to also let the DEFAULT_ADMIN_ROLE move tokens\r\n     * @param account Account holding tokens being moved\r\n     * @param operator Operator moving tokens\r\n     */\r\n    function isApprovedForAll(address account, address operator)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return\r\n            super.isApprovedForAll(account, operator) ||\r\n            hasRole(DEFAULT_ADMIN_ROLE, operator);\r\n    }\r\n\r\n    /**\r\n     * @dev ERC165 - Validate that the contract supports a interface\r\n     * @param interfaceId ID of interface being validated \r\n     * @return Returns true if contract supports interface\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(\r\n            ERC721Upgradeable,\r\n            ERC165StorageUpgradeable,\r\n            AccessControlEnumerableUpgradeable\r\n        )\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(HasSecondarySaleFees).interfaceId ||\r\n            ERC721Upgradeable.supportsInterface(interfaceId) ||\r\n            ERC165StorageUpgradeable.supportsInterface(interfaceId) ||\r\n            AccessControlEnumerableUpgradeable.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\nabstract contract ERC20 {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public immutable decimals;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            EIP-2612 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 internal immutable INITIAL_CHAIN_ID;\r\n\r\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\r\n\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        INITIAL_CHAIN_ID = block.chainid;\r\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        balanceOf[msg.sender] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             EIP-2612 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\r\n\r\n        // Unchecked because the only math done is incrementing\r\n        // the owner's nonce which cannot realistically overflow.\r\n        unchecked {\r\n            address recoveredAddress = ecrecover(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        \"\\x19\\x01\",\r\n                        DOMAIN_SEPARATOR(),\r\n                        keccak256(\r\n                            abi.encode(\r\n                                keccak256(\r\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\r\n                                ),\r\n                                owner,\r\n                                spender,\r\n                                value,\r\n                                nonces[owner]++,\r\n                                deadline\r\n                            )\r\n                        )\r\n                    )\r\n                ),\r\n                v,\r\n                r,\r\n                s\r\n            );\r\n\r\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\r\n\r\n            allowance[recoveredAddress][spender] = value;\r\n        }\r\n\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\r\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\r\n    }\r\n\r\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                    keccak256(bytes(name)),\r\n                    keccak256(\"1\"),\r\n                    block.chainid,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user's balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ISplitMain\r\n * @author 0xSplits <will@0xSplits.xyz>\r\n */\r\ninterface ISplitMain {\r\n  /**\r\n   * FUNCTIONS\r\n   */\r\n\r\n  function walletImplementation() external returns (address);\r\n\r\n  function createSplit(\r\n    address[] calldata accounts,\r\n    uint32[] calldata percentAllocations,\r\n    uint32 distributorFee,\r\n    address controller\r\n  ) external returns (address);\r\n\r\n  function predictImmutableSplitAddress(\r\n    address[] calldata accounts,\r\n    uint32[] calldata percentAllocations,\r\n    uint32 distributorFee\r\n  ) external view returns (address);\r\n\r\n  function updateSplit(\r\n    address split,\r\n    address[] calldata accounts,\r\n    uint32[] calldata percentAllocations,\r\n    uint32 distributorFee\r\n  ) external;\r\n\r\n  function transferControl(address split, address newController) external;\r\n\r\n  function cancelControlTransfer(address split) external;\r\n\r\n  function acceptControl(address split) external;\r\n\r\n  function makeSplitImmutable(address split) external;\r\n\r\n  function distributeETH(\r\n    address split,\r\n    address[] calldata accounts,\r\n    uint32[] calldata percentAllocations,\r\n    uint32 distributorFee,\r\n    address distributorAddress\r\n  ) external;\r\n\r\n  function updateAndDistributeETH(\r\n    address split,\r\n    address[] calldata accounts,\r\n    uint32[] calldata percentAllocations,\r\n    uint32 distributorFee,\r\n    address distributorAddress\r\n  ) external;\r\n\r\n  function distributeERC20(\r\n    address split,\r\n    ERC20 token,\r\n    address[] calldata accounts,\r\n    uint32[] calldata percentAllocations,\r\n    uint32 distributorFee,\r\n    address distributorAddress\r\n  ) external;\r\n\r\n  function updateAndDistributeERC20(\r\n    address split,\r\n    ERC20 token,\r\n    address[] calldata accounts,\r\n    uint32[] calldata percentAllocations,\r\n    uint32 distributorFee,\r\n    address distributorAddress\r\n  ) external;\r\n\r\n  function withdraw(\r\n    address account,\r\n    uint256 withdrawETH,\r\n    ERC20[] calldata tokens\r\n  ) external;\r\n\r\n  /**\r\n   * EVENTS\r\n   */\r\n\r\n  /** @notice emitted after each successful split creation\r\n   *  @param split Address of the created split\r\n   */\r\n  event CreateSplit(address indexed split);\r\n\r\n  /** @notice emitted after each successful split update\r\n   *  @param split Address of the updated split\r\n   */\r\n  event UpdateSplit(address indexed split);\r\n\r\n  /** @notice emitted after each initiated split control transfer\r\n   *  @param split Address of the split control transfer was initiated for\r\n   *  @param newPotentialController Address of the split's new potential controller\r\n   */\r\n  event InitiateControlTransfer(\r\n    address indexed split,\r\n    address indexed newPotentialController\r\n  );\r\n\r\n  /** @notice emitted after each canceled split control transfer\r\n   *  @param split Address of the split control transfer was canceled for\r\n   */\r\n  event CancelControlTransfer(address indexed split);\r\n\r\n  /** @notice emitted after each successful split control transfer\r\n   *  @param split Address of the split control was transferred for\r\n   *  @param previousController Address of the split's previous controller\r\n   *  @param newController Address of the split's new controller\r\n   */\r\n  event ControlTransfer(\r\n    address indexed split,\r\n    address indexed previousController,\r\n    address indexed newController\r\n  );\r\n\r\n  /** @notice emitted after each successful ETH balance split\r\n   *  @param split Address of the split that distributed its balance\r\n   *  @param amount Amount of ETH distributed\r\n   *  @param distributorAddress Address to credit distributor fee to\r\n   */\r\n  event DistributeETH(\r\n    address indexed split,\r\n    uint256 amount,\r\n    address indexed distributorAddress\r\n  );\r\n\r\n  /** @notice emitted after each successful ERC20 balance split\r\n   *  @param split Address of the split that distributed its balance\r\n   *  @param token Address of ERC20 distributed\r\n   *  @param amount Amount of ERC20 distributed\r\n   *  @param distributorAddress Address to credit distributor fee to\r\n   */\r\n  event DistributeERC20(\r\n    address indexed split,\r\n    ERC20 indexed token,\r\n    uint256 amount,\r\n    address indexed distributorAddress\r\n  );\r\n\r\n  /** @notice emitted after each successful withdrawal\r\n   *  @param account Address that funds were withdrawn to\r\n   *  @param ethAmount Amount of ETH withdrawn\r\n   *  @param tokens Addresses of ERC20s withdrawn\r\n   *  @param tokenAmounts Amounts of corresponding ERC20s withdrawn\r\n   */\r\n  event Withdrawal(\r\n    address indexed account,\r\n    uint256 ethAmount,\r\n    ERC20[] tokens,\r\n    uint256[] tokenAmounts\r\n  );\r\n}\r\n\r\n/**\r\n * @dev Global instance of Async Art Blueprint NFTs\r\n * @author Async Art, Ohimire Labs\r\n */\r\ncontract BlueprintV12 is\r\n    ERC721Upgradeable,\r\n    HasSecondarySaleFees,\r\n    AccessControlEnumerableUpgradeable,\r\n    ReentrancyGuard\r\n{\r\n    using StringsUpgradeable for uint256;\r\n\r\n    /**\r\n     * @dev Default fee given to platform on primary sales\r\n     */\r\n    uint32 public defaultPlatformPrimaryFeePercentage;   \r\n\r\n    /**\r\n     * @dev Default fee given to artist on secondary sales\r\n     */ \r\n    uint32 public defaultBlueprintSecondarySalePercentage;\r\n\r\n    /**\r\n     * @dev Default fee given to platoform on secondary sales\r\n     */ \r\n    uint32 public defaultPlatformSecondarySalePercentage;\r\n\r\n    /**\r\n     * @dev Token id of last ERC721 NFT minted\r\n     */ \r\n    uint64 public latestErc721TokenIndex;\r\n\r\n    /**\r\n     * @dev Id of last blueprint created\r\n     */\r\n    uint256 public blueprintIndex;\r\n\r\n    /**\r\n     * @dev Platform account receiving fees from primary sales\r\n     */\r\n    address public asyncSaleFeesRecipient;\r\n\r\n    /**\r\n     * @dev Account representing platform \r\n     */\r\n    address public platform;\r\n\r\n    /**\r\n     * @dev Account able to perform actions restricted to MINTER_ROLE holder\r\n     */\r\n    address public minterAddress;\r\n\r\n    /** \r\n     * @dev Royalty manager \r\n     */\r\n    address private _splitMain;\r\n    \r\n    /**\r\n     * @dev Maps NFT ids to id of associated blueprint \r\n     */\r\n    mapping(uint256 => uint256) tokenToBlueprintID;\r\n\r\n    /**\r\n     * @dev Tracks failed transfers of native gas token \r\n     */\r\n    mapping(address => uint256) failedTransferCredits;\r\n\r\n    /**\r\n     * @dev Stores all Blueprints \r\n     */\r\n    mapping(uint256 => Blueprints) public blueprints;\r\n\r\n    /**\r\n     * @dev Holders of this role are given minter privileges \r\n     */\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n\r\n    /**\r\n     * @dev Tracks state of Blueprint sale\r\n     */\r\n    enum SaleState {\r\n        not_prepared,\r\n        not_started,\r\n        started,\r\n        paused\r\n    }\r\n\r\n    /**\r\n     * @dev Object used by contract clients to efficiently pass in desired configuration for royalties for a Blueprint\r\n     * @param secondaryFeeRecipients Array of royalty recipients\r\n     * @param secondaryFeeMPS Array of allocations given to each royalty recipients, where 1000000 = 100%\r\n     * @param totalRoyaltyCutBPS Total percentage of token purchase to be sent to royalty recipients, in basis points\r\n     * @param royaltyRecipient If/when this is not the zero address, it is used as the de-facto alternative to secondaryFeeRecipients and secondaryFeeBPS\r\n     */\r\n    struct SecondaryFeesInput {\r\n        address[] secondaryFeeRecipients; \r\n        uint32[] secondaryFeeMPS; \r\n        uint32 totalRoyaltyCutBPS;\r\n        address royaltyRecipient;\r\n    }\r\n\r\n    /**\r\n     * @dev Object used by contract clients to efficiently pass in desired configuration for all fees \r\n     * @param primaryFeeBPS Array of allocations given to each primary fee recipient, in basis points\r\n     * @param primaryFeeRecipients Array of primary fee recipients\r\n     * @param secondaryFeesInput Contains desired configuration for royalties\r\n     * @param deploySplit If true, function taking FeesInput instance will deploy a royalty split \r\n     */\r\n    struct FeesInput {\r\n        uint32[] primaryFeeBPS;\r\n        address[] primaryFeeRecipients;\r\n        SecondaryFeesInput secondaryFeesInput;\r\n        bool deploySplit; \r\n    } \r\n\r\n    /**\r\n     * @dev Object stored per Blueprint defining fee recipients and allocations\r\n     * @param primaryFeeRecipients Array of primary fee recipients\r\n     * @param primaryFeeBPS Array of allocations given to each primary fee recipient, in basis points\r\n     * @param royaltyRecipient Address to receive total share of royalties. Expected to be royalty split or important account\r\n     * @param totalRoyaltyCutBPS Total percentage of token purchase to be sent to royalty recipients, in basis points\r\n     */\r\n    struct Fees {\r\n        address[] primaryFeeRecipients;\r\n        uint32[] primaryFeeBPS;\r\n        address royaltyRecipient;\r\n        uint32 totalRoyaltyCutBPS;\r\n    }\r\n\r\n    /**\r\n     * @dev Blueprint\r\n     * @param mintAmountArtist Amount of NFTs of Blueprint mintable by artist\r\n     * @param mintAmountArtist Amount of NFTs of Blueprint mintable by platform \r\n     * @param capacity Number of NFTs in Blueprint \r\n     * @param erc721TokenIndex Token ID of last NFT minted for Blueprint\r\n     * @param maxPurchaseAmount Max number of NFTs purchasable in a single transaction\r\n     * @param saleEndTimestamp Timestamp when the sale ends \r\n     * @param price Price per NFT in Blueprint\r\n     * @param tokenUriLocked If the token metadata isn't updatable \r\n     * @param artist Artist of Blueprint\r\n     * @param ERC20Token Address of ERC20 currency required to buy NFTs, can be zero address if expected currency is native gas token \r\n     * @param baseTokenUri Base URI for token, resultant uri for each token is base uri concatenated with token id\r\n     * @param merkleroot Root of Merkle tree holding whitelisted accounts \r\n     * @param saleState State of sale\r\n     * @param feeRecipientInfo Object containing primary and secondary fee configuration\r\n     */ \r\n    struct Blueprints {\r\n        uint32 mintAmountArtist;\r\n        uint32 mintAmountPlatform;\r\n        uint64 capacity;\r\n        uint64 erc721TokenIndex;\r\n        uint64 maxPurchaseAmount;\r\n        uint128 saleEndTimestamp;\r\n        uint128 price;\r\n        bool tokenUriLocked;        \r\n        address artist;\r\n        address ERC20Token;\r\n        string baseTokenUri;\r\n        bytes32 merkleroot;\r\n        SaleState saleState;    \r\n        Fees feeRecipientInfo;\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when blueprint seed is revealed\r\n     * @param blueprintID ID of blueprint\r\n     * @param randomSeed Revealed seed\r\n     */\r\n    event BlueprintSeed(uint256 blueprintID, string randomSeed);\r\n\r\n    /**\r\n     * @dev Emitted when NFTs of a blueprint are minted\r\n     * @param blueprintID ID of blueprint\r\n     * @param artist Blueprint artist\r\n     * @param purchaser Purchaser of NFTs\r\n     * @param tokenId NFT minted\r\n     * @param newCapacity New capacity of tokens left in blueprint \r\n     * @param seedPrefix Seed prefix hash\r\n     */\r\n    event BlueprintMinted(\r\n        uint256 blueprintID,\r\n        address artist,\r\n        address purchaser,\r\n        uint128 tokenId,\r\n        uint64 newCapacity,\r\n        bytes32 seedPrefix\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when blueprint is prepared\r\n     * @param blueprintID ID of blueprint\r\n     * @param artist Blueprint artist\r\n     * @param capacity Number of NFTs in blueprint\r\n     * @param blueprintMetaData Blueprint metadata uri\r\n     * @param baseTokenUri Blueprint's base token uri. Token uris are a result of the base uri concatenated with token id \r\n     */\r\n    event BlueprintPrepared(\r\n        uint256 blueprintID,\r\n        address artist,\r\n        uint64 capacity,\r\n        string blueprintMetaData,\r\n        string baseTokenUri\r\n    );\r\n    \r\n    /**\r\n     * @dev Emitted when blueprint sale is started\r\n     * @param blueprintID ID of blueprint\r\n     */\r\n    event SaleStarted(uint256 blueprintID);\r\n\r\n    /**\r\n     * @dev Emitted when blueprint sale is paused\r\n     * @param blueprintID ID of blueprint\r\n     */\r\n    event SalePaused(uint256 blueprintID);\r\n\r\n    /**\r\n     * @dev Emitted when blueprint sale is unpaused\r\n     * @param blueprintID ID of blueprint\r\n     */\r\n    event SaleUnpaused(uint256 blueprintID);\r\n\r\n    /**\r\n     * @dev Emitted when blueprint token uri is updated \r\n     * @param blueprintID ID of blueprint\r\n     * @param newBaseTokenUri New base uri \r\n     */\r\n    event BlueprintTokenUriUpdated(uint256 blueprintID, string newBaseTokenUri);\r\n\r\n    /**\r\n     * @dev Checks blueprint sale state\r\n     * @param _blueprintID ID of blueprint \r\n     */\r\n    modifier isBlueprintPrepared(uint256 _blueprintID) {\r\n        require(\r\n            blueprints[_blueprintID].saleState != SaleState.not_prepared,\r\n            \"!prepared\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if blueprint sale is ongoing\r\n     * @param _blueprintID ID of blueprint \r\n     */\r\n    modifier isSaleOngoing(uint256 _blueprintID) {\r\n        require(_isSaleOngoing(_blueprintID), \"!ongoing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if quantity of NFTs is available for purchase in blueprint\r\n     * @param _blueprintID ID of blueprint \r\n     * @param _quantity Quantity of NFTs being checked \r\n     */ \r\n    modifier isQuantityAvailableForPurchase(\r\n        uint256 _blueprintID,\r\n        uint32 _quantity\r\n    ) {\r\n        require(\r\n            blueprints[_blueprintID].capacity >= _quantity,\r\n            \"quantity >\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if sale is still valid, given the sale end timestamp \r\n     * @param _saleEndTimestamp Sale end timestamp \r\n     */ \r\n    modifier isSaleEndTimestampCurrentlyValid(\r\n        uint128 _saleEndTimestamp\r\n    ) {\r\n        require(_isSaleEndTimestampCurrentlyValid(_saleEndTimestamp), \"ended\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize the implementation \r\n     * @param name_ Contract name\r\n     * @param symbol_ Contract symbol\r\n     * @param blueprintV12Admins Administrative accounts  \r\n     * @param splitMain Royalty manager\r\n     */\r\n    function initialize(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        IBlueprintTypes.Admins calldata blueprintV12Admins,\r\n        address splitMain\r\n    ) public initializer {\r\n        // Intialize parent contracts\r\n        ERC721Upgradeable.__ERC721_init(name_, symbol_);\r\n        HasSecondarySaleFees._initialize();\r\n        AccessControlUpgradeable.__AccessControl_init();\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, blueprintV12Admins.platform);\r\n        _setupRole(MINTER_ROLE, blueprintV12Admins.minter);\r\n\r\n        platform = blueprintV12Admins.platform;\r\n        minterAddress = blueprintV12Admins.minter;\r\n\r\n        defaultPlatformPrimaryFeePercentage = 2000; // 20%\r\n\r\n        defaultBlueprintSecondarySalePercentage = 750; // 7.5%\r\n        defaultPlatformSecondarySalePercentage = 250; // 2.5%\r\n\r\n        asyncSaleFeesRecipient = blueprintV12Admins.asyncSaleFeesRecipient;\r\n        _splitMain = splitMain;\r\n    }\r\n\r\n    /**\r\n     * @dev Validates that sale is still ongoing\r\n     * @param _blueprintID Blueprint ID \r\n     */\r\n    function _isSaleOngoing(uint256 _blueprintID)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return blueprints[_blueprintID].saleState == SaleState.started && _isSaleEndTimestampCurrentlyValid(blueprints[_blueprintID].saleEndTimestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if user whitelisted for presale purchase \r\n     * @param _blueprintID ID of blueprint \r\n     * @param _whitelistedQuantity Purchaser's requested quantity. Validated against merkle tree\r\n     * @param proof Corresponding proof for purchaser in merkle tree \r\n     */ \r\n    function _isWhitelistedAndPresale(\r\n        uint256 _blueprintID,\r\n        uint32 _whitelistedQuantity,\r\n        bytes32[] calldata proof\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return (_isBlueprintPreparedAndNotStarted(_blueprintID) && proof.length != 0 && _verify(_leaf(msg.sender, uint256(_whitelistedQuantity)), blueprints[_blueprintID].merkleroot, proof));\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if sale is still valid, given the sale end timestamp \r\n     * @param _saleEndTimestamp Sale end timestamp \r\n     */  \r\n    function _isSaleEndTimestampCurrentlyValid(uint128 _saleEndTimestamp)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _saleEndTimestamp > block.timestamp || _saleEndTimestamp == 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks that blueprint is prepared but sale for it hasn't started \r\n     * @param _blueprintID ID of blueprint \r\n     */\r\n    function _isBlueprintPreparedAndNotStarted(uint256 _blueprintID)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return blueprints[_blueprintID].saleState == SaleState.not_started;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks that the recipients and allocations arrays of royalties are valid  \r\n     * @param _feeRecipients Fee recipients\r\n     * @param _feeBPS Allocations in percentages for fee recipients (basis points)\r\n     */ \r\n    function feeArrayDataValid(\r\n        address[] memory _feeRecipients,\r\n        uint32[] memory _feeBPS\r\n    ) internal pure returns (bool) {\r\n        require(\r\n            _feeRecipients.length == _feeBPS.length,\r\n            \"invalid\"\r\n        );\r\n        uint32 totalPercent;\r\n        for (uint256 i; i < _feeBPS.length; i++) {\r\n            totalPercent = totalPercent + _feeBPS[i];\r\n        }\r\n        require(totalPercent <= 10000, \"bps >\");\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets values after blueprint preparation\r\n     * @param _blueprintID Blueprint ID\r\n     * @param _blueprintMetaData Blueprint metadata uri \r\n     */\r\n    function setBlueprintPrepared(\r\n        uint256 _blueprintID,\r\n        string memory _blueprintMetaData\r\n    ) internal {\r\n        blueprints[_blueprintID].saleState = SaleState.not_started;\r\n        //assign the erc721 token index to the blueprint\r\n        blueprints[_blueprintID].erc721TokenIndex = latestErc721TokenIndex;\r\n        uint64 _capacity = blueprints[_blueprintID].capacity;\r\n        latestErc721TokenIndex += _capacity;\r\n        blueprintIndex++;\r\n\r\n        emit BlueprintPrepared(\r\n            _blueprintID,\r\n            blueprints[_blueprintID].artist,\r\n            _capacity,\r\n            _blueprintMetaData,\r\n            blueprints[_blueprintID].baseTokenUri\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the ERC20 token value of a blueprint\r\n     * @param _blueprintID Blueprint ID \r\n     * @param _erc20Token ERC20 token being set\r\n     */\r\n    function setErc20Token(uint256 _blueprintID, address _erc20Token) internal {\r\n        if (_erc20Token != address(0)) {\r\n            blueprints[_blueprintID].ERC20Token = _erc20Token;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets up most blueprint parameters \r\n     * @param _blueprintID Blueprint ID \r\n     * @param _erc20Token ERC20 currency \r\n     * @param _baseTokenUri Base token uri for blueprint\r\n     * @param _merkleroot Root of merkle tree allowlist\r\n     * @param _mintAmountArtist Amount that artist can mint of blueprint\r\n     * @param _mintAmountPlatform Amount that platform can mint of blueprint \r\n     * @param _maxPurchaseAmount Max amount of NFTs purchasable in one transaction\r\n     * @param _saleEndTimestamp When the sale ends\r\n     */\r\n    function _setupBlueprint(\r\n        uint256 _blueprintID,\r\n        address _erc20Token,\r\n        string memory _baseTokenUri,\r\n        bytes32 _merkleroot,\r\n        uint32 _mintAmountArtist,\r\n        uint32 _mintAmountPlatform,\r\n        uint64 _maxPurchaseAmount,\r\n        uint128 _saleEndTimestamp\r\n    )   internal \r\n        isSaleEndTimestampCurrentlyValid(_saleEndTimestamp)\r\n    {\r\n        setErc20Token(_blueprintID, _erc20Token);\r\n\r\n        blueprints[_blueprintID].baseTokenUri = _baseTokenUri;\r\n\r\n        if (_merkleroot != 0) {\r\n            blueprints[_blueprintID].merkleroot = _merkleroot;\r\n        }\r\n\r\n        blueprints[_blueprintID].mintAmountArtist = _mintAmountArtist;\r\n        blueprints[_blueprintID].mintAmountPlatform = _mintAmountPlatform;\r\n\r\n        if (_maxPurchaseAmount != 0) {\r\n            blueprints[_blueprintID].maxPurchaseAmount = _maxPurchaseAmount;\r\n        }\r\n        \r\n        if (_saleEndTimestamp != 0) {\r\n            blueprints[_blueprintID].saleEndTimestamp = _saleEndTimestamp;\r\n        }\r\n    }\r\n\r\n    \r\n    /** \r\n     * @dev Prepare the blueprint (this is the core operation to set up a blueprint)\r\n     * @param _artist Artist address\r\n     * @param config Object containing values required to prepare blueprint\r\n     * @param feesInput Initial primary and secondary fees config\r\n     */ \r\n    function prepareBlueprint(\r\n        address _artist,\r\n        IBlueprintTypes.BlueprintPreparationConfig calldata config,\r\n        FeesInput calldata feesInput\r\n    )   external \r\n        onlyRole(MINTER_ROLE)\r\n    {\r\n        uint256 _blueprintID = blueprintIndex;\r\n        blueprints[_blueprintID].artist = _artist;\r\n        blueprints[_blueprintID].capacity = config._capacity;\r\n        blueprints[_blueprintID].price = config._price;\r\n\r\n        _setupBlueprint(\r\n            _blueprintID,\r\n            config._erc20Token,\r\n            config._baseTokenUri,\r\n            config._merkleroot,\r\n            config._mintAmountArtist,\r\n            config._mintAmountPlatform,\r\n            config._maxPurchaseAmount,\r\n            config._saleEndTimestamp\r\n        ); \r\n\r\n        setBlueprintPrepared(_blueprintID, config._blueprintMetaData);\r\n        setFeeRecipients(_blueprintID, feesInput);\r\n    }\r\n\r\n    /**\r\n     * @dev Update a blueprint's artist\r\n     * @param _blueprintID Blueprint ID \r\n     * @param _newArtist New artist\r\n     */\r\n    function updateBlueprintArtist (\r\n        uint256 _blueprintID,\r\n        address _newArtist\r\n    ) external onlyRole(MINTER_ROLE) {\r\n        blueprints[_blueprintID].artist = _newArtist;\r\n    }\r\n\r\n    /**\r\n     * @dev Update a blueprint's capacity\r\n     * @param _blueprintID Blueprint ID \r\n     * @param _newCapacity New capacity\r\n     * @param _newLatestErc721TokenIndex Newly adjusted last ERC721 token id \r\n     */\r\n    function updateBlueprintCapacity (\r\n        uint256 _blueprintID,\r\n        uint64 _newCapacity,\r\n        uint64 _newLatestErc721TokenIndex\r\n    ) external onlyRole(MINTER_ROLE) {\r\n        require(blueprints[_blueprintID].capacity > _newCapacity, \"cap >\");\r\n\r\n        blueprints[_blueprintID].capacity = _newCapacity;\r\n\r\n        latestErc721TokenIndex = _newLatestErc721TokenIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the primary and secondary fees config of a blueprint\r\n     * @param _blueprintID Blueprint ID\r\n     * @param _feesInput Fees config \r\n     */\r\n    function setFeeRecipients(\r\n        uint256 _blueprintID,\r\n        FeesInput memory _feesInput\r\n    ) public onlyRole(MINTER_ROLE) {\r\n        require(\r\n            blueprints[_blueprintID].saleState != SaleState.not_prepared,\r\n            \"!prepared\"\r\n        );\r\n        require(\r\n            feeArrayDataValid(_feesInput.primaryFeeRecipients, _feesInput.primaryFeeBPS),\r\n            \"primary\"\r\n        ); \r\n\r\n        SecondaryFeesInput memory secondaryFeesInput = _feesInput.secondaryFeesInput;\r\n\r\n        Fees memory feeRecipientInfo = Fees(\r\n            _feesInput.primaryFeeRecipients,\r\n            _feesInput.primaryFeeBPS,\r\n            secondaryFeesInput.royaltyRecipient, \r\n            secondaryFeesInput.totalRoyaltyCutBPS\r\n        );\r\n\r\n        // if pre-existing split isn't passed in, deploy it and set it. \r\n        if (_feesInput.deploySplit) {\r\n            feeRecipientInfo.royaltyRecipient = ISplitMain(_splitMain).createSplit(\r\n                secondaryFeesInput.secondaryFeeRecipients, \r\n                secondaryFeesInput.secondaryFeeMPS, \r\n                0, \r\n                address(0) // immutable split\r\n            );\r\n        } \r\n        \r\n        blueprints[_blueprintID].feeRecipientInfo = feeRecipientInfo;\r\n    }\r\n\r\n    /**\r\n     * @dev Begin a blueprint's sale\r\n     * @param blueprintID Blueprint ID \r\n     */\r\n    function beginSale(uint256 blueprintID)\r\n        external\r\n        onlyRole(MINTER_ROLE)\r\n        isSaleEndTimestampCurrentlyValid(blueprints[blueprintID].saleEndTimestamp) \r\n    {\r\n        require(\r\n            blueprints[blueprintID].saleState == SaleState.not_started,\r\n            \"started\"\r\n        );\r\n        blueprints[blueprintID].saleState = SaleState.started;\r\n        emit SaleStarted(blueprintID);\r\n    }\r\n\r\n    /**\r\n     * @dev Pause a blueprint's sale\r\n     * @param blueprintID Blueprint ID \r\n     */\r\n    function pauseSale(uint256 blueprintID)\r\n        external\r\n        onlyRole(MINTER_ROLE)\r\n        isSaleOngoing(blueprintID)\r\n    {\r\n        blueprints[blueprintID].saleState = SaleState.paused;\r\n        emit SalePaused(blueprintID);\r\n    }\r\n\r\n    /**\r\n     * @dev Unpause a blueprint's sale\r\n     * @param blueprintID Blueprint ID \r\n     */\r\n    function unpauseSale(uint256 blueprintID) external onlyRole(MINTER_ROLE) isSaleEndTimestampCurrentlyValid(blueprints[blueprintID].saleEndTimestamp) {\r\n        require(\r\n            blueprints[blueprintID].saleState == SaleState.paused,\r\n            \"!paused\"\r\n        );\r\n        blueprints[blueprintID].saleState = SaleState.started;\r\n        emit SaleUnpaused(blueprintID);\r\n    }\r\n\r\n    /**\r\n     * @dev Update a blueprint's merkle tree root \r\n     * @param blueprintID Blueprint ID \r\n     * @param oldProof Old proof for leaf being updated, used for validation \r\n     * @param remainingWhitelistAmount Remaining whitelist amount of NFTs \r\n     */\r\n    function _updateMerkleRootForPurchase(\r\n        uint256 blueprintID,\r\n        bytes32[] memory oldProof,\r\n        uint32 remainingWhitelistAmount\r\n    ) \r\n        internal\r\n    {\r\n        bool[] memory proofFlags = new bool[](oldProof.length);\r\n        bytes32[] memory leaves = new bytes32[](1);\r\n        leaves[0] = _leaf(msg.sender, uint256(remainingWhitelistAmount));\r\n        blueprints[blueprintID].merkleroot = MerkleProof.processMultiProof(oldProof, proofFlags, leaves);\r\n    }\r\n\r\n    /**\r\n     * @dev Purchase NFTs of a blueprint to a recipient address\r\n     * @param blueprintID Blueprint ID\r\n     * @param purchaseQuantity How many NFTs to purchase \r\n     * @param whitelistedQuantity How many NFTS are whitelisted for the blueprint \r\n     * @param tokenAmount Payment amount \r\n     * @param proof Merkle tree proof \r\n     * @param nftRecipient Recipient of minted NFTs\r\n     */\r\n    function purchaseBlueprintsTo(\r\n        uint256 blueprintID,\r\n        uint32 purchaseQuantity,\r\n        uint32 whitelistedQuantity,\r\n        uint256 tokenAmount,\r\n        bytes32[] calldata proof,\r\n        address nftRecipient\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        isQuantityAvailableForPurchase(blueprintID, purchaseQuantity)\r\n    {\r\n        if (_isWhitelistedAndPresale(blueprintID, whitelistedQuantity, proof)) {\r\n            require(purchaseQuantity <= whitelistedQuantity, \"> whitelisted amount\");\r\n            _updateMerkleRootForPurchase(blueprintID, proof, whitelistedQuantity - purchaseQuantity);\r\n        } else {\r\n            require(_isSaleOngoing(blueprintID), \"unavailable\");\r\n        }\r\n\r\n        require(\r\n            blueprints[blueprintID].maxPurchaseAmount == 0 ||\r\n                purchaseQuantity <= blueprints[blueprintID].maxPurchaseAmount,\r\n            \"> maxPurchaseAmount\"\r\n        );\r\n\r\n        address artist = blueprints[blueprintID].artist;\r\n        _confirmPaymentAmountAndSettleSale(\r\n            blueprintID,\r\n            purchaseQuantity,\r\n            tokenAmount,\r\n            artist\r\n        );\r\n        _mintQuantity(blueprintID, purchaseQuantity, nftRecipient);\r\n    }\r\n\r\n    /**\r\n     * @dev Purchase NFTs of a blueprint to the sender\r\n     * @param blueprintID Blueprint ID\r\n     * @param purchaseQuantity How many NFTs to purchase \r\n     * @param whitelistedQuantity How many NFTS are whitelisted for the blueprint \r\n     * @param tokenAmount Payment amount \r\n     * @param proof Merkle tree proof \r\n     */ \r\n    function purchaseBlueprints(\r\n        uint256 blueprintID,\r\n        uint32 purchaseQuantity,\r\n        uint32 whitelistedQuantity,\r\n        uint256 tokenAmount,\r\n        bytes32[] calldata proof\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        isQuantityAvailableForPurchase(blueprintID, purchaseQuantity)\r\n    {\r\n        if (_isWhitelistedAndPresale(blueprintID, whitelistedQuantity, proof)) {\r\n            require(purchaseQuantity <= whitelistedQuantity, \"> whitelisted amount\");\r\n            _updateMerkleRootForPurchase(blueprintID, proof, whitelistedQuantity - purchaseQuantity);\r\n        } else {\r\n            require(_isSaleOngoing(blueprintID), \"unavailable\");\r\n        }\r\n\r\n        require(\r\n            blueprints[blueprintID].maxPurchaseAmount == 0 ||\r\n                purchaseQuantity <= blueprints[blueprintID].maxPurchaseAmount,\r\n            \"> maxPurchaseAmount\"\r\n        );\r\n\r\n        address artist = blueprints[blueprintID].artist;\r\n        _confirmPaymentAmountAndSettleSale(\r\n            blueprintID,\r\n            purchaseQuantity,\r\n            tokenAmount,\r\n            artist\r\n        );\r\n        _mintQuantity(blueprintID, purchaseQuantity, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the artist of a blueprint mint NFTs of the blueprint\r\n     * @param blueprintID Blueprint ID\r\n     * @param quantity How many NFTs to mint\r\n     */\r\n    function artistMint(\r\n        uint256 blueprintID,\r\n        uint32 quantity\r\n    )\r\n        external\r\n        nonReentrant \r\n    {\r\n        require(\r\n            _isBlueprintPreparedAndNotStarted(blueprintID) || _isSaleOngoing(blueprintID),\r\n            \"not pre/public sale\"\r\n        );\r\n        require(\r\n            minterAddress == msg.sender ||\r\n                blueprints[blueprintID].artist == msg.sender,\r\n            \"unauthorized\"\r\n        );\r\n\r\n        if (minterAddress == msg.sender) {\r\n            require(\r\n                quantity <= blueprints[blueprintID].mintAmountPlatform,\r\n                \"quantity >\"\r\n            );\r\n            blueprints[blueprintID].mintAmountPlatform -= quantity;\r\n        } else if (blueprints[blueprintID].artist == msg.sender) {\r\n            require(\r\n                quantity <= blueprints[blueprintID].mintAmountArtist,\r\n                \"quantity >\"\r\n            );\r\n            blueprints[blueprintID].mintAmountArtist -= quantity;\r\n        }\r\n        _mintQuantity(blueprintID, quantity, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint a quantity of NFTs of a blueprint to a recipient \r\n     * @param _blueprintID Blueprint ID\r\n     * @param _quantity Quantity to mint\r\n     * @param _nftRecipient Recipient of minted NFTs\r\n     */\r\n    function _mintQuantity(uint256 _blueprintID, uint32 _quantity, address _nftRecipient) private {\r\n        uint128 newTokenId = blueprints[_blueprintID].erc721TokenIndex;\r\n        uint64 newCap = blueprints[_blueprintID].capacity;\r\n        for (uint16 i; i < _quantity; i++) {\r\n            require(newCap > 0, \"quantity > cap\");\r\n            \r\n            _mint(_nftRecipient, newTokenId + i);\r\n            tokenToBlueprintID[newTokenId + i] = _blueprintID;\r\n\r\n            bytes32 prefixHash = keccak256(\r\n                abi.encodePacked(\r\n                    block.number,\r\n                    block.timestamp,\r\n                    block.coinbase,\r\n                    newCap\r\n                )\r\n            );\r\n            emit BlueprintMinted(\r\n                _blueprintID,\r\n                blueprints[_blueprintID].artist,\r\n                _nftRecipient,\r\n                newTokenId + i,\r\n                newCap,\r\n                prefixHash\r\n            );\r\n            --newCap;\r\n        }\r\n\r\n        blueprints[_blueprintID].erc721TokenIndex += _quantity;\r\n        blueprints[_blueprintID].capacity = newCap;\r\n    }\r\n\r\n    /**\r\n     * @dev Pay for minting NFTs \r\n     * @param _blueprintID Blueprint ID \r\n     * @param _quantity Quantity of NFTs to purchase\r\n     * @param _tokenAmount Payment amount provided\r\n     * @param _artist Artist of blueprint\r\n     */\r\n    function _confirmPaymentAmountAndSettleSale(\r\n        uint256 _blueprintID,\r\n        uint32 _quantity,\r\n        uint256 _tokenAmount,\r\n        address _artist\r\n    ) internal {\r\n        address _erc20Token = blueprints[_blueprintID].ERC20Token;\r\n        uint128 _price = blueprints[_blueprintID].price;\r\n        if (_erc20Token == address(0)) {\r\n            require(_tokenAmount == 0, \"tokenAmount != 0\");\r\n            require(\r\n                msg.value == _quantity * _price,\r\n                \"$ != expected\"\r\n            );\r\n            _payFeesAndArtist(_blueprintID, _erc20Token, msg.value, _artist);\r\n        } else {\r\n            require(msg.value == 0, \"eth value != 0\");\r\n            require(\r\n                _tokenAmount == _quantity * _price,\r\n                \"$ != expected\"\r\n            );\r\n\r\n            IERC20(_erc20Token).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _tokenAmount\r\n            );\r\n            _payFeesAndArtist(_blueprintID, _erc20Token, _tokenAmount, _artist);\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////\r\n    ////// MERKLEROOT FUNCTIONS ////////\r\n    ////////////////////////////////////\r\n\r\n    /**\r\n     * @dev Create a merkle tree with address: quantity pairs as the leaves.\r\n     *      The msg.sender will be verified if it has a corresponding quantity value in the merkletree\r\n     * @param account Minting account being verified\r\n     * @param quantity Quantity to mint, being verified\r\n     */\r\n    function _leaf(address account, uint256 quantity)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(account, quantity));\r\n    }\r\n\r\n    /**\r\n     * @dev Verify a leaf's inclusion in a merkle tree with its root and corresponding proof\r\n     * @param leaf Leaf to verify\r\n     * @param merkleroot Merkle tree's root\r\n     * @param proof Corresponding proof for leaf\r\n     */\r\n    function _verify(\r\n        bytes32 leaf,\r\n        bytes32 merkleroot,\r\n        bytes32[] memory proof\r\n    ) internal pure returns (bool) {\r\n        return MerkleProof.verify(proof, merkleroot, leaf);\r\n    }\r\n\r\n    ////////////////////////////\r\n    /// ONLY ADMIN functions ///\r\n    ////////////////////////////\r\n\r\n    /**\r\n     * @dev Update blueprint's token uri\r\n     * @param blueprintID Blueprint ID\r\n     * @param newBaseTokenUri New base token uri to update to\r\n     */\r\n    function updateBlueprintTokenUri(\r\n        uint256 blueprintID,\r\n        string memory newBaseTokenUri\r\n    ) external onlyRole(MINTER_ROLE) isBlueprintPrepared(blueprintID) {\r\n        require(\r\n            !blueprints[blueprintID].tokenUriLocked,\r\n            \"locked\"\r\n        );\r\n\r\n        blueprints[blueprintID].baseTokenUri = newBaseTokenUri;\r\n\r\n        emit BlueprintTokenUriUpdated(blueprintID, newBaseTokenUri);\r\n    }\r\n\r\n    /**\r\n     * @dev Lock blueprint's token uri (from changing)\r\n     * @param blueprintID Blueprint ID\r\n     */ \r\n    function lockBlueprintTokenUri(uint256 blueprintID)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n        isBlueprintPrepared(blueprintID)\r\n    {\r\n        require(\r\n            !blueprints[blueprintID].tokenUriLocked,\r\n            \"locked\"\r\n        );\r\n\r\n        blueprints[blueprintID].tokenUriLocked = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Return token's uri\r\n     * @param tokenId ID of token to return uri for\r\n     * @return Token uri, constructed by taking base uri of blueprint corresponding to token, and concatenating token id\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"token dne\"\r\n        );\r\n\r\n        string memory baseURI = blueprints[tokenToBlueprintID[tokenId]].baseTokenUri;\r\n        return\r\n            bytes(baseURI).length > 0\r\n                ? string(\r\n                    abi.encodePacked(\r\n                        baseURI,\r\n                        \"/\",\r\n                        tokenId.toString(),\r\n                        \"/\",\r\n                        \"token.json\"\r\n                    )\r\n                )\r\n                : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Reveal blueprint's seed by emitting public event \r\n     * @param blueprintID Blueprint ID\r\n     * @param randomSeed Revealed seed \r\n     */\r\n    function revealBlueprintSeed(uint256 blueprintID, string memory randomSeed)\r\n        external\r\n        onlyRole(MINTER_ROLE)\r\n        isBlueprintPrepared(blueprintID)\r\n    {\r\n        emit BlueprintSeed(blueprintID, randomSeed);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the contract-wide recipient of primary sale feess\r\n     * @param _asyncSaleFeesRecipient New async sale fees recipient \r\n     */\r\n    function setAsyncFeeRecipient(address _asyncSaleFeesRecipient)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        asyncSaleFeesRecipient = _asyncSaleFeesRecipient;\r\n    }\r\n\r\n    /**\r\n     * @dev Change the default percentage of primary sales sent to platform\r\n     * @param _basisPoints New default platform primary fee percentage (in basis points)\r\n     */    \r\n    function changeDefaultPlatformPrimaryFeePercentage(uint32 _basisPoints)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(_basisPoints <= 10000);\r\n        defaultPlatformPrimaryFeePercentage = _basisPoints;\r\n    }\r\n\r\n    /**\r\n     * @dev Change the default secondary sale percentage sent to artist and others \r\n     * @param _basisPoints New default secondary fee percentage (in basis points)\r\n     */    \r\n    function changeDefaultBlueprintSecondarySalePercentage(uint32 _basisPoints)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(_basisPoints + defaultPlatformSecondarySalePercentage <= 10000);\r\n        defaultBlueprintSecondarySalePercentage = _basisPoints;\r\n    }\r\n\r\n    /**\r\n     * @dev Change the default secondary sale percentage sent to platform \r\n     * @param _basisPoints New default secondary fee percentage (in basis points)\r\n     */  \r\n    function changeDefaultPlatformSecondarySalePercentage(uint32 _basisPoints)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(\r\n            _basisPoints + defaultBlueprintSecondarySalePercentage <= 10000\r\n        );\r\n        defaultPlatformSecondarySalePercentage = _basisPoints;\r\n    }\r\n\r\n    /**\r\n     * @dev Update contract-wide platform address, and DEFAULT_ADMIN role ownership\r\n     * @param _platform New platform address\r\n     */   \r\n    function updatePlatformAddress(address _platform)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        grantRole(DEFAULT_ADMIN_ROLE, _platform);\r\n\r\n        revokeRole(DEFAULT_ADMIN_ROLE, platform);\r\n        platform = _platform;\r\n    }\r\n\r\n    /**\r\n     * @dev Update contract-wide minter address, and MINTER_ROLE role ownership\r\n     * @param newMinterAddress New minter address\r\n     */ \r\n    function updateMinterAddress(address newMinterAddress)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        grantRole(MINTER_ROLE, newMinterAddress);\r\n\r\n        revokeRole(MINTER_ROLE, minterAddress);\r\n        minterAddress = newMinterAddress;\r\n    }\r\n\r\n    ////////////////////////////////////\r\n    /// Secondary Fees implementation //\r\n    ////////////////////////////////////\r\n\r\n    /**\r\n     * @dev Pay primary fees owed to primary fee recipients\r\n     * @param _blueprintID Blueprint ID \r\n     * @param _erc20Token ERC20 token used for payment (if used)\r\n     * @param _amount Payment amount \r\n     * @param _artist Artist being paid\r\n     */\r\n    function _payFeesAndArtist(\r\n        uint256 _blueprintID,\r\n        address _erc20Token,\r\n        uint256 _amount,\r\n        address _artist\r\n    ) internal {\r\n        address[] memory _primaryFeeRecipients = getPrimaryFeeRecipients(\r\n            _blueprintID\r\n        );\r\n        uint32[] memory _primaryFeeBPS = getPrimaryFeeBps(_blueprintID);\r\n        uint256 feesPaid;\r\n\r\n        for (uint256 i; i < _primaryFeeRecipients.length; i++) {\r\n            uint256 fee = (_amount * _primaryFeeBPS[i])/10000;\r\n            feesPaid = feesPaid + fee;\r\n            _payout(_primaryFeeRecipients[i], _erc20Token, fee);\r\n        }\r\n        if (_amount - feesPaid > 0) {\r\n            _payout(_artist, _erc20Token, (_amount - feesPaid));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Simple payment function to pay an amount of currency to a recipient\r\n     * @param _recipient Recipient of payment \r\n     * @param _erc20Token ERC20 token used for payment (if used)\r\n     * @param _amount Payment amount \r\n     */\r\n    function _payout(\r\n        address _recipient,\r\n        address _erc20Token,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (_erc20Token != address(0)) {\r\n            IERC20(_erc20Token).transfer(_recipient, _amount);\r\n        } else {\r\n            // attempt to send the funds to the recipient\r\n            (bool success, ) = payable(_recipient).call{\r\n                value: _amount,\r\n                gas: 20000\r\n            }(\"\");\r\n            // if it failed, update their credit balance so they can pull it later\r\n            if (!success) {\r\n                failedTransferCredits[_recipient] =\r\n                    failedTransferCredits[_recipient] +\r\n                    _amount;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev When a native gas token payment fails, credits are stored so that the would-be recipient can withdraw them later.\r\n     *      Withdraw failed credits for a recipient\r\n     * @param recipient Recipient owed some amount of native gas token   \r\n     */\r\n    function withdrawAllFailedCredits(address payable recipient) external {\r\n        uint256 amount = failedTransferCredits[msg.sender];\r\n\r\n        require(amount != 0, \"!credits\");\r\n\r\n        failedTransferCredits[msg.sender] = 0;\r\n\r\n        (bool successfulWithdraw, ) = recipient.call{value: amount, gas: 20000}(\r\n            \"\"\r\n        );\r\n        require(successfulWithdraw, \"failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Get primary fee recipients of a blueprint \r\n     * @param id Blueprint ID\r\n     */\r\n    function getPrimaryFeeRecipients(uint256 id)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        if (blueprints[id].feeRecipientInfo.primaryFeeRecipients.length == 0) {\r\n            address[] memory primaryFeeRecipients = new address[](1);\r\n            primaryFeeRecipients[0] = (asyncSaleFeesRecipient);\r\n            return primaryFeeRecipients;\r\n        } else {\r\n            return blueprints[id].feeRecipientInfo.primaryFeeRecipients;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get primary fee bps (allocations) of a blueprint \r\n     * @param id Blueprint ID\r\n     */\r\n    function getPrimaryFeeBps(uint256 id)\r\n        public\r\n        view\r\n        returns (uint32[] memory)\r\n    {\r\n        if (blueprints[id].feeRecipientInfo.primaryFeeBPS.length == 0) {\r\n            uint32[] memory primaryFeeBPS = new uint32[](1);\r\n            primaryFeeBPS[0] = defaultPlatformPrimaryFeePercentage;\r\n\r\n            return primaryFeeBPS;\r\n        } else {\r\n            return blueprints[id].feeRecipientInfo.primaryFeeBPS;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get secondary fee recipients of a token \r\n     * @param tokenId Token ID\r\n     */\r\n    function getFeeRecipients(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (address[] memory)\r\n    {\r\n        address[] memory feeRecipients = new address[](1);\r\n        feeRecipients[0] = blueprints[tokenToBlueprintID[tokenId]].feeRecipientInfo.royaltyRecipient;\r\n        return feeRecipients;\r\n    }\r\n\r\n    /**\r\n     * @dev Get secondary fee bps (allocations) of a token \r\n     * @param tokenId Token ID\r\n     */\r\n    function getFeeBps(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (uint32[] memory)\r\n    {\r\n        uint32[] memory feeBPS  = new uint32[](1);\r\n        feeBPS[0] = blueprints[tokenToBlueprintID[tokenId]].feeRecipientInfo.totalRoyaltyCutBPS;\r\n        return feeBPS; \r\n    }\r\n\r\n    ////////////////////////////////////\r\n    /// Required function overide //////\r\n    ////////////////////////////////////\r\n\r\n    /**\r\n     * @dev Override isApprovedForAll to also let the DEFAULT_ADMIN_ROLE move tokens\r\n     * @param account Account holding tokens being moved\r\n     * @param operator Operator moving tokens\r\n     */\r\n    function isApprovedForAll(address account, address operator)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return\r\n            super.isApprovedForAll(account, operator) ||\r\n            hasRole(DEFAULT_ADMIN_ROLE, operator);\r\n    }\r\n\r\n    /**\r\n     * @dev ERC165 - Validate that the contract supports a interface\r\n     * @param interfaceId ID of interface being validated \r\n     * @return Returns true if contract supports interface\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(\r\n            ERC721Upgradeable,\r\n            ERC165StorageUpgradeable,\r\n            AccessControlEnumerableUpgradeable\r\n        )\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(HasSecondarySaleFees).interfaceId ||\r\n            ERC721Upgradeable.supportsInterface(interfaceId) ||\r\n            ERC165StorageUpgradeable.supportsInterface(interfaceId) ||\r\n            AccessControlEnumerableUpgradeable.supportsInterface(interfaceId);\r\n    }\r\n}\r\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeacon {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\r\n/**\r\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\r\n * implementation contract, which is where they will delegate all function calls.\r\n *\r\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\r\n */\r\ncontract UpgradeableBeacon is IBeacon, Ownable {\r\n    address private _implementation;\r\n\r\n    /**\r\n     * @dev Emitted when the implementation returned by the beacon is changed.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\r\n     * beacon.\r\n     */\r\n    constructor(address implementation_) {\r\n        _setImplementation(implementation_);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function implementation() public view virtual override returns (address) {\r\n        return _implementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrades the beacon to a new implementation.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - msg.sender must be the owner of the contract.\r\n     * - `newImplementation` must be a contract.\r\n     */\r\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the implementation contract address for this beacon\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `newImplementation` must be a contract.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\r\n        _implementation = newImplementation;\r\n    }\r\n}\r\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\r\n/**\r\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\r\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\r\n * be specified by overriding the virtual {_implementation} function.\r\n *\r\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\r\n * different contract through the {_delegate} function.\r\n *\r\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\r\n */\r\nabstract contract Proxy {\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     *\r\n     * This function does not return to its internal call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation) internal virtual {\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\r\n     * and {_fallback} should delegate.\r\n     */\r\n    function _implementation() internal view virtual returns (address);\r\n\r\n    /**\r\n     * @dev Delegates the current call to the address returned by `_implementation()`.\r\n     *\r\n     * This function does not return to its internal call site, it will return directly to the external caller.\r\n     */\r\n    function _fallback() internal virtual {\r\n        _beforeFallback();\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback() external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\r\n     * is empty.\r\n     */\r\n    receive() external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\r\n     * call, or as part of the Solidity `fallback` or `receive` functions.\r\n     *\r\n     * If overridden should call `super._beforeFallback()`.\r\n     */\r\n    function _beforeFallback() internal virtual {}\r\n}\r\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\r\n/**\r\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\r\n * proxy whose upgrades are fully controlled by the current implementation.\r\n */\r\ninterface IERC1822Proxiable {\r\n    /**\r\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\r\n     * address.\r\n     *\r\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n     * function revert if invoked through a proxy.\r\n     */\r\n    function proxiableUUID() external view returns (bytes32);\r\n}\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\r\n */\r\nlibrary StorageSlot {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n *\r\n * @custom:oz-upgrades-unsafe-allow delegatecall\r\n */\r\nabstract contract ERC1967Upgrade {\r\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _getImplementation() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCall(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _upgradeTo(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            Address.functionDelegateCall(newImplementation, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCallUUPS(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\r\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\r\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\r\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\r\n            _setImplementation(newImplementation);\r\n        } else {\r\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\r\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\r\n            } catch {\r\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\r\n            }\r\n            _upgradeToAndCall(newImplementation, data, forceCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _changeAdmin(address newAdmin) internal {\r\n        emit AdminChanged(_getAdmin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Emitted when the beacon is upgraded.\r\n     */\r\n    event BeaconUpgraded(address indexed beacon);\r\n\r\n    /**\r\n     * @dev Returns the current beacon.\r\n     */\r\n    function _getBeacon() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n     */\r\n    function _setBeacon(address newBeacon) private {\r\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\r\n        require(\r\n            Address.isContract(IBeacon(newBeacon).implementation()),\r\n            \"ERC1967: beacon implementation is not a contract\"\r\n        );\r\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n     *\r\n     * Emits a {BeaconUpgraded} event.\r\n     */\r\n    function _upgradeBeaconToAndCall(\r\n        address newBeacon,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _setBeacon(newBeacon);\r\n        emit BeaconUpgraded(newBeacon);\r\n        if (data.length > 0 || forceCall) {\r\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\r\n        }\r\n    }\r\n}\r\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\r\n/**\r\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\r\n *\r\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\r\n * conflict with the storage layout of the implementation behind the proxy.\r\n *\r\n * _Available since v3.4._\r\n */\r\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\r\n    /**\r\n     * @dev Initializes the proxy with `beacon`.\r\n     *\r\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\r\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\r\n     * constructor.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `beacon` must be a contract with the interface {IBeacon}.\r\n     */\r\n    constructor(address beacon, bytes memory data) payable {\r\n        _upgradeBeaconToAndCall(beacon, data, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current beacon address.\r\n     */\r\n    function _beacon() internal view virtual returns (address) {\r\n        return _getBeacon();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation address of the associated beacon.\r\n     */\r\n    function _implementation() internal view virtual override returns (address) {\r\n        return IBeacon(_getBeacon()).implementation();\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\r\n     *\r\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `beacon` must be a contract.\r\n     * - The implementation returned by `beacon` must be a contract.\r\n     */\r\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\r\n        _upgradeBeaconToAndCall(beacon, data, false);\r\n    }\r\n}\r\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\r\n/**\r\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\r\n * implementation address that can be changed. This address is stored in storage in the location specified by\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\r\n * implementation behind the proxy.\r\n */\r\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\r\n    /**\r\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\r\n     *\r\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\r\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\r\n     */\r\n    constructor(address _logic, bytes memory _data) payable {\r\n        _upgradeToAndCall(_logic, _data, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _implementation() internal view virtual override returns (address impl) {\r\n        return ERC1967Upgrade._getImplementation();\r\n    }\r\n}\r\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\r\n/**\r\n * @dev This contract implements a proxy that is upgradeable by an admin.\r\n *\r\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\r\n * clashing], which can potentially be used in an attack, this contract uses the\r\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\r\n * things that go hand in hand:\r\n *\r\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\r\n * that call matches one of the admin functions exposed by the proxy itself.\r\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\r\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\r\n * \"admin cannot fallback to proxy target\".\r\n *\r\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\r\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\r\n * to sudden errors when trying to call a function from the proxy implementation.\r\n *\r\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\r\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\r\n */\r\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\r\n    /**\r\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\r\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\r\n     */\r\n    constructor(\r\n        address _logic,\r\n        address admin_,\r\n        bytes memory _data\r\n    ) payable ERC1967Proxy(_logic, _data) {\r\n        _changeAdmin(admin_);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\r\n     */\r\n    modifier ifAdmin() {\r\n        if (msg.sender == _getAdmin()) {\r\n            _;\r\n        } else {\r\n            _fallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\r\n     *\r\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\r\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\r\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\r\n     */\r\n    function admin() external ifAdmin returns (address admin_) {\r\n        admin_ = _getAdmin();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\r\n     *\r\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\r\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\r\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\r\n     */\r\n    function implementation() external ifAdmin returns (address implementation_) {\r\n        implementation_ = _implementation();\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\r\n     */\r\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\r\n        _changeAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\r\n     */\r\n    function upgradeTo(address newImplementation) external ifAdmin {\r\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\r\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\r\n     * proxied contract.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\r\n        _upgradeToAndCall(newImplementation, data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _admin() internal view virtual returns (address) {\r\n        return _getAdmin();\r\n    }\r\n\r\n    /**\r\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\r\n     */\r\n    function _beforeFallback() internal virtual override {\r\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\r\n        super._beforeFallback();\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Used to deploy and configure CreatorBlueprints contracts in multiple settings\r\n * @author Ohimire Labs\r\n */\r\ncontract BlueprintsFactory is Ownable { \r\n    /**\r\n     * @dev Emitted when contract is deployed, exposing Async Art system contracts deployed in the process\r\n     * @param creatorBlueprintsImplementation Address of deployed CreatorBlueprints implementation used in beacon upgradability \r\n     * @param creatorBlueprintsBeacon Address of deployed beacon tracking CreatorBlueprints implementation\r\n     * @param blueprintV12Implementation Address of deployed global BlueprintV12 implementation \r\n     * @param blueprintV12Beacon Address of deployed beacon tracking BlueprintV12 implementation\r\n     */\r\n    event FactoryDeployed(\r\n        address creatorBlueprintsImplementation, \r\n        address creatorBlueprintsBeacon,\r\n        address blueprintV12Implementation,\r\n        address blueprintV12Beacon\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when CreatorBlueprint is deployed\r\n     * @param creatorBlueprint Address of deployed CreatorBlueprints BeaconProxy \r\n     * @param royaltySplit Address of associated royalty splitter contract\r\n     * @param blueprintPlatformID Platform's identification of blueprint\r\n     */\r\n    event CreatorBlueprintDeployed(\r\n        address indexed creatorBlueprint,\r\n        address indexed royaltySplit,\r\n        string blueprintPlatformID\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when BlueprintV12 is deployed\r\n     * @param blueprintV12 Address of deployed BlueprintV12 BeaconProxy \r\n     */\r\n    event BlueprintV12Deployed(\r\n        address indexed blueprintV12\r\n    );\r\n\r\n    /**\r\n     * @dev Beacon keeping track of current CreatorBlueprint implementation\r\n     */\r\n    address public immutable creatorBlueprintsBeacon; \r\n\r\n    /**\r\n     * @dev Beacon keeping track of current BlueprintV12 implementation\r\n     */\r\n    address public immutable blueprintV12Beacon; \r\n\r\n    /**\r\n     * @dev System royalty manager\r\n     */\r\n    address private immutable _splitMain;\r\n\r\n    /**\r\n     * @dev Set of default addresses to be given privileges in each CreatorBlueprint \r\n     */\r\n    IBlueprintTypes.Admins public defaultCreatorBlueprintsAdmins;\r\n\r\n    /**\r\n     * @dev Set of default addresses to be given privileges in each BlueprintV12 \r\n     */\r\n    IBlueprintTypes.Admins public defaultBlueprintV12Admins;\r\n\r\n    /**\r\n     * @dev This constructor takes a network from raw to a fully deployed AsyncArt Blueprints system\r\n     * @param creatorBlueprintsBeaconUpgrader Account that can upgrade the CreatorBlueprint implementation \r\n     * @param globalBlueprintsBeaconUpgrader Account able to upgrade global BlueprintV12 implementation (via beacon)\r\n     * @param creatorBlueprintsMinter Initial default address assigned MINTER_ROLE on CreatorBlueprints instances\r\n     * @param _platform Address given DEFAULT_ADMIN role on BlueprintV12 and set as initial default address assigned DEFAULT_ADMIN role on CreatorBlueprints instances\r\n     * @param splitMain Royalty manager\r\n     * @param factoryOwner Initial owner of this contract \r\n     */\r\n    constructor(\r\n        address creatorBlueprintsBeaconUpgrader, \r\n        address globalBlueprintsBeaconUpgrader,\r\n        address globalBlueprintsMinter,\r\n        address creatorBlueprintsMinter,\r\n        address _platform,\r\n        address splitMain,\r\n        address factoryOwner\r\n    ) {\r\n        // deploy CreatorBlueprints implementation and beacon \r\n        address creatorBlueprintsImplementation = address(new CreatorBlueprints()); \r\n        address _beacon = address(new UpgradeableBeacon(creatorBlueprintsImplementation)); \r\n        Ownable(_beacon).transferOwnership(creatorBlueprintsBeaconUpgrader);\r\n        creatorBlueprintsBeacon = _beacon; // extra step, as one cannot read immutable variables in a constructor\r\n\r\n        // deploy blueprintV12 implementation and Beacon for it\r\n        address blueprintV12Implementation = address(new BlueprintV12()); \r\n        address _globalBeacon = address(new UpgradeableBeacon(blueprintV12Implementation)); \r\n        Ownable(_globalBeacon).transferOwnership(globalBlueprintsBeaconUpgrader); \r\n        blueprintV12Beacon = _globalBeacon; // extra step as one cannot read immutable variables in a constructor \r\n\r\n        _splitMain = splitMain; \r\n\r\n        // start off with both set of default admins being the same\r\n        defaultCreatorBlueprintsAdmins = IBlueprintTypes.Admins(_platform, creatorBlueprintsMinter, _platform);\r\n        defaultBlueprintV12Admins =  IBlueprintTypes.Admins(_platform, globalBlueprintsMinter, _platform);\r\n\r\n        _transferOwnership(factoryOwner);\r\n\r\n        emit FactoryDeployed(\r\n            creatorBlueprintsImplementation, \r\n            _beacon,\r\n            blueprintV12Implementation,\r\n            _globalBeacon          \r\n        );\r\n    }\r\n \r\n    /**\r\n     * @dev Deploy BlueprintV12 contract only\r\n     * @param _name Name of BlueprintV12 instance\r\n     * @param _symbol Symbol of BlueprintV12 instance\r\n     */\r\n    function deployGlobalBlueprint(\r\n        string calldata _name, \r\n        string calldata _symbol\r\n    ) external {\r\n        address proxy = address(new BeaconProxy(\r\n            blueprintV12Beacon,\r\n            abi.encodeWithSelector(\r\n                BlueprintV12(address(0)).initialize.selector,\r\n                _name,\r\n                _symbol,\r\n                defaultBlueprintV12Admins,\r\n                _splitMain           \r\n            )\r\n        ));\r\n\r\n        emit BlueprintV12Deployed(\r\n            proxy\r\n        ); \r\n    }\r\n\r\n    /**\r\n     * @dev Deploy CreatorBlueprints contract only\r\n     * @param creatorBlueprintsInput Object containing core CreatorBlueprints configuration \r\n     * @param royaltyCutBPS Total percentage of token purchases taken by royalty split on CreatorBlueprint deployed instance\r\n     * @param split Pre-existing royalty splits contract\r\n     * @param blueprintPlatformID Platform's identification of blueprint\r\n     */\r\n    function deployCreatorBlueprints(\r\n        CreatorBlueprints.CreatorBlueprintsInput calldata creatorBlueprintsInput,\r\n        uint32 royaltyCutBPS,\r\n        address split,\r\n        string calldata blueprintPlatformID\r\n    ) external {\r\n        _deployCreatorBlueprints(\r\n            creatorBlueprintsInput,\r\n            royaltyCutBPS,\r\n            split,\r\n            address(0),\r\n            blueprintPlatformID\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deploy CreatorBlueprints and associated royalty splitter contract \r\n     * @param creatorBlueprintsInput Object containing core CreatorBlueprints configuration \r\n     * @param royaltyRecipients Array of royalty recipients to encode into immutable royalty split\r\n     * @param allocations Array of allocations by percentage, given to members in royaltyRecipients \r\n     * @param royaltyCutBPS Total percentage of token purchases taken by royalty split on CreatorBlueprint deployed instance\r\n     * @param blueprintPlatformID Platform's identification of blueprint\r\n     */\r\n    function deployCreatorBlueprintsAndRoyaltySplitter(\r\n        CreatorBlueprints.CreatorBlueprintsInput calldata creatorBlueprintsInput,\r\n        address[] calldata royaltyRecipients, \r\n        uint32[] calldata allocations,\r\n        uint32 royaltyCutBPS,\r\n        string calldata blueprintPlatformID\r\n    ) external {\r\n        address split = ISplitMain(_splitMain).createSplit(\r\n            royaltyRecipients, \r\n            allocations, \r\n            0, \r\n            address(0)\r\n        );\r\n\r\n        _deployCreatorBlueprints(\r\n            creatorBlueprintsInput, \r\n            royaltyCutBPS,\r\n            split,\r\n            address(0),\r\n            blueprintPlatformID\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deploy CreatorBlueprints and prepare blueprint on it \r\n     * @param creatorBlueprintsInput Object containing core CreatorBlueprints configuration \r\n     * @param blueprintPreparationConfig Object containing values needed to prepare blueprint\r\n     * @param primaryFees Primary fees data (recipients and allocations)\r\n     * @param royaltyCutBPS Total percentage of token purchases taken by royalty split on CreatorBlueprint deployed instance\r\n     * @param split Pre-existing royalty splits contract\r\n     * @param blueprintPlatformID Platform's identification of blueprint\r\n     */\r\n    function deployAndPrepareCreatorBlueprints(\r\n        CreatorBlueprints.CreatorBlueprintsInput calldata creatorBlueprintsInput,\r\n        IBlueprintTypes.BlueprintPreparationConfig calldata blueprintPreparationConfig,\r\n        IBlueprintTypes.PrimaryFees calldata primaryFees,\r\n        uint32 royaltyCutBPS,\r\n        address split,\r\n        string calldata blueprintPlatformID\r\n    ) external {\r\n        address blueprintContract = _deployCreatorBlueprints(\r\n            creatorBlueprintsInput,\r\n            royaltyCutBPS,\r\n            split,\r\n            address(this),\r\n            blueprintPlatformID\r\n        );\r\n\r\n        CreatorBlueprints(blueprintContract).prepareBlueprint(blueprintPreparationConfig, primaryFees);\r\n\r\n        // renounce role as minter\r\n        IAccessControlUpgradeable(blueprintContract).renounceRole(keccak256(\"MINTER_ROLE\"), address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Deploy CreatorBlueprints, deploy associated royalty splitter contract, and prepare blueprint\r\n     * @param creatorBlueprintsInput Object containing core CreatorBlueprints configuration \r\n     * @param blueprintPreparationConfig Object containing values needed to prepare blueprint\r\n     * @param primaryFees Primary fees data (recipients and allocations) \r\n     * @param royaltyRecipients Array of royalty recipients to encode into immutable royalty split\r\n     * @param allocations Array of allocations by percentage, given to members in royaltyRecipients \r\n     * @param royaltyCutBPS Total percentage of token purchases taken by royalty split on CreatorBlueprint deployed instance\r\n     * @param blueprintPlatformID Platform's identification of blueprint\r\n     */\r\n    function deployRoyaltySplitterAndPrepareCreatorBlueprints(\r\n        CreatorBlueprints.CreatorBlueprintsInput calldata creatorBlueprintsInput,\r\n        IBlueprintTypes.BlueprintPreparationConfig calldata blueprintPreparationConfig,\r\n        IBlueprintTypes.PrimaryFees calldata primaryFees,\r\n        address[] calldata royaltyRecipients, \r\n        uint32[] calldata allocations,\r\n        uint32 royaltyCutBPS,\r\n        string calldata blueprintPlatformID\r\n    ) external {\r\n        address split = ISplitMain(_splitMain).createSplit(\r\n            royaltyRecipients, \r\n            allocations, \r\n            0, \r\n            address(0)\r\n        );\r\n\r\n        address blueprintContract = _deployCreatorBlueprints(\r\n            creatorBlueprintsInput, \r\n            royaltyCutBPS,\r\n            split,\r\n            address(this),\r\n            blueprintPlatformID\r\n        );\r\n\r\n        CreatorBlueprints(blueprintContract).prepareBlueprint(blueprintPreparationConfig, primaryFees);\r\n\r\n        // renounce role as minter\r\n        IAccessControlUpgradeable(blueprintContract).renounceRole(keccak256(\"MINTER_ROLE\"), address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Used to predict royalty split address deployed via this factory. Result can be encoded into contract-level metadata before deployment.\r\n     * @param royaltyRecipients Array of royalty recipients to encode into immutable royalty split\r\n     * @param allocations Array of allocations by percentage, given to members in royaltyRecipients\r\n     */\r\n    function predictBlueprintsRoyaltiesSplitAddress(\r\n        address[] calldata royaltyRecipients, \r\n        uint32[] calldata allocations\r\n    ) external view returns(address) {\r\n        return ISplitMain(_splitMain).predictImmutableSplitAddress(\r\n            royaltyRecipients, \r\n            allocations, \r\n            0\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys CreatorBlueprints contract \r\n     * @param creatorBlueprintsInput Object containing core CreatorBlueprints configuration \r\n     * @param royaltyCutBPS Total percentage of token purchases taken by royalty split on CreatorBlueprint deployed instance\r\n     * @param split Pre-existing royalty splits contract \r\n     * @param extraMinter Extra account given MINTER_ROLE initially on CreatorBlueprint instance. Expected to be revoked in same transaction, if input is non-zero. \r\n     * @param blueprintPlatformID Platform's identification of blueprint\r\n     */\r\n    function _deployCreatorBlueprints(\r\n        CreatorBlueprints.CreatorBlueprintsInput calldata creatorBlueprintsInput, \r\n        uint32 royaltyCutBPS,\r\n        address split,\r\n        address extraMinter,\r\n        string calldata blueprintPlatformID\r\n    ) private returns (address) {\r\n        CreatorBlueprints.RoyaltyParameters memory royaltyParameters = CreatorBlueprints.RoyaltyParameters(split, royaltyCutBPS);\r\n        address creatorBlueprint = address(new BeaconProxy(\r\n            creatorBlueprintsBeacon,\r\n            abi.encodeWithSelector(\r\n                CreatorBlueprints(address(0)).initialize.selector, \r\n                creatorBlueprintsInput,\r\n                defaultCreatorBlueprintsAdmins,\r\n                royaltyParameters,\r\n                extraMinter\r\n            )\r\n        ));\r\n\r\n        emit CreatorBlueprintDeployed(\r\n            creatorBlueprint,\r\n            split,\r\n            blueprintPlatformID\r\n        ); \r\n\r\n        return creatorBlueprint;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner-only function to change the default addresses given privileges on CreatorBlueprints instances \r\n     * @param _newDefaultCreatorBlueprintsAdmins New set of default addresses\r\n     */\r\n    function changeDefaultCreatorBlueprintsAdmins(\r\n        IBlueprintTypes.Admins calldata _newDefaultCreatorBlueprintsAdmins\r\n    ) external onlyOwner {\r\n        require(\r\n            _newDefaultCreatorBlueprintsAdmins.platform != address(0) && \r\n            _newDefaultCreatorBlueprintsAdmins.asyncSaleFeesRecipient != address(0) && \r\n            _newDefaultCreatorBlueprintsAdmins.minter != address(0), \r\n            \"Invalid address\"\r\n        );\r\n        defaultCreatorBlueprintsAdmins = _newDefaultCreatorBlueprintsAdmins;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner-only function to change the default addresses given privileges on BlueprintV12 instances \r\n     * @param _newDefaultBlueprintV12Admins New set of default addresses\r\n     */\r\n    function changeDefaultBlueprintV12Admins(\r\n        IBlueprintTypes.Admins calldata _newDefaultBlueprintV12Admins\r\n    ) external onlyOwner {\r\n        require(\r\n            _newDefaultBlueprintV12Admins.platform != address(0) && \r\n            _newDefaultBlueprintV12Admins.asyncSaleFeesRecipient != address(0) && \r\n            _newDefaultBlueprintV12Admins.minter != address(0), \r\n            \"Invalid address\"\r\n        );\r\n        defaultBlueprintV12Admins = _newDefaultBlueprintV12Admins;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorBlueprintsBeaconUpgrader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"globalBlueprintsBeaconUpgrader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"globalBlueprintsMinter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorBlueprintsMinter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"splitMain\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factoryOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blueprintV12\",\"type\":\"address\"}],\"name\":\"BlueprintV12Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creatorBlueprint\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltySplit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"blueprintPlatformID\",\"type\":\"string\"}],\"name\":\"CreatorBlueprintDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorBlueprintsImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorBlueprintsBeacon\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"blueprintV12Implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"blueprintV12Beacon\",\"type\":\"address\"}],\"name\":\"FactoryDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blueprintV12Beacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asyncSaleFeesRecipient\",\"type\":\"address\"}],\"internalType\":\"struct IBlueprintTypes.Admins\",\"name\":\"_newDefaultBlueprintV12Admins\",\"type\":\"tuple\"}],\"name\":\"changeDefaultBlueprintV12Admins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asyncSaleFeesRecipient\",\"type\":\"address\"}],\"internalType\":\"struct IBlueprintTypes.Admins\",\"name\":\"_newDefaultCreatorBlueprintsAdmins\",\"type\":\"tuple\"}],\"name\":\"changeDefaultCreatorBlueprintsAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorBlueprintsBeacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultBlueprintV12Admins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asyncSaleFeesRecipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultCreatorBlueprintsAdmins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asyncSaleFeesRecipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"}],\"internalType\":\"struct CreatorBlueprints.CreatorBlueprintsInput\",\"name\":\"creatorBlueprintsInput\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"_capacity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"_price\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_blueprintMetaData\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseTokenUri\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleroot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_mintAmountArtist\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_mintAmountPlatform\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_maxPurchaseAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"_saleEndTimestamp\",\"type\":\"uint128\"}],\"internalType\":\"struct IBlueprintTypes.BlueprintPreparationConfig\",\"name\":\"blueprintPreparationConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"primaryFeeBPS\",\"type\":\"uint32[]\"},{\"internalType\":\"address[]\",\"name\":\"primaryFeeRecipients\",\"type\":\"address[]\"}],\"internalType\":\"struct IBlueprintTypes.PrimaryFees\",\"name\":\"primaryFees\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"royaltyCutBPS\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"blueprintPlatformID\",\"type\":\"string\"}],\"name\":\"deployAndPrepareCreatorBlueprints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"}],\"internalType\":\"struct CreatorBlueprints.CreatorBlueprintsInput\",\"name\":\"creatorBlueprintsInput\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"royaltyCutBPS\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"blueprintPlatformID\",\"type\":\"string\"}],\"name\":\"deployCreatorBlueprints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"}],\"internalType\":\"struct CreatorBlueprints.CreatorBlueprintsInput\",\"name\":\"creatorBlueprintsInput\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"royaltyRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"allocations\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"royaltyCutBPS\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"blueprintPlatformID\",\"type\":\"string\"}],\"name\":\"deployCreatorBlueprintsAndRoyaltySplitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"deployGlobalBlueprint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"}],\"internalType\":\"struct CreatorBlueprints.CreatorBlueprintsInput\",\"name\":\"creatorBlueprintsInput\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"_capacity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"_price\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_blueprintMetaData\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseTokenUri\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleroot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_mintAmountArtist\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_mintAmountPlatform\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_maxPurchaseAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"_saleEndTimestamp\",\"type\":\"uint128\"}],\"internalType\":\"struct IBlueprintTypes.BlueprintPreparationConfig\",\"name\":\"blueprintPreparationConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"primaryFeeBPS\",\"type\":\"uint32[]\"},{\"internalType\":\"address[]\",\"name\":\"primaryFeeRecipients\",\"type\":\"address[]\"}],\"internalType\":\"struct IBlueprintTypes.PrimaryFees\",\"name\":\"primaryFees\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"royaltyRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"allocations\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"royaltyCutBPS\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"blueprintPlatformID\",\"type\":\"string\"}],\"name\":\"deployRoyaltySplitterAndPrepareCreatorBlueprints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"royaltyRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"allocations\",\"type\":\"uint32[]\"}],\"name\":\"predictBlueprintsRoyaltiesSplitAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BlueprintsFactory", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "00000000000000000000000020c83a805c5720b69a1030622473d27783195ced00000000000000000000000020c83a805c5720b69a1030622473d27783195ced00000000000000000000000060874f721a66a2b9018c7cacc46151708864f52d00000000000000000000000060874f721a66a2b9018c7cacc46151708864f52d000000000000000000000000db8ac7027ce4a09c640ea07d582c700e78b955360000000000000000000000002ed6c4b5da6378c7897ac67ba9e43102feb694ee00000000000000000000000020c83a805c5720b69a1030622473d27783195ced", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c69d5edadb7f7cb6f8ac2b94f77ac865918833cee6924fc349a7dd9973dee333"}]}