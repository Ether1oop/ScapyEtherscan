{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/saita.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: NOLICENSE\\npragma solidity ^0.8.10;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IFactory{\\n        function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addTreasuryETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint treasury);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline) external;\\n\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n}\\n\\ncontract SaitaRealtyV2 is IERC20, Ownable {\\n\\n    mapping(address => uint256) private _rOwned;\\n    mapping(address => uint256) private _tOwned;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => bool) private _isExcluded;\\n    mapping(address => bool) private _isBot;\\n    mapping(address => bool) private _isPair;\\n\\n    address[] private _excluded;\\n    \\n    bool private swapping;\\n\\n    IRouter public router;\\n    address public pair;\\n\\n    uint8 private constant _decimals = 9;\\n    uint256 private constant MAX = ~uint256(0);\\n\\n    uint256 private _tTotal = 12e10 * 10**_decimals;\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n\\n    \\n    uint256 public swapTokensAtAmount = 1_000 * 10 ** 6;\\n    uint256 public maxTxAmount = 100_000_000_000 * 10**_decimals;\\n    \\n    // Anti Dump //\\n    mapping (address => uint256) public _lastTrade;\\n    bool public coolDownEnabled = true;\\n    uint256 public coolDownTime = 30 seconds;\\n\\n    address public capitalAddress = 0x22D5c2837FFB86392C81D3Be0aDe307F81AF10C1;\\n    address public marketingAddress = 0x2084f438b1EFf6Bd5FbdE57215eaB741CAC7aDb7;\\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\\n\\n    address public USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    string private constant _name = \\\"SaitaRealtyV2\\\";\\n    string private constant _symbol = \\\"SRLTY\\\";\\n\\n\\n    struct Taxes {\\n      uint256 reflection;\\n      uint256 capital;\\n      uint256 marketing;\\n      uint256 burn;\\n      uint256 treasury;\\n    }\\n\\n    Taxes private taxes = Taxes(10,10,10,10,50);\\n\\n    struct TotFeesPaidStruct {\\n        uint256 reflection;\\n        uint256 capital;\\n        uint256 marketing;\\n        uint256 burn;\\n        uint256 treasury;\\n    }\\n\\n    TotFeesPaidStruct public totFeesPaid;\\n\\n    struct valuesFromGetValues{\\n      uint256 rAmount;\\n      uint256 rTransferAmount;\\n      uint256 rReflection;\\n      uint256 rCapital;\\n      uint256 rMarketing;\\n      uint256 rBurn;\\n      uint256 rTreasury;\\n      uint256 tTransferAmount;\\n      uint256 tReflection;\\n      uint256 tCapital;\\n      uint256 tMarketing;\\n      uint256 tBurn;\\n      uint256 tTreasury;\\n    }\\n    \\n    struct splitETHStruct{\\n        uint256 capital;\\n        uint256 marketing;\\n    }\\n\\n    splitETHStruct private splitETH = splitETHStruct(40,10);\\n\\n    struct ETHAmountStruct{\\n        uint256 capital;\\n        uint256 marketing;\\n    }\\n\\n    ETHAmountStruct public ETHAmount;\\n\\n    event FeesChanged();\\n\\n    modifier lockTheSwap {\\n        swapping = true;\\n        _;\\n        swapping = false;\\n    }\\n\\n    modifier addressValidation(address _addr) {\\n        require(_addr != address(0), 'SaitaRealty: Zero address');\\n        _;\\n    }\\n\\n    constructor (address routerAddress, address owner_) {\\n        IRouter _router = IRouter(routerAddress);\\n        address _pair = IFactory(_router.factory())\\n            .createPair(address(this), _router.WETH());\\n\\n        router = _router;\\n        pair = _pair;\\n        \\n        addPair(pair);\\n    \\n        excludeFromReward(pair);\\n\\n        _setOwner(owner_);\\n\\n        _rOwned[owner()] = _rTotal;\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[capitalAddress] = true;\\n        _isExcludedFromFee[burnAddress] = true;\\n        _isExcludedFromFee[marketingAddress] = true;\\n\\n        emit Transfer(address(0), owner(), _tTotal);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    function isExcludedFromReward(address account) public view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n        require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount/currentRate;\\n    }\\n\\n    function excludeFromReward(address account) public onlyOwner {\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n        require(_excluded.length <= 200, \\\"Invalid length\\\");\\n        require(account != owner(), \\\"Owner cannot be excluded\\\");\\n        if(_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeInReward(address account) external onlyOwner() {\\n        require(_isExcluded[account], \\\"Account is not excluded\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n\\n    function excludeFromFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = true;\\n    }\\n\\n    function includeInFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = false;\\n    }\\n\\n\\n    function isExcludedFromFee(address account) public view returns(bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    function addPair(address _pair) public onlyOwner {\\n        _isPair[_pair] = true;\\n    }\\n\\n    function removePair(address _pair) public onlyOwner {\\n        _isPair[_pair] = false;\\n    }\\n\\n    function isPair(address account) public view returns(bool){\\n        return _isPair[account];\\n    }\\n\\n    function setTaxes(uint256 _reflection, uint256 _capital, uint256 _marketing, uint256 _burn, uint256 _treasury) public onlyOwner {\\n        taxes.reflection = _reflection;\\n        taxes.capital = _capital;\\n        taxes.marketing = _marketing;\\n        taxes.burn = _burn;\\n        taxes.treasury = _treasury;\\n        emit FeesChanged();\\n    }\\n\\n    function setSplitETH(uint256 _capital, uint256 _marketing) public onlyOwner {\\n        splitETH.capital = _capital;\\n        splitETH.marketing = _marketing;\\n        emit FeesChanged();\\n    }\\n\\n    function _reflectReflection(uint256 rReflection, uint256 tReflection) private {\\n        _rTotal -=rReflection;\\n        totFeesPaid.reflection += tReflection;\\n    }\\n\\n    function _takeTreasury(uint256 rTreasury, uint256 tTreasury) private {\\n        totFeesPaid.treasury += tTreasury;\\n        if(_isExcluded[address(this)]) _tOwned[address(this)] += tTreasury;\\n        _rOwned[address(this)] += rTreasury;\\n    }\\n\\n    function _takeCapital(uint256 rCapital, uint256 tCapital) private {\\n        totFeesPaid.capital += tCapital;\\n        if(_isExcluded[capitalAddress]) _tOwned[capitalAddress] += tCapital;\\n        _rOwned[capitalAddress] +=rCapital;\\n    }\\n    \\n    function _takeMarketing(uint256 rMarketing, uint256 tMarketing) private{\\n        totFeesPaid.marketing += tMarketing;\\n        if(_isExcluded[marketingAddress]) _tOwned[marketingAddress] += tMarketing;\\n        _rOwned[marketingAddress] += rMarketing;\\n    }\\n\\n    function _takeBurn(uint256 rBurn, uint256 tBurn) private {\\n        totFeesPaid.burn += tBurn;\\n        if(_isExcluded[marketingAddress])_tOwned[burnAddress] += tBurn;\\n        _rOwned[burnAddress] += rBurn;\\n    }\\n\\n    function _getValues(uint256 tAmount, uint8 takeFee) private  returns (valuesFromGetValues memory to_return) {\\n        to_return = _getTValues(tAmount, takeFee);\\n        (to_return.rAmount, to_return.rTransferAmount, to_return.rReflection, to_return.rCapital,to_return.rMarketing, to_return.rBurn, to_return.rTreasury) = _getRValues(to_return, tAmount, takeFee, _getRate());\\n        return to_return;\\n    }\\n\\n    function _getTValues(uint256 tAmount, uint8 takeFee) private returns (valuesFromGetValues memory s) {\\n\\n        if(takeFee == 0) {\\n          s.tTransferAmount = tAmount;\\n          return s;\\n        } else if(takeFee == 1){\\n            s.tReflection = (tAmount*taxes.reflection)/1000;\\n            s.tCapital = (tAmount*taxes.capital)/1000;\\n            s.tMarketing = tAmount*taxes.marketing/1000;\\n            s.tBurn = tAmount*taxes.burn/1000;\\n            s.tTreasury = tAmount*taxes.treasury/1000;\\n            ETHAmount.capital += s.tTreasury*splitETH.capital/taxes.treasury;\\n            ETHAmount.marketing += s.tTreasury*splitETH.marketing/taxes.treasury;\\n            s.tTransferAmount = tAmount-s.tReflection-s.tCapital-s.tTreasury-s.tMarketing-s.tBurn;\\n            return s;\\n        } else {\\n            s.tReflection = tAmount*taxes.reflection/1000;\\n            s.tMarketing = tAmount*taxes.marketing/1000;\\n            s.tBurn = tAmount*taxes.burn/1000;\\n            s.tTreasury = tAmount*splitETH.marketing/1000;\\n            ETHAmount.marketing += s.tTreasury;\\n            s.tTransferAmount = tAmount-s.tReflection-s.tTreasury-s.tMarketing-s.tBurn;\\n            return s;\\n        }\\n        \\n    }\\n\\n    function _getRValues(valuesFromGetValues memory s, uint256 tAmount, uint8 takeFee, uint256 currentRate) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rReflection,uint256 rCapital,uint256 rMarketing,uint256 rBurn,uint256 rTreasury) {\\n        rAmount = tAmount*currentRate;\\n\\n        if(takeFee == 0) {\\n          return(rAmount, rAmount, 0,0,0,0,0);\\n        }else if(takeFee == 1){\\n            rReflection = s.tReflection*currentRate;\\n            rCapital = s.tCapital*currentRate;\\n            rTreasury = s.tTreasury*currentRate;\\n            rMarketing = s.tMarketing*currentRate;\\n            rBurn = s.tBurn*currentRate;\\n            rTransferAmount =  rAmount-rReflection-rCapital-rTreasury-rMarketing-rBurn;\\n            return (rAmount, rTransferAmount, rReflection,rCapital,rMarketing,rBurn,rTreasury);\\n        }\\n        else{\\n            rReflection = s.tReflection*currentRate;\\n            rTreasury = s.tTreasury*currentRate;\\n            rMarketing = s.tMarketing*currentRate;\\n            rBurn = s.tBurn*currentRate;\\n            rTransferAmount =  rAmount-rReflection-rTreasury-rMarketing-rBurn;\\n            return (rAmount, rTransferAmount, rReflection,0,rMarketing,rBurn,rTreasury);\\n        }\\n\\n    }\\n\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply/tSupply;\\n    }\\n\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\n            rSupply = rSupply-_rOwned[_excluded[i]];\\n            tSupply = tSupply-_tOwned[_excluded[i]];\\n        }\\n\\n        if (rSupply < _rTotal/_tTotal) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Zero amount\\\");\\n        require(amount <= balanceOf(from),\\\"Insufficient balance\\\");\\n        require(!_isBot[from] && !_isBot[to], \\\"You are a bot\\\");\\n        require(amount <= maxTxAmount ,\\\"Amount is exceeding maxTxAmount\\\");\\n\\n        if (coolDownEnabled) {\\n            uint256 timePassed = block.timestamp - _lastTrade[from];\\n            require(timePassed > coolDownTime, \\\"You must wait coolDownTime\\\");\\n        }\\n        \\n        if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to] && !swapping) {//check this !swapping\\n            if(_isPair[from] || _isPair[to]) {\\n                _tokenTransfer(from, to, amount, 1);\\n            } else {\\n                _tokenTransfer(from, to, amount, 2);\\n            }\\n        } else {\\n            _tokenTransfer(from, to, amount, 0);\\n        }\\n\\n        _lastTrade[from] = block.timestamp;\\n        \\n        if(!swapping && from != pair && to != pair && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]){\\n            address[] memory path = new address[](3);\\n                path[0] = address(this);\\n                path[1] = router.WETH();\\n                path[2] = USDT;\\n            uint _amount = router.getAmountsOut(balanceOf(address(this)), path)[2];\\n            if(_amount >= swapTokensAtAmount) swapTokensForETH(balanceOf(address(this)));\\n        }\\n\\n    }\\n\\n\\n    //this method is responsible for taking all fee, if takeFee is true\\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, uint8 takeFee) private {\\n\\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee);\\n\\n        if (_isExcluded[sender] ) {  //from excluded\\n                _tOwned[sender] = _tOwned[sender] - tAmount;\\n        }\\n        if (_isExcluded[recipient]) { //to excluded\\n                _tOwned[recipient] = _tOwned[recipient] + s.tTransferAmount;\\n        }\\n\\n        _rOwned[sender] = _rOwned[sender]-s.rAmount;\\n        _rOwned[recipient] = _rOwned[recipient]+s.rTransferAmount;\\n        \\n        if(s.rReflection > 0 || s.tReflection > 0) _reflectReflection(s.rReflection, s.tReflection);\\n        if(s.rTreasury > 0 || s.tTreasury > 0) {\\n            _takeTreasury(s.rTreasury,s.tTreasury);\\n        }\\n        if(s.rCapital > 0 || s.tCapital > 0){\\n            _takeCapital(s.rCapital, s.tCapital);\\n            emit Transfer(sender, capitalAddress, s.tMarketing);\\n        }\\n        if(s.rMarketing > 0 || s.tMarketing > 0){\\n            _takeMarketing(s.rMarketing, s.tMarketing);\\n            emit Transfer(sender, marketingAddress, s.tMarketing);\\n        }\\n        if(s.rBurn > 0 || s.tBurn > 0){\\n            _takeBurn(s.rBurn, s.tBurn);\\n            emit Transfer(sender, burnAddress, s.tBurn);\\n        }\\n        \\n        emit Transfer(sender, recipient, s.tTransferAmount);\\n        if(s.tTreasury > 0){\\n        emit Transfer(sender, address(this), s.tTreasury);\\n        }\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmount) private lockTheSwap {\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n                path[0] = address(this);\\n                path[1] = router.WETH();\\n\\n        _approve(address(this), address(router), tokenAmount);\\n        // make the swap\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        (bool success, ) = capitalAddress.call{value: (ETHAmount.capital * address(this).balance)/tokenAmount}(\\\"\\\");\\n        require(success, 'ETH_TRANSFER_FAILED');\\n        ETHAmount.capital = 0;\\n\\n        (success, ) = marketingAddress.call{value: (ETHAmount.marketing * address(this).balance)/tokenAmount}(\\\"\\\");\\n        require(success, 'ETH_TRANSFER_FAILED');\\n        ETHAmount.marketing = 0;\\n    }\\n\\n    function updateCapitalWallet(address newWallet) external onlyOwner addressValidation(newWallet) {\\n        require(capitalAddress != newWallet, 'SaitaRealty: Wallet already set');\\n        capitalAddress = newWallet;\\n        _isExcludedFromFee[capitalAddress];\\n    }\\n\\n    function updateBurnWallet(address newWallet) external onlyOwner addressValidation(newWallet) {\\n        require(burnAddress != newWallet, 'SaitaRealty: Wallet already set');\\n        burnAddress = newWallet;\\n        _isExcludedFromFee[burnAddress];\\n    }\\n\\n    function updateMarketingWallet(address newWallet) external onlyOwner addressValidation(newWallet) {\\n        require(marketingAddress != newWallet, 'SaitaRealty: Wallet already set');\\n        marketingAddress = newWallet;\\n        _isExcludedFromFee[marketingAddress];\\n    }\\n\\n    function updateStableCoin(address _usdt) external onlyOwner  addressValidation(_usdt) {\\n        require(USDT != _usdt, 'SaitaRealty: Wallet already set');\\n        USDT = _usdt;\\n    }\\n\\n    function updateMaxTxAmt(uint256 amount) external onlyOwner {\\n        require(amount >= 100);\\n        maxTxAmount = amount * 10**_decimals;\\n    }\\n\\n    function updateSwapTokensAtAmount(uint256 amount) external onlyOwner {\\n        require(amount > 0);\\n        swapTokensAtAmount = amount * 10**6;\\n    }\\n\\n    function updateCoolDownSettings(bool _enabled, uint256 _timeInSeconds) external onlyOwner{\\n        coolDownEnabled = _enabled;\\n        coolDownTime = _timeInSeconds * 1 seconds;\\n    }\\n\\n    function setAntibot(address account, bool state) external onlyOwner{\\n        require(_isBot[account] != state, 'SaitaRealty: Value already set');\\n        _isBot[account] = state;\\n    }\\n    \\n    function bulkAntiBot(address[] memory accounts, bool state) external onlyOwner {\\n        require(accounts.length <= 100, \\\"SaitaRealty: Invalid\\\");\\n        for(uint256 i = 0; i < accounts.length; i++){\\n            _isBot[accounts[i]] = state;\\n        }\\n    }\\n    \\n    function updateRouterAndPair(address newRouter, address newPair) external onlyOwner {\\n        router = IRouter(newRouter);\\n        pair = newPair;\\n        addPair(pair);\\n    }\\n    \\n    function isBot(address account) public view returns(bool){\\n        return _isBot[account];\\n    }\\n    \\n    function airdropTokens(address[] memory recipients, uint256[] memory amounts) external onlyOwner {\\n        require(recipients.length == amounts.length,\\\"Invalid size\\\");\\n         address sender = msg.sender;\\n\\n         for(uint256 i; i<recipients.length; i++){\\n            address recipient = recipients[i];\\n            uint256 rAmount = amounts[i]*_getRate();\\n            _rOwned[sender] = _rOwned[sender]- rAmount;\\n            _rOwned[recipient] = _rOwned[recipient] + rAmount;\\n            emit Transfer(sender, recipient, amounts[i]);\\n         }\\n\\n        }\\n\\n    //Use this in case ETH are sent to the contract by mistake\\n    function rescueETH(uint256 weiAmount) external onlyOwner{\\n        require(address(this).balance >= weiAmount, \\\"insufficient ETH balance\\\");\\n        payable(owner()).transfer(weiAmount);\\n    }\\n    \\n    // Function to allow admin to claim *other* ERC20 tokens sent to this contract (by mistake)\\n    // Owner cannot transfer out catecoin from this smart contract\\n    function rescueAnyERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\\n        IERC20(_tokenAddr).transfer(_to, _amount);\\n    }\\n\\n    receive() external payable {\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETHAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"bulkAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolDownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolDownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"removePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAntibot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_capital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"}],\"name\":\"setSplitETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_capital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasury\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totFeesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateBurnWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateCapitalWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_timeInSeconds\",\"type\":\"uint256\"}],\"name\":\"updateCoolDownSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"updateRouterAndPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"name\":\"updateStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SaitaRealtyV2", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000c17e776cd218252adfca8d4e761d3fe757e97780000000000000000000000009aeb133ef8ed7a1c49b18e32b496e6793d1f123b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}