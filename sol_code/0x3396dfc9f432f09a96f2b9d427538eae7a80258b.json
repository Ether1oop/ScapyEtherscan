{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n// ALL RIGHTS RESERVED\r\n\r\npragma solidity =0.8.17;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDexRouter {\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n}\r\n\r\ninterface IDexPair {\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function sync() external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() external onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity =0.8.17;\r\ncontract NIHON is IERC20, Ownable  \r\n{\r\n    mapping (address => uint) private _balances;\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n    mapping(address => bool) private excludedFromLimits;\r\n    mapping(address => bool) public excludedFromFees;\r\n    mapping(address=>bool) public isAMM;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\r\n    bool public transferDelayEnabled = true;\r\n    \r\n    string private constant _name = 'Nihon Inu';\r\n    string private constant _symbol = 'NINU';\r\n\r\n    uint8 private constant _decimals=18;\r\n\r\n    uint private constant InitialSupply=10**9 * 10**_decimals;\r\n    uint public buyTax = 50; //10=1%  \r\n    uint public sellTax = 350;\r\n    uint public transferTax = 0;\r\n    uint public liquidityTax= 0;\r\n    uint public Tax= 1000; // lp+tax must equal 1000 // 1000=100%\r\n    uint public swapTreshold=10; //Dynamic Swap Threshold based on price impact. 1=0.1% max 10\r\n    uint public overLiquifyTreshold=100;\r\n    uint public LaunchTimestamp;\r\n    uint private devFee=100; //devfee+marketingfee must = 100 \r\n    uint private marketingFee= 0;\r\n    uint constant TAX_DENOMINATOR=1000;\r\n    uint constant MAXTAXDENOMINATOR=10;\r\n\r\n    uint256 public maxWalletBalance;\r\n    uint256 public maxTransactionAmount;\r\n    uint256 public percentForLPBurn = 25; // 25 = .25%\r\n    uint256 public lpBurnFrequency = 3600 seconds;\r\n    uint256 public lastLpBurnTime;\r\n    uint256 public manualBurnFrequency = 30 minutes;\r\n    uint256 public lastManualLpBurnTime;\r\n\r\n    bool private _isSwappingContractModifier;\r\n    bool public manualSwap;\r\n    bool public lpBurnEnabled = true;\r\n\r\n    IDexRouter private  _DexRouter;\r\n\r\n    address private _PairAddress; \r\n    address public marketingWallet;\r\n    address public devWallet; \r\n    address public constant burnWallet=address(0xdead);\r\n    address private constant DexRouter= 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; \r\n    \r\n    event ManualNukeLP();\r\n    event AutoNukeLP();\r\n    event MaxWalletBalanceUpdated(uint256 percent);\r\n    event OnSetTaxes(uint buy, uint sell, uint transfer_, uint project,uint liquidity);\r\n    event ExcludeAccount(address account, bool exclude);\r\n    event OnEnableTrading();\r\n    event OnReleaseLP();\r\n    event ExcludeFromLimits(address account, bool exclude);\r\n    event MarketingWalletChange(address newWallet);\r\n    event DevWalletChange(address newWallet);\r\n    event SharesUpdated(uint _devShare, uint _marketingShare);\r\n    event AMMadded(address AMM);\r\n    event ManualSwapOn(bool manual);\r\n    event ManualSwapPerformed();\r\n    event MaxTransactionAmountUpdated(uint256 percent);\r\n    event SwapThresholdChange(uint newSwapTresholdPermille);\r\n    event OverLiquifiedThresholdChange(uint newOverLiquifyTresholdPermille);\r\n    modifier lockTheSwap {\r\n        _isSwappingContractModifier = true;\r\n        _;\r\n        _isSwappingContractModifier = false;\r\n    }\r\n\r\n    constructor () {\r\n        uint ownerBalance=InitialSupply;\r\n        _balances[msg.sender] = ownerBalance;\r\n        emit Transfer(address(0), msg.sender, ownerBalance);\r\n\r\n        _DexRouter = IDexRouter(DexRouter);\r\n        _PairAddress = IDexFactory(_DexRouter.factory()).createPair(address(this), _DexRouter.WETH());\r\n        isAMM[_PairAddress]=true;\r\n        \r\n        marketingWallet= msg.sender; // address(0xdead)\r\n        devWallet= msg.sender; // msg.sendger\r\n\r\n        excludedFromFees[msg.sender]=true;\r\n        excludedFromFees[DexRouter]=true;\r\n        excludedFromFees[address(this)]=true;\r\n        excludedFromLimits[burnWallet] = true;\r\n        excludedFromLimits[address(this)] = true;\r\n    }\r\n    function ChangeMarketingWallet(address newWallet) external onlyOwner{\r\n        marketingWallet=newWallet;\r\n        emit MarketingWalletChange(newWallet);\r\n    }\r\n    function ChangeDevWallet(address newWallet) external onlyOwner{\r\n        devWallet=newWallet;\r\n        emit DevWalletChange(newWallet);\r\n    }\r\n    function SetFeeShares(uint _devFee, uint _marketingFee) external onlyOwner{\r\n        require(_devFee+_marketingFee<=100);\r\n        devFee=_devFee;\r\n        marketingFee=_marketingFee;\r\n        emit SharesUpdated(_devFee, _marketingFee);\r\n    }\r\n    function setRestrictionPercents(uint256 WALpercent, uint256 TXNpercent) external onlyOwner {\r\n        require(WALpercent >= 10, \"min 1%\"); // 10=1%\r\n        require(WALpercent <= 1000, \"max 100%\");\r\n        maxWalletBalance = InitialSupply * WALpercent / 1000;\r\n        require(TXNpercent >= 25, \"min 0.25%\");\r\n        require(TXNpercent <= 10000, \"max 100%\"); // 100=1%\r\n        maxTransactionAmount = InitialSupply * TXNpercent / 10000;\r\n        emit MaxWalletBalanceUpdated(WALpercent);\r\n        emit MaxTransactionAmountUpdated(TXNpercent);\r\n    }\r\n\r\n    function removeAllRestrictions() external onlyOwner {\r\n        maxWalletBalance = InitialSupply;\r\n        maxTransactionAmount = InitialSupply;\r\n        transferDelayEnabled = false;\r\n    }\r\n    function removetransferdelay() external onlyOwner {\r\n        transferDelayEnabled = false;\r\n    }    \r\n    function _transfer(address sender, address recipient, uint amount) private{\r\n        require(sender != address(0), \"Transfer from zero\");\r\n        require(recipient != address(0), \"Transfer to zero\");\r\n         if (transferDelayEnabled){\r\n                    if (recipient != owner() && recipient != DexRouter && recipient != _PairAddress){\r\n                        require(_holderLastTransferTimestamp[tx.origin] < block.number, \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\r\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                    }\r\n                }\r\n        if(excludedFromFees[sender] || excludedFromFees[recipient])\r\n            _feelessTransfer(sender, recipient, amount);\r\n        else { \r\n            require(LaunchTimestamp>0,\"trading not yet enabled\");\r\n            _taxedTransfer(sender,recipient,amount);                  \r\n        }\r\n    }\r\n    \r\n    function _taxedTransfer(address sender, address recipient, uint amount) private{\r\n        uint senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n        bool excludedAccount = excludedFromLimits[sender] || excludedFromLimits[recipient];\r\n        if (isAMM[sender] &&\r\n            !excludedAccount) {\r\n            require(\r\n                amount <= maxTransactionAmount,\r\n                \"Transfer amount exceeds the maxTxAmount.\"\r\n            );\r\n            uint256 contractBalanceRecepient = balanceOf(recipient);\r\n            require(\r\n                contractBalanceRecepient + amount <= maxWalletBalance,\r\n                \"Exceeds maximum wallet token amount.\"\r\n            );\r\n        } else if (\r\n            isAMM[recipient] &&\r\n            !excludedAccount\r\n        ) {\r\n            require(amount <= maxTransactionAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }\r\n\r\n        bool isBuy=isAMM[sender];\r\n        bool isSell=isAMM[recipient];\r\n        uint tax;\r\n        if(isSell){\r\n            tax=sellTax;\r\n        }else if(isBuy){\r\n            tax=buyTax;\r\n        }else{\r\n            tax=transferTax;\r\n        }\r\n\r\n        if((sender!=_PairAddress)&&(!manualSwap)&&(!_isSwappingContractModifier))\r\n            _swapContractToken(false);\r\n\r\n        if(!_isSwappingContractModifier && isAMM[recipient] && lpBurnEnabled && block.timestamp >= lastLpBurnTime + lpBurnFrequency){\r\n            autoBurnLPTokens();\r\n        }\r\n\r\n        uint contractToken=_calculateFee(amount, tax, Tax+liquidityTax);\r\n        uint taxedAmount=amount-contractToken;\r\n\r\n        _balances[sender]-=amount;\r\n        _balances[address(this)] += contractToken;\r\n        _balances[recipient]+=taxedAmount;\r\n        emit Transfer(sender,recipient,taxedAmount);\r\n    }\r\n    function _calculateFee(uint amount, uint tax, uint taxPercent) private pure returns (uint) {\r\n        return (amount*tax*taxPercent) / (TAX_DENOMINATOR*TAX_DENOMINATOR);\r\n    }\r\n    function _feelessTransfer(address sender, address recipient, uint amount) private{\r\n        uint senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n        _balances[sender]-=amount;\r\n        _balances[recipient]+=amount;      \r\n        emit Transfer(sender,recipient,amount);\r\n    }\r\n    function setSwapTreshold(uint newSwapTresholdPermille) external onlyOwner{\r\n        require(newSwapTresholdPermille<=10);//MaxTreshold= 1%\r\n        swapTreshold=newSwapTresholdPermille;\r\n        emit SwapThresholdChange(newSwapTresholdPermille);\r\n    }\r\n    function SetOverLiquifiedTreshold(uint newOverLiquifyTresholdPermille) external onlyOwner{\r\n        require(newOverLiquifyTresholdPermille<=1000);\r\n        overLiquifyTreshold=newOverLiquifyTresholdPermille;\r\n        emit OverLiquifiedThresholdChange(newOverLiquifyTresholdPermille);\r\n    }\r\n    function SetTaxes(uint buy, uint sell, uint transfer_, uint tax,uint liquidity) external onlyOwner{\r\n        uint maxTax=400; // 10= 1%\r\n        require(buy<=maxTax&&sell<=maxTax&&transfer_<=maxTax,\"Tax exceeds maxTax\");\r\n        require(tax+liquidity==TAX_DENOMINATOR,\"Taxes don't add up to denominator\");\r\n        buyTax=buy;\r\n        sellTax=sell;\r\n        transferTax=transfer_;\r\n        Tax=tax;\r\n        liquidityTax=liquidity;\r\n        emit OnSetTaxes(buy, sell, transfer_, tax, liquidity);\r\n    }\r\n    function isOverLiquified() public view returns(bool){\r\n        return _balances[_PairAddress]>getCirculatingSupply()*overLiquifyTreshold/1000;\r\n    }\r\n    function _swapContractToken(bool ignoreLimits) private lockTheSwap{\r\n        uint contractBalance=_balances[address(this)];\r\n        uint totalTax=liquidityTax+Tax;\r\n        uint tokenToSwap=_balances[_PairAddress]*swapTreshold/1000;\r\n        if(totalTax==0)return;\r\n        if(ignoreLimits)\r\n            tokenToSwap=_balances[address(this)];\r\n        else if(contractBalance<tokenToSwap)\r\n            return;\r\n\r\n        uint tokenForLiquidity=\r\n        isOverLiquified()?0\r\n        :(tokenToSwap*liquidityTax)/totalTax;\r\n\r\n        uint tokenForProject= tokenToSwap-tokenForLiquidity;\r\n\r\n        uint LiqHalf=tokenForLiquidity/2;\r\n        uint swapToken=LiqHalf+tokenForProject;\r\n        uint initialETHBalance=address(this).balance;\r\n        _swapTokenForETH(swapToken);\r\n        uint newETH=(address(this).balance - initialETHBalance);\r\n\r\n        if(tokenForLiquidity>0){\r\n            uint liqETH = (newETH*LiqHalf)/swapToken;\r\n            _addLiquidity(LiqHalf, liqETH);\r\n        }\r\n        uint marketbalance=address(this).balance * marketingFee/100;\r\n        uint devbalance=address(this).balance * devFee/100;\r\n        if(marketbalance>0){\r\n        (bool marketing,)=marketingWallet.call{value:marketbalance}(\"\");\r\n        marketing=true;\r\n        }\r\n        if(devbalance>0){\r\n        (bool dev,)=devWallet.call{value:devbalance}(\"\");\r\n        dev=true;\r\n        }\r\n    }\r\n    function _swapTokenForETH(uint amount) private {\r\n        _approve(address(this), address(_DexRouter), amount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _DexRouter.WETH();\r\n\r\n        try _DexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ){}\r\n        catch{}\r\n    }\r\n    function _addLiquidity(uint tokenamount, uint ethamount) private {\r\n        _approve(address(this), address(_DexRouter), tokenamount);\r\n        _DexRouter.addLiquidityETH{value: ethamount}(\r\n            address(this),\r\n            tokenamount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function getBurnedTokens() external view returns(uint){\r\n        return _balances[address(0xdead)];\r\n    }\r\n    function getCirculatingSupply() public view returns(uint){\r\n        return InitialSupply-_balances[address(0xdead)];\r\n    }\r\n    function SetAMM(address AMM, bool Add) external onlyOwner{\r\n        require(AMM!=_PairAddress,\"can't change uniswap\");\r\n        isAMM[AMM]=Add;\r\n        emit AMMadded(AMM);\r\n    }\r\n    function SwitchManualSwap(bool manual) external onlyOwner{\r\n        manualSwap=manual;\r\n        emit ManualSwapOn(manual);\r\n    }\r\n    function SwapContractToken() external onlyOwner{\r\n        _swapContractToken(true);\r\n        emit ManualSwapPerformed();\r\n    }\r\n    function ExcludeAccountFromFees(address account, bool exclude) external onlyOwner{\r\n        require(account!=address(this),\"can't Include the contract\");\r\n        excludedFromFees[account]=exclude;\r\n        emit ExcludeAccount(account,exclude);\r\n    }\r\n    function setExcludedAccountFromLimits(address account, bool exclude) external onlyOwner{\r\n        excludedFromLimits[account]=exclude;\r\n        emit ExcludeFromLimits(account,exclude);\r\n    }\r\n    function isExcludedFromLimits(address account) external view returns(bool) {\r\n        return excludedFromLimits[account];\r\n    }\r\n    function EnableTrading() external onlyOwner{\r\n        require(LaunchTimestamp==0,\"AlreadyLaunched\");\r\n        LaunchTimestamp=block.timestamp;\r\n        maxWalletBalance = InitialSupply * 20 / 1000;// 10=1%  \r\n        maxTransactionAmount = InitialSupply * 150 / 10000;// 100=1%  \r\n        emit OnEnableTrading();\r\n    }\r\n    function ReleaseLP() external onlyOwner {\r\n        IERC20 liquidityToken = IERC20(_PairAddress);\r\n        uint amount = liquidityToken.balanceOf(address(this));\r\n        liquidityToken.transfer(msg.sender, amount);\r\n        emit OnReleaseLP();\r\n    }\r\n    function setAutoLPBurnSettings(uint256 _frequencyInSeconds, uint256 _percent, bool _Enabled) external onlyOwner {\r\n        require(_frequencyInSeconds >= 600, \"cannot set buyback more often than every 10 minutes\");\r\n        require(_percent <= 1000 && _percent >= 0, \"Must set auto LP burn percent between 0% and 10%\");\r\n        lpBurnFrequency = _frequencyInSeconds;\r\n        percentForLPBurn = _percent;\r\n        lpBurnEnabled = _Enabled;\r\n    }\r\n    function autoBurnLPTokens() internal returns (bool){\r\n        lastLpBurnTime = block.timestamp;\r\n        uint256 liquidityPairBalance = this.balanceOf(_PairAddress);\r\n        uint256 amountToBurn = liquidityPairBalance * percentForLPBurn/10000;\r\n        if (amountToBurn > 0){\r\n            _balances[_PairAddress]-=amountToBurn;\r\n            _balances[burnWallet]+=amountToBurn;\r\n            emit Transfer(_PairAddress,burnWallet,amountToBurn);\r\n        }\r\n        IDexPair pair = IDexPair(_PairAddress);\r\n        pair.sync();\r\n        emit AutoNukeLP();\r\n        return true;\r\n    }\r\n\r\n    function manualBurnLPTokens(uint256 percent) external onlyOwner returns (bool){\r\n        require(block.timestamp > lastManualLpBurnTime + manualBurnFrequency , \"Must wait for cooldown to finish\");\r\n        require(percent <= 1000, \"May not nuke more than 10% of tokens in LP\");\r\n        lastManualLpBurnTime = block.timestamp;\r\n        uint256 liquidityPairBalance = this.balanceOf(_PairAddress);\r\n        uint256 amountToBurn = liquidityPairBalance * percent/10000;\r\n        if (amountToBurn > 0){\r\n            _balances[_PairAddress]-=amountToBurn;\r\n            _balances[burnWallet]+=amountToBurn;\r\n            emit Transfer(_PairAddress,burnWallet,amountToBurn);\r\n        }\r\n        IDexPair pair = IDexPair(_PairAddress);\r\n        pair.sync();\r\n        emit ManualNukeLP();\r\n        return true;\r\n    }\r\n    \r\n    function getOwner() external view override returns (address) {return owner();}\r\n    function name() external pure override returns (string memory) {return _name;}\r\n    function symbol() external pure override returns (string memory) {return _symbol;}\r\n    function decimals() external pure override returns (uint8) {return _decimals;}\r\n    function totalSupply() external pure override returns (uint) {return InitialSupply;}\r\n    function balanceOf(address account) public view override returns (uint) {return _balances[account];}\r\n    function allowance(address _owner, address spender) external view override returns (uint) {return _allowances[_owner][spender];}\r\n    function transfer(address recipient, uint amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function approve(address spender, uint amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint amount) private {\r\n        require(owner != address(0), \"Approve from zero\");\r\n        require(spender != address(0), \"Approve to zero\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function transferFrom(address sender, address recipient, uint amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"Transfer > allowance\");\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint subtractedValue) external returns (bool) {\r\n        uint currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"<0 allowance\");\r\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"AMM\",\"type\":\"address\"}],\"name\":\"AMMadded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AutoNukeLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"DevWalletChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"ExcludeAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"ExcludeFromLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ManualNukeLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"manual\",\"type\":\"bool\"}],\"name\":\"ManualSwapOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ManualSwapPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"MaxTransactionAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"MaxWalletBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OnEnableTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OnReleaseLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transfer_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"project\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"OnSetTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOverLiquifyTresholdPermille\",\"type\":\"uint256\"}],\"name\":\"OverLiquifiedThresholdChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_devShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_marketingShare\",\"type\":\"uint256\"}],\"name\":\"SharesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapTresholdPermille\",\"type\":\"uint256\"}],\"name\":\"SwapThresholdChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"ChangeDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"ChangeMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"ExcludeAccountFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LaunchTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReleaseLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AMM\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"Add\",\"type\":\"bool\"}],\"name\":\"SetAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"SetFeeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOverLiquifyTresholdPermille\",\"type\":\"uint256\"}],\"name\":\"SetOverLiquifiedTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"SetTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SwapContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"manual\",\"type\":\"bool\"}],\"name\":\"SwitchManualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Tax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAMM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLpBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastManualLpBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBurnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBurnFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualBurnFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"manualBurnLPTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overLiquifyTreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentForLPBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllRestrictions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removetransferdelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frequencyInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_Enabled\",\"type\":\"bool\"}],\"name\":\"setAutoLPBurnSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"setExcludedAccountFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"WALpercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TXNpercent\",\"type\":\"uint256\"}],\"name\":\"setRestrictionPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapTresholdPermille\",\"type\":\"uint256\"}],\"name\":\"setSwapTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NIHON", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "150", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9ec7ff6d076b5ba0e0f5857d6e808431a23ff749f1309f4d7acfe7dbf89696d9"}]}