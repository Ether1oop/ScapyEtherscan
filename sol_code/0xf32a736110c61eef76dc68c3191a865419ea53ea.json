{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/utils/Counters.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: NFTYDVesting.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n\r\n\r\ncontract NFTYDVesting is Ownable, Pausable {\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _grantIds;\r\n    uint256 private constant GENESIS_TIMESTAMP = 1654041600; // June 1, 2022 00:00:00 UTC (arbitrary date/time for timestamp validatio\r\n    address private treasuryAddress; // Treasury address for vesting\r\n    IERC20 public tokenContract; //NFTYD token contract\r\n\r\n    struct VestingGrant {\r\n        uint256 grantId; //Unique GrantID for every issued grant\r\n        bool isGranted; // Flag to indicate grant was issued\r\n        address issuer; // Account that issued grant\r\n        address beneficiary; // Beneficiary of grant\r\n        uint256 grantDreams; // Number of dreams granted\r\n        uint256 startTimestamp; // Start date/time of vesting\r\n        uint256 cliffTimestamp; // Cliff date/time for vesting\r\n        uint256 endTimestamp; // End date/time of vesting\r\n        bool isRevocable; // Whether issuer can revoke and reclaim dreams\r\n        bool isLockedGrant; // True for timelock and False for regular grants\r\n        uint256 releasedDreams; // Number of dreams already released\r\n    }\r\n\r\n    mapping(address => uint256[]) public AccountGrants; // GrantIDs associated with the address\r\n    mapping(uint256 => VestingGrant) public VestingGrants; // Grant ID to grant mapping\r\n    mapping(address => bool) public authorizedAddresses; // Token grants subject to vesting\r\n\r\n    /* Vesting Events */\r\n    event Grant(\r\n        // Fired when an account grants tokens to another account on a vesting schedule\r\n        address indexed owner,\r\n        address indexed beneficiary,\r\n        uint256 value\r\n    );\r\n\r\n    event Timelock(\r\n        // Fired when an account grants tokens to another account on a timelock schedule\r\n        address indexed owner,\r\n        address indexed beneficiary,\r\n        uint256 value\r\n    );\r\n\r\n    event Revoke(\r\n        // Fired when an account revokes previously granted unvested tokens to another account\r\n        address indexed owner,\r\n        address indexed beneficiary,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Constructor\r\n     *\r\n     * @param  _tokenContract Address of the NFTYD token contract\r\n     */\r\n    constructor(address payable _tokenContract, address payable _treasury) {\r\n        treasuryAddress = _treasury;\r\n        tokenContract = IERC20(_tokenContract);\r\n        authorizedAddresses[msg.sender] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Authorizes a smart contract to call this contract\r\n     *\r\n     * @param account Address of the calling smart contract\r\n     */\r\n    function setAuthorizeAddress(address account)\r\n        external\r\n        whenNotPaused\r\n        onlyOwner\r\n    {\r\n        require(account != address(0), \"Account must be a valid address\");\r\n        authorizedAddresses[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Deauthorizes a previously authorized smart contract from calling this contract\r\n     *\r\n     * @param account Address of the calling smart contract\r\n     */\r\n    function deauthorizeAddress(address account)\r\n        external\r\n        whenNotPaused\r\n        onlyOwner\r\n    {\r\n        require(account != address(0), \"Account must be a valid address\");\r\n        authorizedAddresses[account] = false;\r\n    }\r\n\r\n    function setTreasuryAddress(address _treasury) public {\r\n        require(authorizedAddresses[msg.sender], \"Sender not authorized.\");\r\n        treasuryAddress = _treasury;\r\n    }\r\n\r\n    function setTokenContract(address _tokenAddress) public {\r\n        require(authorizedAddresses[msg.sender], \"Sender not authorized.\");\r\n        tokenContract = IERC20(_tokenAddress);\r\n    }\r\n\r\n    function grantBulk(\r\n        address[] calldata beneficiary,\r\n        uint256[] calldata dreams,\r\n        uint256[] calldata startTimestamp,\r\n        uint256[] calldata cliffSeconds,\r\n        uint256[] calldata vestingSeconds,\r\n        bool[] calldata revocable\r\n    ) public whenNotPaused {\r\n        require(authorizedAddresses[msg.sender], \"Sender not authorized\");\r\n        for (uint256 i = 0; i < beneficiary.length; i++) {\r\n            grant(\r\n                beneficiary[i],\r\n                dreams[i],\r\n                startTimestamp[i],\r\n                cliffSeconds[i],\r\n                vestingSeconds[i],\r\n                revocable[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function timelockBulk(\r\n        address[] calldata beneficiary,\r\n        uint256[] calldata dreams,\r\n        uint256[] calldata startTimestamp,\r\n        uint256[] calldata cliffSeconds,\r\n        bool[] calldata revocable\r\n    ) public whenNotPaused {\r\n        require(authorizedAddresses[msg.sender], \"Sender not authorized\");\r\n        for (uint256 i = 0; i < beneficiary.length; i++) {\r\n            timelock(\r\n                beneficiary[i],\r\n                dreams[i],\r\n                startTimestamp[i],\r\n                cliffSeconds[i],\r\n                revocable[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Grants a beneficiary dreams using a vesting schedule\r\n     *\r\n     * @param beneficiary The account to whom dreams are being granted\r\n     * @param dreams dreams that are granted but not vested\r\n     * @param startTimestamp Date/time when vesting begins\r\n     * @param cliffSeconds Date/time prior to which tokens vest but cannot be released\r\n     * @param vestingSeconds Vesting duration (also known as vesting term)\r\n     * @param revocable Indicates whether the granting account is allowed to revoke the grant\r\n     */\r\n\r\n    function grant(\r\n        address beneficiary,\r\n        uint256 dreams,\r\n        uint256 startTimestamp,\r\n        uint256 cliffSeconds,\r\n        uint256 vestingSeconds,\r\n        bool revocable\r\n    ) public whenNotPaused {\r\n        require(authorizedAddresses[msg.sender], \"Sender not authorized\");\r\n        require(beneficiary != address(0), \"Account must be a valid address\");\r\n        uint256 dreamsAmount = dreams * 1e18;\r\n        require(\r\n            (dreamsAmount > 0 &&\r\n                dreamsAmount <= tokenContract.balanceOf(treasuryAddress)),\r\n            \"Tokens must be greater than zero\"\r\n        ); // Dreams must be greater than zero and treasury has enough dreams\r\n        require(startTimestamp >= GENESIS_TIMESTAMP, \"Invalid startTimestamp\"); // Just a way to prevent really old dates\r\n        require(vestingSeconds > 0, \"Duration must be greater than zero\");\r\n        require(cliffSeconds >= 0, \"Cliff must be greater than zero\");\r\n        require(\r\n            cliffSeconds < vestingSeconds,\r\n            \"Cliff must be lesser than vestingSeconds\"\r\n        );\r\n\r\n        _grantIds.increment();\r\n        AccountGrants[beneficiary].push(_grantIds.current());\r\n\r\n        createGrant(\r\n            _grantIds.current(),\r\n            beneficiary,\r\n            dreamsAmount,\r\n            startTimestamp,\r\n            cliffSeconds,\r\n            vestingSeconds,\r\n            revocable,\r\n            false // Vesting grant is always false\r\n        );\r\n\r\n        tokenContract.transferFrom(\r\n            treasuryAddress,\r\n            address(this),\r\n            dreamsAmount\r\n        );\r\n\r\n        emit Grant(msg.sender, beneficiary, dreamsAmount); // Fire event\r\n    }\r\n\r\n    function timelock(\r\n        address beneficiary,\r\n        uint256 dreams,\r\n        uint256 startTimestamp,\r\n        uint256 cliffSeconds,\r\n        bool revocable\r\n    ) public whenNotPaused {\r\n        require(authorizedAddresses[msg.sender], \"Sender not authorized\");\r\n        require(beneficiary != address(0), \"Account must be a valid address\");\r\n        uint256 dreamsAmount = dreams * 1e18;\r\n        require(\r\n            (dreamsAmount > 0 &&\r\n                dreamsAmount <= tokenContract.balanceOf(treasuryAddress)),\r\n            \"Tokens must be greater than zero\"\r\n        ); // Dreams must be greater than zero and treasury has enough dreams\r\n        require(startTimestamp >= GENESIS_TIMESTAMP, \"Invalid startTimestamp\"); // Just a way to prevent really old dates\r\n        require(cliffSeconds >= 0, \"Cliff must be greater than zero\");\r\n\r\n        _grantIds.increment();\r\n        AccountGrants[beneficiary].push(_grantIds.current());\r\n\r\n        createGrant(\r\n            _grantIds.current(),\r\n            beneficiary,\r\n            dreamsAmount,\r\n            startTimestamp,\r\n            cliffSeconds,\r\n            0, // Timelock grant has no Vesting Seconds\r\n            revocable,\r\n            true // Timelock grant is always true\r\n        );\r\n\r\n        tokenContract.transferFrom(\r\n            treasuryAddress,\r\n            address(this),\r\n            dreamsAmount\r\n        );\r\n\r\n        emit Timelock(msg.sender, beneficiary, dreamsAmount); // Fire event\r\n    }\r\n\r\n    function createGrant(\r\n        uint256 grantId,\r\n        address beneficiary,\r\n        uint256 dreams,\r\n        uint256 startTimestamp,\r\n        uint256 cliffSeconds,\r\n        uint256 vestingSeconds,\r\n        bool revocable,\r\n        bool isLockedGrant\r\n    ) internal {\r\n        VestingGrant storage newGrant = VestingGrants[grantId];\r\n        newGrant.grantId = grantId;\r\n        newGrant.isGranted = true;\r\n        newGrant.issuer = msg.sender;\r\n        newGrant.beneficiary = beneficiary;\r\n        newGrant.grantDreams = dreams;\r\n        newGrant.startTimestamp = startTimestamp;\r\n        newGrant.cliffTimestamp = startTimestamp + cliffSeconds;\r\n        newGrant.endTimestamp = startTimestamp + cliffSeconds + vestingSeconds;\r\n        newGrant.isRevocable = revocable;\r\n        newGrant.isLockedGrant = isLockedGrant;\r\n        newGrant.releasedDreams = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets total grant balance for caller\r\n     *\r\n     */\r\n    function getTotalGrantedDreamsOf(address account)\r\n        external\r\n        view\r\n        returns (uint256 dreams)\r\n    {\r\n        uint256[] memory userGrantsIds = AccountGrants[account];\r\n        for (uint256 i = 0; i < userGrantsIds.length; i++) {\r\n            uint256 id = userGrantsIds[i];\r\n            if (VestingGrants[id].isGranted) {\r\n                dreams += VestingGrants[id].grantDreams;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Gets tokens claimed by the caller\r\n     *\r\n     */\r\n    function getClaimedDreamsOf(address account)\r\n        external\r\n        view\r\n        returns (uint256 dreams)\r\n    {\r\n        uint256[] memory userGrantsIds = AccountGrants[account];\r\n        for (uint256 i = 0; i < userGrantsIds.length; i++) {\r\n            uint256 id = userGrantsIds[i];\r\n            dreams += VestingGrants[id].releasedDreams;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Gets token balance currently under vesting/locked for caller\r\n     *\r\n     */\r\n    function getLockedDreamsOf(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (getCurrentGrantBalanceOf(account) -\r\n            getUnclaimedDreams(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Gets current grant balance for an account (locked + unclaimed)\r\n     *\r\n     * The return value subtracts dreams that have previously\r\n     * been released.\r\n     *\r\n     * @param account Account whose grant balance is returned\r\n     *\r\n     */\r\n    function getCurrentGrantBalanceOf(address account)\r\n        public\r\n        view\r\n        returns (uint256 grantBalance)\r\n    {\r\n        require(account != address(0), \"Account must be a valid address\");\r\n        require(AccountGrants[account].length > 0, \"Account must be granted\");\r\n        uint256[] memory userGrantsIds = AccountGrants[account];\r\n        for (uint256 i = 0; i < userGrantsIds.length; i++) {\r\n            uint256 id = userGrantsIds[i];\r\n            if (VestingGrants[id].isGranted) {\r\n                grantBalance += (VestingGrants[id].grantDreams -\r\n                    (VestingGrants[id].releasedDreams));\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAccountGrantsIds(address _account)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return AccountGrants[_account];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets tokens available to claim for caller\r\n     *\r\n     */\r\n    function getUnclaimedDreams(address account)\r\n        public\r\n        view\r\n        returns (uint256 dreams)\r\n    {\r\n        uint256[] memory userGrantsIds = AccountGrants[account];\r\n        for (uint256 i = 0; i < userGrantsIds.length; i++) {\r\n            uint256 id = userGrantsIds[i];\r\n            if (VestingGrants[id].isGranted) {\r\n                dreams += getReleasableDreamsForGrant(id);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns releasableDreams of an account\r\n     *\r\n     * @param id  Account whose releasable dreams will be calculated\r\n     */\r\n\r\n    function getReleasableDreamsForGrant(uint256 id)\r\n        internal\r\n        view\r\n        returns (uint256 releasableDreams)\r\n    {\r\n        VestingGrant memory userGrant = VestingGrants[id];\r\n        if (userGrant.cliffTimestamp > block.timestamp) {\r\n            releasableDreams = 0;\r\n        } else if (block.timestamp >= userGrant.endTimestamp) {\r\n            releasableDreams =\r\n                userGrant.grantDreams -\r\n                (userGrant.releasedDreams);\r\n        } else {\r\n            // Calculate vesting rate per second\r\n            uint256 duration = (userGrant.endTimestamp -\r\n                (userGrant.cliffTimestamp));\r\n\r\n            // Calculate how many dreams can be released\r\n            uint256 secondsPassed = (block.timestamp -\r\n                userGrant.cliffTimestamp);\r\n\r\n            uint256 vestedDreams = ((userGrant.grantDreams * secondsPassed) /\r\n                duration);\r\n            releasableDreams = vestedDreams - (userGrant.releasedDreams);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Releases dreams that have been vested for caller\r\n     *\r\n     */\r\n    function release() external {\r\n        releaseFor(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Releases dreams that have been vested for an account (Claim)\r\n     *\r\n     * @param account Account whose dreams will be released\r\n     *\r\n     */\r\n    function releaseFor(address account) public {\r\n        require(account != address(0), \"Account must be a valid address\");\r\n        require(AccountGrants[account].length > 0, \"Account must be granted\");\r\n        uint256[] memory userGrantsIds = AccountGrants[account];\r\n        uint256 releasableDreams = 0;\r\n        for (uint256 i = 0; i < userGrantsIds.length; i++) {\r\n            uint256 id = userGrantsIds[i];\r\n            if (VestingGrants[id].isGranted) {\r\n                uint256 releasableDreamsForGrant = getReleasableDreamsForGrant(\r\n                    id\r\n                );\r\n\r\n                if (releasableDreamsForGrant > 0) {\r\n                    // Update the released dreams counter\r\n                    VestingGrants[id].releasedDreams =\r\n                        VestingGrants[id].releasedDreams +\r\n                        (releasableDreamsForGrant);\r\n                    releasableDreams += releasableDreamsForGrant;\r\n                }\r\n            }\r\n        }\r\n        if (releasableDreams > 0) {\r\n            tokenContract.transfer(account, releasableDreams);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes previously issued vesting grant\r\n     *\r\n     * For a grant to be revoked, it must be revocable.\r\n     * In addition, only the unreleased tokens can be revoked.\r\n     *\r\n     * @param grantId Account for which a prior grant will be revoked\r\n     */\r\n    function revoke(uint256 grantId) public whenNotPaused {\r\n        require(VestingGrants[grantId].isGranted, \"Tokens must be granted\");\r\n        require(VestingGrants[grantId].isRevocable, \"Tokens must be revocable\");\r\n        require(authorizedAddresses[msg.sender], \"Not an authorized address\"); // Only the original issuer can revoke a grant\r\n\r\n        // Set the isGranted flag to false to prevent any further\r\n        // actions on this grant from ever occurring\r\n        VestingGrants[grantId].isGranted = false;\r\n\r\n        // Get the remaining balance of the grant\r\n        uint256 balanceDreams = VestingGrants[grantId].grantDreams -\r\n            (VestingGrants[grantId].releasedDreams);\r\n\r\n        // If there is any balance left, return it to the issuer\r\n        if (balanceDreams > 0) {\r\n            tokenContract.transfer(treasuryAddress, balanceDreams);\r\n        }\r\n\r\n        emit Revoke(\r\n            VestingGrants[grantId].issuer,\r\n            VestingGrants[grantId].beneficiary,\r\n            balanceDreams\r\n        );\r\n    }\r\n\r\n    function recoverETH() external onlyOwner {\r\n        require(payable(msg.sender).send(address(this).balance));\r\n    }\r\n\r\n    function recoverERC20(IERC20 erc20Contract) external onlyOwner {\r\n        erc20Contract.transfer(\r\n            msg.sender,\r\n            erc20Contract.balanceOf(address(this))\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Grant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Timelock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AccountGrants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"VestingGrants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"grantId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isGranted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"grantDreams\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRevocable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLockedGrant\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"releasedDreams\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"deauthorizeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountGrantsIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getClaimedDreamsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dreams\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentGrantBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"grantBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLockedDreamsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTotalGrantedDreamsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dreams\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUnclaimedDreams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dreams\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dreams\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"grant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"beneficiary\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dreams\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startTimestamp\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"cliffSeconds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"vestingSeconds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"revocable\",\"type\":\"bool[]\"}],\"name\":\"grantBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20Contract\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releaseFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"grantId\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setAuthorizeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dreams\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"timelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"beneficiary\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dreams\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startTimestamp\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"cliffSeconds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"revocable\",\"type\":\"bool[]\"}],\"name\":\"timelockBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTYDVesting", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a899ea5773bc26b0fd61d4c3ea393fe019787cbe0000000000000000000000007039ab88e96808e5d40b02a1739e94d53a336d63", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://242a93c7e28113a34a3ee9788d528196b38542e44f8e04b309ce3b04da230fb4"}]}