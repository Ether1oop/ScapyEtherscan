{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address lpPair,\r\n        uint256\r\n    );\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address lpPair);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address lpPair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\n////////CONTRACT//IMPLEMENTATION/////////\r\n\r\ncontract WIZ is Context, IERC20 {\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private constant _name = \"WIZ\";\r\n    string private constant _symbol = \"WIZ\";\r\n    uint8 private constant _decimals = 4;\r\n\r\n    uint256 private constant _totalSupply = 100_000_000_000 * (10**_decimals);\r\n    uint256 private constant _tTotal = _totalSupply;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    uint private _feesAndLimitsStartTimestamp;\r\n    bool private _inLiquidityOperation;\r\n\r\n    uint16 public constant buyFeeReflect = 0;\r\n    uint16 public constant buyFeeBurn = 0;\r\n    uint16 public constant buyFeeMarketing = 100;\r\n    uint16 public constant buyFeeTotalSwap = 300;\r\n\r\n    uint16 public constant sellFeeReflect = 250;\r\n    uint16 public constant sellFeeBurn = 50;\r\n    uint16 public constant sellFeeMarketing = 0;\r\n    uint16 public constant sellFeeTotalSwap = 500;\r\n\r\n    uint16 public constant ratioLiquidity = 200;\r\n    uint16 public constant ratioTreasury = 600;\r\n    uint16 public constant ratioTotal = 800;\r\n\r\n    uint256 public constant feeDivisor = 10000;\r\n\r\n    address public constant dexRouterAddress =\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    IUniswapV2Router02 public dexRouter;\r\n    address public lpPair;\r\n\r\n    address public constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public constant marketingWallet =\r\n        0x38649185909fD39fF2eCDB27Ac472a5ecb003a0c;\r\n\r\n    address public constant treasuryWallet =\r\n        0x1e18ed1bfCa02e59a43de32c60Ac0FD4923b64b5;\r\n\r\n    bool private _inSwap;\r\n    uint256 public constant contractSwapTimer = 10 seconds;\r\n    uint256 private _lastSwapTimestamp;\r\n\r\n    uint256 public constant swapThreshold = (_tTotal * 5) / 10000;\r\n    uint256 public constant swapAmount = (_tTotal * 10) / 10000;\r\n\r\n    uint256 private constant _maxTxAmount = (_tTotal * 300) / 10000;\r\n\r\n    event AutoLiquify(uint256 amountCurrency, uint256 amountTokens);\r\n\r\n    modifier lockTheSwap() {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    modifier withoutTransferFees() {\r\n        _inLiquidityOperation = true;\r\n        _;\r\n        _inLiquidityOperation = false;\r\n    }\r\n\r\n    constructor() payable {\r\n        _rOwned[msg.sender] = _rTotal;\r\n\r\n        // start applying fee and limits from this time\r\n        _feesAndLimitsStartTimestamp = block.timestamp + 15 minutes;\r\n\r\n        if (\r\n            block.chainid == 1 || block.chainid == 5 || block.chainid == 31337\r\n        ) {\r\n            dexRouter = IUniswapV2Router02(dexRouterAddress);\r\n        } else {\r\n            revert(\"Deployment chain is not supported by this contract\");\r\n        }\r\n\r\n        lpPair = IUniswapV2Factory(dexRouter.factory()).createPair(\r\n            dexRouter.WETH(),\r\n            address(this)\r\n        );\r\n\r\n        // FIXME: think about potential overflow after years\r\n        _approve(msg.sender, dexRouterAddress, type(uint256).max);\r\n        _approve(address(this), dexRouterAddress, type(uint256).max);\r\n        IERC20(lpPair).approve(dexRouterAddress, type(uint256).max);\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function allowFeesAndLimits() external {\r\n        _feesAndLimitsStartTimestamp = block.timestamp;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        if (_tTotal == 0) {\r\n            revert();\r\n        }\r\n        return _tTotal;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        address lpPair_ = lpPair;\r\n        if (_isExcludedFromReflections(account, lpPair_))\r\n            return _tOwned[account];\r\n        return _tokenFromReflection(_rOwned[account], lpPair_);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address sender,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(sender != address(0), \"ERC20: Sender is not zero Address\");\r\n        require(spender != address(0), \"ERC20: Spender is not zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (_tTotal - (balanceOf(DEAD) + balanceOf(address(0))));\r\n    }\r\n\r\n    function _isExcludedFromReflections(address account, address lpPair_)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            account == address(this) ||\r\n            account == DEAD ||\r\n            account == marketingWallet ||\r\n            account == lpPair_;\r\n    }\r\n\r\n    function isExcludedFromReflections(address account)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isExcludedFromReflections(account, lpPair);\r\n    }\r\n\r\n    // function getExcludedFromReflections(uint256 index) public view returns (address);\r\n    // }\r\n\r\n    function addLiquidityETH(\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        public\r\n        payable\r\n        withoutTransferFees\r\n        returns (\r\n            uint amountToken,\r\n            uint amountETH,\r\n            uint liquidity\r\n        )\r\n    {\r\n        // we need to transfer WIZ to our contract for router to have access to it\r\n        _transfer(msg.sender, address(this), amountTokenDesired);\r\n\r\n        if (deadline == 0) deadline = block.timestamp;\r\n        if (to == address(0)) to = msg.sender;\r\n\r\n        (amountToken, amountETH, liquidity) = dexRouter.addLiquidityETH{\r\n            value: msg.value\r\n        }(\r\n            address(this),\r\n            amountTokenDesired,\r\n            amountTokenMin,\r\n            amountETHMin,\r\n            to,\r\n            deadline\r\n        );\r\n\r\n        // refund dust eth, if any\r\n        if (amountToken < amountTokenDesired) {\r\n            _transfer(\r\n                address(this),\r\n                msg.sender,\r\n                amountTokenDesired - amountToken\r\n            );\r\n        }\r\n        // refund dust WIZ, if any\r\n        if (amountETH < msg.value) {\r\n            payable(msg.sender).transfer(msg.value - amountETH);\r\n        }\r\n    }\r\n\r\n    function removeLiquidityETH(\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) public withoutTransferFees returns (uint amountToken, uint amountETH) {\r\n        // we need to transfer LP Pair tokens to our contract for router to have access to it\r\n        IERC20(lpPair).transferFrom(msg.sender, address(this), liquidity);\r\n\r\n        if (liquidity == 0) liquidity = IERC20(lpPair).balanceOf(msg.sender);\r\n        if (deadline == 0) deadline = block.timestamp;\r\n        if (to == address(0)) to = msg.sender;\r\n\r\n        uint balanceBefore = balanceOf(to);\r\n        amountETH = dexRouter.removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            address(this),\r\n            liquidity,\r\n            amountTokenMin,\r\n            amountETHMin,\r\n            to,\r\n            deadline\r\n        );\r\n        amountToken = balanceOf(to) - balanceBefore;\r\n    }\r\n\r\n    function _tokenFromReflection(uint256 rAmount, address lpPair_)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate(lpPair_);\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees(account);\r\n    }\r\n\r\n    function _isExcludedFromFees(address account) private view returns (bool) {\r\n        return account == address(this) || account == DEAD;\r\n    }\r\n\r\n    function getMaxTX() public pure returns (uint256) {\r\n        return _maxTxAmount / (10**_decimals);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        bool feesAndLimitsAllowed = block.timestamp >=\r\n            _feesAndLimitsStartTimestamp;\r\n\r\n        if (feesAndLimitsAllowed) {\r\n            require(\r\n                amount <= _maxTxAmount,\r\n                \"Transfer amount exceeds the maxTxAmount.\"\r\n            );\r\n        }\r\n        address lpPair_ = lpPair;\r\n        bool takeFee = feesAndLimitsAllowed &&\r\n            !(_isExcludedFromFees(from) || _isExcludedFromFees(to)) &&\r\n            !_inLiquidityOperation;\r\n\r\n        if (to == lpPair_) {\r\n            if (!_inSwap && !_inLiquidityOperation) {\r\n                if (_lastSwapTimestamp + contractSwapTimer < block.timestamp) {\r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    if (contractTokenBalance >= swapThreshold) {\r\n                        if (contractTokenBalance >= swapAmount) {\r\n                            contractTokenBalance = swapAmount;\r\n                        }\r\n                        _contractSwap(contractTokenBalance);\r\n                        _lastSwapTimestamp = block.timestamp;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _finalizeTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function _contractSwap(uint256 contractTokenBalance) private lockTheSwap {\r\n        if (\r\n            contractTokenBalance > _allowances[address(this)][dexRouterAddress]\r\n        ) {\r\n            _allowances[address(this)][dexRouterAddress] = type(uint256).max;\r\n        }\r\n\r\n        uint256 toLiquify = ((contractTokenBalance * ratioLiquidity) /\r\n            ratioTotal) / 2;\r\n        uint256 swapAmt = contractTokenBalance - toLiquify;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            swapAmt,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amtBalance = address(this).balance;\r\n        uint256 liquidityBalance = (amtBalance * toLiquify) / swapAmt;\r\n\r\n        if (toLiquify > 0) {\r\n            dexRouter.addLiquidityETH{value: liquidityBalance}(\r\n                address(this),\r\n                toLiquify,\r\n                0,\r\n                0,\r\n                DEAD,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(liquidityBalance, toLiquify);\r\n        }\r\n\r\n        amtBalance -= liquidityBalance;\r\n        uint256 treasuryBalance = amtBalance;\r\n        if (ratioTreasury > 0) {\r\n            payable(treasuryWallet).transfer(treasuryBalance);\r\n        }\r\n    }\r\n\r\n    struct ExtraValues {\r\n        uint256 tTransferAmount;\r\n        uint256 tFee;\r\n        uint256 tSwap;\r\n        uint256 tBurn;\r\n        uint256 tMarketing;\r\n        uint256 rTransferAmount;\r\n        uint256 rAmount;\r\n        uint256 rFee;\r\n        uint256 currentRate;\r\n    }\r\n\r\n    function _finalizeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        address lpPair_ = lpPair;\r\n        ExtraValues memory values = _getValues(\r\n            from,\r\n            to,\r\n            tAmount,\r\n            takeFee,\r\n            lpPair_\r\n        );\r\n\r\n        _rOwned[from] -= values.rAmount;\r\n        _rOwned[to] += values.rTransferAmount;\r\n\r\n        if (_isExcludedFromReflections(from, lpPair_)) {\r\n            _tOwned[from] -= tAmount;\r\n        }\r\n        if (_isExcludedFromReflections(to, lpPair_)) {\r\n            _tOwned[to] += values.tTransferAmount;\r\n        }\r\n\r\n        if (values.rFee > 0) {\r\n            _rTotal -= values.rFee;\r\n        }\r\n\r\n        emit Transfer(from, to, values.tTransferAmount);\r\n    }\r\n\r\n    function _getValues(\r\n        address from,\r\n        address to,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        address lpPair_\r\n    ) private returns (ExtraValues memory) {\r\n        ExtraValues memory values;\r\n        values.currentRate = _getRate(lpPair_);\r\n\r\n        values.rAmount = tAmount * values.currentRate; // _rTotal / _tTotal\r\n\r\n        if (takeFee) {\r\n            uint256 currentReflect;\r\n            uint256 currentSwap;\r\n            uint256 currentBurn;\r\n            uint256 currentMarketing;\r\n            uint256 divisor = feeDivisor;\r\n\r\n            if (Address.isContract(to)) {\r\n                currentReflect = sellFeeReflect;\r\n                currentBurn = sellFeeBurn;\r\n                currentMarketing = sellFeeMarketing;\r\n                currentSwap = sellFeeTotalSwap;\r\n            } else if (Address.isContract(from)) {\r\n                currentReflect = buyFeeReflect;\r\n                currentBurn = buyFeeBurn;\r\n                currentMarketing = buyFeeMarketing;\r\n                currentSwap = buyFeeTotalSwap;\r\n            }\r\n\r\n            values.tFee = (tAmount * currentReflect) / divisor;\r\n            values.tSwap = (tAmount * currentSwap) / divisor;\r\n            values.tBurn = (tAmount * currentBurn) / divisor;\r\n            values.tMarketing = (tAmount * currentMarketing) / divisor;\r\n            values.tTransferAmount =\r\n                tAmount -\r\n                (values.tFee + values.tSwap + values.tBurn + values.tMarketing);\r\n\r\n            values.rFee = values.tFee * values.currentRate;\r\n        } else {\r\n            values.tFee = 0;\r\n            values.tSwap = 0;\r\n            values.tBurn = 0;\r\n            values.tMarketing = 0;\r\n            values.tTransferAmount = tAmount;\r\n\r\n            values.rFee = 0;\r\n        }\r\n\r\n        if (values.tSwap > 0) {\r\n            _rOwned[address(this)] += values.tSwap * values.currentRate;\r\n            _tOwned[address(this)] += values.tSwap;\r\n            emit Transfer(from, address(this), values.tSwap);\r\n        }\r\n\r\n        if (values.tBurn > 0) {\r\n            _rOwned[DEAD] += values.tBurn * values.currentRate;\r\n            _tOwned[DEAD] += values.tBurn;\r\n            emit Transfer(from, DEAD, values.tBurn);\r\n        }\r\n\r\n        if (values.tMarketing > 0) {\r\n            _rOwned[marketingWallet] += values.tMarketing * values.currentRate;\r\n            _tOwned[marketingWallet] += values.tMarketing;\r\n            emit Transfer(from, marketingWallet, values.tMarketing);\r\n        }\r\n\r\n        values.rTransferAmount =\r\n            values.rAmount -\r\n            (values.rFee +\r\n                (values.tSwap * values.currentRate) +\r\n                (values.tBurn * values.currentRate) +\r\n                (values.tMarketing * values.currentRate));\r\n        return values;\r\n    }\r\n\r\n    function _getRate(address lpPair_) private view returns (uint256) {\r\n        uint256 rTotal = _rTotal;\r\n        uint256 tTotal = _tTotal;\r\n        uint256 rSupply;\r\n        uint256 tSupply;\r\n        uint256 rOwned;\r\n        uint256 tOwned;\r\n        unchecked {\r\n            rSupply = rTotal;\r\n            tSupply = tTotal;\r\n\r\n            rOwned = _rOwned[address(this)];\r\n            tOwned = _tOwned[address(this)];\r\n            if (rOwned > rSupply || tOwned > tSupply) return rTotal / tTotal;\r\n            rSupply -= rOwned;\r\n            tSupply -= tOwned;\r\n\r\n            rOwned = _rOwned[DEAD];\r\n            tOwned = _tOwned[DEAD];\r\n            if (rOwned > rSupply || tOwned > tSupply) return rTotal / tTotal;\r\n            rSupply -= rOwned;\r\n            tSupply -= tOwned;\r\n\r\n            rOwned = _rOwned[marketingWallet];\r\n            tOwned = _tOwned[marketingWallet];\r\n            if (rOwned > rSupply || tOwned > tSupply) return rTotal / tTotal;\r\n            rSupply -= rOwned;\r\n            tSupply -= tOwned;\r\n\r\n            rOwned = _rOwned[lpPair_];\r\n            tOwned = _tOwned[lpPair_];\r\n            if (rOwned > rSupply || tOwned > tSupply) return rTotal / tTotal;\r\n            rSupply -= rOwned;\r\n            tSupply -= tOwned;\r\n        }\r\n        return rSupply / tSupply;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountCurrency\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowFeesAndLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeBurn\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeMarketing\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeReflect\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeTotalSwap\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSwapTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReflections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioLiquidity\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioTotal\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioTreasury\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeBurn\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeMarketing\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeReflect\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeTotalSwap\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WIZ", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://732d224a965922c6384a7761a2631fa1352fa37de287e59a11626f97c719d26f"}]}