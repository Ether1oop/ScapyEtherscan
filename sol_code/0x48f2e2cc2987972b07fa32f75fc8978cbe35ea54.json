{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/Beliefcard.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nabstract contract ERC1155 is IERC165, IERC1155, IERC1155MetadataURI {\r\n\r\n  mapping(address => mapping(uint256 => uint256)) public balanceOf;\r\n\r\n  mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n  mapping(uint256 => uint256) public totalSupply;\r\n\r\n  function uri(uint256) public view virtual returns (string memory);\r\n\r\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n    public\r\n    view\r\n    virtual\r\n    returns (uint256[] memory)\r\n  {\r\n    require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n    uint256[] memory batchBalances = new uint256[](accounts.length);\r\n    for (uint256 i = 0; i < accounts.length; i++) batchBalances[i] = balanceOf[accounts[i]][ids[i]];\r\n\r\n    return batchBalances;\r\n  }\r\n\r\n  function setApprovalForAll(address operator, bool approved) public virtual {\r\n    _setApprovalForAll(msg.sender, operator, approved);\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) public virtual {\r\n    require(from == msg.sender || isApprovedForAll[from][msg.sender], \"ERC1155: caller is not owner nor approved\");\r\n    _safeTransferFrom(from, to, id, amount, data);\r\n  }\r\n\r\n  function safeBatchTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) public virtual {\r\n    require(\r\n      from == msg.sender || isApprovedForAll[from][msg.sender],\r\n      \"ERC1155: transfer caller is not owner nor approved\"\r\n    );\r\n    _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n  }\r\n\r\n  function exists(uint256 id) public view virtual returns (bool) {\r\n    return totalSupply[id] > 0;\r\n  }\r\n\r\n  function _safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) internal virtual {\r\n    require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n    _trackSupplyBeforeTransfer(from, to, _asSingletonArray(id), _asSingletonArray(amount));\r\n\r\n    _beforeTokenTransfer(msg.sender, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n    require(balanceOf[from][id] >= amount, \"ERC1155: insufficient balance for transfer\");\r\n    unchecked {\r\n      balanceOf[from][id] -= amount;\r\n    }\r\n    balanceOf[to][id] += amount;\r\n\r\n    emit TransferSingle(msg.sender, from, to, id, amount);\r\n    _checkOnERC1155Received(msg.sender, from, to, id, amount, data);\r\n    _afterTokenTransfer(msg.sender, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n  }\r\n\r\n  function _safeBatchTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) internal virtual {\r\n    require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n    require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n    _trackSupplyBeforeTransfer(from, to, ids, amounts);\r\n\r\n    _beforeTokenTransfer(msg.sender, from, to, ids, amounts, data);\r\n\r\n    for (uint256 i = 0; i < ids.length; ++i) {\r\n      require(balanceOf[from][ids[i]] >= amounts[i], \"ERC1155: insufficient balance for transfer\");\r\n      unchecked {\r\n        balanceOf[from][ids[i]] -= amounts[i];\r\n        balanceOf[to][ids[i]] += amounts[i];\r\n      }\r\n    }\r\n\r\n    emit TransferBatch(msg.sender, from, to, ids, amounts);\r\n    _checkOnERC1155BatchReceived(msg.sender, from, to, ids, amounts, data);\r\n    _afterTokenTransfer(msg.sender, from, to, ids, amounts, data);\r\n  }\r\n\r\n  function _mint(\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) internal virtual {\r\n    require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n    _trackSupplyBeforeTransfer(address(0), to, _asSingletonArray(id), _asSingletonArray(amount));\r\n\r\n    _beforeTokenTransfer(msg.sender, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n    balanceOf[to][id] += amount;\r\n    emit TransferSingle(msg.sender, address(0), to, id, amount);\r\n    _checkOnERC1155Received(msg.sender, address(0), to, id, amount, data);\r\n    _afterTokenTransfer(msg.sender, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n  }\r\n\r\n  function _mintBatch(\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) internal virtual {\r\n    require(to != address(0), \"ERC1155: mint to the zero address\");\r\n    require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n    _trackSupplyBeforeTransfer(address(0), to, ids, amounts);\r\n\r\n    _beforeTokenTransfer(msg.sender, address(0), to, ids, amounts, data);\r\n\r\n    for (uint256 i = 0; i < ids.length; i++) {\r\n      balanceOf[to][ids[i]] += amounts[i];\r\n    }\r\n\r\n    emit TransferBatch(msg.sender, address(0), to, ids, amounts);\r\n    _checkOnERC1155BatchReceived(msg.sender, address(0), to, ids, amounts, data);\r\n    _afterTokenTransfer(msg.sender, address(0), to, ids, amounts, data);\r\n  }\r\n\r\n  function _burn(\r\n    address from,\r\n    uint256 id,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    _trackSupplyBeforeTransfer(from, address(0), _asSingletonArray(id), _asSingletonArray(amount));\r\n\r\n    _beforeTokenTransfer(msg.sender, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\r\n\r\n    require(balanceOf[from][id] >= amount, \"ERC1155: burn amount exceeds balance\");\r\n    unchecked {\r\n      balanceOf[from][id] -= amount;\r\n    }\r\n\r\n    emit TransferSingle(msg.sender, from, address(0), id, amount);\r\n    _afterTokenTransfer(msg.sender, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\r\n  }\r\n\r\n  function _burnBatch(\r\n    address from,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts\r\n  ) internal virtual {\r\n    require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n    _trackSupplyBeforeTransfer(from, address(0), ids, amounts);\r\n\r\n    _beforeTokenTransfer(msg.sender, from, address(0), ids, amounts, \"\");\r\n\r\n    for (uint256 i = 0; i < ids.length; i++) {\r\n      require(balanceOf[from][ids[i]] >= amounts[i], \"ERC1155: burn amount exceeds balance\");\r\n      unchecked {\r\n        balanceOf[from][ids[i]] -= amounts[i];\r\n      }\r\n    }\r\n\r\n    emit TransferBatch(msg.sender, from, address(0), ids, amounts);\r\n    _afterTokenTransfer(msg.sender, from, address(0), ids, amounts, \"\");\r\n  }\r\n\r\n  function _setApprovalForAll(\r\n    address owner,\r\n    address operator,\r\n    bool approved\r\n  ) internal virtual {\r\n    require(owner != operator, \"ERC1155: setting approval status for self\");\r\n    isApprovedForAll[owner][operator] = approved;\r\n    emit ApprovalForAll(owner, operator, approved);\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n    address operator,\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) internal virtual {}\r\n\r\n  function _afterTokenTransfer(\r\n    address operator,\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) internal virtual {}\r\n\r\n  function _trackSupplyBeforeTransfer(\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts\r\n  ) private {\r\n    if (from == address(0)) {\r\n      for (uint256 i = 0; i < ids.length; i++) {\r\n        totalSupply[ids[i]] += amounts[i];\r\n      }\r\n    }\r\n\r\n    if (to == address(0)) {\r\n      for (uint256 i = 0; i < ids.length; i++) {\r\n        totalSupply[ids[i]] -= amounts[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  function _checkOnERC1155Received(\r\n    address operator,\r\n    address from,\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) private {\r\n    if (to.code.length > 0) {\r\n      try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 returnValue) {\r\n        require(returnValue == 0xf23a6e61, \"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n      } catch {\r\n        revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n      }\r\n    }\r\n  }\r\n\r\n  function _checkOnERC1155BatchReceived(\r\n    address operator,\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) private {\r\n    if (to.code.length > 0) {\r\n      try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 returnValue) {\r\n        require(returnValue == 0xbc197c81, \"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n      } catch {\r\n        revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n      }\r\n    }\r\n  }\r\n\r\n  function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n    uint256[] memory array = new uint256[](1);\r\n    array[0] = element;\r\n\r\n    return array;\r\n  }\r\n\r\n  function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\r\n    return\r\n      interfaceId == type(IERC1155).interfaceId || // ERC1155\r\n      interfaceId == type(IERC1155MetadataURI).interfaceId || // ERC1155MetadataURI\r\n      interfaceId == type(IERC165).interfaceId; // ERC165\r\n  }\r\n}\r\n\r\ninterface IERC1155Receiver {\r\n  function onERC1155Received(\r\n    address operator,\r\n    address from,\r\n    uint256 id,\r\n    uint256 value,\r\n    bytes calldata data\r\n  ) external returns (bytes4);\r\n\r\n  function onERC1155BatchReceived(\r\n    address operator,\r\n    address from,\r\n    uint256[] calldata ids,\r\n    uint256[] calldata values,\r\n    bytes calldata data\r\n  ) external returns (bytes4);\r\n}\r\n\r\nabstract contract PrimeProof {\r\n    bytes32 internal _merkleRootPrime;\r\n    function _setPrime(bytes32 merkleRoot_) internal virtual {\r\n        _merkleRootPrime = merkleRoot_;\r\n    }\r\n    function isPrime(address address_, bytes32[] memory proof_) public view returns (bool) {\r\n        bytes32 _leaf = keccak256(abi.encodePacked(address_));\r\n        for (uint256 i = 0; i < proof_.length; i++) {\r\n            _leaf = _leaf < proof_[i] ? keccak256(abi.encodePacked(_leaf, proof_[i])) : keccak256(abi.encodePacked(proof_[i], _leaf));\r\n        }\r\n        return _leaf == _merkleRootPrime;\r\n    }\r\n}\r\n\r\nabstract contract CompositeProof {\r\n    bytes32 internal _merkleRootComposite;\r\n    function _setComposite(bytes32 merkleRoot_) internal virtual {\r\n        _merkleRootComposite = merkleRoot_;\r\n    }\r\n    function isComposite(address address_, bytes32[] memory proof_) public view returns (bool) {\r\n        bytes32 _leaf = keccak256(abi.encodePacked(address_));\r\n        for (uint256 i = 0; i < proof_.length; i++) {\r\n            _leaf = _leaf < proof_[i] ? keccak256(abi.encodePacked(_leaf, proof_[i])) : keccak256(abi.encodePacked(proof_[i], _leaf));\r\n        }\r\n        return _leaf == _merkleRootComposite;\r\n    }\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////\r\n//    dBBBBb   dBBBP  dBP    dBP dBBBP  dBBBBP    dBBBP dBBBBBb   dBBBBBb    dBBBBb //\r\n//       dBP                                                 BB       dBP       dB' //\r\n//   dBBBK'  dBBP   dBP    dBP dBBP   dBBBP     dBP      dBP BB   dBBBBK'  dBP dB'  //\r\n//  dB' db  dBP    dBP    dBP dBP    dBP       dBP      dBP  BB  dBP  BB  dBP dB'   //\r\n// dBBBBP' dBBBBP dBBBBP dBP dBBBBP dBP       dBBBBP   dBBBBBBB dBP  dB' dBBBBB'    //\r\n//                                                                                  //\r\n//                       NYT-TDNR BELIEF CARD by 0xSumo                             //\r\n//////////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract BeliefCard is ERC1155, Ownable, PrimeProof, CompositeProof {\r\n\r\n    using Strings for uint256;\r\n    string public baseURI;\r\n    string public baseExtension;\r\n    uint256 private maxMintsPerP = 3;\r\n    uint256 private maxMintsPerC = 1;\r\n    uint256 public _maxSupply = 3003;\r\n    bool public primeEnabled = false;\r\n    bool public compositeEnabled = false;\r\n    mapping(address => uint256) public pMinted;\r\n    mapping(address => uint256) public cMinted;\r\n\r\n   constructor(\r\n    string memory newBaseURI,\r\n    string memory newBaseExtension\r\n   )  {\r\n    baseURI = newBaseURI;\r\n    baseExtension = newBaseExtension;\r\n   }\r\n\r\n   function giftCard(address _address, uint256 belief, uint256 _amount) external onlyOwner { //gift always good\r\n    require(belief == 1 || belief == 2 || belief == 3, \"Query for nonexisting cards\");\r\n    require(totalSupply[1] + totalSupply[2] + totalSupply[3] + 1 < maxSuppply(), \"No more cards\");\r\n\r\n    _mint(_address, belief, _amount, \"\");\r\n   }\r\n\r\n   //Prime101 Sale//\r\n   function getCardPrime(uint256 belief, bytes32[] memory proof_) external {\r\n    require(primeEnabled, \"Prime paused\");\r\n    require(isPrime(msg.sender, proof_), \"You are not in prime\");\r\n    require(maxMintsPerP >= pMinted[msg.sender] + 1, \"You have no Prime Mint left\");\r\n    require(belief == 1 || belief == 2 || belief == 3, \"Query for nonexisting cards\");\r\n    require(totalSupply[1] + totalSupply[2] + totalSupply[3] + 1 < maxSuppply(), \"No more cards\");\r\n\r\n    pMinted[msg.sender]++;\r\n    cMinted[msg.sender]++;\r\n    _mint(msg.sender, belief, 1, \"\");\r\n  }\r\n\r\n  //Composite Sale//\r\n   function getCardComposite(uint256 belief, bytes32[] memory proof_) external {\r\n    require(compositeEnabled, \"Composite paused\");\r\n    require(isComposite(msg.sender, proof_), \"You are not in composite\");\r\n    require(cMinted[msg.sender] == 0, \"You have no Composite Mint left\");\r\n    require(belief == 1 || belief == 2 || belief == 3, \"Query for nonexisting cards\");\r\n    require(totalSupply[1] + totalSupply[2] + totalSupply[3] + 1 < maxSuppply(), \"No more cards\");\r\n\r\n    pMinted[msg.sender]++;\r\n    cMinted[msg.sender]++;\r\n    _mint(msg.sender, belief, 1, \"\");\r\n  }\r\n\r\n  function maxSuppply() public view returns (uint256) {\r\n    return _maxSupply;\r\n  }\r\n\r\n  function setPrimeClaim(bool bool_) external onlyOwner {\r\n    primeEnabled = bool_;\r\n  }\r\n\r\n  function setCompositeClaim(bool bool_) external onlyOwner {\r\n    compositeEnabled = bool_;\r\n  }\r\n\r\n  function setPrimeRoot(bytes32 merkleRoot_) external onlyOwner {\r\n    _setPrime(merkleRoot_);\r\n  }\r\n\r\n  function setCompositeRoot(bytes32 merkleRoot_) external onlyOwner {\r\n    _setComposite(merkleRoot_);\r\n  }\r\n\r\n  function setBaseURI(string memory newBaseURI) external onlyOwner {\r\n    baseURI = newBaseURI;\r\n  }\r\n\r\n  function setBaseExtension(string memory newBaseExtension) external onlyOwner {\r\n    baseExtension = newBaseExtension;\r\n  }\r\n\r\n  function uri(uint256 id) public view override returns (string memory) {\r\n    require(super.exists(id), \"Query for nonexisting cards\");\r\n    return string(abi.encodePacked(baseURI, id.toString(), baseExtension));\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newBaseExtension\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compositeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"belief\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"getCardComposite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"belief\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"getCardPrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"belief\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"giftCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"isComposite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"isPrime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSuppply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseExtension\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setCompositeClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"name\":\"setCompositeRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setPrimeClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"name\":\"setPrimeRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BeliefCard", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000036697066733a2f2f516d514559353275553832464276456e586b474b774b54624d62786832644e67686663505a54424c466b436378562f0000000000000000000000000000000000000000000000000000000000000000000000000000000000052e6a736f6e000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ac83d21d3736b79b093de38c940544c2d661466441614866d5f707cc41d46b0a"}]}