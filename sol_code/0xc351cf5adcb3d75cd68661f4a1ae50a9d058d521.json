{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin-3.4.0/contracts/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-3.4.0/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/SolidlyV2/Bootstrapping/MerkleDistributorVeSolid.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity =0.6.11;\\r\\n\\r\\nimport \\\"@openzeppelin-3.4.0/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin-3.4.0/contracts/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\n// Allows anyone to claim a token if they exist in a merkle root.\\r\\ninterface IMerkleDistributor {\\r\\n    // Returns the address of the token distributed by this contract.\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    // Returns the merkle root of the merkle tree containing account balances available to claim.\\r\\n    function merkleRoot() external view returns (bytes32);\\r\\n\\r\\n    // Returns true if the index has been marked claimed.\\r\\n    function isClaimed(uint256 index) external view returns (bool);\\r\\n\\r\\n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\\r\\n    function claim(\\r\\n        uint256 index,\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        bytes32[] calldata merkleProof\\r\\n    ) external;\\r\\n\\r\\n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\\r\\n    function claimFor(\\r\\n        uint256 index,\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        bytes32[] calldata merkleProof,\\r\\n        address recipient\\r\\n    ) external;\\r\\n\\r\\n    // This event is triggered whenever a call to #claim succeeds.\\r\\n    event Claimed(\\r\\n        uint256 index,\\r\\n        address account,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount\\r\\n    );\\r\\n}\\r\\n\\r\\ninterface IVe {\\r\\n    function split(uint256 tokenId, uint256 sendAmount)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract MerkleDistributorVeSolid is IMerkleDistributor {\\r\\n    address public immutable override token;\\r\\n    bytes32 public immutable override merkleRoot;\\r\\n    uint256 public immutable rootTokenId;\\r\\n\\r\\n    // This is a packed array of booleans.\\r\\n    mapping(uint256 => uint256) private claimedBitMap;\\r\\n    address governance;\\r\\n\\r\\n    constructor(\\r\\n        address token_,\\r\\n        bytes32 merkleRoot_,\\r\\n        uint256 rootTokenId_\\r\\n    ) public {\\r\\n        token = token_;\\r\\n        merkleRoot = merkleRoot_;\\r\\n        governance = msg.sender;\\r\\n        rootTokenId = rootTokenId_;\\r\\n    }\\r\\n\\r\\n    function isClaimed(uint256 index) public view override returns (bool) {\\r\\n        uint256 claimedWordIndex = index / 256;\\r\\n        uint256 claimedBitIndex = index % 256;\\r\\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\\r\\n        uint256 mask = (1 << claimedBitIndex);\\r\\n        return claimedWord & mask == mask;\\r\\n    }\\r\\n\\r\\n    function _setClaimed(uint256 index) private {\\r\\n        uint256 claimedWordIndex = index / 256;\\r\\n        uint256 claimedBitIndex = index % 256;\\r\\n        claimedBitMap[claimedWordIndex] =\\r\\n            claimedBitMap[claimedWordIndex] |\\r\\n            (1 << claimedBitIndex);\\r\\n    }\\r\\n\\r\\n    function claim(\\r\\n        uint256 index,\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        bytes32[] calldata merkleProof\\r\\n    ) external override {\\r\\n        require(!isClaimed(index), \\\"MerkleDistributor: Drop already claimed.\\\");\\r\\n\\r\\n        // Verify the merkle proof.\\r\\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\\r\\n        require(\\r\\n            MerkleProof.verify(merkleProof, merkleRoot, node),\\r\\n            \\\"MerkleDistributor: Invalid proof.\\\"\\r\\n        );\\r\\n\\r\\n        // Mark it claimed and send the token.\\r\\n        _setClaimed(index);\\r\\n\\r\\n        // Split NFT\\r\\n        uint256 tokenId = IVe(token).split(rootTokenId, amount);\\r\\n\\r\\n        // Transfer NFT (intentionally use transferFrom instead of safeTransferFrom)\\r\\n        IVe(token).transferFrom(address(this), account, tokenId);\\r\\n\\r\\n        emit Claimed(index, account, tokenId, amount);\\r\\n    }\\r\\n\\r\\n    function claimFor(\\r\\n        uint256 index,\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        bytes32[] calldata merkleProof,\\r\\n        address recipient\\r\\n    ) external override {\\r\\n        require(msg.sender == governance, \\\"!governance\\\");\\r\\n        require(!isClaimed(index), \\\"MerkleDistributor: Drop already claimed.\\\");\\r\\n\\r\\n        // Verify the merkle proof.\\r\\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\\r\\n        require(\\r\\n            MerkleProof.verify(merkleProof, merkleRoot, node),\\r\\n            \\\"MerkleDistributor: Invalid proof.\\\"\\r\\n        );\\r\\n\\r\\n        // Mark it claimed and send the token.\\r\\n        _setClaimed(index);\\r\\n\\r\\n        // Split NFT\\r\\n        uint256 tokenId = IVe(token).split(rootTokenId, amount);\\r\\n\\r\\n        // Transfer NFT (intentionally use transferFrom instead of safeTransferFrom)\\r\\n        IVe(token).transferFrom(address(this), recipient, tokenId);\\r\\n\\r\\n        emit Claimed(index, account, tokenId, amount);\\r\\n    }\\r\\n\\r\\n    function transferGovernance(address governance_) external {\\r\\n        require(msg.sender == governance, \\\"!governance\\\");\\r\\n        governance = governance_;\\r\\n    }\\r\\n\\r\\n    function collectDust(address _token, uint256 _amount) external {\\r\\n        require(msg.sender == governance, \\\"!governance\\\");\\r\\n        require(_token != token, \\\"!token\\\");\\r\\n        if (_token == address(0)) {\\r\\n            // token address(0) = ETH\\r\\n            payable(governance).transfer(_amount);\\r\\n        } else {\\r\\n            IERC20(_token).transfer(governance, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"rootTokenId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"collectDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MerkleDistributorVeSolid", "CompilerVersion": "v0.6.11+commit.5ef660b1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000022f061cd1f87ad0ff9e1555ecf80b6623c889cc41d1f9ebc3889a7a5c7246c305dd4085b013c6484221347f6f30c66dc5d6f88a00000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}