{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/WhIsBeVandalzPeriphery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\n// interfaces\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\n// library\\nimport { MerkleProof } from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport { Constants } from \\\"./Constants.sol\\\";\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { DataTypes } from \\\"./types/DataTypes.sol\\\";\\nimport { Errors } from \\\"./types/Errors.sol\\\";\\n\\n// contracts\\nimport { ERC721RandomlyAssignVandalzTierPeriphery } from \\\"./ERC721RandomlyAssignVandalzTierPeriphery.sol\\\";\\nimport { ERC721Burnable } from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport { ERC165Storage } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\ninterface IWhIsBeVandalz {\\n    function creatorMint(address _to, uint256[] memory _tokenIds) external;\\n\\n    function TIERS() external view returns (uint256);\\n\\n    function renounceOwnership() external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function setTier(\\n        uint256[] memory _tierIndex,\\n        uint256[] memory _from,\\n        uint256[] memory _to\\n    ) external;\\n\\n    function setSupply(uint256 _supply) external;\\n\\n    function reveal() external;\\n\\n    function setBaseExtension(string memory _newBaseExtension) external;\\n\\n    function setBaseURI(string memory _newBaseURI) external;\\n\\n    function setNotRevealedURI(string memory _notRevealedURI) external;\\n\\n    function withdrawETH() external;\\n\\n    function transferAccidentallyLockedTokens(IERC20 _token, uint256 _amount) external;\\n\\n    function setRoyaltyInfo(address $royaltyAddress, uint256 $percentage) external;\\n}\\n\\ninterface IGoodKarmaToken {\\n    function burnTokenForVandal(address holderAddress) external;\\n}\\n\\nstruct MintDetails {\\n    address collectionAddress;\\n    address beneficiary;\\n    uint256 tokenId;\\n}\\n\\ncontract WhIsBeVandalzPeriphery is\\n    ERC721RandomlyAssignVandalzTierPeriphery,\\n    ERC721Holder,\\n    ERC165Storage,\\n    ERC1155Holder,\\n    VRFConsumerBaseV2,\\n    Ownable\\n{\\n    //==Constants==//\\n\\n    // bytes4 constants for ERC165\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    bytes4 private constant _INTERFACE_ID_IERC2981 = 0x2a55205a;\\n    bytes4 private constant _INTERFACE_ID_IERC721Metadata = 0x5b5e139f;\\n    bytes4 private constant _INTERFACE_ID_IERC165 = 0x01ffc9a7;\\n    bytes4 private constant _INTERFACE_ID_IERC1155 = 0xf23a6e61;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    VRFCoordinatorV2Interface public COORDINATOR;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    LinkTokenInterface public immutable LINKTOKEN;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    uint256[] public groupTier15678Indexes;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    uint256[] public groupTier135678Indexes;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    address public whisbeVandalz;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    bool public redeemPaused = true;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    bool public publicMintPaused = true;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    bool public whitelistState = true;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    uint64 public s_subscriptionId;\\n\\n    /**\\n     * @notice list of allowlist address hashed\\n     * @dev the merkle root hash allowlist\\n     */\\n    bytes32 public merkleRoot;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    uint256 public publicSalePrice = 0.1 ether;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    uint256 public vrnfRequestCounter;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    uint256 public publicMintTier3Counter;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    uint256 public publicMintTierGroup15678Counter;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    uint256 public publicMintTier3Cap = 600;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    uint256 public publicMintTierGroup15678Cap = 992;\\n\\n    /**\\n     * @notice The gas lane to use, which specifies the maximum gas price to bump to.\\n     */\\n    bytes32 public keyHash = 0x8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef;\\n\\n    /**\\n     * @notice estimate gas used by fulfillRandomWords()\\n     */\\n    uint32 public callbackGasLimit = 1000000;\\n\\n    /**\\n     * @notice The minimum number of confirmation blocks on VRF requests before oracles respond\\n     */\\n    uint16 public requestConfirmations = 3;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    mapping(address => bool) public acceptedCollections;\\n\\n    /**\\n     * @notice nft burn tracker\\n     * @dev increments the counter whenever nft is redeemed\\n     */\\n    mapping(address => uint256) public burnCounter;\\n\\n    /**\\n     * @notice public mint tracker per wallet\\n     * @dev maps amount of \\\"publicly\\\" minted vandalz per wallet\\n     */\\n    mapping(address => uint256) public publicMintCounter;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    mapping(uint256 => MintDetails[]) public s_requestIdToMintDetails;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    mapping(uint256 => mapping(uint256 => uint256[])) public s_requestIdToTierIndexes;\\n\\n    /**\\n     * @dev Throws if timestamp already set.\\n     */\\n    modifier redeemNotPaused() {\\n        require(redeemPaused == false, \\\"Redeem is paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if timestamp already set.\\n     */\\n    modifier publicMintNotPaused() {\\n        require(publicMintPaused == false, \\\"Public mint is paused\\\");\\n        _;\\n    }\\n\\n    //===Constructor===//\\n\\n    /**\\n     * @notice\\n     * @dev\\n     * @param _whisbeVandalz address of WhIsBeVandalz NFT\\n     * @param _totalSupply maximum pieces if the collection\\n     * @param _tiers list of tier details\\n     */\\n    constructor(\\n        address _whisbeVandalz,\\n        address _vrfCoordinator, // mainnet - 0x271682DEB8C4E0901D1a1550aD2e64D568E69909\\n        address _link_token_contract, // mainnet - 0x514910771AF9Ca656af840dff83E8264EcF986CA\\n        uint256 _totalSupply,\\n        DataTypes.Tier[] memory _tiers\\n    ) VRFConsumerBaseV2(_vrfCoordinator) ERC721RandomlyAssignVandalzTierPeriphery(_totalSupply, 1) {\\n        uint256 _tiersLen = _tiers.length;\\n        whisbeVandalz = _whisbeVandalz;\\n        if (_tiersLen != IWhIsBeVandalz(whisbeVandalz).TIERS()) {\\n            revert Errors.WhisbeVandalzPeriphery__EightTiersRequired(_tiersLen);\\n        }\\n\\n        // whitelisted collections\\n        acceptedCollections[address(Constants.EXTINCTION_OPEN_EDITION_BY_WHISBE)] = true;\\n        acceptedCollections[address(Constants.THE_HORNED_KARMA_CHAMELEON_BURN_REDEMPTION_BY_WHISBE)] = true;\\n        acceptedCollections[address(Constants.KARMA_KEY_BLACK_BY_WHISBE)] = true;\\n        acceptedCollections[address(Constants.KARMA_KEYS_BY_WHISBE)] = true;\\n        acceptedCollections[address(Constants.GOOD_KARMA_TOKEN)] = true;\\n\\n        // tiers\\n        for (uint256 _i; _i < _tiersLen; _i++) {\\n            tiers.push(_tiers[_i]);\\n        }\\n\\n        // custom : group tiers 1,5,6,7,& 8\\n        groupTier15678Indexes.push(0); // tier1 , group index -> 0\\n        groupTier15678Indexes.push(4); // tier5 , group index -> 1\\n        groupTier15678Indexes.push(5); // tier6 , group index -> 2\\n        groupTier15678Indexes.push(6); // tier7 , group index -> 3\\n        groupTier15678Indexes.push(7); // tier8 , group index -> 4\\n\\n        // group tiers 1,3,5,6,7,& 8\\n        groupTier135678Indexes.push(0); // tier1 , group index -> 0\\n        groupTier135678Indexes.push(2); // tier3 , group index -> 1\\n        groupTier135678Indexes.push(4); // tier5 , group index -> 2\\n        groupTier135678Indexes.push(5); // tier6 , group index -> 3\\n        groupTier135678Indexes.push(6); // tier7 , group index -> 4\\n        groupTier135678Indexes.push(7); // tier8 , group index -> 5\\n\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_IERC2981);\\n        _registerInterface(_INTERFACE_ID_IERC721Metadata);\\n        _registerInterface(_INTERFACE_ID_IERC165);\\n        _registerInterface(_INTERFACE_ID_IERC1155);\\n\\n        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\n        LINKTOKEN = LinkTokenInterface(_link_token_contract);\\n        //Create a new subscription when you deploy the contract.\\n        createNewSubscription();\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function setWhIsBeVandalz(address _whisbeVandalz) external onlyOwner {\\n        whisbeVandalz = _whisbeVandalz;\\n    }\\n\\n    /**\\n     * @notice top up subscription with $LINK\\n     * @dev can be accessed by owner only\\n     * @param _amount $LINK amount to top up\\n     */\\n    function topUpSubscription(uint256 _amount) external onlyOwner {\\n        LINKTOKEN.transferAndCall(address(COORDINATOR), _amount, abi.encode(s_subscriptionId));\\n    }\\n\\n    /**\\n     * @notice add a consumer to the subscription.\\n     * @dev can be accessed by owner only\\n     * @param _consumerAddress consumer address\\n     */\\n    function addConsumer(address _consumerAddress) external onlyOwner {\\n        COORDINATOR.addConsumer(s_subscriptionId, _consumerAddress);\\n    }\\n\\n    /**\\n     * @notice remove a consumer from subscription.\\n     * @dev can be accessed by owner only\\n     * @param _consumerAddress consumer address\\n     */\\n    function removeConsumer(address _consumerAddress) external onlyOwner {\\n        COORDINATOR.removeConsumer(s_subscriptionId, _consumerAddress);\\n    }\\n\\n    /**\\n     * @notice cancel the subscription and send the remaining LINK to a wallet address.\\n     * @dev can be accessed by owner only\\n     * @param _receivingWallet receiving wallet address\\n     */\\n    function cancelSubscription(address _receivingWallet) external onlyOwner {\\n        COORDINATOR.cancelSubscription(s_subscriptionId, _receivingWallet);\\n        s_subscriptionId = 0;\\n    }\\n\\n    /**\\n     * @notice transfer this contract's $LINK fund to an address.\\n     * @dev 1000000000000000000 = 1 LINK, can be accessed by owner only\\n     * @param _amount $LINK amount\\n     * @param _to address of recipient\\n     */\\n    function withdraw(uint256 _amount, address _to) external onlyOwner {\\n        LINKTOKEN.transfer(_to, _amount);\\n    }\\n\\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\\n        keyHash = _keyHash;\\n    }\\n\\n    function setCallbackGaslimit(uint32 _callbackGasLimit) external onlyOwner {\\n        callbackGasLimit = _callbackGasLimit;\\n    }\\n\\n    function setRequestConfirmations(uint16 _requestConfirmations) external onlyOwner {\\n        requestConfirmations = _requestConfirmations;\\n    }\\n\\n    function redeem(address[] memory _collections, uint256[][] memory _tokenIds) external redeemNotPaused {\\n        uint256 _collectionsLen = _collections.length;\\n        require(_collectionsLen == _tokenIds.length, \\\"\\\");\\n        uint32 _numWords;\\n        for (uint256 _j; _j < _collectionsLen; _j++) {\\n            if (!acceptedCollections[_collections[_j]]) {\\n                revert Errors.WhisbeVandalzPeriphery__InvalidCollection(_collections[_j]);\\n            }\\n            uint256 _tokenIdsLen = _tokenIds[_j].length;\\n            for (uint256 _i; _i < _tokenIdsLen; _i++) {\\n                // escrow\\n                if (_collections[_j] == Constants.GOOD_KARMA_TOKEN) {\\n                    IERC1155(_collections[_j]).safeTransferFrom(msg.sender, address(this), 0, 1, \\\"\\\");\\n                    // 1 from tier 15678\\n                    _numWords += 1;\\n                } else {\\n                    ERC721Burnable(_collections[_j]).safeTransferFrom(msg.sender, address(this), _tokenIds[_j][_i]);\\n                    if (_collections[_j] == Constants.EXTINCTION_OPEN_EDITION_BY_WHISBE) {\\n                        // 1 from tier 4\\n                        // 1 from tier 15678\\n                        _numWords += 2;\\n                    } else if (_collections[_j] == Constants.THE_HORNED_KARMA_CHAMELEON_BURN_REDEMPTION_BY_WHISBE) {\\n                        // 1 from tier 2\\n                        // 1 from tier 4\\n                        // 8 from tier 1,5,6,7,8\\n                        _numWords += 10;\\n                    } else if (_collections[_j] == Constants.KARMA_KEY_BLACK_BY_WHISBE) {\\n                        // 1 from tier 4\\n                        // 1 from tier 1,5,6,7,8\\n                        _numWords += 2;\\n                    } else if (_collections[_j] == Constants.KARMA_KEYS_BY_WHISBE) {\\n                        // 1 from tier 1,5,6,7,8\\n                        _numWords += 1;\\n                    }\\n                }\\n            }\\n        }\\n        uint256 _requestId =\\n            COORDINATOR.requestRandomWords(\\n                keyHash,\\n                s_subscriptionId,\\n                requestConfirmations,\\n                callbackGasLimit,\\n                _numWords\\n            );\\n        vrnfRequestCounter += 1;\\n        uint256 _index;\\n        for (uint256 _j; _j < _collectionsLen; _j++) {\\n            uint256 _tokenIdsLen = _tokenIds[_j].length;\\n            for (uint256 _i; _i < _tokenIdsLen; _i++) {\\n                // construct mint details\\n                if (_collections[_j] == Constants.EXTINCTION_OPEN_EDITION_BY_WHISBE) {\\n                    // 1 from tier 4\\n                    // 1 from tier 15678\\n                    s_requestIdToMintDetails[_requestId].push(\\n                        MintDetails({\\n                            collectionAddress: _collections[_j],\\n                            beneficiary: msg.sender,\\n                            tokenId: _tokenIds[_j][_i]\\n                        })\\n                    );\\n                    _index = s_requestIdToMintDetails[_requestId].length - 1;\\n                    s_requestIdToTierIndexes[_requestId][_index].push(3);\\n                    s_requestIdToTierIndexes[_requestId][_index].push(8); // 8 means tier group 15678\\n                } else if (_collections[_j] == Constants.GOOD_KARMA_TOKEN) {\\n                    // 1 from tier 15678\\n                    s_requestIdToMintDetails[_requestId].push(\\n                        MintDetails({\\n                            collectionAddress: _collections[_j],\\n                            beneficiary: msg.sender,\\n                            tokenId: _tokenIds[_j][_i]\\n                        })\\n                    );\\n                    _index = s_requestIdToMintDetails[_requestId].length - 1;\\n                    s_requestIdToTierIndexes[_requestId][_index].push(8); // 8 means tier group 15678\\n                } else {\\n                    if (_collections[_j] == Constants.THE_HORNED_KARMA_CHAMELEON_BURN_REDEMPTION_BY_WHISBE) {\\n                        // 1 from tier 2\\n                        // 1 from tier 4\\n                        // 8 from tier 1,5,6,7,8\\n                        s_requestIdToMintDetails[_requestId].push(\\n                            MintDetails({\\n                                collectionAddress: _collections[_j],\\n                                beneficiary: msg.sender,\\n                                tokenId: _tokenIds[_j][_i]\\n                            })\\n                        );\\n                        _index = s_requestIdToMintDetails[_requestId].length - 1;\\n                        s_requestIdToTierIndexes[_requestId][_index].push(1);\\n                        s_requestIdToTierIndexes[_requestId][_index].push(3);\\n                        s_requestIdToTierIndexes[_requestId][_index].push(8); // 8 means tier group 15678\\n                        s_requestIdToTierIndexes[_requestId][_index].push(8); // 8 means tier group 15678\\n                        s_requestIdToTierIndexes[_requestId][_index].push(8); // 8 means tier group 15678\\n                        s_requestIdToTierIndexes[_requestId][_index].push(8); // 8 means tier group 15678\\n                        s_requestIdToTierIndexes[_requestId][_index].push(8); // 8 means tier group 15678\\n                        s_requestIdToTierIndexes[_requestId][_index].push(8); // 8 means tier group 15678\\n                        s_requestIdToTierIndexes[_requestId][_index].push(8); // 8 means tier group 15678\\n                        s_requestIdToTierIndexes[_requestId][_index].push(8); // 8 means tier group 15678\\n                    } else if (_collections[_j] == Constants.KARMA_KEY_BLACK_BY_WHISBE) {\\n                        // 1 from tier 4\\n                        // 1 from tier 1,5,6,7,8\\n                        s_requestIdToMintDetails[_requestId].push(\\n                            MintDetails({\\n                                collectionAddress: _collections[_j],\\n                                beneficiary: msg.sender,\\n                                tokenId: _tokenIds[_j][_i]\\n                            })\\n                        );\\n                        _index = s_requestIdToMintDetails[_requestId].length - 1;\\n                        s_requestIdToTierIndexes[_requestId][_index].push(3);\\n                        s_requestIdToTierIndexes[_requestId][_index].push(8); // 8 means tier group 15678\\n                    } else if (_collections[_j] == Constants.KARMA_KEYS_BY_WHISBE) {\\n                        // 1 from tier 1,5,6,7,8\\n                        s_requestIdToMintDetails[_requestId].push(\\n                            MintDetails({\\n                                collectionAddress: _collections[_j],\\n                                beneficiary: msg.sender,\\n                                tokenId: _tokenIds[_j][_i]\\n                            })\\n                        );\\n                        _index = s_requestIdToMintDetails[_requestId].length - 1;\\n                        s_requestIdToTierIndexes[_requestId][_index].push(8); // 8 means tier group 15678\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function migrateTokenMatrix(\\n        uint256[] memory _tierIndexes,\\n        uint256[] memory _offsets,\\n        uint256[] memory _tokenIndexes\\n    ) external onlyOwner {\\n        _updateTokenMatrix(_tierIndexes, _offsets, _tokenIndexes);\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function airDropWhisbeVandalzToOG(address _to) external onlyOwner {\\n        uint256 _requestId =\\n            COORDINATOR.requestRandomWords(keyHash, s_subscriptionId, requestConfirmations, callbackGasLimit, 1);\\n        vrnfRequestCounter += 1;\\n        s_requestIdToMintDetails[_requestId].push(\\n            MintDetails({ collectionAddress: address(0), beneficiary: _to, tokenId: 0 })\\n        );\\n        s_requestIdToTierIndexes[_requestId][s_requestIdToMintDetails[_requestId].length - 1].push(8); // 8 means tier group 15678\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function creatorMintWhisbeVandalz(\\n        address _to,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _tierIndexes,\\n        uint256[] memory _offsets,\\n        uint256[] memory _tokenIndexes\\n    ) external onlyOwner {\\n        uint256 _tokenIdlen = _tokenIds.length;\\n        uint256 _tierIndexesLen = _tierIndexes.length;\\n        require(_tokenIdlen == _tierIndexesLen, \\\"creatorMintWhisbeVandalz: length mismatch\\\");\\n        IWhIsBeVandalz(whisbeVandalz).creatorMint(_to, _tokenIds);\\n        for (uint256 _i; _i < _tierIndexesLen; _i++) {\\n            if (_tierIndexes[_i] == 0) {\\n                _checkAndUpdateGroupTier15678TokenAvailability(0);\\n                _checkAndUpdateGroupTier135678TokenAvailability(0);\\n            }\\n            if (_tierIndexes[_i] == 2) {\\n                _checkAndUpdateGroupTier135678TokenAvailability(2);\\n            }\\n            if (_tierIndexes[_i] >= 4 && _tierIndexes[_i] <= 7) {\\n                _checkAndUpdateGroupTier15678TokenAvailability(_tierIndexes[_i] - 3);\\n                _checkAndUpdateGroupTier135678TokenAvailability(_tierIndexes[_i] - 2);\\n            }\\n        }\\n        _updateTokenMatrix(_tierIndexes, _offsets, _tokenIndexes);\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function pauseRedeem(bool _state) external onlyOwner {\\n        redeemPaused = _state;\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function updateMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\\n        merkleRoot = _merkleRoot;\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function pausePublicMint(bool _state) external onlyOwner {\\n        publicMintPaused = _state;\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function setPublicSalePrice(uint256 _publicSalePrice) external onlyOwner {\\n        publicSalePrice = _publicSalePrice;\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function setWhitelistState(bool _state) external onlyOwner {\\n        whitelistState = _state;\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function withdrawETH() external onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function renounceWhisbeVandalzOwnership() external onlyOwner {\\n        IWhIsBeVandalz(whisbeVandalz).renounceOwnership();\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function transferWhisbeVandalzOwnership(address newOwner) external onlyOwner {\\n        IWhIsBeVandalz(whisbeVandalz).transferOwnership(newOwner);\\n    }\\n\\n    function setWhisbeVandalzTier(\\n        uint256[] memory _tierIndex,\\n        uint256[] memory _from,\\n        uint256[] memory _to\\n    ) external onlyOwner {\\n        IWhIsBeVandalz(whisbeVandalz).setTier(_tierIndex, _from, _to);\\n    }\\n\\n    function setWhisbeVandalzSupply(uint256 _supply) external onlyOwner {\\n        IWhIsBeVandalz(whisbeVandalz).setSupply(_supply);\\n    }\\n\\n    function revealWhisbeVandalz() external onlyOwner {\\n        IWhIsBeVandalz(whisbeVandalz).reveal();\\n    }\\n\\n    function setWhisbeVandalzBaseExtension(string memory _newBaseExtension) external onlyOwner {\\n        IWhIsBeVandalz(whisbeVandalz).setBaseExtension(_newBaseExtension);\\n    }\\n\\n    function setWhisbeVandalzBaseURI(string memory _newBaseURI) external onlyOwner {\\n        IWhIsBeVandalz(whisbeVandalz).setBaseURI(_newBaseURI);\\n    }\\n\\n    function setWhisbeVandalzNotRevealedURI(string memory _notRevealedURI) external onlyOwner {\\n        IWhIsBeVandalz(whisbeVandalz).setNotRevealedURI(_notRevealedURI);\\n    }\\n\\n    function withdrawWhisbeVandalzETH() external onlyOwner {\\n        IWhIsBeVandalz(whisbeVandalz).withdrawETH();\\n    }\\n\\n    function transferWhisbeVandalzAccidentallyLockedTokens(IERC20 _token, uint256 _amount) external onlyOwner {\\n        IWhIsBeVandalz(whisbeVandalz).transferAccidentallyLockedTokens(_token, _amount);\\n    }\\n\\n    function setWhisbeVandalzRoyaltyInfo(address $royaltyAddress, uint256 $percentage) external onlyOwner {\\n        IWhIsBeVandalz(whisbeVandalz).setRoyaltyInfo($royaltyAddress, $percentage);\\n    }\\n\\n    function setPublicMintTier3Cap(uint256 _amount) external onlyOwner {\\n        publicMintTier3Cap = _amount;\\n    }\\n\\n    function setPublicMintTierGroup15678Cap(uint256 _amount) external onlyOwner {\\n        publicMintTierGroup15678Cap = _amount;\\n    }\\n\\n    function inCaseNftGetStuck(\\n        address _beneficiary,\\n        address _collection,\\n        uint256 _tokenId\\n    ) external onlyOwner {\\n        if (_collection == Constants.GOOD_KARMA_TOKEN) {\\n            IERC1155(_collection).safeTransferFrom(address(this), _beneficiary, 0, 1, \\\"\\\");\\n        } else {\\n            ERC721Burnable(_collection).safeTransferFrom(address(this), _beneficiary, _tokenId);\\n        }\\n    }\\n\\n    function getMintDetails(uint256 _requestId) external view returns (MintDetails[] memory) {\\n        return s_requestIdToMintDetails[_requestId];\\n    }\\n\\n    function getTierIndexes(uint256 _requestId, uint256 _index) external view returns (uint256[] memory) {\\n        return s_requestIdToTierIndexes[_requestId][_index];\\n    }\\n\\n    function supportsInterface(bytes4 $interfaceId)\\n        public\\n        view\\n        override(ERC165Storage, ERC1155Receiver)\\n        returns (bool)\\n    {\\n        return super.supportsInterface($interfaceId);\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     * @param _proof a\\n     */\\n    function publicMint(bytes32[] memory _proof) public payable publicMintNotPaused {\\n        // Notes: 1592 will be comprised of Tier 3 pieces (625 pieces)\\n        // Remaining pieces chosen from Tier 1/5/6/7/8\\n\\n        if (\\n            publicMintTier3Counter >= publicMintTier3Cap &&\\n            publicMintTierGroup15678Counter >= publicMintTierGroup15678Cap\\n        ) {\\n            revert Errors.WhisbeVandalzPeriphery__PublicMintOver();\\n        }\\n\\n        // cannot mint more than two Vandalz\\n        if (publicMintCounter[msg.sender] >= 2) {\\n            revert Errors.WhisbeVandalzPeriphery__PublicMintUpToTwoPerWallet();\\n        }\\n\\n        if (msg.value != publicSalePrice) {\\n            revert Errors.WhisbeVandalzPeriphery__IncorrectPublicSalePrice();\\n        }\\n        if (whitelistState) {\\n            _isWhitelistedAddress(_proof);\\n        }\\n\\n        uint256 _requestId =\\n            COORDINATOR.requestRandomWords(keyHash, s_subscriptionId, requestConfirmations, callbackGasLimit, 1);\\n        vrnfRequestCounter += 1;\\n\\n        s_requestIdToMintDetails[_requestId].push(\\n            MintDetails({ collectionAddress: address(0), beneficiary: msg.sender, tokenId: 0 })\\n        );\\n        s_requestIdToTierIndexes[_requestId][s_requestIdToMintDetails[_requestId].length - 1].push(9); // 9 means tier group 135678\\n    }\\n\\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\\n        uint256 _nftLen = s_requestIdToMintDetails[_requestId].length;\\n        uint256[] memory _ids = new uint256[](_randomWords.length);\\n        uint256 _tierIndexesLen;\\n        uint256 _ranCounter;\\n        for (uint256 _i; _i < _nftLen; _i++) {\\n            if (s_requestIdToMintDetails[_requestId][_i].collectionAddress != address(0)) {\\n                _burnNFT(s_requestIdToMintDetails[_requestId][_i]);\\n            }\\n            _tierIndexesLen = s_requestIdToTierIndexes[_requestId][_i].length;\\n            for (uint256 _j; _j < _tierIndexesLen; _j++) {\\n                uint256 _tierIndex = s_requestIdToTierIndexes[_requestId][_i][_j];\\n                if (_tierIndex == 8) {\\n                    // tier group 15678\\n                    uint256 _groupTier15678IndexesLen = groupTier15678Indexes.length;\\n                    if (_groupTier15678IndexesLen == 0) {\\n                        revert Errors.WhisbeVandalzPeriphery__NoGroupTier15678Group();\\n                    }\\n                    uint256 _randomTier15678GroupIndex = _randomWords[_ranCounter] % _groupTier15678IndexesLen;\\n                    // check and update tier group based on each tier's token availability\\n                    _checkAndUpdateGroupTier15678TokenAvailability(_randomTier15678GroupIndex);\\n\\n                    if (_randomTier15678GroupIndex == 0) {\\n                        _checkAndUpdateGroupTier135678TokenAvailability(_randomTier15678GroupIndex);\\n                    } else {\\n                        _checkAndUpdateGroupTier135678TokenAvailability(_randomTier15678GroupIndex + 1);\\n                    }\\n                    _ids[_ranCounter] = _nextTokenFromTier(\\n                        _randomWords[_ranCounter],\\n                        groupTier15678Indexes[_randomTier15678GroupIndex]\\n                    );\\n                } else if (_tierIndex == 9) {\\n                    // public mint\\n                    if (\\n                        publicMintTier3Counter >= publicMintTier3Cap &&\\n                        publicMintTierGroup15678Counter >= publicMintTierGroup15678Cap\\n                    ) {\\n                        revert Errors.WhisbeVandalzPeriphery__PublicMintOver();\\n                    }\\n                    if (\\n                        publicMintTier3Counter < publicMintTier3Cap &&\\n                        publicMintTierGroup15678Counter < publicMintTierGroup15678Cap\\n                    ) {\\n                        uint256 _groupTier135678IndexesLen = groupTier135678Indexes.length;\\n                        if (_groupTier135678IndexesLen == 0) {\\n                            revert Errors.WhisbeVandalzPeriphery__NoGroupTier135678Group();\\n                        }\\n                        // get random tier index from tier group\\n                        uint256 _randomTier135678GroupIndex = _randomWords[_ranCounter] % _groupTier135678IndexesLen;\\n\\n                        if (groupTier135678Indexes[_randomTier135678GroupIndex] == 2) {\\n                            publicMintTier3Counter += 1;\\n                        } else {\\n                            publicMintTierGroup15678Counter += 1;\\n                        }\\n\\n                        // check and update tier group based on each tier's token availability\\n                        _checkAndUpdateGroupTier135678TokenAvailability(_randomTier135678GroupIndex);\\n\\n                        if (_randomTier135678GroupIndex == 0) {\\n                            _checkAndUpdateGroupTier15678TokenAvailability(_randomTier135678GroupIndex);\\n                        } else if (_randomTier135678GroupIndex >= 2 && _randomTier135678GroupIndex <= 5) {\\n                            _checkAndUpdateGroupTier15678TokenAvailability(_randomTier135678GroupIndex - 1);\\n                        }\\n                        _ids[_ranCounter] = _nextTokenFromTier(\\n                            _randomWords[_ranCounter],\\n                            groupTier135678Indexes[_randomTier135678GroupIndex]\\n                        );\\n                    } else if (publicMintTierGroup15678Counter < publicMintTierGroup15678Cap) {\\n                        uint256 _groupTier15678IndexesLen = groupTier15678Indexes.length;\\n                        if (_groupTier15678IndexesLen == 0) {\\n                            revert Errors.WhisbeVandalzPeriphery__NoGroupTier15678Group();\\n                        }\\n                        uint256 _randomTier15678GroupIndex = _randomWords[_ranCounter] % _groupTier15678IndexesLen;\\n                        // check and update tier group based on each tier's token availability\\n                        _checkAndUpdateGroupTier15678TokenAvailability(_randomTier15678GroupIndex);\\n                        publicMintTierGroup15678Counter += 1;\\n                        if (_randomTier15678GroupIndex == 0) {\\n                            _checkAndUpdateGroupTier135678TokenAvailability(_randomTier15678GroupIndex);\\n                        } else {\\n                            _checkAndUpdateGroupTier135678TokenAvailability(_randomTier15678GroupIndex + 1);\\n                        }\\n                        _ids[_ranCounter] = _nextTokenFromTier(\\n                            _randomWords[_ranCounter],\\n                            groupTier15678Indexes[_randomTier15678GroupIndex]\\n                        );\\n                    }\\n                    publicMintCounter[s_requestIdToMintDetails[_requestId][_i].beneficiary] += 1;\\n                } else {\\n                    _ids[_ranCounter] = _nextTokenFromTier(_randomWords[_ranCounter], _tierIndex);\\n                    if (_tierIndex == 0 || _tierIndex == 4 || _tierIndex == 5 || _tierIndex == 6 || _tierIndex == 7) {\\n                        _checkAndUpdateGroupTier15678TokenAvailability(_tierIndex);\\n                    }\\n                    if (\\n                        _tierIndex == 0 ||\\n                        _tierIndex == 2 ||\\n                        _tierIndex == 4 ||\\n                        _tierIndex == 5 ||\\n                        _tierIndex == 6 ||\\n                        _tierIndex == 7\\n                    ) {\\n                        _checkAndUpdateGroupTier135678TokenAvailability(_tierIndex);\\n                    }\\n                }\\n                _ranCounter += 1;\\n            }\\n        }\\n        IWhIsBeVandalz(whisbeVandalz).creatorMint(s_requestIdToMintDetails[_requestId][0].beneficiary, _ids);\\n    }\\n\\n    /**\\n     * @notice function to check via merkle proof whether an address is whitelisted\\n     * @param _proof the nodes required for the merkle proof\\n     */\\n    function _isWhitelistedAddress(bytes32[] memory _proof) internal view {\\n        bytes32 addressHash = keccak256(abi.encodePacked(msg.sender));\\n        require(MerkleProof.verify(_proof, merkleRoot, addressHash), \\\"Whitelist: caller is not whitelisted\\\");\\n    }\\n\\n    /**\\n     * @dev\\n     * @param _index\\n     */\\n    function _checkAndUpdateGroupTier15678TokenAvailability(uint256 _index) private {\\n        if (availableTierTokenCount(groupTier15678Indexes[_index]) == 0) {\\n            groupTier15678Indexes[_index] = groupTier15678Indexes[groupTier15678Indexes.length - 1];\\n            groupTier15678Indexes.pop();\\n        }\\n    }\\n\\n    /**\\n     * @dev\\n     * @param _index\\n     */\\n    function _checkAndUpdateGroupTier135678TokenAvailability(uint256 _index) private {\\n        if (availableTierTokenCount(groupTier135678Indexes[_index]) == 0) {\\n            groupTier135678Indexes[_index] = groupTier135678Indexes[groupTier135678Indexes.length - 1];\\n            groupTier135678Indexes.pop();\\n        }\\n    }\\n\\n    /**\\n     * @dev Create a new subscription when the contract is initially deployed.\\n     */\\n    function createNewSubscription() private onlyOwner {\\n        s_subscriptionId = COORDINATOR.createSubscription();\\n        // Add this contract as a consumer of its own subscription.\\n        COORDINATOR.addConsumer(s_subscriptionId, address(this));\\n    }\\n\\n    function _burnNFT(MintDetails memory _mintDetails) private {\\n        if (_mintDetails.collectionAddress == Constants.EXTINCTION_OPEN_EDITION_BY_WHISBE) {\\n            ERC721Burnable(_mintDetails.collectionAddress).safeTransferFrom(\\n                address(this),\\n                whisbeVandalz,\\n                _mintDetails.tokenId\\n            );\\n        } else if (_mintDetails.collectionAddress == Constants.GOOD_KARMA_TOKEN) {\\n            IGoodKarmaToken(_mintDetails.collectionAddress).burnTokenForVandal(address(this));\\n        } else {\\n            ERC721Burnable(_mintDetails.collectionAddress).burn(_mintDetails.tokenId);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title\\n * @author\\n */\\nlibrary Constants {\\n    address public constant EXTINCTION_OPEN_EDITION_BY_WHISBE = 0xcD136E30b316837C190241e838639c619516Fdf9;\\n    address public constant THE_HORNED_KARMA_CHAMELEON_BURN_REDEMPTION_BY_WHISBE =\\n        0x41C884CC6847a95CfFf4EaC251173ea72C3c5eFB;\\n    address public constant KARMA_KEY_BLACK_BY_WHISBE = 0xe2C2613E647Ebd03fdC71a1Cf1fD1F938321356c;\\n    address public constant KARMA_KEYS_BY_WHISBE = 0xA53e7Fd6abC0fe9769690Af55f19c2b4A13F2Bc3;\\n    address public constant GOOD_KARMA_TOKEN = 0xC5dd321472f80A3EC9779F55cc1Af854712fAE70;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n/**\\n * @title container of the data types\\n * @author\\n */\\nlibrary DataTypes {\\n    /**\\n     * @notice\\n     * @dev\\n     * @param\\n     * @param\\n     */\\n    struct Tier {\\n        uint256 from;\\n        uint256 to;\\n        uint256 pieces;\\n        Counters.Counter tokenCount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/types/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nlibrary Errors {\\n    error WhisbeVandalz__InvalidCollection(address);\\n    error WhisbeVandalz__EightTiersRequired(uint256);\\n    error ERC721RandomlyAssignVandalzTier__UnavailableTierTokens(uint256);\\n    error WhisbeVandalz__MintNotAvailable();\\n    error WhisbeVandalz__PublicMintUpToTwoPerWallet();\\n    error WhisbeVandalz__NoGroupTier15678Group();\\n    error WhisbeVandalz__NoGroupTier135678Group();\\n    error WhisbeVandalz__NoGroupTier5678Group();\\n    error WhisbeVandalzPeriphery__EightTiersRequired(uint256);\\n    error WhisbeVandalzPeriphery__InvalidCollection(address);\\n    error WhisbeVandalzPeriphery__PublicMintUpToTwoPerWallet();\\n    error WhisbeVandalzPeriphery__MintNotAvailable();\\n    error WhisbeVandalzPeriphery__NoGroupTier135678Group();\\n    error WhisbeVandalzPeriphery__NoGroupTier15678Group();\\n    error WhisbeVandalzPeriphery__PublicMintOver();\\n    error WhisbeVandalzPeriphery__IncorrectPublicSalePrice();\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721RandomlyAssignVandalzTierPeriphery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721Extensions/ERC721LimitedSupply.sol\\\";\\nimport { DataTypes } from \\\"./types/DataTypes.sol\\\";\\nimport { Errors } from \\\"./types/Errors.sol\\\";\\n\\n/**\\n * @title Randomly assign tokenIDs from a given set of tokens.\\n */\\nabstract contract ERC721RandomlyAssignVandalzTierPeriphery is ERC721LimitedSupply {\\n    using Counters for Counters.Counter;\\n\\n    /**\\n     * @dev token id of first token\\n     */\\n    uint256 public startFrom;\\n\\n    /**\\n     * @dev Used for random index assignment\\n     */\\n    mapping(uint256 => mapping(uint256 => uint256)) private tokenMatrix;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    DataTypes.Tier[] public tiers;\\n\\n    /**\\n     * @notice Instanciate the contract\\n     * @param _totalSupply how many tokens this collection should hold\\n     */\\n    constructor(uint256 _totalSupply, uint256 _startFrom) ERC721LimitedSupply(_totalSupply) {\\n        startFrom = _startFrom;\\n    }\\n\\n    /**\\n     * @notice Get the current token count of give tier\\n     * @param _tierIndex the tier index\\n     * @return the created token count of given tier\\n     */\\n    function tierWiseTokenCount(uint256 _tierIndex) public view returns (uint256) {\\n        return tiers[_tierIndex].tokenCount.current();\\n    }\\n\\n    /**\\n     * @notice Check whether tokens are still available for a given tier\\n     * @param _tierIndex the tier index\\n     * @return the available token count for given tier\\n     */\\n    function availableTierTokenCount(uint256 _tierIndex) public view returns (uint256) {\\n        return tiers[_tierIndex].pieces - tiers[_tierIndex].tokenCount.current();\\n    }\\n\\n    function _updateTierTokenCount(uint256 _nextTokenId) internal {\\n        for (uint256 _i; _i < tiers.length; _i++) {\\n            if (_nextTokenId >= tiers[_i].from && _nextTokenId <= tiers[_i].to) {\\n                // Increment tier token count\\n                tiers[_i].tokenCount.increment();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function _updateTokenMatrix(\\n        uint256[] memory _tierIndexes,\\n        uint256[] memory _offsets,\\n        uint256[] memory _tokenIndexes\\n    ) internal {\\n        uint256 _tierIndexesLen = _tierIndexes.length;\\n        uint256 _offsetsLen = _offsets.length;\\n        uint256 _tokenIndexesLen = _tokenIndexes.length;\\n        require(_tierIndexesLen == _offsetsLen && _offsetsLen == _tokenIndexesLen, \\\"Length mismatch\\\");\\n        for (uint256 _i; _i < _tierIndexesLen; _i++) {\\n            // require(tokenMatrix[_tierIndexes[_i]][_offsets[_i]] == 0, \\\"Already initialized\\\");\\n            tokenMatrix[_tierIndexes[_i]][_offsets[_i]] = _tokenIndexes[_i];\\n            tiers[_tierIndexes[_i]].tokenCount.increment();\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the next token ID from given tier\\n     * @dev Randomly gets a new token ID from given tier and keeps track of the ones that are still available.\\n     * @return the next token ID from given tier\\n     */\\n    function _nextTokenFromTier(uint256 _randomNumber, uint256 _tierIndex)\\n        internal\\n        ensureAvailability\\n        returns (uint256)\\n    {\\n        if (availableTierTokenCount(_tierIndex) == 0) {\\n            revert Errors.ERC721RandomlyAssignVandalzTier__UnavailableTierTokens(_tierIndex);\\n        }\\n\\n        uint256 _nextTokenId =\\n            _internalNextToken(\\n                _randomNumber,\\n                _tierIndex,\\n                tiers[_tierIndex].pieces - tiers[_tierIndex].tokenCount.current()\\n            ) + tiers[_tierIndex].from;\\n\\n        // Increment tier token count\\n        tiers[_tierIndex].tokenCount.increment();\\n\\n        return _nextTokenId;\\n    }\\n\\n    function _internalNextToken(\\n        uint256 _randomNumber,\\n        uint256 _tierIndex,\\n        uint256 _maxIndex\\n    ) internal returns (uint256) {\\n        uint256 _value;\\n        _randomNumber = _randomNumber % _maxIndex;\\n        if (tokenMatrix[_tierIndex][_randomNumber] == 0) {\\n            // If this matrix position is empty, set the value to the generated random number.\\n            _value = _randomNumber;\\n        } else {\\n            // Otherwise, use the previously stored number from the matrix.\\n            _value = tokenMatrix[_tierIndex][_randomNumber];\\n        }\\n        // If the last available tokenID is still unused...\\n        if (tokenMatrix[_tierIndex][_maxIndex - 1] == 0) {\\n            // ...store that ID in the current matrix position.\\n            tokenMatrix[_tierIndex][_randomNumber] = _maxIndex - 1;\\n        } else {\\n            // ...otherwise copy over the stored number to the current matrix position.\\n            tokenMatrix[_tierIndex][_randomNumber] = tokenMatrix[_tierIndex][_maxIndex - 1];\\n        }\\n\\n        // Increment counts\\n        super._nextToken();\\n\\n        return _value;\\n    }\\n\\n    function _setTier(\\n        uint256 _tierIndex,\\n        uint256 _from,\\n        uint256 _to\\n    ) internal virtual {\\n        require(_to - _from >= tiers[_tierIndex].pieces, \\\"ERC721RandomlyAssignVandalzTier : misaligned pieces\\\");\\n        tiers[_tierIndex].from = _from;\\n        tiers[_tierIndex].to = _to;\\n        tiers[_tierIndex].pieces = _to - _from + 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721Extensions/ERC721LimitedSupply.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n/**\\n * @title A token tracker that limits the token supply and increments token IDs on each new mint.\\n * @author\\n */\\nabstract contract ERC721LimitedSupply {\\n    using Counters for Counters.Counter;\\n\\n    /**\\n     * @dev Emitted when the supply of this collection changes\\n     */\\n    event SupplyChanged(uint256 indexed supply);\\n\\n    /**\\n     * @dev Keeps track of how many we have minted\\n     */\\n    Counters.Counter private _tokenCount;\\n\\n    /**\\n     * @dev The maximum count of tokens this token tracker will hold.\\n     */\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev Instanciate the contract\\n     * @param totalSupply_ how many tokens this collection should hold\\n     */\\n    constructor(uint256 totalSupply_) {\\n        _totalSupply = totalSupply_;\\n    }\\n\\n    /**\\n     * @notice Get the max Supply\\n     * @return the maximum token count\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @notice Get the current token count\\n     * @return the created token count\\n     */\\n    function tokenCount() public view returns (uint256) {\\n        return _tokenCount.current();\\n    }\\n\\n    /**\\n     * @notice Check whether tokens are still available\\n     * @return the available token count\\n     */\\n    function availableTokenCount() public view returns (uint256) {\\n        return totalSupply() - tokenCount();\\n    }\\n\\n    /**\\n     * @dev Increment the token count and fetch the latest count\\n     * @return the next token id\\n     */\\n    function _nextToken() internal virtual returns (uint256) {\\n        uint256 token = _tokenCount.current();\\n\\n        _tokenCount.increment();\\n\\n        return token;\\n    }\\n\\n    /**\\n     * @dev Check whether another token is still available\\n     */\\n    modifier ensureAvailability() {\\n        require(availableTokenCount() > 0, \\\"No more tokens available\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check whether tokens are still available\\n     * @param amount Check whether number of tokens are still available\\n     */\\n    modifier ensureAvailabilityFor(uint256 amount) {\\n        require(availableTokenCount() >= amount, \\\"Requested number of tokens not available\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update the supply for the collection\\n     * @dev create additional token supply for this collection.\\n     * @param _supply the new token supply.\\n     */\\n    function _setSupply(uint256 _supply) internal virtual {\\n        require(_supply > tokenCount(), \\\"Can't set the supply to less than the current token count\\\");\\n        _totalSupply = _supply;\\n\\n        emit SupplyChanged(totalSupply());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whisbeVandalz\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link_token_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pieces\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"tokenCount\",\"type\":\"tuple\"}],\"internalType\":\"struct DataTypes.Tier[]\",\"name\":\"_tiers\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ERC721RandomlyAssignVandalzTier__UnavailableTierTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WhisbeVandalzPeriphery__EightTiersRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhisbeVandalzPeriphery__IncorrectPublicSalePrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"WhisbeVandalzPeriphery__InvalidCollection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhisbeVandalzPeriphery__NoGroupTier135678Group\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhisbeVandalzPeriphery__NoGroupTier15678Group\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhisbeVandalzPeriphery__PublicMintOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhisbeVandalzPeriphery__PublicMintUpToTwoPerWallet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"SupplyChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINKTOKEN\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedCollections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumerAddress\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"airDropWhisbeVandalzToOG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"}],\"name\":\"availableTierTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receivingWallet\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_offsets\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIndexes\",\"type\":\"uint256[]\"}],\"name\":\"creatorMintWhisbeVandalz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getMintDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct MintDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTierIndexes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupTier135678Indexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupTier15678Indexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"inCaseNftGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tierIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_offsets\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIndexes\",\"type\":\"uint256[]\"}],\"name\":\"migrateTokenMatrix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pausePublicMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pauseRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"publicMintCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintTier3Cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintTier3Counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintTierGroup15678Cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintTierGroup15678Counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_collections\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_tokenIds\",\"type\":\"uint256[][]\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumerAddress\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceWhisbeVandalzOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealWhisbeVandalz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requestIdToMintDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requestIdToTierIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"setCallbackGaslimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"setKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setPublicMintTier3Cap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setPublicMintTierGroup15678Cap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicSalePrice\",\"type\":\"uint256\"}],\"name\":\"setPublicSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_requestConfirmations\",\"type\":\"uint16\"}],\"name\":\"setRequestConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whisbeVandalz\",\"type\":\"address\"}],\"name\":\"setWhIsBeVandalz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseExtension\",\"type\":\"string\"}],\"name\":\"setWhisbeVandalzBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setWhisbeVandalzBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_notRevealedURI\",\"type\":\"string\"}],\"name\":\"setWhisbeVandalzNotRevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"$royaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"$percentage\",\"type\":\"uint256\"}],\"name\":\"setWhisbeVandalzRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"setWhisbeVandalzSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tierIndex\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_from\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_to\",\"type\":\"uint256[]\"}],\"name\":\"setWhisbeVandalzTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setWhitelistState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"$interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierIndex\",\"type\":\"uint256\"}],\"name\":\"tierWiseTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pieces\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"tokenCount\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"topUpSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferWhisbeVandalzAccidentallyLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferWhisbeVandalzOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrnfRequestCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whisbeVandalz\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawWhisbeVandalzETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WhIsBeVandalzPeriphery", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000061cece14e222385d5ac83f3d0cbd518f5feb3559000000000000000000000000271682deb8c4e0901d1a1550ad2e64d568e69909000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca000000000000000000000000000000000000000000000000000000000000293000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000de00000000000000000000000000000000000000000000000000000000000000d3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000df000000000000000000000000000000000000000000000000000000000000039a00000000000000000000000000000000000000000000000000000000000002bc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000039b00000000000000000000000000000000000000000000000000000000000006e4000000000000000000000000000000000000000000000000000000000000034a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006e50000000000000000000000000000000000000000000000000000000000000acb00000000000000000000000000000000000000000000000000000000000003e700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000acc0000000000000000000000000000000000000000000000000000000000000fa200000000000000000000000000000000000000000000000000000000000004d700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa300000000000000000000000000000000000000000000000000000000000017df000000000000000000000000000000000000000000000000000000000000083d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017e00000000000000000000000000000000000000000000000000000000000002b6700000000000000000000000000000000000000000000000000000000000013880000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}