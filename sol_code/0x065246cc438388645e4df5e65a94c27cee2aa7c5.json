{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/epiddha.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// region MainLab\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                0,\\n                \\\"Address: low-level call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        (bool success, bytes memory returndata) = target.call{ value: value }(\\n            data\\n        );\\n        return\\n            verifyCallResultFromTarget(\\n                target,\\n                success,\\n                returndata,\\n                errorMessage\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return\\n            verifyCallResultFromTarget(\\n                target,\\n                success,\\n                returndata,\\n                errorMessage\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return\\n            verifyCallResultFromTarget(\\n                target,\\n                success,\\n                returndata,\\n                errorMessage\\n            );\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage)\\n        private\\n        pure\\n    {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return\\n                result +\\n                (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return\\n                result +\\n                (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return\\n                result +\\n                (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return\\n                result +\\n                (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: address zero is not a valid owner\\\"\\n        );\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: caller is not token owner or approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: caller is not token owner or approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner ||\\n            isApprovedForAll(owner, spender) ||\\n            getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            ERC721.ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer from incorrect owner\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(\\n            ERC721.ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer from incorrect owner\\\"\\n        );\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any (single) token transfer. This includes minting and burning.\\n     * See {_beforeConsecutiveTokenTransfer}.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any (single) transfer of tokens. This includes minting and burning.\\n     * See {_afterConsecutiveTokenTransfer}.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called before \\\"consecutive token transfers\\\" as defined in ERC2309 and implemented in\\n     * {ERC721Consecutive}.\\n     * Calling conditions are similar to {_beforeTokenTransfer}.\\n     */\\n    function _beforeConsecutiveTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /*first*/\\n        uint96 size\\n    ) internal virtual {\\n        if (from != address(0)) {\\n            _balances[from] -= size;\\n        }\\n        if (to != address(0)) {\\n            _balances[to] += size;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after \\\"consecutive token transfers\\\" as defined in ERC2309 and implemented in\\n     * {ERC721Consecutive}.\\n     * Calling conditions are similar to {_afterTokenTransfer}.\\n     */\\n    function _afterConsecutiveTokenTransfer(\\n        address, /*from*/\\n        address, /*to*/\\n        uint256, /*first*/\\n        uint96 /*size*/\\n    ) internal virtual {}\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC721)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            index < ERC721.balanceOf(owner),\\n            \\\"ERC721Enumerable: owner index out of bounds\\\"\\n        );\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            index < ERC721Enumerable.totalSupply(),\\n            \\\"ERC721Enumerable: global index out of bounds\\\"\\n        );\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and 'to' cannot be the zero address at the same time.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any batch token transfer. For now this is limited\\n     * to batch minting by the {ERC721Consecutive} extension.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeConsecutiveTokenTransfer(\\n        address,\\n        address,\\n        uint256,\\n        uint96 size\\n    ) internal virtual override {\\n        // We revert because enumerability is not supported with consecutive batch minting.\\n        // This conditional is only needed to silence spurious warnings about unreachable code.\\n        if (size > 0) {\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\\n        private\\n    {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\\n// library MerkleProof {\\n//     /**\\n//      * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n//      * defined by `root`. For this, a `proof` must be provided, containing\\n//      * sibling hashes on the branch from the leaf to the root of the tree. Each\\n//      * pair of leaves and each pair of pre-images are assumed to be sorted.\\n//      */\\n//     function verify(\\n//         bytes32[] memory proof,\\n//         bytes32 root,\\n//         bytes32 leaf\\n//     ) internal pure returns (bool) {\\n//         return processProof(proof, leaf) == root;\\n//     }\\n\\n//     /**\\n//      * @dev Calldata version of {verify}\\n//      *\\n//      * _Available since v4.7._\\n//      */\\n//     function verifyCalldata(\\n//         bytes32[] calldata proof,\\n//         bytes32 root,\\n//         bytes32 leaf\\n//     ) internal pure returns (bool) {\\n//         return processProofCalldata(proof, leaf) == root;\\n//     }\\n\\n//     /**\\n//      * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n//      * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n//      * hash matches the root of the tree. When processing the proof, the pairs\\n//      * of leafs & pre-images are assumed to be sorted.\\n//      *\\n//      * _Available since v4.4._\\n//      */\\n//     function processProof(bytes32[] memory proof, bytes32 leaf)\\n//         internal\\n//         pure\\n//         returns (bytes32)\\n//     {\\n//         bytes32 computedHash = leaf;\\n//         for (uint256 i = 0; i < proof.length; i++) {\\n//             computedHash = _hashPair(computedHash, proof[i]);\\n//         }\\n//         return computedHash;\\n//     }\\n\\n//     /**\\n//      * @dev Calldata version of {processProof}\\n//      *\\n//      * _Available since v4.7._\\n//      */\\n//     function processProofCalldata(bytes32[] calldata proof, bytes32 leaf)\\n//         internal\\n//         pure\\n//         returns (bytes32)\\n//     {\\n//         bytes32 computedHash = leaf;\\n//         for (uint256 i = 0; i < proof.length; i++) {\\n//             computedHash = _hashPair(computedHash, proof[i]);\\n//         }\\n//         return computedHash;\\n//     }\\n\\n//     /**\\n//      * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n//      * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n//      *\\n//      * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n//      *\\n//      * _Available since v4.7._\\n//      */\\n//     function multiProofVerify(\\n//         bytes32[] memory proof,\\n//         bool[] memory proofFlags,\\n//         bytes32 root,\\n//         bytes32[] memory leaves\\n//     ) internal pure returns (bool) {\\n//         return processMultiProof(proof, proofFlags, leaves) == root;\\n//     }\\n\\n//     /**\\n//      * @dev Calldata version of {multiProofVerify}\\n//      *\\n//      * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n//      *\\n//      * _Available since v4.7._\\n//      */\\n//     function multiProofVerifyCalldata(\\n//         bytes32[] calldata proof,\\n//         bool[] calldata proofFlags,\\n//         bytes32 root,\\n//         bytes32[] memory leaves\\n//     ) internal pure returns (bool) {\\n//         return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n//     }\\n\\n//     /**\\n//      * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n//      * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n//      * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n//      * respectively.\\n//      *\\n//      * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n//      * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n//      * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n//      *\\n//      * _Available since v4.7._\\n//      */\\n//     function processMultiProof(\\n//         bytes32[] memory proof,\\n//         bool[] memory proofFlags,\\n//         bytes32[] memory leaves\\n//     ) internal pure returns (bytes32 merkleRoot) {\\n//         // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n//         // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n//         // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n//         // the merkle tree.\\n//         uint256 leavesLen = leaves.length;\\n//         uint256 totalHashes = proofFlags.length;\\n\\n//         // Check proof validity.\\n//         require(\\n//             leavesLen + proof.length - 1 == totalHashes,\\n//             \\\"MerkleProof: invalid multiproof\\\"\\n//         );\\n\\n//         // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n//         // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n//         bytes32[] memory hashes = new bytes32[](totalHashes);\\n//         uint256 leafPos = 0;\\n//         uint256 hashPos = 0;\\n//         uint256 proofPos = 0;\\n//         // At each step, we compute the next hash using two values:\\n//         // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n//         //   get the next hash.\\n//         // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n//         //   `proof` array.\\n//         for (uint256 i = 0; i < totalHashes; i++) {\\n//             bytes32 a = leafPos < leavesLen\\n//                 ? leaves[leafPos++]\\n//                 : hashes[hashPos++];\\n//             bytes32 b = proofFlags[i]\\n//                 ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++]\\n//                 : proof[proofPos++];\\n//             hashes[i] = _hashPair(a, b);\\n//         }\\n\\n//         if (totalHashes > 0) {\\n//             return hashes[totalHashes - 1];\\n//         } else if (leavesLen > 0) {\\n//             return leaves[0];\\n//         } else {\\n//             return proof[0];\\n//         }\\n//     }\\n\\n//     /**\\n//      * @dev Calldata version of {processMultiProof}.\\n//      *\\n//      * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n//      *\\n//      * _Available since v4.7._\\n//      */\\n//     function processMultiProofCalldata(\\n//         bytes32[] calldata proof,\\n//         bool[] calldata proofFlags,\\n//         bytes32[] memory leaves\\n//     ) internal pure returns (bytes32 merkleRoot) {\\n//         // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n//         // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n//         // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n//         // the merkle tree.\\n//         uint256 leavesLen = leaves.length;\\n//         uint256 totalHashes = proofFlags.length;\\n\\n//         // Check proof validity.\\n//         require(\\n//             leavesLen + proof.length - 1 == totalHashes,\\n//             \\\"MerkleProof: invalid multiproof\\\"\\n//         );\\n\\n//         // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n//         // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n//         bytes32[] memory hashes = new bytes32[](totalHashes);\\n//         uint256 leafPos = 0;\\n//         uint256 hashPos = 0;\\n//         uint256 proofPos = 0;\\n//         // At each step, we compute the next hash using two values:\\n//         // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n//         //   get the next hash.\\n//         // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n//         //   `proof` array.\\n//         for (uint256 i = 0; i < totalHashes; i++) {\\n//             bytes32 a = leafPos < leavesLen\\n//                 ? leaves[leafPos++]\\n//                 : hashes[hashPos++];\\n//             bytes32 b = proofFlags[i]\\n//                 ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++]\\n//                 : proof[proofPos++];\\n//             hashes[i] = _hashPair(a, b);\\n//         }\\n\\n//         if (totalHashes > 0) {\\n//             return hashes[totalHashes - 1];\\n//         } else if (leavesLen > 0) {\\n//             return leaves[0];\\n//         } else {\\n//             return proof[0];\\n//         }\\n//     }\\n\\n//     function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n//         return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n//     }\\n\\n//     function _efficientHash(bytes32 a, bytes32 b)\\n//         private\\n//         pure\\n//         returns (bytes32 value)\\n//     {\\n//         /// @solidity memory-safe-assembly\\n//         assembly {\\n//             mstore(0x00, a)\\n//             mstore(0x20, b)\\n//             value := keccak256(0x00, 0x40)\\n//         }\\n//     }\\n// }\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\n\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\\n// endregion\\n\\ncontract Epiddha is ERC721Enumerable, IERC2981, ReentrancyGuard, Ownable {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _nextTokenId;\\n\\n    constructor() ERC721(\\\"Epiddha\\\", \\\"EPI\\\") {\\n        customBaseURI = \\\"http://epiddha.io/nft/metadata/\\\";\\n        allowedMintCountMap[0x6DF916b50EcAA4A6add5fFfDaAdC80B1B757CEf3] = 30;\\n        allowedMintCountMap[0x34b0EfE74aE1FB54343e4A4AC5F05c2d34A33f8B] = 30;\\n        allowedMintCountMap[0xE54FeC8f28c1705EE3F42d203D3fF5aF6aD52893] = 30;\\n        allowedMintCountMap[0x1d41D6B1091C1a8A334096771bd1776019243d5e] = 30;\\n        allowedMintCountMap[0x67592072be349f16622986ec18E6b2c54c5fcC0d] = 20;\\n        allowedMintCountMap[0xC0c2e5D7E4d59b63B25f6cc9fCb7c52c76e981f9] = 1;\\n        allowedMintCountMap[0xEC1fFF8e6E519B21b2bd7d8a6E9803A21b7eDcec] = 1;\\n        allowedMintCountMap[0x82E6b17b47dc6f96E29392256370C5745ED71ADa] = 1;\\n        allowedMintCountMap[0x4Cd0A6Bc401b728e2977dc352eB72A50156E123B] = 1;\\n        allowedMintCountMap[0x5A9999171AF407298b1Cc9993f779a1eD94768E1] = 1;\\n        allowedMintCountMap[0x7988e87F9B4aDf9C2D6b6ED79A11B088681bAeaE] = 1;\\n        allowedMintCountMap[0xB6e82950B2D6FB64BB35b61456B90D103087D796] = 1;\\n        allowedMintCountMap[0xd4dFf494527500241126DDF910a0b21fe09D6990] = 1;\\n        allowedMintCountMap[0xc6cC81f525eA2232F451e765e86959E37C376fEF] = 1;\\n        allowedMintCountMap[0xec7978fc8c9C5Cb718F096e10801648f53f0dd95] = 1;\\n        allowedMintCountMap[0xea012B4394cBc5cBD592B8998e979E7b51617f46] = 1;\\n        allowedMintCountMap[0x600aA0E703f7bEA5FFE2344da9aB037eF83118E5] = 1;\\n        allowedMintCountMap[0x1E126C22b765760aB283De230891F76b3A7c35A3] = 1;\\n        allowedMintCountMap[0x6c2608bc3d87637dfa1e38dEa49a0a426d8206AA] = 1;\\n        allowedMintCountMap[0xcEA048974d1D8394AB5fb0d66B53C23B1794EeCb] = 1;\\n        allowedMintCountMap[0x09c25858D90b63FE8F2F225322B314ec802E153A] = 1;\\n        allowedMintCountMap[0x5bEF493EFC3aCC42F3c6Af93Cd942c7A2FC520Fb] = 1;\\n        allowedMintCountMap[0x3D971E8D2eD8c0B43bb91215DbF9a3d6Def2267c] = 1;\\n        allowedMintCountMap[0x61324B5db9e3f99123a9B5794e8898783FcB1e3a] = 1;\\n        allowedMintCountMap[0x33D035283F2e58ed0670731a7971B05ba36Fb0a1] = 1;\\n        allowedMintCountMap[0xeF15d4d1fB0B26CC4158087963E183f41c38AbF1] = 1;\\n        allowedMintCountMap[0x51F5B0F48843E37044f35f5c75e6bD7E4d7568Ad] = 1;\\n        allowedMintCountMap[0x1234287b487e9df877337b66AA9306045ACE557e] = 1;\\n        allowedMintCountMap[0x13f19C81C97CE9d9C91dCd6CdbA50F1484AEC370] = 1;\\n        allowedMintCountMap[0xB818EE8102e566207d32217CD38aCb6A9211007b] = 1;\\n        allowedMintCountMap[0x2c81EFd9C410678217e22435F070ddc998EB0D75] = 1;\\n        allowedMintCountMap[0x26426AA335BB400c1fE8C32CF9eCCB65fa321Bd3] = 1;\\n        allowedMintCountMap[0x8aB092F018C1C36cCc8176ca601510120c70B6C9] = 1;\\n        allowedMintCountMap[0x1dcb20Adf398062BC861CFAFe8b72f26cc365686] = 1;\\n        allowedMintCountMap[0x0b0E075bFD7a7519A57A7BdFb1ccA366F362901c] = 1;\\n        allowedMintCountMap[0xB27e4958954d8b5B9FFAebf416AE235235CdE651] = 1;\\n        allowedMintCountMap[0x5D4207c8a59756dC23d99aC42CeFF0e2DFEf4064] = 1;\\n        allowedMintCountMap[0x4D8563A0c8761b56edBBD926bb844ADaca7A2cA6] = 1;\\n        allowedMintCountMap[0x5dD033716ED8293638deE697C08c7Dc107aC818C] = 1;\\n        allowedMintCountMap[0x0Dc9B90425ab8DAeAE34B961c69c974072321dC4] = 1;\\n        allowedMintCountMap[0xC59918bfC0eEA90bb664d6D2F9A71FC1DCCE0Ae3] = 1;\\n        allowedMintCountMap[0x7972CEC35cAeb514B24B811cb338BAeaD3341ff9] = 1;\\n        allowedMintCountMap[0xca85b2cdd59726F60D85e7B8bfA86a66ceE3ee68] = 1;\\n        allowedMintCountMap[0xf0f89A8B93e9093B999A92457E012350ef78Bee0] = 1;\\n        allowedMintCountMap[0x9D0281fE2cC6C271525F1fB21C08580ea3d38FC1] = 1;\\n        allowedMintCountMap[0xc5616e5A7b707b715Ee0e71291e7F6C17E345030] = 1;\\n        allowedMintCountMap[0x0DE30115A4B0D10B0e156daf07625eDA72B10010] = 1;\\n        allowedMintCountMap[0x4Df25F8ad2b1cd4fa985A78ee7DF0f4C00dc091d] = 1;\\n        allowedMintCountMap[0x02a2FEea6338aeBd9488c58F827d85054a71e65c] = 1;\\n        allowedMintCountMap[0x6Ec3951505f4f38e5E3e42be06F3877B375e1bFc] = 1;\\n        allowedMintCountMap[0xc02Aa80d6FbE85B78d7b34039B80315fD0376dDC] = 1;\\n        allowedMintCountMap[0xcDb00df61fAB72C6c1A1D757176E20B2583a844E] = 1;\\n        allowedMintCountMap[0x7D41abfD292a51b5aD1D346B592128f94d17fCBC] = 1;\\n        allowedMintCountMap[0xe8111e939364bb675BA2cECBdd253130D79e023e] = 1;\\n        allowedMintCountMap[0x665Df2dfc3B6F26E6803E85B917AEE629eBd4C75] = 1;\\n        allowedMintCountMap[0xe3037515524469Fbe2d521f750A3264C07EE811b] = 1;\\n        allowedMintCountMap[0x683aDa75FA2e795A8e134690c424A37dA5E570A0] = 1;\\n        allowedMintCountMap[0x5D964eC9b24236AE2Bd51e851338704AfB358A85] = 1;\\n        allowedMintCountMap[0xe28E4446494A667C71EE12798374B6F9D127e606] = 1;\\n        allowedMintCountMap[0xf167e383fE4Ed877e28e42f74F46F8A17061E4C7] = 1;\\n        allowedMintCountMap[0x1e7d1ad7FE2372eF64Bd4238d47891f675C75425] = 1;\\n        allowedMintCountMap[0x308bdB076678502a5407f7483AbbBFf7f1B8Ea68] = 1;\\n        allowedMintCountMap[0x91341D437DeafFF9CDe16a8b79fF58F997e5A0DB] = 1;\\n        allowedMintCountMap[0x01ed25CA4d5c728226d15149a4BfC622aCce64A7] = 1;\\n        allowedMintCountMap[0xebB1220E79Bd6fe01489Ee4eb5C419485582FE8B] = 1;\\n        allowedMintCountMap[0xd0943ED25bFA2e5a847D1A637d5b355aF334ccC7] = 1;\\n        allowedMintCountMap[0xca08542FB2C5aB11D406070ef7C29C0cfc2a2AD8] = 1;\\n        allowedMintCountMap[0xE8fe36bdA624f2b09322a81c1Ba25A4328fCae78] = 1;\\n        allowedMintCountMap[0xB55be0842771DaAB7Fbf6662C1bcD0B512D9A20a] = 1;\\n        allowedMintCountMap[0x00794b7B900165F452e2b02cC191e6b8B6F8F869] = 1;\\n        allowedMintCountMap[0xb8067570EE1c208EE9E4C61cF2E98cb882c1779E] = 1;\\n        allowedMintCountMap[0x5B8687f15C3eDBa87551787e2C7f68931F8f9074] = 1;\\n        allowedMintCountMap[0x271f971A031F30f9869D6B8835313b3e5939Cc9C] = 1;\\n        allowedMintCountMap[0x61560Fb79242A875408667353998db29153DaAFD] = 1;\\n        allowedMintCountMap[0x483Bc954aB5D1Ac43D743AbC847595303E0884F2] = 1;\\n        allowedMintCountMap[0x6063a4f96dC0b302A801A41BbeD9fd439f18BBEc] = 1;\\n        allowedMintCountMap[0x24a7750D542c9322112C84F5192fbbea0295De7D] = 1;\\n        allowedMintCountMap[0xFd60aFC70AA37d66737c2EFd06165550d41E88b9] = 1;\\n        allowedMintCountMap[0xF9c1f445736229680dF68f85b1F6c22E627A3f48] = 1;\\n        allowedMintCountMap[0xb8C52a4654DC0E8184a352755c30F8955B83e1B8] = 1;\\n        allowedMintCountMap[0x08d7eF7E2539F86Da7EDd1B993389935712D015D] = 1;\\n        allowedMintCountMap[0xb72616e80b0dEd8EEb9F642c24E651ddF5D96D6f] = 1;\\n        allowedMintCountMap[0x5801A83A13499B18eD301abb18D21fc7eB9844b5] = 1;\\n        allowedMintCountMap[0xD3bFCD76F8278a9e449AaeEC2cB2DFD2cFD215A5] = 1;\\n        allowedMintCountMap[0xb2973b2d1C150ACce90c7fc1cD5094261CbfdFaC] = 1;\\n        allowedMintCountMap[0x4721ef94251577691B641bB85030Be2287a46D18] = 1;\\n        allowedMintCountMap[0xd88cCdB3C32bA2654c21764408F0584676Ad4B23] = 1;\\n        allowedMintCountMap[0xe699985A927f73d44D06a1E996778E25db84130f] = 1;\\n        allowedMintCountMap[0x648198e33CED71AdbE3e7080C6e5Fa4De3590B76] = 1;\\n        allowedMintCountMap[0xd07898A7a44e93c9b1CD1C08A131C46451eb80A7] = 1;\\n        allowedMintCountMap[0xBB973F31Aa80C3B0e50741124C454ee44A09cf47] = 1;\\n        allowedMintCountMap[0xcF8D75809E9Cf0dC2D4D0eDeE65e87EB8005c3F4] = 1;\\n        allowedMintCountMap[0x23C7E5B1AD818F47b11d2E2dB65951A63D6Bcb7c] = 1;\\n        allowedMintCountMap[0x1A7e84f0cADa599E218C812E9aF0eFC5FF7FFE1C] = 1;\\n        allowedMintCountMap[0x06be64300CBD67aB0235176c76DAE2Bd99774fd0] = 1;\\n        allowedMintCountMap[0xdaD0c5b772B4bd0a4839C669cf1e95973779F0a7] = 1;\\n        allowedMintCountMap[0xBEe643FD4e58b2a4fd05685157F30aD9a5805e62] = 1;\\n        allowedMintCountMap[0x3ef6DF5BcC8B21227Dd8cEE92933592867ECfEa5] = 1;\\n        allowedMintCountMap[0xb06b0E1F00FE3Cf4c8Afd6D31d702Ebae6585eeF] = 1;\\n        allowedMintCountMap[0x839Bdf02465933A6a81356F9a48a9199b847DC70] = 1;\\n        allowedMintCountMap[0xB7572926ECc5937648f5FF2bB831A76cf6515A45] = 1;\\n        allowedMintCountMap[0x87bD9bFd74f995b52b8a498B41004dA2d4102645] = 1;\\n        allowedMintCountMap[0x4dEEA126bE27C80372C7e3a013EE1874188AC521] = 1;\\n        allowedMintCountMap[0xeCFbC7Ea4527A5326a07B26654B1601edcaf63B7] = 1;\\n        allowedMintCountMap[0x59E2fbA1B76F5fDA66Ee1fB64dd1c933203170Da] = 1;\\n        allowedMintCountMap[0xea4F5679Ab286d502016De868019a5A47629Abf6] = 1;\\n        allowedMintCountMap[0x531e2B80962557d0F170e4D55a41A1D59577e448] = 1;\\n        allowedMintCountMap[0x5779721C386bDd24FCF4AC144B8Ac463525D48CB] = 1;\\n        allowedMintCountMap[0x91e1265E1346390F9bdeA99E03bB8068eCF1ED39] = 1;\\n        allowedMintCountMap[0xEc6B015F5c023056d610C71316F0D4e244a716F2] = 1;\\n        allowedMintCountMap[0x830011E3BD0A6c68d7444C03a58E9Af6849A54dD] = 1;\\n        allowedMintCountMap[0x3a33F96D7dA0831b3FeffE46041510f0AEA9a2d8] = 1;\\n        allowedMintCountMap[0x8A652f9C667AEa7ab752703D50e8085dD535c772] = 1;\\n        allowedMintCountMap[0xaA18E269df3179DC4bfffd22CD87e1e97Ead6Da4] = 1;\\n        allowedMintCountMap[0xEEf563b5010D5B7af6f095757bf616f7e379A682] = 1;\\n        allowedMintCountMap[0xcF14F4Ae13E6C24f764F9Bc5d8C463562BB1498A] = 1;\\n        allowedMintCountMap[0x132a4945268148eCAf29D307c25766d9bD7e650D] = 1;\\n        allowedMintCountMap[0x64684587C187Ab56908785379bD1da5EcE619bb7] = 1;\\n        allowedMintCountMap[0x48693e852fcAe08711c92Ba129d1CcEd68448DfA] = 1;\\n        allowedMintCountMap[0x17dD29B5C7b6eD64eE4b320BedDe9A73a08979a1] = 1;\\n        allowedMintCountMap[0xa9C7144Bf6a17953DE1A327260e2AA37AD4561cE] = 1;\\n        allowedMintCountMap[0x7F588cC9Da18fAD315267054D173b2494888E873] = 1;\\n        allowedMintCountMap[0x4746D74127C272A144746a1f6acc1ad127A13801] = 1;\\n        allowedMintCountMap[0xC44d28D395EA961489991A85a4916c45f40912fd] = 1;\\n        allowedMintCountMap[0x60A1205A12F067c2F34025D111AB50F177682260] = 1;\\n        allowedMintCountMap[0xc944702447aa8BCb654FcB0937936778D086550f] = 1;\\n        allowedMintCountMap[0x2A3246975a0f32D0a78B90dd43a7AB8B1BA9A522] = 1;\\n        allowedMintCountMap[0xADDA95d3216336B3f7D5E7f94e94CB7988f498d0] = 1;\\n        allowedMintCountMap[0x4202Be88a1383BA719d8799e599A033967AbaeD4] = 1;\\n        allowedMintCountMap[0xb5ad42578F6A2B54c89901D09CE61149aef0B306] = 1;\\n        allowedMintCountMap[0x18cb209CEB60EeF8Be62e6F990d6B8b1A5303E28] = 1;\\n        allowedMintCountMap[0x78D77ACee2E154bA6A9ed28Fa40b768E09b3D804] = 1;\\n        allowedMintCountMap[0x449Edd96266072545CF143Fdfdd19c990c3d2BAc] = 1;\\n        allowedMintCountMap[0x673CDbFEf2642959E6B36Dde25c20b92952059D1] = 1;\\n        allowedMintCountMap[0x733D6295dbB57ca1f680fcbc00C128276237e759] = 1;\\n        allowedMintCountMap[0x3c34BD86fca5dCBf187FC9389012979990389c69] = 1;\\n        allowedMintCountMap[0x2Df095eD98b0Fd1FD6C2318585866d1459D86342] = 1;\\n        allowedMintCountMap[0xBC72d99C4D8B5872a8122244AfC84C1635194816] = 1;\\n        allowedMintCountMap[0xb3627a7C3e8dCBd8c2C5241Cf104575b8F9d5fe1] = 1;\\n        allowedMintCountMap[0xc457bc3BC88936358eeB5eaB5b2e3CD513c193b3] = 1;\\n        allowedMintCountMap[0x39F88a06891e289B084439362E8c98E745e0922c] = 1;\\n        allowedMintCountMap[0x084d7AaC7C474b089ca7139ae69cc768e368c3b2] = 1;\\n        allowedMintCountMap[0xA84B99E0401ae772354c850Cbcd2aDFd70e3b1b5] = 1;\\n        allowedMintCountMap[0x503d6fD533D1461fCDD9c5680766D538ffDbA783] = 1;\\n        allowedMintCountMap[0xDd33A5911cff5898f4138FD92607B8a028D26615] = 1;\\n        allowedMintCountMap[0x279648C291D4105444Cb989aAE8E54F81a888888] = 1;\\n        allowedMintCountMap[0xb1f0b4E47777e36F2fBEd4be3c9f3A37021Fc738] = 1;\\n        allowedMintCountMap[0x5286148f221e281b4034460140D5b63A39138e23] = 1;\\n        allowedMintCountMap[0x66Ea720B6EbefbC5E3859224FA291917517f3F86] = 1;\\n        allowedMintCountMap[0x253fE8AE5928566e9D9bD5869224EDEabbf1a40f] = 1;\\n        allowedMintCountMap[0x96484ba64C68607948B291e049D88fc2519Db8F6] = 1;\\n        allowedMintCountMap[0xB516e1DcE42180E06Ae485F1e251D5182eb6dd00] = 1;\\n        allowedMintCountMap[0x90587D9e4367992Aba93a67ea769Ae311e59469A] = 1;\\n        allowedMintCountMap[0x81BcC999C78655A792fCe41B96c214a1825d5cA1] = 1;\\n        allowedMintCountMap[0x164125DE6C55d2D20114d29370A2c812D7Be0B15] = 1;\\n        allowedMintCountMap[0xA91CAEECDf26767D8854DeAE5C9f30e73E3A2781] = 1;\\n        allowedMintCountMap[0xddb4221BF7E90A1484691130B0CB29A464377251] = 1;\\n        allowedMintCountMap[0x41c9A2Ded029B2Cd778D8A0FF3FDc0f20dc49B5E] = 1;\\n        allowedMintCountMap[0x161c5F394eE4c3e927d505c5DE51F93DdBb31B31] = 1;\\n        allowedMintCountMap[0x61D19fAdD34126e3334367c75a7dCbDeA6f6302F] = 1;\\n        allowedMintCountMap[0xdbAB7B57260107b7ac52FF68F6064d11D200F84E] = 1;\\n        allowedMintCountMap[0xE7225786EFd0E78a708CaDB2b2Ab88b42988Ec0B] = 1;\\n        allowedMintCountMap[0x2402F9AabDc6c1A229aF682eF3eb19BC21D0FAc1] = 1;\\n        allowedMintCountMap[0x09bc26E006c088f22Ff8782488Af1BF4fF0599A2] = 1;\\n        allowedMintCountMap[0xbbBF89cB082AEc247Fd52c6D8F985a72f7235df0] = 1;\\n        allowedMintCountMap[0x99CDf3C8f76228dEA41BCE3B578A998c619bD6b7] = 1;\\n        allowedMintCountMap[0xe8Ad39917651fD07E9b2FA5192aE95011F6C48Bf] = 1;\\n        allowedMintCountMap[0xE9962C1901d540A9ed2332abF0Eb27a402fFC568] = 1;\\n        allowedMintCountMap[0xa84F6967a3d1a1977ED84E8757264AA7cd8bC849] = 1;\\n        allowedMintCountMap[0x75Cf7533e708aC27D5f223C72369B2AA5ee0E07D] = 1;\\n        allowedMintCountMap[0xC3AaEb8DA38850083849E7EA490Ea41859c51941] = 1;\\n        allowedMintCountMap[0xf02aa140a3893acA9CC60e03C71E3c8A5eEC8550] = 1;\\n        allowedMintCountMap[0x684A3875a3c071cd14aB33AB2e9d454F5E185f64] = 1;\\n        allowedMintCountMap[0xe80f13DFae5A16a73433a0B51991641193cB6C91] = 1;\\n        allowedMintCountMap[0x55D909855Af65280494aF9fA4fC4532902E80206] = 1;\\n        allowedMintCountMap[0xe9Be604826618ce3927E21F9945c97D039827773] = 1;\\n        allowedMintCountMap[0xe90FCD8046E03EB27B8E5B2CcA72B94a01767ce1] = 1;\\n        allowedMintCountMap[0x730F69a6F60109674bF112f7A7F353a8fA6A1b7E] = 1;\\n        allowedMintCountMap[0xd2e40B96cC2905b8cd9D0f0a16fCb4F7726B919f] = 1;\\n        allowedMintCountMap[0xf42CdC13e0e99CF01980880357D9B68DC4d42083] = 1;\\n        allowedMintCountMap[0x5F87d6F2B82307F323E3e228D550dfD7A24e418C] = 1;\\n        allowedMintCountMap[0xC35286543dEd4F6445A543d58114EaB81B61C3Fa] = 1;\\n        allowedMintCountMap[0xB1C2c8f628C02B07dC9acc35963Af1c16D33e600] = 1;\\n        allowedMintCountMap[0xDA44D8268c23fb4Dc36Fb8F20A43115C79c5C79e] = 1;\\n        allowedMintCountMap[0x91b2320Ae01ed6F6A38f839B29a494bc505CC2Ec] = 1;\\n        allowedMintCountMap[0x2c3f4a55119809C1a778239Fd124630F5D9F530B] = 1;\\n        allowedMintCountMap[0x7311349f953f1F1542BEA688773322fF20Dd23Ed] = 1;\\n        allowedMintCountMap[0x73306b851A2d65C8fc8C4Fc01e5106F81EADBe27] = 1;\\n        allowedMintCountMap[0x6272EdB04f1593d7c8b30F5e34A037c72A5fe90e] = 1;\\n        allowedMintCountMap[0xAD990b2D8f63Cef4De48D9B685c3A712b621BE3e] = 1;\\n        allowedMintCountMap[0x0B2eD5C908D190c8dd60D06fFBCF7Fa9e1F16555] = 1;\\n        allowedMintCountMap[0xac3294bFE480609c942Ac5AFA65B49796A1294Bf] = 1;\\n        allowedMintCountMap[0x2b1f45DD72b278A829f0d047eB7Ed8A64EC80D92] = 1;\\n        allowedMintCountMap[0x71Aa6C4e87225fcAE2Df49f977C7FC0d1e8D2112] = 1;\\n        allowedMintCountMap[0x2781c274c184a90bF89f1f379232D8e3Ce3b1EcC] = 1;\\n        allowedMintCountMap[0xbB5adeD238318e9BF0a35e9F07B4F093262E9563] = 1;\\n        allowedMintCountMap[0x59b7AbbAa34De9f94A6ff79bD4531CD844637D0c] = 1;\\n        allowedMintCountMap[0x759BBDc0041d5A8F2be70D62791bA3e5947790aE] = 1;\\n        allowedMintCountMap[0x32ad63334bfC4EeA5B35329dc413B4b42D50eE7a] = 1;\\n        allowedMintCountMap[0x0F6e4145E878aE9047D55c5f24c7337D27a9Bc89] = 1;\\n        allowedMintCountMap[0xb3359A62fA47808c40979A40113C79744AB9cda7] = 1;\\n        allowedMintCountMap[0x3bc94735148FaCA654303ad25772eC5180fd6518] = 1;\\n        allowedMintCountMap[0x6d48c4bAb4AbEb7f8a907b80E55652f80A52777F] = 1;\\n        allowedMintCountMap[0xbA2b4240Ac736382b3549CfFE317Ef6868b5CFf1] = 1;\\n        allowedMintCountMap[0x4EA7558954Ffa62FD96Cb8AeebDC88469dB9311b] = 1;\\n        allowedMintCountMap[0x98cb129fBB5f792c9435E31368a2d66b99CA26C1] = 1;\\n        allowedMintCountMap[0xB1Bc710367b823da9a8461911878a785FED3d3c5] = 1;\\n        allowedMintCountMap[0x62e7ADaa619CE749e1E0bd4B31a71627978a36e2] = 1;\\n        allowedMintCountMap[0x28944257E11dbBbA3E0B9e0FDE7A9B4fbf8e572b] = 1;\\n        allowedMintCountMap[0xD0eFDFECe440aeae7F14be5E9E450d8b4839DFa6] = 1;\\n        allowedMintCountMap[0xde4059c8D60AF59677DBAbfDbE2c657b7F56C892] = 1;\\n        allowedMintCountMap[0xd1248C3979590A1A614f19E75a5bc30348c94828] = 1;\\n        allowedMintCountMap[0xF520523D8e902315D2DfB3F450efFe7D40E8272e] = 1;\\n        allowedMintCountMap[0x9388D79b22eE2ff60Ed703A7ddB9B1FB31007B7d] = 1;\\n        allowedMintCountMap[0x2229B8737d05769a8738b35918dDB17b5A52c523] = 1;\\n        allowedMintCountMap[0x6DD4086482d6F11c9CB001E45e83387EA45d4e0e] = 1;\\n        allowedMintCountMap[0xc3Caaa4a9422c625B9D7ac785BE66aBAf017584A] = 1;\\n        allowedMintCountMap[0xdcFb56b3BE21F511ea725Fc36973c4F39aA822B9] = 1;\\n        allowedMintCountMap[0xD7646114Bd2f5953391aBdA4e1439DC5D193961c] = 1;\\n        allowedMintCountMap[0xd361EAb04568FE2Ddd38EF0512bc1e010c473A76] = 1;\\n        allowedMintCountMap[0x98E78dDDb43B667C39c78B2d76630e10a290D78d] = 1;\\n        allowedMintCountMap[0x051C5559BC2a7Bd0066E58006E6747B4e7A7c328] = 1;\\n        allowedMintCountMap[0xa04082A4fc3A2D72138F034eC99F316aC5A90906] = 1;\\n        allowedMintCountMap[0x1b3f247965416346219487764f3B62fa8B219987] = 1;\\n        allowedMintCountMap[0x4a003D049B5Bdc48321053c92E37e48f78F03E16] = 1;\\n        allowedMintCountMap[0xFfFb3EdF7f5A408c2D657b605D787B15453b041f] = 1;\\n        allowedMintCountMap[0x77d6f5c54BBe2192281F7F49F673E786B0Fb88FC] = 1;\\n        allowedMintCountMap[0x27E979A437AAB21c32bea13eaECb41a481278E7A] = 1;\\n        allowedMintCountMap[0xDd4E23c1B224Ccfc83ff74903AFd58631e92a549] = 1;\\n        allowedMintCountMap[0x49Aa097eDDdb55Ef0503896974a447B5662874A5] = 1;\\n        allowedMintCountMap[0xE8C6368bf2Be291d64ED75Ca8fF9938D5Cc5CB5D] = 1;\\n        allowedMintCountMap[0xd732251bbcFb4B0E2c76E2cDC86a47f19B403e8f] = 1;\\n        allowedMintCountMap[0xAD80D10BE4C958ace6282347C15F3AD2E8C90475] = 1;\\n        allowedMintCountMap[0x2BF753B472998eecFdF86179d48C1c2d3e7e0284] = 1;\\n        allowedMintCountMap[0x81CBaDde0e6B853C999C903ea5d18eD643248196] = 1;\\n        allowedMintCountMap[0x100105Dc358a639C091C2E111f660E080E7382cB] = 1;\\n        allowedMintCountMap[0x3A01602A9E57B2B007635057e9CDa96080d7c2Dd] = 1;\\n        allowedMintCountMap[0x005ff96c67B622eE16598fDb7e2326c074A21836] = 1;\\n        allowedMintCountMap[0x3041138595603149b956804cE534A3034F35c6Aa] = 1;\\n        allowedMintCountMap[0x3A0Dd33BdCDd070d63208C6e57765f8fF787411D] = 1;\\n        allowedMintCountMap[0xbEe1f7e369B3271088Ed58bF225DF13Cd96D32d5] = 1;\\n        allowedMintCountMap[0x24Adab15FA8EC421A1Dd572A107D56F8b2F91008] = 1;\\n        allowedMintCountMap[0x79a752ad1CAFdCb189EA5A8d25bb112C57e767d9] = 1;\\n        allowedMintCountMap[0xe451F67fa26b860333D5866C7cCe3d73570bF6d3] = 1;\\n        allowedMintCountMap[0xb59eA14ebffff37a5fF8Eb7098F420260E33261F] = 1;\\n        allowedMintCountMap[0x4f0684e76c429E96215426B2A936749d23456EC3] = 1;\\n        allowedMintCountMap[0xb0ae08CA5e818473C728dcce669BC4B2d6c444eB] = 1;\\n        allowedMintCountMap[0xbb2249053064945d7CdD416e077634277760E14F] = 1;\\n        allowedMintCountMap[0xF1BdD1279d6E2787dCE77988096d53e39623Fa27] = 1;\\n        allowedMintCountMap[0x16B5f0De9FAe9FA6B290C4975962D2b5f8a0dc54] = 1;\\n        allowedMintCountMap[0xa8F32bd47bAb44e0C2935e4a9160644cdDb0e547] = 1;\\n        allowedMintCountMap[0x67a1cb82a2CE3Db0550E5faaa5F4Dc67D3598d4C] = 1;\\n        allowedMintCountMap[0x0745b719eF5aDBbF06d155b58801C2C1961f9EE1] = 1;\\n        allowedMintCountMap[0x1f6a939584721f487CeF15b8B115825cE4d77d66] = 1;\\n        allowedMintCountMap[0xEE3BCA6833215eB2C4140BdF74F6653cCFA2e04D] = 1;\\n        allowedMintCountMap[0x0C3aEBeC58bc80E026C368fD0A72a2cF6BfcBF96] = 1;\\n        allowedMintCountMap[0x4cdfd139D0D7Be39eb9849e970BAF00Cb37120C4] = 1;\\n        allowedMintCountMap[0x372894955A6F02510607e129f8286593Ccc5Df62] = 1;\\n        allowedMintCountMap[0x0146058fdD7966539f75725f63Fe344076F9BB8B] = 1;\\n        allowedMintCountMap[0xa4C45893F095F9DA82AcD9B52Fa16a7Eb947B02c] = 1;\\n        allowedMintCountMap[0x0a2d3Dd46E44AcEC0DA085268502880bB384bCC0] = 1;\\n        allowedMintCountMap[0x3C04182610360586237ba23BEF2dfeB146962eb2] = 1;\\n        allowedMintCountMap[0x0F5B7335F9860d07Ff3198cff7E63BBc6490409d] = 1;\\n        allowedMintCountMap[0xB5613944f0cf39b6C4CF0f2B422EBdebd67a8233] = 1;\\n        allowedMintCountMap[0x4474aFF745BdeaD9b72698f40922E57072410753] = 1;\\n        allowedMintCountMap[0x3D74B104dc5A47FBF52d168dd29219aB6098906f] = 1;\\n        allowedMintCountMap[0x92C283CD56b3A48Fa1AA83a2C0B631262b10A6B4] = 1;\\n        allowedMintCountMap[0x5F0d3527a53C21Ee4e20cF9EC03D68E74Ae320F4] = 1;\\n        allowedMintCountMap[0x35B9d8D6Bfb4B92Fb86371041721A5e1B6A7c6c4] = 1;\\n        allowedMintCountMap[0x08654146679792941d6B0c4BEfF1360624f16077] = 1;\\n        allowedMintCountMap[0xF123E2025E7790126045be0fce7107bF707275cf] = 1;\\n        allowedMintCountMap[0x0E9A1e0Eb8B1a7d8a6177005FF436Fc6B29ae62d] = 1;\\n        allowedMintCountMap[0xB2e1c9C2FfAef4883ad7E01Cf4F772346C0A935b] = 1;\\n        allowedMintCountMap[0x869d26FA7C0d013103FDfA575fADa69c1f2C95B1] = 1;\\n        allowedMintCountMap[0x21b05bA746c8B72BE437F97A8695bfC34Be5D01B] = 1;\\n        allowedMintCountMap[0x00d31FF4d4771BFFE896d33a0A4C41aFc47d97FB] = 1;\\n        allowedMintCountMap[0x52d32D91E18fF67206f63D73503b9184d2f23e8D] = 1;\\n        allowedMintCountMap[0xA15C4bEfA88D9B6E6bFb75cE11ebFDf4c4f7663E] = 1;\\n        allowedMintCountMap[0x36E18AB9dA425d5B59DE9176F19d867F8eb30B25] = 1;\\n        allowedMintCountMap[0x945d2b50e64a7666289a428019b18e1390791d9e] = 1;\\n        allowedMintCountMap[0xfD09166C490DdCc871D4a2eA71962347FD2C47C8] = 1;\\n        allowedMintCountMap[0xeff34fBAEAC88F6e36d4f6Ec8E43fCE016241a86] = 1;\\n        allowedMintCountMap[0x40d1103A1dC722ece92708097B7A1C75387B4368] = 1;\\n        allowedMintCountMap[0x9c9A550BA1D8b5D2969B571Ab663B3d8F116C4C4] = 1;\\n        allowedMintCountMap[0xFBB969B94803722d83DA92DE9366D2dB926687e3] = 1;\\n        allowedMintCountMap[0x731c1625251Dc470244E45eDc2a90D8DBeCa63bd] = 1;\\n        allowedMintCountMap[0x2a8920B334c9704b5377BcdC9dEe2526139C011D] = 1;\\n        allowedMintCountMap[0xADBDFB1Da28c26B43ebcb8cd540712B6a77E485a] = 1;\\n        allowedMintCountMap[0x05b582d0F86f621Dd59061f6D4496Fe8Dac018f3] = 1;\\n        allowedMintCountMap[0xab70C244F372dcBD5d313a6a9eEF4073A6523671] = 1;\\n        allowedMintCountMap[0x3eF67b18AeB2cBF7934191D40ce1BDa60b30C388] = 1;\\n        allowedMintCountMap[0x4DD3fEfA24615591262173B49d04f37c515742A2] = 1;\\n        allowedMintCountMap[0xbB809218C220e2f48D1Aa0Eed296B92432fC50eB] = 1;\\n        allowedMintCountMap[0x295f2a017D48370d9e3db906daC3E2885c02e3fd] = 1;\\n        allowedMintCountMap[0xc945A84e9e626315d8aB54503f132fD8d71bFd9f] = 1;\\n        allowedMintCountMap[0x492E115F9eB65c6dCb603479EA9f9274A5Bd0fa6] = 1;\\n        allowedMintCountMap[0xaaB9c13f39A2eFFD3268A7cA1cC1BfEA6C89149D] = 1;\\n        allowedMintCountMap[0xA8060a0d045D3e899EcE90A2907bc65037d7f6De] = 1;\\n        allowedMintCountMap[0xE4310f7aBa933f1537dB59660582b49522B3948E] = 1;\\n        allowedMintCountMap[0x2de081E063F847F2162DeE4006A045265fbBef41] = 1;\\n        allowedMintCountMap[0x6e34006E8F0D122d64dADE41CD427a0bA529F9E1] = 1;\\n        allowedMintCountMap[0x0Fb3a0fDdbFE0E9B5ca2fE9592D1A5ce233Cd097] = 1;\\n        allowedMintCountMap[0xE0e67Cc9131f68463DB4d7b8eA7f2Fc30091bc7E] = 1;\\n        allowedMintCountMap[0x328F84737cCA85aEd33B0B680B9a6788BC181870] = 1;\\n        allowedMintCountMap[0xE427f4202c3d43Cf2A538E1a3ED5a34B63d07150] = 1;\\n        allowedMintCountMap[0x4110b9A914764A851A64899d4116402E7bFca8E3] = 1;\\n        allowedMintCountMap[0x4a7AC390aC647ED19621A0930Ab6d7964cDbf022] = 1;\\n        allowedMintCountMap[0x942DD9AEe0f777E177fF5F0ca5E9cb73A66B9240] = 1;\\n        allowedMintCountMap[0x7589A0d5a86F9a0e928ff22b6b6A485B30ac0909] = 1;\\n        allowedMintCountMap[0x9b82a68b54Df5Ec31305579fa7be44E191A0E52F] = 1;\\n        allowedMintCountMap[0x8180e125d912D44e612A8EF5Ce8A17D5aB1806A1] = 1;\\n        allowedMintCountMap[0x6735b2eA1b3958768d73F0148a06cCB94220f33a] = 1;\\n        allowedMintCountMap[0xFd6444f4e122fE36a07C6Ef50214561972dCF47D] = 1;\\n        allowedMintCountMap[0x1e02D845bE96A542E089860578ab7706e4912F9b] = 1;\\n        allowedMintCountMap[0x1734A28705322cBa314DBC63706267C95eAf94C6] = 1;\\n        allowedMintCountMap[0xc29f7F36d4AA30c0Ec5C21186ff88Bb7C917B6E2] = 1;\\n        allowedMintCountMap[0x48cE884A1ecead469c50b42370aF2983D59Bbb94] = 1;\\n    }\\n\\n    // Public Sale 2022/12/07 21:00 1670418000\\n\\n    uint256 public publicSale = 1670418000;\\n\\n    /** MINTING LIMITS **/\\n\\n    mapping(address => uint256) private mintCountMap;\\n\\n    mapping(address => uint256) private allowedMintCountMap;\\n\\n    function addAllowedMintCountMap(address _address, uint256 amount)\\n        external\\n        onlyOwner\\n    {\\n        allowedMintCountMap[_address] = amount;\\n    }\\n\\n    function multiAddAllowedMintCountMap(\\n        address[] memory _addresses,\\n        uint256 amount\\n    ) external onlyOwner {\\n        for (uint256 index = 0; index < _addresses.length; index++) {\\n            address _address = _addresses[index];\\n            allowedMintCountMap[_address] = amount;\\n        }\\n    }\\n\\n    function allowedMintCount(address minter) public view returns (uint256) {\\n        return allowedMintCountMap[minter] - mintCountMap[minter];\\n    }\\n\\n    function updateMintCount(address minter, uint256 count) private {\\n        mintCountMap[minter] += count;\\n    }\\n\\n    uint256 public MAX_SUPPLY = 5000;\\n\\n    uint256 public MAX_MULTIMINT = 2;\\n\\n    uint256 public PRICE = 9000000000000000;\\n\\n    function setPrice(uint256 _price) public onlyOwner returns (bool) {\\n        require(_price > 0, \\\"price must be a positive number\\\");\\n        PRICE = _price;\\n        return true;\\n    }\\n\\n    function AdminMintToMul(address _to, uint256 count) public onlyOwner {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        require(totalSupply() + count - 1 < MAX_SUPPLY, \\\"Exceeds max supply\\\");\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            uint256 currentTokenId = _nextTokenId.current();\\n            _safeMint(_to, currentTokenId);\\n            _nextTokenId.increment();\\n            mintCountMap[_to] += 1;\\n        }\\n    }\\n\\n    function mint(uint256 count) public payable nonReentrant {\\n        require(totalSupply() + count - 1 < MAX_SUPPLY, \\\"Exceeds max supply\\\");\\n\\n        if (allowedMintCount(msg.sender) >= count) {\\n            updateMintCount(msg.sender, count);\\n            for (uint256 i = 0; i < count; i++) {\\n                _mint(msg.sender, totalSupply());\\n            }\\n        } else {\\n            if (block.timestamp < publicSale) {\\n                revert(\\\"Sale not active\\\");\\n            } else {\\n                require(\\n                    msg.value >= PRICE * count,\\n                    \\\"Insufficient payment, 0.009ETH per item\\\"\\n                );\\n                require(count <= MAX_MULTIMINT, \\\"Mint at most 2 at a time\\\");\\n\\n                updateMintCount(msg.sender, count);\\n\\n                for (uint256 i = 0; i < count; i++) {\\n                    _mint(msg.sender, totalSupply());\\n                }\\n            }\\n        }\\n    }\\n\\n    /** URI HANDLING **/\\n\\n    string private customContractURI = \\\"http://epiddha.io/nft/Contract.json\\\";\\n\\n    function setContractURI(string memory customContractURI_)\\n        external\\n        onlyOwner\\n    {\\n        customContractURI = customContractURI_;\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return customContractURI;\\n    }\\n\\n    string private customBaseURI;\\n\\n    function setBaseURI(string memory customBaseURI_) external onlyOwner {\\n        customBaseURI = customBaseURI_;\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return customBaseURI;\\n    }\\n\\n    /** PAYOUT **/\\n\\n    address private constant payoutAddress1 =\\n        0x6DF916b50EcAA4A6add5fFfDaAdC80B1B757CEf3;\\n\\n    address private constant payoutAddress2 =\\n        0x34b0EfE74aE1FB54343e4A4AC5F05c2d34A33f8B;\\n\\n    address private constant payoutAddress3 =\\n        0xE54FeC8f28c1705EE3F42d203D3fF5aF6aD52893;\\n\\n    address private constant payoutAddress4 =\\n        0x1d41D6B1091C1a8A334096771bd1776019243d5e;\\n\\n    address private constant payoutAddress5 =\\n        0xfDd4C6aEcd82052b20F46C57C8e1c4c545a8C2d2;\\n\\n    function withdrawAll() public {\\n        uint256 balance = address(this).balance;\\n        Address.sendValue(payable(payoutAddress1), (balance * 50) / 100);\\n        Address.sendValue(payable(payoutAddress2), (balance * 15) / 100);\\n        Address.sendValue(payable(payoutAddress3), (balance * 15) / 100);\\n        Address.sendValue(payable(payoutAddress4), (balance * 10) / 100);\\n        Address.sendValue(payable(payoutAddress5), (balance * 10) / 100);\\n    }\\n\\n    // function withdraw(uint256 amount) public onlyOwner {\\n    //     address payable addr = payable(owner());\\n    //     addr.transfer(amount);\\n    // }\\n\\n    // function withdrawTo(uint256 amount, address payable _to) public onlyOwner {\\n    //     _to.transfer(amount);\\n    // }\\n\\n    /** ROYALTIES **/\\n\\n    function royaltyInfo(uint256, uint256 salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        return (address(this), (salePrice * 800) / 10000);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Enumerable, IERC165)\\n        returns (bool)\\n    {\\n        return (interfaceId == type(IERC2981).interfaceId ||\\n            super.supportsInterface(interfaceId));\\n    }\\n\\n    // Burn\\n\\n    function burn(uint256 tokenId) public virtual {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"Not approved to burn.\\\"\\n        );\\n        _burn(tokenId);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"AdminMintToMul\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MULTIMINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addAllowedMintCountMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"allowedMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"multiAddAllowedMintCountMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"customBaseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"customContractURI_\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Epiddha", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}