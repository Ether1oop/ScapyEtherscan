{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface ITokenMinter {\r\n\tfunction mint(address, uint256) external;\r\n\r\n\tfunction burn(address, uint256) external;\r\n}\r\n\r\ninterface ILocker {\r\n\tfunction createLock(uint256, uint256) external;\r\n\r\n\tfunction claimAllRewards(address[] calldata _tokens, address _recipient) external;\r\n\r\n\tfunction increaseAmount(uint256) external;\r\n\r\n\tfunction increaseUnlockTime(uint256) external;\r\n\r\n\tfunction release() external;\r\n\r\n\tfunction claimRewards(address, address) external;\r\n\r\n\tfunction claimFXSRewards(address) external;\r\n\r\n\tfunction execute(\r\n\t\taddress,\r\n\t\tuint256,\r\n\t\tbytes calldata\r\n\t) external returns (bool, bytes memory);\r\n\r\n\tfunction setGovernance(address) external;\r\n\r\n\tfunction voteGaugeWeight(address, uint256) external;\r\n\r\n\tfunction setAngleDepositor(address) external;\r\n\r\n\tfunction setFxsDepositor(address) external;\r\n\r\n\tfunction setYieldDistributor(address) external;\r\n\r\n\tfunction setGaugeController(address) external;\r\n\r\n\tfunction setAccumulator(address _accumulator) external;\r\n\r\n}\r\n\r\ninterface ISdToken {\r\n\tfunction setOperator(address _operator) external;\r\n}\r\n\r\ninterface ILiquidityGauge {\r\n\tstruct Reward {\r\n\t\taddress token;\r\n\t\taddress distributor;\r\n\t\tuint256 period_finish;\r\n\t\tuint256 rate;\r\n\t\tuint256 last_update;\r\n\t\tuint256 integral;\r\n\t}\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction deposit_reward_token(address _rewardToken, uint256 _amount) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction claim_rewards_for(address _user, address _recipient) external;\r\n\r\n\t// // solhint-disable-next-line\r\n\t// function claim_rewards_for(address _user) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction deposit(uint256 _value, address _addr) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction reward_tokens(uint256 _i) external view returns (address);\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction reward_data(address _tokenReward) external view returns (Reward memory);\r\n\r\n\tfunction balanceOf(address) external returns (uint256);\r\n\r\n\tfunction claimable_reward(address _user, address _reward_token) external view returns (uint256);\r\n\r\n\tfunction claimable_tokens(address _user) external returns (uint256);\r\n\r\n\tfunction user_checkpoint(address _user) external returns (bool);\r\n\r\n\tfunction commit_transfer_ownership(address) external;\r\n\r\n\tfunction claim_rewards(address) external;\r\n\r\n\tfunction add_reward(address, address) external;\r\n}\r\n\r\ninterface VeToken {\r\n\tstruct LockedBalance {\r\n\t\tint128 amount;\r\n\t\tuint256 end;\r\n\t}\r\n\r\n\tfunction create_lock(uint256 _value, uint256 _unlock_time) external;\r\n\r\n\tfunction increase_amount(uint256 _value) external;\r\n\r\n\tfunction increase_unlock_time(uint256 _unlock_time) external;\r\n\r\n\tfunction withdraw() external;\r\n\r\n\tfunction locked__end(address) external view returns (uint256);\r\n}\r\n\r\n/// @title Contract that accepts tokens and locks them\r\n/// @author StakeDAO\r\ncontract BlackpoolDepositor {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t/* ========== STATE VARIABLES ========== */\r\n\taddress public token;\r\n\tuint256 private constant MAXTIME = 4 * 364 * 86_400;\r\n\tuint256 private constant WEEK = 7 * 86_400;\r\n\r\n\tuint256 public lockIncentive = 10; //incentive to users who spend gas to lock token\r\n\tuint256 public constant FEE_DENOMINATOR = 10_000;\r\n\r\n\taddress public gauge;\r\n\taddress public governance;\r\n\taddress public immutable locker;\r\n\taddress public immutable minter;\r\n\tuint256 public incentiveToken = 0;\r\n\tuint256 public unlockTime;\r\n\tbool public relock = true;\r\n\r\n\t/* ========== EVENTS ========== */\r\n\tevent Deposited(address indexed caller, address indexed user, uint256 amount, bool lock, bool stake);\r\n\tevent IncentiveReceived(address indexed caller, uint256 amount);\r\n\tevent TokenLocked(address indexed user, uint256 amount);\r\n\tevent GovernanceChanged(address indexed newGovernance);\r\n\tevent SdTokenOperatorChanged(address indexed newSdToken);\r\n\tevent FeesChanged(uint256 newFee);\r\n\r\n\t/* ========== CONSTRUCTOR ========== */\r\n\tconstructor(\r\n\t\taddress _token,\r\n\t\taddress _locker,\r\n\t\taddress _minter,\r\n\t\taddress _veToken\r\n\t) {\r\n\t\tgovernance = msg.sender;\r\n\t\ttoken = _token;\r\n\t\tlocker = _locker;\r\n\t\tminter = _minter;\r\n\t\tunlockTime = VeToken(_veToken).locked__end(_locker); // should create lock before deploy this contract\r\n\t}\r\n\r\n\t/* ========== RESTRICTED FUNCTIONS ========== */\r\n\t/// @notice Set the new governance\r\n\t/// @param _governance governance address\r\n\tfunction setGovernance(address _governance) external {\r\n\t\trequire(msg.sender == governance, \"!auth\");\r\n\t\tgovernance = _governance;\r\n\t\temit GovernanceChanged(_governance);\r\n\t}\r\n\r\n\t/// @notice Set the new operator for minting sdToken\r\n\t/// @param _operator operator address\r\n\tfunction setSdTokenOperator(address _operator) external {\r\n\t\trequire(msg.sender == governance, \"!auth\");\r\n\t\tISdToken(minter).setOperator(_operator);\r\n\t\temit SdTokenOperatorChanged(_operator);\r\n\t}\r\n\r\n\t/// @notice Enable the relock or not\r\n\t/// @param _relock relock status\r\n\tfunction setRelock(bool _relock) external {\r\n\t\trequire(msg.sender == governance, \"!auth\");\r\n\t\trelock = _relock;\r\n\t}\r\n\r\n\t/// @notice Set the gauge to deposit token yielded\r\n\t/// @param _gauge gauge address\r\n\tfunction setGauge(address _gauge) external {\r\n\t\trequire(msg.sender == governance, \"!auth\");\r\n\t\tgauge = _gauge;\r\n\t}\r\n\r\n\t/// @notice set the fees for locking incentive\r\n\t/// @param _lockIncentive contract must have tokens to lock\r\n\tfunction setFees(uint256 _lockIncentive) external {\r\n\t\trequire(msg.sender == governance, \"!auth\");\r\n\r\n\t\tif (_lockIncentive >= 0 && _lockIncentive <= 30) {\r\n\t\t\tlockIncentive = _lockIncentive;\r\n\t\t\temit FeesChanged(_lockIncentive);\r\n\t\t}\r\n\t}\r\n\r\n\t/* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n\t/// @notice Locks the tokens held by the contract\r\n\t/// @dev The contract must have tokens to lock\r\n\tfunction _lockToken() internal {\r\n\t\tuint256 tokenBalance = IERC20(token).balanceOf(address(this));\r\n\r\n\t\t// If there is Token available in the contract transfer it to the locker\r\n\t\tif (tokenBalance > 0) {\r\n\t\t\tIERC20(token).safeTransfer(locker, tokenBalance);\r\n\t\t\temit TokenLocked(msg.sender, tokenBalance);\r\n\t\t}\r\n\r\n\t\tuint256 tokenBalanceStaker = IERC20(token).balanceOf(locker);\r\n\t\t// If the locker has no tokens then return\r\n\t\tif (tokenBalanceStaker == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tILocker(locker).increaseAmount(tokenBalanceStaker);\r\n\r\n\t\tif (relock) {\r\n\t\t\tuint256 unlockAt = block.timestamp + MAXTIME;\r\n\t\t\tuint256 unlockInWeeks = (unlockAt / WEEK) * WEEK;\r\n\r\n\t\t\t// it means that a 1 week + at least 1 second has been passed\r\n\t\t\t// since last increased unlock time\r\n\t\t\tif (unlockInWeeks - unlockTime > 1) {\r\n\t\t\t\tILocker(locker).increaseUnlockTime(unlockAt);\r\n\t\t\t\tunlockTime = unlockInWeeks;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Lock tokens held by the contract\r\n\t/// @dev The contract must have Token to lock\r\n\tfunction lockToken() external {\r\n\t\t_lockToken();\r\n\r\n\t\t// If there is incentive available give it to the user calling lockToken\r\n\t\tif (incentiveToken > 0) {\r\n\t\t\tITokenMinter(minter).mint(msg.sender, incentiveToken);\r\n\t\t\temit IncentiveReceived(msg.sender, incentiveToken);\r\n\t\t\tincentiveToken = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Deposit & Lock Token\r\n\t/// @dev User needs to approve the contract to transfer the token\r\n\t/// @param _amount The amount of token to deposit\r\n\t/// @param _lock Whether to lock the token\r\n\t/// @param _stake Whether to stake the token\r\n\t/// @param _user User to deposit for\r\n\tfunction deposit(\r\n\t\tuint256 _amount,\r\n\t\tbool _lock,\r\n\t\tbool _stake,\r\n\t\taddress _user\r\n\t) public {\r\n\t\trequire(_amount > 0, \"!>0\");\r\n\t\trequire(_user != address(0), \"!user\");\r\n\r\n\t\t// If User chooses to lock Token\r\n\t\tif (_lock) {\r\n\t\t\tIERC20(token).safeTransferFrom(msg.sender, locker, _amount);\r\n\t\t\t_lockToken();\r\n\r\n\t\t\tif (incentiveToken > 0) {\r\n\t\t\t\t_amount = _amount + incentiveToken;\r\n\t\t\t\temit IncentiveReceived(msg.sender, incentiveToken);\r\n\t\t\t\tincentiveToken = 0;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t//move tokens here\r\n\t\t\tIERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\r\n\t\t\t//defer lock cost to another user\r\n\t\t\tuint256 callIncentive = (_amount * lockIncentive) / FEE_DENOMINATOR;\r\n\t\t\t_amount = _amount - callIncentive;\r\n\t\t\tincentiveToken = incentiveToken + callIncentive;\r\n\t\t}\r\n\r\n\t\tif (_stake && gauge != address(0)) {\r\n\t\t\tITokenMinter(minter).mint(address(this), _amount);\r\n\t\t\tIERC20(minter).safeApprove(gauge, 0);\r\n\t\t\tIERC20(minter).safeApprove(gauge, _amount);\r\n\t\t\tILiquidityGauge(gauge).deposit(_amount, _user);\r\n\t\t} else {\r\n\t\t\tITokenMinter(minter).mint(_user, _amount);\r\n\t\t}\r\n\r\n\t\temit Deposited(msg.sender, _user, _amount, _lock, _stake);\r\n\t}\r\n\r\n\t/// @notice Deposits all the token of a user & locks them based on the options choosen\r\n\t/// @dev User needs to approve the contract to transfer Token tokens\r\n\t/// @param _lock Whether to lock the token\r\n\t/// @param _stake Whether to stake the token\r\n\t/// @param _user User to deposit for\r\n\tfunction depositAll(\r\n\t\tbool _lock,\r\n\t\tbool _stake,\r\n\t\taddress _user\r\n\t) external {\r\n\t\tuint256 tokenBal = IERC20(token).balanceOf(msg.sender);\r\n\t\tdeposit(tokenBal, _lock, _stake, _user);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncentiveReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSdToken\",\"type\":\"address\"}],\"name\":\"SdTokenOperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockIncentive\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"setGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_relock\",\"type\":\"bool\"}],\"name\":\"setRelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setSdTokenOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BlackpoolDepositor", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000ec9f76202a7061eb9b3a7d6b59d36215a7e37da0000000000000000000000000a4df7809f83e130d8ffa297f03b75318e37b461000000000000000000000000825ba129b3ea1ddc265708fcbb9dd660fdd2ef7300000000000000000000000019886a88047350482990d4edd0c1b863646ab921", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0032344d60b0b2f3d3998b098769a37c88dcbabf1aeb61b1eff554fece4fd825"}]}