{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/HashCats/HashCats.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nimport './Delegated.sol';\\r\\nimport './ERC721Batch.sol';\\r\\nimport './Merkle.sol';\\r\\nimport './Royalties.sol';\\r\\n\\r\\n\\r\\n\\r\\ninterface IERC20Withdraw{\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n  function transfer(address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IERC721Withdraw{\\r\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n}\\r\\n \\r\\ncontract HashCats is Delegated, ERC721Batch, Royalties, Merkle {\\r\\n  using Address for address;\\r\\n  using Strings for uint256;\\r\\n\\r\\n  enum SaleState{\\r\\n    NONE,\\r\\n    PRESALE,\\r\\n    MAINSALE\\r\\n  }\\r\\n\\r\\n  struct MintConfig{\\r\\n    uint16 maxMint;\\r\\n    uint16 maxOrder;\\r\\n    uint16 maxSupply;\\r\\n\\r\\n    uint8 saleState;\\r\\n  }\\r\\n\\r\\n  struct PriceCurve{\\r\\n    uint16 mark;\\r\\n    uint256 price;\\r\\n  }\\r\\n\\r\\n  MintConfig public config = MintConfig(\\r\\n       20,       //maxMint\\r\\n       20,       //maxOrder\\r\\n    10000,       //maxSupply\\r\\n\\r\\n    uint8(SaleState.NONE)\\r\\n  );\\r\\n\\r\\n  address public withdrawTo = 0x49bdF5aFDF2dfF8a0890c7A37fEc90c3ae816187;\\r\\n  PriceCurve[] public pricing;\\r\\n\\r\\n  string public tokenURIPrefix = \\\"https://www.hashcats.io/metadata/prereveal.json?\\\";\\r\\n  string public finalURIPrefix = \\\"\\\";\\r\\n  string public tokenURISuffix = \\\"\\\";\\r\\n\\r\\n  constructor()\\r\\n    ERC721B(\\\"HashCats\\\", \\\"HC\\\" )\\r\\n    Royalties( address(this), 500, 10000 ){\\r\\n\\r\\n    pricing.push( PriceCurve(     5, 0.030 ether ) );\\r\\n    pricing.push( PriceCurve(    10, 0.025 ether ) );\\r\\n    pricing.push( PriceCurve( 10000, 0.020 ether ) );\\r\\n  }\\r\\n\\r\\n\\r\\n  //safety first\\r\\n  receive() external payable {}\\r\\n\\r\\n\\r\\n  //payable\\r\\n  function mint( uint16 quantity, bytes32[] calldata proof ) external payable {\\r\\n    MintConfig memory cfg = config;\\r\\n    uint16 ownerBalance = owners[ msg.sender ].balance;\\r\\n\\r\\n    require( quantity > 0,                              \\\"Must order 1+\\\" );\\r\\n    require( quantity <= cfg.maxOrder,                  \\\"Order too big\\\" );\\r\\n    require( ownerBalance + quantity <= cfg.maxMint,    \\\"Wallet limit reached\\\" );\\r\\n    require( totalSupply() + quantity <= cfg.maxSupply, \\\"Mint/Order exceeds supply\\\" );\\r\\n\\r\\n    uint256 totalPrice = calculateTotal( msg.sender, quantity );\\r\\n    require( msg.value == totalPrice, \\\"Ether sent is not correct\\\" );\\r\\n\\r\\n\\r\\n    if( cfg.saleState == uint8(SaleState.MAINSALE) ){\\r\\n      //no-op\\r\\n    }\\r\\n    else if( cfg.saleState == uint8(SaleState.PRESALE) ){\\r\\n      require( _isValidProof( keccak256( abi.encodePacked( msg.sender ) ), proof ), \\\"You are not on the access list\\\" );\\r\\n    }\\r\\n    else{\\r\\n      revert( \\\"Sale is not active\\\" );\\r\\n    }\\r\\n\\r\\n    owners[ msg.sender ].balance += quantity;\\r\\n    owners[ msg.sender ].purchased += quantity;\\r\\n    for( uint256 i = 0; i < quantity; ++i ){\\r\\n      _mint(Token( msg.sender, 9 ));\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n  //onlyDelegates\\r\\n  function mintTo(uint16[] calldata quantity, address[] calldata recipient) external payable onlyDelegates{\\r\\n    require(quantity.length == recipient.length, \\\"Must provide equal quantities and recipients\\\" );\\r\\n\\r\\n    uint256 totalQuantity;\\r\\n    uint256 supply = totalSupply();\\r\\n    for(uint256 i; i < quantity.length; ++i){\\r\\n      totalQuantity += quantity[i];\\r\\n    }\\r\\n    require( supply + totalQuantity <= config.maxSupply, \\\"Mint/order exceeds supply\\\" );\\r\\n\\r\\n\\r\\n    for(uint256 i; i < recipient.length; ++i){\\r\\n      owners[ recipient[i] ].balance += quantity[i];\\r\\n      for(uint256 j; j < quantity[i]; ++j){\\r\\n        Token memory token = Token( recipient[i], 9 );\\r\\n        _mint( token );\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function burnFrom( address account, uint16[] calldata tokenIds ) external onlyDelegates{\\r\\n    owners[ account ].balance -= uint16(tokenIds.length);\\r\\n    for(uint i; i < tokenIds.length; ++i ){\\r\\n      _burn( account, tokenIds[i] );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setConfig( MintConfig calldata config_ ) external onlyDelegates{\\r\\n    require( config_.maxOrder <= config_.maxSupply, \\\"max order must be lte max supply\\\" );\\r\\n    require( totalSupply() <= config_.maxSupply, \\\"max supply must be gte total supply\\\" );\\r\\n\\r\\n    config = config_;\\r\\n  }\\r\\n\\r\\n  function setPricingCurve( uint16[] calldata marks, uint256[] calldata newPrices ) external onlyDelegates {\\r\\n    require( marks.length == newPrices.length, \\\"must provide equal marks and prices\\\" );\\r\\n\\r\\n    while( marks.length > pricing.length ){\\r\\n      pricing.pop();\\r\\n    }\\r\\n\\r\\n    uint16 prevMark = 0;\\r\\n    for( uint256 i = 0; i < marks.length; ++i ){\\r\\n      require( i > 0 && marks[i] > prevMark, \\\"quantity marks must increase\\\" );\\r\\n      prevMark = marks[i];\\r\\n\\r\\n      if( i == pricing.length )\\r\\n        pricing.push();\\r\\n\\r\\n      pricing[ i ] = PriceCurve( prevMark, newPrices[i] );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setTokenURI( string calldata prefix, string calldata finalPrefix, string calldata suffix ) external onlyDelegates{\\r\\n    tokenURIPrefix = prefix;\\r\\n    finalURIPrefix = finalPrefix;\\r\\n\\r\\n    tokenURISuffix = suffix;\\r\\n  }\\r\\n\\r\\n  //onlyOwner\\r\\n  function setDefaultRoyalty( address receiver, uint16 royaltyNum, uint16 royaltyDenom ) external onlyOwner {\\r\\n    _setDefaultRoyalty( receiver, royaltyNum, royaltyDenom );\\r\\n  }\\r\\n\\r\\n  function setWithdrawTo( address newRecipient ) external {\\r\\n    withdrawTo = newRecipient;\\r\\n  }\\r\\n\\r\\n\\r\\n  //withdraw\\r\\n  function withdraw() external onlyOwner {\\r\\n    uint256 totalBalance = address(this).balance;\\r\\n    require(totalBalance > 0, \\\"no funds available\\\");\\r\\n    Address.sendValue(payable(withdrawTo), totalBalance);\\r\\n  }\\r\\n\\r\\n  function withdraw(address token) external {\\r\\n    IERC20Withdraw erc20 = IERC20Withdraw(token);\\r\\n    erc20.transfer( withdrawTo, erc20.balanceOf(address(this)) );\\r\\n  }\\r\\n\\r\\n  function withdraw(address token, uint256[] calldata tokenId) external {\\r\\n    for( uint256 i = 0; i < tokenId.length; ++i ){\\r\\n      IERC721Withdraw(token).transferFrom( address(this), withdrawTo, tokenId[i] );\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n  //view\\r\\n  function calculateTotal( address account, uint16 quantity ) public view returns( uint256 totalPrice ){\\r\\n    uint256 p = 0;\\r\\n    uint16 ownerBalance = owners[ account ].balance;\\r\\n    for( uint256 i = 0; i < quantity; ++i ){\\r\\n      for( ; p < pricing.length; ++p ){\\r\\n        if(( ownerBalance + 1 + i ) < pricing[ p ].mark ){\\r\\n          totalPrice += pricing[ p ].price;\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n  //view: IERC721Metadata\\r\\n  function tokenURI( uint256 tokenId ) public view override returns( string memory ){\\r\\n    require(_exists(tokenId), \\\"query for nonexistent token\\\");\\r\\n\\r\\n    Token memory token = tokens[ tokenId ];\\r\\n    if( token.lives > 0 ){\\r\\n      return bytes(tokenURIPrefix).length > 0 ?\\r\\n        string(abi.encodePacked(tokenURIPrefix, tokenId.toString(), tokenURISuffix)):\\r\\n        \\\"\\\";\\r\\n    }\\r\\n    else{\\r\\n      return bytes(finalURIPrefix).length > 0 ?\\r\\n        string(abi.encodePacked(finalURIPrefix, tokenId.toString(), tokenURISuffix)):\\r\\n        \\\"\\\";\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n  //view: IERC165\\r\\n  function supportsInterface( bytes4 interfaceId ) public view override( ERC721EnumerableB, Royalties ) returns( bool ){\\r\\n    return ERC721EnumerableB.supportsInterface( interfaceId )\\r\\n      || Royalties.supportsInterface( interfaceId );\\r\\n  }\\r\\n\\r\\n\\r\\n  //internal\\r\\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override {\\r\\n    Token storage token = tokens[ tokenId ];\\r\\n    if( token.lives > 0 ){\\r\\n      if( from != address(0) && to != address(0) )\\r\\n        --token.lives;\\r\\n    }\\r\\n\\r\\n    super._beforeTokenTransfer( from, to, tokenId );\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/HashCats/Royalties.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\r\\n\\r\\ncontract Royalties is IERC2981{\\r\\n\\r\\n  struct Fraction{\\r\\n    uint16 numerator;\\r\\n    uint16 denominator;\\r\\n  }\\r\\n\\r\\n  struct Royalty{\\r\\n    address receiver;\\r\\n    Fraction fraction;\\r\\n  }\\r\\n\\r\\n  Royalty public defaultRoyalty;\\r\\n\\r\\n  constructor( address receiver, uint16 royaltyNum, uint16 royaltyDenom ){\\r\\n    _setDefaultRoyalty( receiver, royaltyNum, royaltyDenom );\\r\\n  }\\r\\n\\r\\n  //view: IERC2981\\r\\n  /**\\r\\n   * @dev See {IERC2981-royaltyInfo}.\\r\\n   **/\\r\\n  function royaltyInfo(uint256, uint256 _salePrice) external view virtual returns (address, uint256) {\\r\\n    /*\\r\\n    Royalty memory royalty = _tokenRoyaltyInfo[_tokenId];\\r\\n    if (royalty.receiver == address(0)) {\\r\\n        royalty = _defaultRoyaltyInfo;\\r\\n    }\\r\\n    */\\r\\n\\r\\n    uint256 royaltyAmount = (_salePrice * defaultRoyalty.fraction.numerator) / defaultRoyalty.fraction.denominator;\\r\\n    return (defaultRoyalty.receiver, royaltyAmount);\\r\\n  }\\r\\n\\r\\n  //view: IERC165\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   **/\\r\\n  function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\r\\n    return interfaceId == type(IERC2981).interfaceId;\\r\\n  }\\r\\n\\r\\n\\r\\n  function _setDefaultRoyalty( address receiver, uint16 royaltyNum, uint16 royaltyDenom ) internal {\\r\\n    defaultRoyalty.receiver = receiver;\\r\\n    defaultRoyalty.fraction = Fraction(royaltyNum, royaltyDenom);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/HashCats/Merkle.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"./Delegated.sol\\\";\\n\\ncontract Merkle is Delegated{\\n  bytes32 internal merkleRoot = \\\"\\\";\\n\\n  function setMerkleRoot( bytes32 merkleRoot_ ) external onlyDelegates{\\n    merkleRoot = merkleRoot_;\\n  }\\n\\n  function _isValidProof(bytes32 leaf, bytes32[] memory proof) internal view returns( bool ){\\n    return MerkleProof.processProof( proof, leaf ) == merkleRoot;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/HashCats/IERC721Batch.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721Batch {\\n  function isOwnerOf( address account, uint[] calldata tokenIds ) external view returns( bool );\\n  function safeTransferBatch( address from, address to, uint[] calldata tokenIds, bytes calldata data ) external;\\n  function transferBatch( address from, address to, uint[] calldata tokenIds ) external;\\n  function walletOfOwner( address account ) external view returns( uint[] memory );\\n}\\n\"\r\n    },\r\n    \"/contracts/HashCats/ERC721EnumerableB.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"./ERC721B.sol\\\";\\n\\nabstract contract ERC721EnumerableB is ERC721B, IERC721Enumerable {\\n  function supportsInterface( bytes4 interfaceId ) public view virtual override( ERC721B, IERC165 ) returns( bool ){\\n    return ERC721B.supportsInterface(interfaceId)\\n      || interfaceId == type(IERC721Enumerable).interfaceId;\\n  }\\n\\n  function tokenOfOwnerByIndex( address owner, uint256 index ) external view override returns( uint ){\\n    require( owners[ owner ].balance > index, \\\"ERC721EnumerableB: owner index out of bounds\\\" );\\n\\n    uint256 count;\\n    uint256 tokenId;\\n    for( tokenId = 0; tokenId < tokens.length; ++tokenId ){\\n      if( owner != tokens[tokenId].owner )\\n        continue;\\n\\n      if( index == count++ )\\n        break;\\n    }\\n    return tokenId;\\n  }\\n\\n  function tokenByIndex( uint256 index ) external view override returns( uint ){\\n    require( _exists( index ), \\\"ERC721EnumerableB: query for nonexistent token\\\");\\n    return index;\\n  }\\n\\n  function totalSupply() public view virtual override( ERC721B, IERC721Enumerable ) returns( uint ){\\n    return super.totalSupply();\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/HashCats/ERC721Batch.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./IERC721Batch.sol\\\";\\nimport \\\"./ERC721EnumerableB.sol\\\";\\n\\nabstract contract ERC721Batch is ERC721EnumerableB, IERC721Batch {\\n  function isOwnerOf( address account, uint[] calldata tokenIds ) external view override returns( bool ){\\n    for(uint i; i < tokenIds.length; ++i ){\\n      if( account != tokens[ tokenIds[i] ].owner )\\n        return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  function safeTransferBatch( address from, address to, uint256[] calldata tokenIds, bytes calldata data ) external override{\\n    for(uint i; i < tokenIds.length; ++i ){\\n      safeTransferFrom( from, to, tokenIds[i], data );\\n    }\\n  }\\n\\n  function transferBatch( address from, address to, uint256[] calldata tokenIds ) external override{\\n    for(uint i; i < tokenIds.length; ++i ){\\n      transferFrom( from, to, tokenIds[i] );\\n    }\\n  }\\n\\n  function walletOfOwner( address account ) external view override returns( uint[] memory ){\\n    uint256 count;\\n    uint256 quantity = owners[ account ].balance;\\n    uint256[] memory wallet = new uint[]( quantity );\\n    for( uint i = 0; i < tokens.length; ++i ){\\n      if( account == tokens[i].owner ){\\n        wallet[ count++ ] = i;\\n        if( count == quantity )\\n          break;\\n      }\\n    }\\n    return wallet;\\n  }\\n}\"\r\n    },\r\n    \"/contracts/HashCats/ERC721B.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n\\nabstract contract ERC721B is Context, ERC165, IERC721, IERC721Metadata {\\n  using Address for address;\\n\\n  struct Owner{\\n    uint16 balance;\\n    uint16 claimed;\\n    uint16 purchased;\\n  }\\n\\n  struct Token{\\n    address owner;\\n    uint8 lives;\\n  }\\n\\n  uint256 public burned;\\n  Token[] public tokens;\\n  mapping(address => Owner) public owners;\\n\\n  string private _name;\\n  string private _symbol;\\n\\n  mapping(uint256 => address) internal _tokenApprovals;\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n  constructor(string memory name_, string memory symbol_ ){\\n    _name = name_;\\n    _symbol = symbol_;\\n  }\\n\\n  //public view\\n  function balanceOf(address owner) external view override returns( uint256 balance ){\\n    require(owner != address(0), \\\"ERC721B: balance query for the zero address\\\");\\n    return owners[owner].balance;\\n  }\\n\\n  function name() external view override returns( string memory name_ ){\\n    return _name;\\n  }\\n\\n  function ownerOf(uint256 tokenId) public view override returns( address owner ){\\n    require(_exists(tokenId), \\\"ERC721B: query for nonexistent token\\\");\\n    return tokens[tokenId].owner;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns( bool isSupported ){\\n    return\\n      interfaceId == type(IERC721).interfaceId ||\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  function symbol() external view override returns( string memory symbol_ ){\\n    return _symbol;\\n  }\\n\\n  function totalSupply() public view virtual returns( uint256 ){\\n    return tokens.length - burned;\\n  }\\n\\n\\n  //approvals\\n  function approve(address to, uint tokenId) external override {\\n    address owner = ownerOf(tokenId);\\n    require(to != owner, \\\"ERC721B: approval to current owner\\\");\\n\\n    require(\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n      \\\"ERC721B: caller is not owner nor approved for all\\\"\\n    );\\n\\n    _approve(to, tokenId);\\n  }\\n\\n  function getApproved(uint256 tokenId) public view override returns( address approver ){\\n    require(_exists(tokenId), \\\"ERC721: query for nonexistent token\\\");\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  function isApprovedForAll(address owner, address operator) public view override returns( bool isApproved ){\\n    return _operatorApprovals[owner][operator];\\n  }\\n\\n  function setApprovalForAll(address operator, bool approved) external override {\\n    _operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n\\n  //transfers\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external override{\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public override {\\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721B: caller is not owner nor approved\\\");\\n    _safeTransfer(from, to, tokenId, _data);\\n  }\\n\\n  function transferFrom(address from, address to, uint256 tokenId) public override {\\n    //solhint-disable-next-line max-line-length\\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721B: caller is not owner nor approved\\\");\\n    _transfer(from, to, tokenId);\\n  }\\n\\n\\n  //internal\\n  function _approve(address to, uint tokenId) internal{\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(ownerOf(tokenId), to, tokenId);\\n  }\\n\\n  function _beforeTokenTransfer(address from, address to, uint256) internal virtual {}\\n\\n  function _burn(address from, uint256 tokenId) internal {\\n    require(ownerOf(tokenId) == from, \\\"ERC721B: burn of token that is not own\\\");\\n\\n    // Clear approvals\\n    delete _tokenApprovals[tokenId];\\n\\n    ++burned;\\n    tokens[tokenId].owner = address(0);\\n    emit Transfer(from, address(0), tokenId);\\n  }\\n\\n  function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns( bool ){\\n    if (to.isContract()) {\\n      try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n        return retval == IERC721Receiver.onERC721Received.selector;\\n      } catch (bytes memory reason) {\\n        if (reason.length == 0) {\\n          revert(\\\"ERC721B: transfer to non ERC721Receiver implementer\\\");\\n        } else {\\n          assembly {\\n            revert(add(32, reason), mload(reason))\\n          }\\n        }\\n      }\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  function _exists(uint256 tokenId) internal view returns( bool ){\\n    return tokenId < tokens.length && tokens[tokenId].owner != address(0);\\n  }\\n\\n  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns( bool isApproved ){\\n    require(_exists(tokenId), \\\"ERC721B: query for nonexistent token\\\");\\n    address owner = ownerOf(tokenId);\\n    return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n  }\\n\\n  function _mint( Token memory token ) internal virtual{\\n    uint256 tokenId = tokens.length;\\n\\n    tokens.push( token );\\n    emit Transfer( address(0), token.owner, tokenId );\\n  }\\n\\n  function _next() internal view virtual returns(uint){\\n    return tokens.length;\\n  }\\n\\n  function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal{\\n    _transfer(from, to, tokenId);\\n    require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721B: transfer to non ERC721Receiver implementer\\\");\\n  }\\n\\n  function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n    require(ownerOf(tokenId) == from, \\\"ERC721B: transfer of token that is not own\\\");\\n\\n    // Clear approvals from the previous owner\\n    delete _tokenApprovals[tokenId];\\n    _beforeTokenTransfer(from, to, tokenId);\\n\\n    unchecked {\\n      --owners[from].balance;\\n      ++owners[to].balance;\\n    }\\n\\n    tokens[tokenId].owner = to;\\n    emit Transfer(from, to, tokenId);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/HashCats/Delegated.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Delegated is Ownable{\\n  mapping(address => bool) internal _delegates;\\n\\n  modifier onlyDelegates {\\n    require(_delegates[msg.sender], \\\"Invalid delegate\\\" );\\n    _;\\n  }\\n\\n  constructor()\\n    Ownable(){\\n    setDelegate( owner(), true );\\n  }\\n\\n  //onlyOwner\\n  function isDelegate( address addr ) external view onlyOwner returns( bool ){\\n    return _delegates[addr];\\n  }\\n\\n  function setDelegate( address addr, bool isDelegate_ ) public onlyOwner{\\n    _delegates[addr] = isDelegate_;\\n  }\\n\\n  function transferOwnership(address newOwner) public virtual override onlyOwner {\\n    _delegates[newOwner] = true;\\n    super.transferOwnership( newOwner );\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"}],\"name\":\"calculateTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"maxMint\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxOrder\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"saleState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRoyalty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"numerator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"denominator\",\"type\":\"uint16\"}],\"internalType\":\"struct Royalties.Fraction\",\"name\":\"fraction\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalURIPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"isOwnerOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"quantity\",\"type\":\"uint16[]\"},{\"internalType\":\"address[]\",\"name\":\"recipient\",\"type\":\"address[]\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"balance\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"claimed\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"purchased\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pricing\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"mark\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"maxMint\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxOrder\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"saleState\",\"type\":\"uint8\"}],\"internalType\":\"struct HashCats.MintConfig\",\"name\":\"config_\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royaltyNum\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"royaltyDenom\",\"type\":\"uint16\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDelegate_\",\"type\":\"bool\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"marks\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newPrices\",\"type\":\"uint256[]\"}],\"name\":\"setPricingCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"finalPrefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"suffix\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"setWithdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURIPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURISuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"lives\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HashCats", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}