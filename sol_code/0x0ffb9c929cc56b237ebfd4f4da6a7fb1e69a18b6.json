{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.15;\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\npragma solidity ^0.8.15;\r\n\r\ninterface IThreeDildosCapitalRewards{\r\n    function claimReward() external;\r\n    function depositRewards() external payable;\r\n    function getLockedShares(address wallet) external view returns (uint256);\r\n    function lock(uint256 amount) external;\r\n    function unlock(uint256 amount) external;\r\n}\r\n\r\npragma solidity ^0.8.15;\r\n\r\ncontract ThreeDildosCapitalRewards is IThreeDildosCapitalRewards, Ownable {\r\n    address public shareholderToken;\r\n\r\n    uint256 private constant ONE_DAY = 60 * 60 * 24;\r\n    uint256 public timeLock = 30 days;\r\n    uint256 public totalLockedUsers;\r\n    uint256 public totalSharesDeposited;\r\n    uint256 public totalRewards;\r\n    uint256 public totalDistributed;\r\n    uint256 public rewardsPerShare;\r\n    uint256 private constant ACC_FACTOR = 10**36;\r\n\r\n    int256 private constant OFFSET19700101 = 2440588;\r\n\r\n    uint8 public minDayOfMonthCanLock = 1;\r\n    uint8 public maxDayOfMonthCanLock = 5;\r\n\r\n    struct Reward {\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n        uint256 lastClaim;\r\n    }\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 lockedTime;\r\n    }\r\n\r\n    // amount of shares a user has\r\n    mapping(address => Share) public shares;\r\n    // reward information per user\r\n    mapping(address => Reward) public rewards;\r\n\r\n    event ClaimReward(address wallet);\r\n    event DistributeReward(address indexed wallet, address payable receiver);\r\n    event DepositRewards(address indexed wallet, uint256 amountETH);\r\n\r\n    constructor(address _shareholderToken) {\r\n        shareholderToken = _shareholderToken;\r\n    }\r\n\r\n    function lock(uint256 _amount) external {\r\n        uint256 _currentDayOfMonth = _dayOfMonth(block.timestamp);\r\n        require(\r\n            _currentDayOfMonth >= minDayOfMonthCanLock &&\r\n            _currentDayOfMonth <= maxDayOfMonthCanLock,\r\n            \"outside of allowed lock window\"\r\n        );\r\n        address shareholder = msg.sender;\r\n        IERC20 tokenContract = IERC20(shareholderToken);\r\n        _amount = _amount == 0 ? tokenContract.balanceOf(shareholder) : _amount;\r\n        tokenContract.transferFrom(shareholder, address(this), _amount);\r\n        _addShares(shareholder, _amount);\r\n    }\r\n\r\n    function unlock(uint256 _amount) external {\r\n        address shareholder = msg.sender;\r\n        require(\r\n            block.timestamp >= shares[shareholder].lockedTime + timeLock,\r\n            \"must wait the time lock before unstaking\"\r\n        );\r\n        _amount = _amount == 0 ? shares[shareholder].amount : _amount;\r\n        require(_amount > 0, \"need tokens to unlock\");\r\n        require(\r\n            _amount <= shares[shareholder].amount,\r\n            \"cannot unlock more than you have locked\"\r\n        );\r\n        IERC20(shareholderToken).transfer(shareholder, _amount);\r\n        _removeShares(shareholder, _amount);\r\n    }\r\n\r\n    function _addShares(address shareholder, uint256 amount) internal {\r\n        _distributeReward(shareholder);\r\n\r\n        uint256 sharesBefore = shares[shareholder].amount;\r\n        totalSharesDeposited += amount;\r\n        shares[shareholder].amount += amount;\r\n        shares[shareholder].lockedTime = block.timestamp;\r\n        if (sharesBefore == 0 && shares[shareholder].amount > 0) {\r\n            totalLockedUsers++;\r\n        }\r\n        rewards[shareholder].totalExcluded = getCumulativeRewards(\r\n            shares[shareholder].amount\r\n        );\r\n    }\r\n\r\n    function _removeShares(address shareholder, uint256 amount) internal {\r\n        amount = amount == 0 ? shares[shareholder].amount : amount;\r\n        require(\r\n            shares[shareholder].amount > 0 && amount <= shares[shareholder].amount,\r\n            \"you can only unlock if you have some lockd\"\r\n        );\r\n        _distributeReward(shareholder);\r\n\r\n        totalSharesDeposited -= amount;\r\n        shares[shareholder].amount -= amount;\r\n        if (shares[shareholder].amount == 0) {\r\n            totalLockedUsers--;\r\n        }\r\n        rewards[shareholder].totalExcluded = getCumulativeRewards(\r\n            shares[shareholder].amount\r\n        );\r\n  }\r\n\r\n    function depositRewards() public payable override {\r\n        _depositRewards(msg.value);\r\n    }\r\n\r\n    function _depositRewards(uint256 _amount) internal {\r\n        require(_amount > 0, \"must provide ETH to deposit\");\r\n        require(totalSharesDeposited > 0, \"must be shares deposited\");\r\n\r\n        totalRewards += _amount;\r\n        rewardsPerShare += (ACC_FACTOR * _amount) / totalSharesDeposited;\r\n        emit DepositRewards(msg.sender, _amount);\r\n    }\r\n\r\n    function _distributeReward(address shareholder) internal {\r\n        if (shares[shareholder].amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = getUnpaid(shareholder);\r\n\r\n        rewards[shareholder].totalRealised += amount;\r\n        rewards[shareholder].totalExcluded = getCumulativeRewards(\r\n            shares[shareholder].amount\r\n        );\r\n        rewards[shareholder].lastClaim = block.timestamp;\r\n\r\n        if (amount > 0) {\r\n            bool success;\r\n            address payable receiver = payable(shareholder);\r\n            totalDistributed += amount;\r\n            uint256 balanceBefore = address(this).balance;\r\n            (success,) = receiver.call{ value: amount }('');\r\n            require(address(this).balance >= balanceBefore - amount);\r\n            emit DistributeReward(shareholder, receiver);\r\n        }\r\n    }\r\n\r\n    function _dayOfMonth(uint256 _timestamp) internal pure returns (uint256) {\r\n        (, , uint256 day) = _daysToDate(_timestamp / ONE_DAY);\r\n        return day;\r\n    }\r\n\r\n    // date conversion algorithm from http://aa.usno.navy.mil/faq/docs/JD_Formula.php\r\n    function _daysToDate(uint256 _days) internal pure returns (uint256, uint256, uint256) {\r\n        int256 __days = int256(_days);\r\n\r\n        int256 L = __days + 68569 + OFFSET19700101;\r\n        int256 N = (4 * L) / 146097;\r\n        L = L - (146097 * N + 3) / 4;\r\n        int256 _year = (4000 * (L + 1)) / 1461001;\r\n        L = L - (1461 * _year) / 4 + 31;\r\n        int256 _month = (80 * L) / 2447;\r\n        int256 _day = L - (2447 * _month) / 80;\r\n        L = _month / 11;\r\n        _month = _month + 2 - 12 * L;\r\n        _year = 100 * (N - 49) + _year + L;\r\n\r\n        return (uint256(_year), uint256(_month), uint256(_day));\r\n    }\r\n\r\n    function claimReward() external override {\r\n        _distributeReward(msg.sender);\r\n        emit ClaimReward(msg.sender);\r\n    }\r\n\r\n    // returns the unpaid rewards\r\n    function getUnpaid(address shareholder) public view returns (uint256) {\r\n        if (shares[shareholder].amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 earnedRewards = getCumulativeRewards(shares[shareholder].amount);\r\n        uint256 rewardsExcluded = rewards[shareholder].totalExcluded;\r\n        if (earnedRewards <= rewardsExcluded) {\r\n            return 0;\r\n        }\r\n\r\n        return earnedRewards - rewardsExcluded;\r\n    }\r\n\r\n    function getCumulativeRewards(uint256 share) internal view returns (uint256) {\r\n        return (share * rewardsPerShare) / ACC_FACTOR;\r\n    }\r\n\r\n    function getLockedShares(address user) external view override returns (uint256) {\r\n        return shares[user].amount;\r\n    }\r\n\r\n    function setMinDayOfMonthCanLock(uint8 _day) external onlyOwner {\r\n        require(_day <= maxDayOfMonthCanLock, \"can set min day above max day\");\r\n        minDayOfMonthCanLock = _day;\r\n    }\r\n\r\n    function setMaxDayOfMonthCanLock(uint8 _day) external onlyOwner {\r\n        require(_day >= minDayOfMonthCanLock, \"can set max day below min day\");\r\n        maxDayOfMonthCanLock = _day;\r\n    }\r\n\r\n    function setTimeLock(uint256 numSec) external onlyOwner {\r\n        require(numSec <= 365 days, \"must be less than a year\");\r\n        timeLock = numSec;\r\n    }\r\n\r\n    function withdrawStuckETH() external onlyOwner {\r\n        bool success;\r\n        (success,) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    receive() external payable {\r\n        _depositRewards(msg.value);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.15;\r\n\r\ninterface IUSDCReceiver {\r\n    function initialize(address) external;\r\n    function withdraw() external;\r\n    function withdrawUnsupportedAsset(address, uint256) external;\r\n}\r\n\r\npragma solidity ^0.8.15;\r\n\r\ncontract USDCReceiver is IUSDCReceiver, Ownable {\r\n\r\n    address public usdc;\r\n    address public token;\r\n\r\n    constructor() Ownable() {\r\n        token = msg.sender;\r\n    }\r\n\r\n    function initialize(address _usdc) public onlyOwner {\r\n        require(usdc == address(0x0), \"Already initialized\");\r\n        usdc = _usdc;\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(msg.sender == token, \"Caller is not token\");\r\n        IERC20(usdc).transfer(token, IERC20(usdc).balanceOf(address(this)));\r\n    }\r\n\r\n    function withdrawUnsupportedAsset(address _token, uint256 _amount) public onlyOwner {\r\n        if(_token == address(0x0))\r\n            payable(owner()).transfer(_amount);\r\n        else\r\n            IERC20(_token).transfer(owner(), _amount);\r\n    }\r\n}\r\n\r\ncontract ThreeDildosCapital is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 private _uniswapV2Router;\r\n\r\n    ThreeDildosCapitalRewards private _rewards;\r\n    USDCReceiver private _receiver;\r\n\r\n    mapping (address => uint) private _cooldown;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) private _isExcludedMaxTransactionAmount;\r\n    mapping (address => bool) private _isBlacklisted;\r\n\r\n    bool public tradingOpen;\r\n    bool private swapping;\r\n    bool private swapEnabled = false;\r\n    bool public cooldownEnabled = false;\r\n    bool public feesEnabled = true;\r\n\r\n    string private constant _name = \"Three Dildos Capital\";\r\n    string private constant _symbol = \"3DC\";\r\n\r\n    uint8 private constant _decimals = 18;\r\n\r\n    uint256 private constant _tTotal = 1e9 * (10**_decimals);\r\n    uint256 public maxBuyAmount = _tTotal;\r\n    uint256 public maxSellAmount = _tTotal;\r\n    uint256 public maxWalletAmount = _tTotal;\r\n    uint256 public tradingActiveBlock = 0;\r\n    uint256 private _blocksToBlacklist = 0;\r\n    uint256 private _cooldownBlocks = 1;\r\n    uint256 public constant FEE_DIVISOR = 1000;\r\n    uint256 public buyLiquidityFee = 10;\r\n    uint256 private _previousBuyLiquidityFee = buyLiquidityFee;\r\n    uint256 public buyTreasuryFee = 70;\r\n    uint256 private _previousBuyTreasuryFee = buyTreasuryFee;\r\n    uint256 public buyDevelopmentFee = 30;\r\n    uint256 private _previousBuyDevelopmentFee = buyDevelopmentFee;\r\n    uint256 public sellLiquidityFee = 10;\r\n    uint256 private _previousSellLiquidityFee = sellLiquidityFee;\r\n    uint256 public sellTreasuryFee = 70;\r\n    uint256 private _previousSellTreasuryFee = sellTreasuryFee;\r\n    uint256 public sellDevelopmentFee = 30;\r\n    uint256 private _previousSellDevelopmentFee = sellDevelopmentFee;\r\n    uint256 private _tokensForLiquidity;\r\n    uint256 private _tokensForTreasury;\r\n    uint256 private _tokensForDevelopment;\r\n    uint256 private _swapTokensAtAmount = 0;\r\n\r\n    address payable public liquidityWallet;\r\n    address payable public treasuryWallet;\r\n    address payable public developmentWallet;\r\n    address private _uniswapV2Pair;\r\n    address private DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address private ZERO = 0x0000000000000000000000000000000000000000;\r\n    address private USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    \r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\r\n    \r\n    constructor (address liquidityWalletAddy, address treasuryWalletAddy, address developmentWalletAddy) {\r\n        liquidityWallet = payable(liquidityWalletAddy);\r\n        treasuryWallet = payable(treasuryWalletAddy);\r\n        developmentWallet = payable(developmentWalletAddy);\r\n\r\n        _rewards = new ThreeDildosCapitalRewards(address(this));\r\n        _rewards.transferOwnership(msg.sender);\r\n\r\n        _receiver = new USDCReceiver();\r\n        _receiver.initialize(USDC);\r\n        _receiver.transferOwnership(msg.sender);\r\n\r\n        _rOwned[_msgSender()] = _tTotal;\r\n\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[address(_receiver)] = true;\r\n        _isExcludedFromFees[DEAD] = true;\r\n        _isExcludedFromFees[liquidityWallet] = true;\r\n        _isExcludedFromFees[treasuryWallet] = true;\r\n        _isExcludedFromFees[developmentWallet] = true;\r\n\r\n        _isExcludedMaxTransactionAmount[owner()] = true;\r\n        _isExcludedMaxTransactionAmount[address(this)] = true;\r\n        _isExcludedMaxTransactionAmount[address(_receiver)] = true;\r\n        _isExcludedMaxTransactionAmount[DEAD] = true;\r\n        _isExcludedMaxTransactionAmount[liquidityWallet] = true;\r\n        _isExcludedMaxTransactionAmount[treasuryWallet] = true;\r\n        _isExcludedMaxTransactionAmount[developmentWallet] = true;\r\n\r\n        _rewards = new ThreeDildosCapitalRewards(address(this));\r\n        _rewards.transferOwnership(msg.sender);\r\n\r\n        _receiver = new USDCReceiver();\r\n        _receiver.initialize(USDC);\r\n        _receiver.transferOwnership(msg.sender);\r\n\r\n        emit Transfer(ZERO, _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _rOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function setCooldownEnabled(bool onoff) external onlyOwner {\r\n        cooldownEnabled = onoff;\r\n    }\r\n\r\n    function setSwapEnabled(bool onoff) external onlyOwner {\r\n        swapEnabled = onoff;\r\n    }\r\n\r\n    function setFeesEnabled(bool onoff) external onlyOwner {\r\n        feesEnabled = onoff;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != ZERO, \"ERC20: approve from the zero address\");\r\n        require(spender != ZERO, \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != ZERO, \"ERC20: transfer from the zero address\");\r\n        require(to != ZERO, \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        bool takeFee = true;\r\n        bool shouldSwap = false;\r\n        if (from != owner() && to != owner() && to != ZERO && to != DEAD && !swapping) {\r\n            require(!_isBlacklisted[from] && !_isBlacklisted[to]);\r\n\r\n            if(!tradingOpen) {\r\n                require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \"Trading is not allowed yet.\");\r\n            }\r\n\r\n            if (cooldownEnabled) {\r\n                if (to != address(_uniswapV2Router) && to != address(_uniswapV2Pair)){\r\n                    require(_cooldown[tx.origin] < block.number - _cooldownBlocks && _cooldown[to] < block.number - _cooldownBlocks, \"Transfer delay enabled. Try again later.\");\r\n                    _cooldown[tx.origin] = block.number;\r\n                    _cooldown[to] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == _uniswapV2Pair && to != address(_uniswapV2Router) && !_isExcludedMaxTransactionAmount[to]) {\r\n                require(amount <= maxBuyAmount, \"Transfer amount exceeds the maxBuyAmount.\");\r\n                require(balanceOf(to) + amount <= maxWalletAmount, \"Exceeds maximum wallet token amount.\");\r\n            }\r\n            \r\n            if (to == _uniswapV2Pair && from != address(_uniswapV2Router) && !_isExcludedMaxTransactionAmount[from]) {\r\n                require(amount <= maxSellAmount, \"Transfer amount exceeds the maxSellAmount.\");\r\n                shouldSwap = true;\r\n            }\r\n        }\r\n\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to] || !feesEnabled) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = (contractTokenBalance > _swapTokensAtAmount) && shouldSwap;\r\n\r\n        if (canSwap && swapEnabled && !swapping && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n            swapping = true;\r\n            swapBack();\r\n            swapping = false;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, shouldSwap);\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = _tokensForLiquidity + _tokensForTreasury + _tokensForDevelopment;\r\n        \r\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\r\n\r\n        if(contractBalance > _swapTokensAtAmount * 5) {\r\n            contractBalance = _swapTokensAtAmount * 5;\r\n        }\r\n        \r\n        uint256 liquidityTokens = contractBalance * _tokensForLiquidity / totalTokensToSwap / 2;\r\n        uint256 amountToSwapForUSDC = contractBalance.sub(liquidityTokens);\r\n        \r\n        uint256 initialUSDCBalance = IERC20(USDC).balanceOf(address(this));\r\n\r\n        swapTokensForTokens(amountToSwapForUSDC);\r\n        _receiver.withdraw();\r\n        \r\n        uint256 usdcBalance = IERC20(USDC).balanceOf(address(this)).sub(initialUSDCBalance);\r\n        uint256 usdcForTreasury = usdcBalance.mul(_tokensForTreasury).div(totalTokensToSwap);\r\n        uint256 usdcForDevelopment = usdcBalance.mul(_tokensForDevelopment).div(totalTokensToSwap);\r\n        uint256 usdcForLiquidity = usdcBalance - usdcForTreasury - usdcForDevelopment;\r\n        \r\n        _tokensForLiquidity = 0;\r\n        _tokensForTreasury = 0;\r\n        _tokensForDevelopment = 0;\r\n        \r\n        if(liquidityTokens > 0 && usdcForLiquidity > 0){\r\n            addLiquidity(liquidityTokens, usdcForLiquidity);\r\n            emit SwapAndLiquify(amountToSwapForUSDC, usdcForLiquidity, _tokensForLiquidity);\r\n        }\r\n        \r\n        IERC20(USDC).transfer(developmentWallet, usdcForDevelopment);\r\n        IERC20(USDC).transfer(treasuryWallet, IERC20(USDC).balanceOf(address(this)));\r\n    }\r\n\r\n    function swapTokensForTokens(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = USDC;\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_receiver),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 usdcAmount) private {\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n        IERC20(USDC).approve(address(_uniswapV2Router), usdcAmount);\r\n        _uniswapV2Router.addLiquidity(\r\n            address(this),\r\n            USDC,\r\n            tokenAmount,\r\n            usdcAmount,\r\n            0,\r\n            0,\r\n            liquidityWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n        \r\n    function sendUSDCToFee(uint256 amount) private {\r\n        IERC20(USDC).transfer(treasuryWallet, amount.div(2));\r\n        IERC20(USDC).transfer(developmentWallet, amount.div(2));\r\n    }\r\n\r\n    function rewardsContract() external view returns (address) {\r\n        return address(_rewards);\r\n    }\r\n\r\n    function usdcReceiverContract() external view returns (address) {\r\n        return address(_receiver);\r\n    }\r\n\r\n    function isBlacklisted(address wallet) external view returns (bool) {\r\n        return _isBlacklisted[wallet];\r\n    }\r\n    \r\n    function launch() external onlyOwner {\r\n        require(!tradingOpen, \"Trading is already open\");\r\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _uniswapV2Router = uniswapV2Router;\r\n        _approve(address(this), address(_uniswapV2Router), _tTotal);\r\n        IERC20(USDC).approve(address(_uniswapV2Router), IERC20(USDC).balanceOf(address(this)));\r\n        _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), USDC);\r\n        _uniswapV2Router.addLiquidity(address(this), USDC, balanceOf(address(this)), IERC20(USDC).balanceOf(address(this)), 0, 0, owner(), block.timestamp);\r\n        swapEnabled = true;\r\n        _swapTokensAtAmount = 5e5 * (10**_decimals);\r\n        tradingOpen = true;\r\n        tradingActiveBlock = block.number;\r\n        IERC20(_uniswapV2Pair).approve(address(_uniswapV2Router), type(uint).max);\r\n    }\r\n\r\n    function setMaxBuyAmount(uint256 maxBuy) external onlyOwner {\r\n        require(maxBuy >= 1e5 * (10**_decimals), \"Max buy amount cannot be lower than 0.01% total supply.\");\r\n        maxBuyAmount = maxBuy;\r\n    }\r\n\r\n    function setMaxSellAmount(uint256 maxSell) external onlyOwner {\r\n        require(maxSell >= 1e5 * (10**_decimals), \"Max sell amount cannot be lower than 0.01% total supply.\");\r\n        maxSellAmount = maxSell;\r\n    }\r\n    \r\n    function setMaxWalletAmount(uint256 maxToken) external onlyOwner {\r\n        require(maxToken >= 1e6 * (10**_decimals), \"Max wallet amount cannot be lower than 0.1% total supply.\");\r\n        maxWalletAmount = maxToken;\r\n    }\r\n    \r\n    function setSwapTokensAtAmount(uint256 swapAmount) external onlyOwner {\r\n        require(swapAmount >= 1e4 * (10**_decimals), \"Swap amount cannot be lower than 0.001% total supply.\");\r\n        require(swapAmount <= 5e6 * (10**_decimals), \"Swap amount cannot be higher than 0.5% total supply.\");\r\n        _swapTokensAtAmount = swapAmount;\r\n    }\r\n\r\n    function setLiquidityWallet(address liquidityWalletAddy) external onlyOwner {\r\n        require(liquidityWalletAddy != ZERO, \"liquidityWallet address cannot be 0\");\r\n        _isExcludedFromFees[liquidityWallet] = false;\r\n        _isExcludedMaxTransactionAmount[liquidityWallet] = false;\r\n        liquidityWallet = payable(liquidityWalletAddy);\r\n        _isExcludedFromFees[liquidityWallet] = true;\r\n        _isExcludedMaxTransactionAmount[liquidityWallet] = true;\r\n    }\r\n\r\n    function setTreasuryWallet(address treasuryWalletAddy) external onlyOwner {\r\n        require(treasuryWalletAddy != ZERO, \"treasuryWallet address cannot be 0\");\r\n        _isExcludedFromFees[treasuryWallet] = false;\r\n        _isExcludedMaxTransactionAmount[treasuryWallet] = false;\r\n        treasuryWallet = payable(treasuryWalletAddy);\r\n        _isExcludedFromFees[treasuryWallet] = true;\r\n        _isExcludedMaxTransactionAmount[treasuryWallet] = true;\r\n    }\r\n\r\n    function setDevelopmentWallet(address developmentWalletAddy) external onlyOwner {\r\n        require(developmentWalletAddy != ZERO, \"developmentWallet address cannot be 0\");\r\n        _isExcludedFromFees[developmentWallet] = false;\r\n        _isExcludedMaxTransactionAmount[developmentWallet] = false;\r\n        developmentWallet = payable(developmentWalletAddy);\r\n        _isExcludedFromFees[developmentWallet] = true;\r\n        _isExcludedMaxTransactionAmount[developmentWallet] = true;\r\n    }\r\n\r\n    function setExcludedFromFees(address[] memory accounts, bool isEx) external onlyOwner {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFees[accounts[i]] = isEx;\r\n        }\r\n    }\r\n    \r\n    function setExcludeFromMaxTransaction(address[] memory accounts, bool isEx) external onlyOwner {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _isExcludedMaxTransactionAmount[accounts[i]] = isEx;\r\n        }\r\n    }\r\n    \r\n    function setBlacklisted(address[] memory accounts, bool exempt) external onlyOwner {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _isBlacklisted[accounts[i]] = exempt;\r\n        }\r\n    }\r\n\r\n    function setBuyFee(uint256 newBuyLiquidityFee, uint256 newBuyTreasuryFee, uint256 newBuyDevelopmentFee) external onlyOwner {\r\n        require(newBuyLiquidityFee + newBuyTreasuryFee + newBuyDevelopmentFee <= 200, \"Must keep buy taxes below 20%\");\r\n        buyLiquidityFee = newBuyLiquidityFee;\r\n        buyTreasuryFee = newBuyTreasuryFee;\r\n        buyDevelopmentFee = newBuyDevelopmentFee;\r\n    }\r\n\r\n    function setSellFee(uint256 newSellLiquidityFee, uint256 newSellTreasuryFee, uint256 newSellDevelopmentFee) external onlyOwner {\r\n        require(newSellLiquidityFee + newSellTreasuryFee + newSellDevelopmentFee <= 200, \"Must keep sell taxes below 20%\");\r\n        sellLiquidityFee = newSellLiquidityFee;\r\n        sellTreasuryFee = newSellTreasuryFee;\r\n        sellDevelopmentFee = newSellDevelopmentFee;\r\n    }\r\n\r\n    function setBlocksToBlacklist(uint256 blocks) external onlyOwner {\r\n        require(blocks < 10, \"Must keep blacklist blocks below 10\");\r\n        _blocksToBlacklist = blocks;\r\n    }\r\n\r\n    function setCooldownBlocks(uint256 blocks) external onlyOwner {\r\n        require(blocks < 10, \"Must keep cooldown blocks below 10\");\r\n        _cooldownBlocks = blocks;\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if(buyLiquidityFee == 0 && buyTreasuryFee == 0 && buyDevelopmentFee == 0 && sellLiquidityFee == 0 && sellTreasuryFee == 0 && sellDevelopmentFee == 0) return;\r\n        \r\n        _previousBuyLiquidityFee = buyLiquidityFee;\r\n        _previousBuyTreasuryFee = buyTreasuryFee;\r\n        _previousBuyDevelopmentFee = buyDevelopmentFee;\r\n        _previousSellLiquidityFee = sellLiquidityFee;\r\n        _previousSellTreasuryFee = sellTreasuryFee;\r\n        _previousSellDevelopmentFee = sellDevelopmentFee;\r\n        \r\n        buyLiquidityFee = 0;\r\n        buyTreasuryFee = 0;\r\n        buyDevelopmentFee = 0;\r\n        sellLiquidityFee = 0;\r\n        sellTreasuryFee = 0;\r\n        sellDevelopmentFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        buyLiquidityFee = _previousBuyLiquidityFee;\r\n        buyTreasuryFee = _previousBuyTreasuryFee;\r\n        buyDevelopmentFee = _previousBuyDevelopmentFee;\r\n        sellLiquidityFee = _previousSellLiquidityFee;\r\n        sellTreasuryFee = _previousSellTreasuryFee;\r\n        sellDevelopmentFee = _previousSellDevelopmentFee;\r\n    }\r\n        \r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee, bool isSell) private {\r\n        if(!takeFee) {\r\n            removeAllFee();\r\n        } else {\r\n            amount = _takeFees(sender, amount, isSell);\r\n        }\r\n\r\n        _transferStandard(sender, recipient, amount);\r\n        \r\n        if(!takeFee) {\r\n            restoreAllFee();\r\n        }\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        _rOwned[sender] = _rOwned[sender].sub(tAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(tAmount);\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    function _takeFees(address sender, uint256 amount, bool isSell) private returns (uint256) {\r\n        uint256 _totalFees;\r\n        uint256 liqFee;\r\n        uint256 trsryFee;\r\n        uint256 devFee;\r\n        if(tradingActiveBlock + _blocksToBlacklist >= block.number){\r\n            _totalFees = 999;\r\n            liqFee = 333;\r\n            trsryFee = 333;\r\n            devFee = 333;\r\n        } else {\r\n            _totalFees = _getTotalFees(isSell);\r\n            if (isSell) {\r\n                liqFee = sellLiquidityFee;\r\n                trsryFee = sellTreasuryFee;\r\n                devFee = sellDevelopmentFee;\r\n            } else {\r\n                liqFee = buyLiquidityFee;\r\n                trsryFee = buyTreasuryFee;\r\n                devFee = buyDevelopmentFee;\r\n            }\r\n        }\r\n\r\n        uint256 fees = amount.mul(_totalFees).div(FEE_DIVISOR);\r\n        _tokensForLiquidity += fees * liqFee / _totalFees;\r\n        _tokensForTreasury += fees * trsryFee / _totalFees;\r\n        _tokensForDevelopment += fees * devFee / _totalFees;\r\n            \r\n        if(fees > 0) {\r\n            _transferStandard(sender, address(this), fees);\r\n        }\r\n            \r\n        return amount -= fees;\r\n    }\r\n\r\n    function _getTotalFees(bool isSell) private view returns(uint256) {\r\n        if (isSell) {\r\n            return sellLiquidityFee + sellTreasuryFee + sellDevelopmentFee;\r\n        }\r\n        return buyLiquidityFee + buyTreasuryFee + buyDevelopmentFee;\r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n    \r\n    function unclog() external onlyOwner {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForTokens(contractBalance);\r\n    }\r\n    \r\n    function distributeFees() external onlyOwner {\r\n        _receiver.withdraw();\r\n        uint256 contractUSDCBalance = IERC20(USDC).balanceOf(address(this));\r\n        sendUSDCToFee(contractUSDCBalance);\r\n    }\r\n\r\n    function withdrawStuckETH() external onlyOwner {\r\n        bool success;\r\n        (success,) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function withdrawStuckTokens(address tkn) external onlyOwner {\r\n        require(tkn != address(this), \"Cannot withdraw this token\");\r\n        require(IERC20(tkn).balanceOf(address(this)) > 0, \"No tokens\");\r\n        uint amount = IERC20(tkn).balanceOf(address(this));\r\n        IERC20(tkn).transfer(msg.sender, amount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityWalletAddy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryWalletAddy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"developmentWalletAddy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"FEE_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevelopmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevelopmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"setBlocksToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuyTreasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuyDevelopmentFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"setCooldownBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"developmentWalletAddy\",\"type\":\"address\"}],\"name\":\"setDevelopmentWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"setExcludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setFeesEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityWalletAddy\",\"type\":\"address\"}],\"name\":\"setLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSell\",\"type\":\"uint256\"}],\"name\":\"setMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxToken\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellTreasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellDevelopmentFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryWalletAddy\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclog\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcReceiverContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tkn\",\"type\":\"address\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ThreeDildosCapital", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d3c0c85faa4f51861f6160edc91b52f81719612600000000000000000000000017d17158383a41bc0a1417a973ecaaf35a622e7f0000000000000000000000006af02506acac1e1f1c34881fee1d28a6e823fc0a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://09dfecba571c6ce6dd1310b3308d02dd6890e7491b603ccc6e4f5e3602d21a40"}]}