{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-07-26\r\n*/\r\n\r\n// Sources flattened with hardhat v2.9.2 https://hardhat.org\r\n\r\n// File @rari-capital/solmate/src/tokens/ERC20.sol@v6.2.0\r\n\r\n\r\n\r\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\r\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\r\nabstract contract ERC20 {\r\n    /*///////////////////////////////////////////////////////////////\r\n                                  EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public immutable decimals;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             EIP-2612 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n    uint256 internal immutable INITIAL_CHAIN_ID;\r\n\r\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\r\n\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        INITIAL_CHAIN_ID = block.chainid;\r\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        balanceOf[msg.sender] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              EIP-2612 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\r\n\r\n        // Unchecked because the only math done is incrementing\r\n        // the owner's nonce which cannot realistically overflow.\r\n        unchecked {\r\n            bytes32 digest = keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19\\x01\",\r\n                    DOMAIN_SEPARATOR(),\r\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n                )\r\n            );\r\n\r\n            address recoveredAddress = ecrecover(digest, v, r, s);\r\n\r\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\r\n\r\n            allowance[recoveredAddress][spender] = value;\r\n        }\r\n\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\r\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\r\n    }\r\n\r\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                    keccak256(bytes(name)),\r\n                    keccak256(\"1\"),\r\n                    block.chainid,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                       INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user's balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\n\r\n// File @rari-capital/solmate/src/utils/SafeTransferLib.sol@v6.2.0\r\n\r\n\r\n\r\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\r\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\r\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\r\nlibrary SafeTransferLib {\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ETH OPERATIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function safeTransferETH(address to, uint256 amount) internal {\r\n        bool callStatus;\r\n\r\n        assembly {\r\n            // Transfer the ETH and store if it succeeded or not.\r\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\r\n        }\r\n\r\n        require(callStatus, \"ETH_TRANSFER_FAILED\");\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                           ERC20 OPERATIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function safeTransferFrom(\r\n        ERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool callStatus;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata to memory piece by piece:\r\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\r\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"from\" argument.\r\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\r\n\r\n            // Call the token and store if it succeeded or not.\r\n            // We use 100 because the calldata length is 4 + 32 * 3.\r\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\r\n        }\r\n\r\n        require(didLastOptionalReturnCallSucceed(callStatus), \"TRANSFER_FROM_FAILED\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        ERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool callStatus;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata to memory piece by piece:\r\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\r\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\r\n\r\n            // Call the token and store if it succeeded or not.\r\n            // We use 68 because the calldata length is 4 + 32 * 2.\r\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\r\n        }\r\n\r\n        require(didLastOptionalReturnCallSucceed(callStatus), \"TRANSFER_FAILED\");\r\n    }\r\n\r\n    function safeApprove(\r\n        ERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool callStatus;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata to memory piece by piece:\r\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\r\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\r\n\r\n            // Call the token and store if it succeeded or not.\r\n            // We use 68 because the calldata length is 4 + 32 * 2.\r\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\r\n        }\r\n\r\n        require(didLastOptionalReturnCallSucceed(callStatus), \"APPROVE_FAILED\");\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                         INTERNAL HELPER LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\r\n        assembly {\r\n            // Get how many bytes the call returned.\r\n            let returnDataSize := returndatasize()\r\n\r\n            // If the call reverted:\r\n            if iszero(callStatus) {\r\n                // Copy the revert message into memory.\r\n                returndatacopy(0, 0, returnDataSize)\r\n\r\n                // Revert with the same message.\r\n                revert(0, returnDataSize)\r\n            }\r\n\r\n            switch returnDataSize\r\n            case 32 {\r\n                // Copy the return data into memory.\r\n                returndatacopy(0, 0, returnDataSize)\r\n\r\n                // Set success to whether it returned true.\r\n                success := iszero(iszero(mload(0)))\r\n            }\r\n            case 0 {\r\n                // There was no return data.\r\n                success := 1\r\n            }\r\n            default {\r\n                // It returned some malformed input.\r\n                success := 0\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.5.0\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.5.0\r\n\r\n// \r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IStaking.sol\r\n\r\n// \r\n\r\n\r\ninterface IStaking {\r\n    function stake(uint256 _amount, address _recipient) external returns (bool);\r\n\r\n    function claim(address recipient) external;\r\n\r\n    function unstake(uint256 _amount, bool _trigger) external;\r\n\r\n    function index() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IWXBTRFLY.sol\r\n\r\n// \r\n\r\n\r\ninterface IWXBTRFLY is IERC20 {\r\n    function wrapFromBTRFLY(uint256 _amount) external returns (uint256);\r\n\r\n    function unwrapToBTRFLY(uint256 _amount) external returns (uint256);\r\n\r\n    function wrapFromxBTRFLY(uint256 _amount) external returns (uint256);\r\n\r\n    function unwrapToxBTRFLY(uint256 _amount) external returns (uint256);\r\n\r\n    function xBTRFLYValue(uint256 _amount) external view returns (uint256);\r\n\r\n    function wBTRFLYValue(uint256 _amount) external view returns (uint256);\r\n\r\n    function realIndex() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IBTRFLY.sol\r\n\r\n// \r\n\r\n\r\ninterface IBTRFLY is IERC20 {\r\n    function mint(address account_, uint256 amount_) external;\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function burnFrom(address account_, uint256 amount_) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IMariposa.sol\r\n\r\n// \r\n\r\n\r\ninterface IMariposa {\r\n    function mintFor(address _recipient, uint256 amount) external;\r\n}\r\n\r\n\r\n// File @rari-capital/solmate/src/utils/ReentrancyGuard.sol@v6.2.0\r\n\r\n\r\n\r\n/// @notice Gas optimized reentrancy protection for smart contracts.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\r\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\r\nabstract contract ReentrancyGuard {\r\n    uint256 private reentrancyStatus = 1;\r\n\r\n    modifier nonReentrant() {\r\n        require(reentrancyStatus == 1, \"REENTRANCY\");\r\n\r\n        reentrancyStatus = 2;\r\n\r\n        _;\r\n\r\n        reentrancyStatus = 1;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n\r\n// \r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n\r\n// \r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/core/RLBTRFLY.sol\r\n\r\n// \r\n\r\n\r\n\r\n\r\n\r\n/// @title RLBTRFLY\r\n/// @author \u2588\u2588\u2588\u2588\r\n\r\n/**\r\n    @notice\r\n    Partially adapted from Convex's CvxLockerV2 contract with some modifications and optimizations for the BTRFLY V2 requirements\r\n*/\r\n\r\ncontract RLBTRFLY is ReentrancyGuard, Ownable {\r\n    using SafeTransferLib for ERC20;\r\n\r\n    /**\r\n        @notice Lock balance details\r\n        @param  amount      uint224  Locked amount in the lock\r\n        @param  unlockTime  uint32   Unlock time of the lock\r\n     */\r\n    struct LockedBalance {\r\n        uint224 amount;\r\n        uint32 unlockTime;\r\n    }\r\n\r\n    /**\r\n        @notice Balance details\r\n        @param  locked           uint224          Overall locked amount\r\n        @param  nextUnlockIndex  uint32           Index of earliest next unlock\r\n        @param  lockedBalances   LockedBalance[]  List of locked balances data\r\n     */\r\n    struct Balance {\r\n        uint224 locked;\r\n        uint32 nextUnlockIndex;\r\n        LockedBalance[] lockedBalances;\r\n    }\r\n\r\n    // 1 epoch = 1 week\r\n    uint32 public constant EPOCH_DURATION = 1 weeks;\r\n    // Full lock duration = 16 epochs\r\n    uint256 public constant LOCK_DURATION = 16 * EPOCH_DURATION;\r\n\r\n    ERC20 public immutable btrflyV2;\r\n\r\n    uint256 public lockedSupply;\r\n\r\n    mapping(address => Balance) public balances;\r\n\r\n    bool public isShutdown;\r\n\r\n    string public constant name = \"Revenue-Locked BTRFLY\";\r\n    string public constant symbol = \"rlBTRFLY\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    event Shutdown();\r\n    event Locked(\r\n        address indexed account,\r\n        uint256 indexed epoch,\r\n        uint256 amount\r\n    );\r\n    event Withdrawn(address indexed account, uint256 amount, bool relock);\r\n\r\n    error ZeroAddress();\r\n    error ZeroAmount();\r\n    error IsShutdown();\r\n    error InvalidNumber(uint256 value);\r\n\r\n    /**\r\n        @param  _btrflyV2  address  BTRFLYV2 token address\r\n     */\r\n    constructor(address _btrflyV2) {\r\n        if (_btrflyV2 == address(0)) revert ZeroAddress();\r\n        btrflyV2 = ERC20(_btrflyV2);\r\n    }\r\n\r\n    /**\r\n        @notice Emergency method to shutdown the current locker contract which also force-unlock all locked tokens\r\n     */\r\n    function shutdown() external onlyOwner {\r\n        if (isShutdown) revert IsShutdown();\r\n\r\n        isShutdown = true;\r\n\r\n        emit Shutdown();\r\n    }\r\n\r\n    /**\r\n        @notice Locked balance of the specified account including those with expired locks\r\n        @param  account  address  Account\r\n        @return amount   uint256  Amount\r\n     */\r\n    function lockedBalanceOf(address account)\r\n        external\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        return balances[account].locked;\r\n    }\r\n\r\n    /**\r\n        @notice Balance of the specified account by only including tokens in active locks\r\n        @param  account  address  Account\r\n        @return amount   uint256  Amount\r\n     */\r\n    function balanceOf(address account) external view returns (uint256 amount) {\r\n        // Using storage as it's actually cheaper than allocating a new memory based variable\r\n        Balance storage userBalance = balances[account];\r\n        LockedBalance[] storage locks = userBalance.lockedBalances;\r\n        uint256 nextUnlockIndex = userBalance.nextUnlockIndex;\r\n\r\n        amount = balances[account].locked;\r\n\r\n        uint256 locksLength = locks.length;\r\n\r\n        // Skip all old records\r\n        for (uint256 i = nextUnlockIndex; i < locksLength; ++i) {\r\n            if (locks[i].unlockTime <= block.timestamp) {\r\n                amount -= locks[i].amount;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Remove amount locked in the next epoch\r\n        if (\r\n            locksLength > 0 &&\r\n            uint256(locks[locksLength - 1].unlockTime) - LOCK_DURATION >\r\n            getCurrentEpoch()\r\n        ) {\r\n            amount -= locks[locksLength - 1].amount;\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n        @notice Pending locked amount at the specified account\r\n        @param  account  address  Account\r\n        @return amount   uint256  Amount\r\n     */\r\n    function pendingLockOf(address account)\r\n        external\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        LockedBalance[] storage locks = balances[account].lockedBalances;\r\n\r\n        uint256 locksLength = locks.length;\r\n\r\n        if (\r\n            locksLength > 0 &&\r\n            uint256(locks[locksLength - 1].unlockTime) - LOCK_DURATION >\r\n            getCurrentEpoch()\r\n        ) {\r\n            return locks[locksLength - 1].amount;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n        @notice Locked balances details for the specifed account\r\n        @param  account     address          Account\r\n        @return total       uint256          Total amount\r\n        @return unlockable  uint256          Unlockable amount\r\n        @return locked      uint256          Locked amount\r\n        @return lockData    LockedBalance[]  List of active locks\r\n     */\r\n    function lockedBalances(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 total,\r\n            uint256 unlockable,\r\n            uint256 locked,\r\n            LockedBalance[] memory lockData\r\n        )\r\n    {\r\n        Balance storage userBalance = balances[account];\r\n        LockedBalance[] storage locks = userBalance.lockedBalances;\r\n        uint256 nextUnlockIndex = userBalance.nextUnlockIndex;\r\n        uint256 idx;\r\n\r\n        for (uint256 i = nextUnlockIndex; i < locks.length; ++i) {\r\n            if (locks[i].unlockTime > block.timestamp) {\r\n                if (idx == 0) {\r\n                    lockData = new LockedBalance[](locks.length - i);\r\n                }\r\n\r\n                lockData[idx] = locks[i];\r\n                locked += lockData[idx].amount;\r\n                ++idx;\r\n            } else {\r\n                unlockable += locks[i].amount;\r\n            }\r\n        }\r\n\r\n        return (userBalance.locked, unlockable, locked, lockData);\r\n    }\r\n\r\n    /**\r\n        @notice Get current epoch\r\n        @return uint256  Current epoch\r\n     */\r\n    function getCurrentEpoch() public view returns (uint256) {\r\n        return (block.timestamp / EPOCH_DURATION) * EPOCH_DURATION;\r\n    }\r\n\r\n    /**\r\n        @notice Locked tokens cannot be withdrawn for the entire lock duration and are eligible to receive rewards\r\n        @param  account  address  Account\r\n        @param  amount   uint256  Amount\r\n     */\r\n    function lock(address account, uint256 amount) external nonReentrant {\r\n        if (account == address(0)) revert ZeroAddress();\r\n        if (amount == 0) revert ZeroAmount();\r\n\r\n        btrflyV2.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        _lock(account, amount);\r\n    }\r\n\r\n    /**\r\n        @notice Perform the actual lock\r\n        @param  account  address  Account\r\n        @param  amount   uint256  Amount\r\n     */\r\n    function _lock(address account, uint256 amount) internal {\r\n        if (isShutdown) revert IsShutdown();\r\n\r\n        Balance storage balance = balances[account];\r\n\r\n        uint224 lockAmount = _toUint224(amount);\r\n\r\n        balance.locked += lockAmount;\r\n        lockedSupply += lockAmount;\r\n\r\n        uint256 lockEpoch = getCurrentEpoch() + EPOCH_DURATION;\r\n        uint256 unlockTime = lockEpoch + LOCK_DURATION;\r\n        LockedBalance[] storage locks = balance.lockedBalances;\r\n        uint256 idx = locks.length;\r\n\r\n        // If the latest user lock is smaller than this lock, add a new entry to the end of the list\r\n        // else, append it to the latest user lock\r\n        if (idx == 0 || locks[idx - 1].unlockTime < unlockTime) {\r\n            locks.push(\r\n                LockedBalance({\r\n                    amount: lockAmount,\r\n                    unlockTime: _toUint32(unlockTime)\r\n                })\r\n            );\r\n        } else {\r\n            locks[idx - 1].amount += lockAmount;\r\n        }\r\n\r\n        emit Locked(account, lockEpoch, amount);\r\n    }\r\n\r\n    /**\r\n        @notice Withdraw all currently locked tokens where the unlock time has passed\r\n        @param  account     address  Account\r\n        @param  relock      bool     Whether should relock\r\n        @param  withdrawTo  address  Target receiver\r\n     */\r\n    function _processExpiredLocks(\r\n        address account,\r\n        bool relock,\r\n        address withdrawTo\r\n    ) internal {\r\n        // Using storage as it's actually cheaper than allocating a new memory based variable\r\n        Balance storage userBalance = balances[account];\r\n        LockedBalance[] storage locks = userBalance.lockedBalances;\r\n        uint224 locked;\r\n        uint256 length = locks.length;\r\n\r\n        if (isShutdown || locks[length - 1].unlockTime <= block.timestamp) {\r\n            locked = userBalance.locked;\r\n            userBalance.nextUnlockIndex = _toUint32(length);\r\n        } else {\r\n            // Using nextUnlockIndex to reduce the number of loops\r\n            uint32 nextUnlockIndex = userBalance.nextUnlockIndex;\r\n\r\n            for (uint256 i = nextUnlockIndex; i < length; ++i) {\r\n                // Unlock time must be less or equal to time\r\n                if (locks[i].unlockTime > block.timestamp) break;\r\n\r\n                // Add to cumulative amounts\r\n                locked += locks[i].amount;\r\n                ++nextUnlockIndex;\r\n            }\r\n\r\n            // Update the account's next unlock index\r\n            userBalance.nextUnlockIndex = nextUnlockIndex;\r\n        }\r\n\r\n        if (locked == 0) revert ZeroAmount();\r\n\r\n        // Update user balances and total supplies\r\n        userBalance.locked -= locked;\r\n        lockedSupply -= locked;\r\n\r\n        emit Withdrawn(account, locked, relock);\r\n\r\n        // Relock or return to user\r\n        if (relock) {\r\n            _lock(withdrawTo, locked);\r\n        } else {\r\n            btrflyV2.safeTransfer(withdrawTo, locked);\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice Withdraw expired locks to a different address\r\n        @param  to  address  Target receiver\r\n     */\r\n    function withdrawExpiredLocksTo(address to) external nonReentrant {\r\n        if (to == address(0)) revert ZeroAddress();\r\n\r\n        _processExpiredLocks(msg.sender, false, to);\r\n    }\r\n\r\n    /**\r\n        @notice Withdraw/relock all currently locked tokens where the unlock time has passed\r\n        @param  relock  bool  Whether should relock\r\n     */\r\n    function processExpiredLocks(bool relock) external nonReentrant {\r\n        _processExpiredLocks(msg.sender, relock, msg.sender);\r\n    }\r\n\r\n    /**\r\n        @notice Validate and cast a uint256 integer to uint224\r\n        @param  value  uint256  Value\r\n        @return        uint224  Casted value\r\n     */\r\n    function _toUint224(uint256 value) internal pure returns (uint224) {\r\n        if (value > type(uint224).max) revert InvalidNumber(value);\r\n\r\n        return uint224(value);\r\n    }\r\n\r\n    /**\r\n        @notice Validate and cast a uint256 integer to uint32\r\n        @param  value  uint256  Value\r\n        @return        uint32   Casted value\r\n     */\r\n    function _toUint32(uint256 value) internal pure returns (uint32) {\r\n        if (value > type(uint32).max) revert InvalidNumber(value);\r\n\r\n        return uint32(value);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/core/TokenMigrator.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title BTRFLY V1 => V2 Token Migrator\r\n/// @author Realkinando\r\n\r\n/**\r\n    @notice\r\n    Enables users to convert BTRFLY, xBTRFLY & wxBTRFLY to BTRFLYV2, at a rate based on the wxStaking Index.\r\n    Dependent on the contract having a sufficient allowance from Mariposa.\r\n\r\n    receives btrfly/xBtrfly/wxBtrfly --> requests wx value for recipient --> unwraps btrfly and burns\r\n*/\r\n\r\ncontract TokenMigrator {\r\n    using SafeERC20 for IBTRFLY;\r\n    using SafeERC20 for IWXBTRFLY;\r\n    using SafeTransferLib for ERC20;\r\n\r\n    IWXBTRFLY public immutable wxBtrfly;\r\n    ERC20 public immutable xBtrfly;\r\n    ERC20 public immutable btrflyV2;\r\n    IBTRFLY public immutable btrfly;\r\n    IMariposa public immutable mariposa;\r\n    IStaking public immutable staking;\r\n    RLBTRFLY public immutable rlBtrfly;\r\n\r\n    error ZeroAddress();\r\n\r\n    event Migrate(\r\n        uint256 wxAmount,\r\n        uint256 xAmount,\r\n        uint256 v1Amount,\r\n        address indexed recipient,\r\n        bool indexed lock,\r\n        address indexed caller\r\n    );\r\n\r\n    /**\r\n        @param wxBtrfly_  address  wxBTRFLY token address\r\n        @param xBtrfly_   address  xBTRFLY token address\r\n        @param btrflyV2_  address  BTRFLYV2 token address\r\n        @param btrfly_    address  BTRFLY token address\r\n        @param mariposa_  address  Mariposa contract address\r\n        @param staking_   address  Staking contract address\r\n        @param rlBtrfly_  address  rlBTRFLY token address\r\n     */\r\n    constructor(\r\n        address wxBtrfly_,\r\n        address xBtrfly_,\r\n        address btrflyV2_,\r\n        address btrfly_,\r\n        address mariposa_,\r\n        address staking_,\r\n        address rlBtrfly_\r\n    ) {\r\n        if (wxBtrfly_ == address(0)) revert ZeroAddress();\r\n        if (xBtrfly_ == address(0)) revert ZeroAddress();\r\n        if (btrflyV2_ == address(0)) revert ZeroAddress();\r\n        if (btrfly_ == address(0)) revert ZeroAddress();\r\n        if (mariposa_ == address(0)) revert ZeroAddress();\r\n        if (staking_ == address(0)) revert ZeroAddress();\r\n        if (rlBtrfly_ == address(0)) revert ZeroAddress();\r\n\r\n        wxBtrfly = IWXBTRFLY(wxBtrfly_);\r\n        xBtrfly = ERC20(xBtrfly_);\r\n        btrflyV2 = ERC20(btrflyV2_);\r\n        btrfly = IBTRFLY(btrfly_);\r\n        mariposa = IMariposa(mariposa_);\r\n        staking = IStaking(staking_);\r\n        rlBtrfly = RLBTRFLY(rlBtrfly_);\r\n\r\n        xBtrfly.safeApprove(staking_, type(uint256).max);\r\n        btrflyV2.safeApprove(rlBtrfly_, type(uint256).max);\r\n    }\r\n\r\n    /**\r\n        @notice Migrate wxBTRFLY to BTRFLYV2\r\n        @param  amount  uint256  Amount of wxBTRFLY to convert to BTRFLYV2\r\n        @return         uint256  Amount of BTRFLY to burn\r\n     */\r\n    function _migrateWxBtrfly(uint256 amount) internal returns (uint256) {\r\n        // Take custody of wxBTRFLY and unwrap to BTRFLY\r\n        wxBtrfly.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        return wxBtrfly.unwrapToBTRFLY(amount);\r\n    }\r\n\r\n    /**\r\n        @notice Migrate xBTRFLY to BTRFLYV2\r\n        @param  amount      uint256  Amount of xBTRFLY to convert to BTRFLYV2\r\n        @return mintAmount  uint256  Amount of BTRFLYV2 to mint\r\n     */\r\n    function _migrateXBtrfly(uint256 amount)\r\n        internal\r\n        returns (uint256 mintAmount)\r\n    {\r\n        // Unstake xBTRFLY\r\n        xBtrfly.safeTransferFrom(msg.sender, address(this), amount);\r\n        staking.unstake(amount, false);\r\n\r\n        return wxBtrfly.wBTRFLYValue(amount);\r\n    }\r\n\r\n    /**\r\n        @notice Migrate BTRFLY to BTRFLYV2\r\n        @param  amount      uint256  Amount of BTRFLY to convert to BTRFLYV2\r\n        @return mintAmount  uint256  Amount of BTRFLYV2 to mint\r\n     */\r\n    function _migrateBtrfly(uint256 amount)\r\n        internal\r\n        returns (uint256 mintAmount)\r\n    {\r\n        btrfly.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        return wxBtrfly.wBTRFLYValue(amount);\r\n    }\r\n\r\n    /**\r\n        @notice Migrates multiple different BTRFLY token types to V2\r\n        @param  wxAmount   uint256  Amount of wxBTRFLY\r\n        @param  xAmount    uint256  Amount of xBTRFLY\r\n        @param  v1Amount   uint256  Amount of BTRFLY\r\n        @param  recipient  address  Address receiving V2 BTRFLY\r\n        @param  lock       bool     Whether or not to lock\r\n     */\r\n    function migrate(\r\n        uint256 wxAmount,\r\n        uint256 xAmount,\r\n        uint256 v1Amount,\r\n        address recipient,\r\n        bool lock\r\n    ) external {\r\n        if (recipient == address(0)) revert ZeroAddress();\r\n\r\n        emit Migrate(wxAmount, xAmount, v1Amount, recipient, lock, msg.sender);\r\n\r\n        uint256 burnAmount;\r\n        uint256 mintAmount;\r\n\r\n        if (wxAmount != 0) {\r\n            burnAmount = _migrateWxBtrfly(wxAmount);\r\n            mintAmount = wxAmount;\r\n        }\r\n\r\n        if (xAmount != 0) {\r\n            burnAmount += xAmount;\r\n            mintAmount += _migrateXBtrfly(xAmount);\r\n        }\r\n\r\n        if (v1Amount != 0) {\r\n            burnAmount += v1Amount;\r\n            mintAmount += _migrateBtrfly(v1Amount);\r\n        }\r\n\r\n        btrfly.burn(burnAmount);\r\n        _mintBtrflyV2(mintAmount, recipient, lock);\r\n    }\r\n\r\n    /**\r\n        @notice Mint BTRFLYV2 and (optionally) lock\r\n        @param  amount     uint256  Amount of BTRFLYV2 to mint\r\n        @param  recipient  address  Address to receive V2 BTRFLY\r\n        @param  lock       bool     Whether or not to lock\r\n     */\r\n    function _mintBtrflyV2(\r\n        uint256 amount,\r\n        address recipient,\r\n        bool lock\r\n    ) internal {\r\n        // If locking, mint BTRFLYV2 for TokenMigrator, who will lock on behalf of recipient\r\n        mariposa.mintFor(lock ? address(this) : recipient, amount);\r\n\r\n        if (lock) rlBtrfly.lock(recipient, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wxBtrfly_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"xBtrfly_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"btrflyV2_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"btrfly_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mariposa_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rlBtrfly_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"v1Amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"btrfly\",\"outputs\":[{\"internalType\":\"contract IBTRFLY\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btrflyV2\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mariposa\",\"outputs\":[{\"internalType\":\"contract IMariposa\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"v1Amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rlBtrfly\",\"outputs\":[{\"internalType\":\"contract RLBTRFLY\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wxBtrfly\",\"outputs\":[{\"internalType\":\"contract IWXBTRFLY\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xBtrfly\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenMigrator", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004b16d95ddf1ae4fe8227ed7b7e80cf13275e61c9000000000000000000000000cc94faf235cc5d3bf4bed3a30db5984306c86abc000000000000000000000000c55126051b22ebb829d00368f4b12bde432de5da000000000000000000000000c0d4ceb216b3ba9c3701b291766fdcba977cec3a000000000000000000000000ca0f30b51963c4532d95016098d74f0df9e4518b000000000000000000000000bde4dfb0dbb0dd8833efb6c5bd0ce048c852c487000000000000000000000000742b70151cd3bc7ab598aaff1d54b90c3ebc6027", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://58c0525b03f0949eb8b18b3e63951f7441188186a4033e1f91463e603d45807a"}]}