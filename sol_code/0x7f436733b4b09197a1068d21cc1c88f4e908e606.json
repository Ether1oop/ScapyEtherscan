{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.0;\r\n// SPDX-License-Identifier: UNLICENSCED\r\n\r\ninterface interfaceMaster {\r\n  function createWallets() external payable;\r\n  function totalWallets(address theAddress) external view returns (uint256);\r\n  function listWallets(address theAddress) view external returns (address[] memory);\r\n  function executeOrder(uint256 startWallet, uint256 endWallet, bytes calldata theCallData, address whichContract) external payable;\r\n  function specialMint(uint256 startWallet, uint256 endWallet, bytes[] calldata theCallData, address whichContract) external payable;\r\n  function specialMintTwo(bytes[] calldata theCallData, address whichContract) external payable;\r\n  function theTransfer(uint256 startWallet, uint256 endWallet, address to, uint256 startID, uint256 amount, address whichContract) external;\r\n  function theLoopMint(bytes calldata theCallData, address whichContract, uint256 _param1) external payable;\r\n  function theLoopTransfer(address to, uint256 startID, uint256 amountMinted, address whichContract) external;\r\n  function theTransferElevenFiftyFive(uint256 startWallet, uint256 endWallet, address to, uint256[] memory tokenIds, uint256[] memory amounts, address whichContract) external;\r\n  function theLoopTransferElevenFiftyFive(address to, uint256[] memory tokenIds, uint256[] memory amounts, address whichContract) external;\r\n}\r\n\r\ncontract HideoutNFT {\r\n    address contractMaster = 0xff8e3671F1223C873CebcE0fE78ec396Bf19a2F5;\r\n    interfaceMaster q = interfaceMaster(contractMaster);\r\n\r\n    /**\r\n    * @dev Creates \"wallets\" that will be used for your mints\r\n    */\r\n    function createWallets() external payable{\r\n        q.createWallets{value:msg.value}();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the total amount of wallets you own\r\n    */\r\n    function totalWallets(address theAddress) external view returns (uint256) {\r\n        return q.totalWallets(theAddress);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns list of wallets you own\r\n    */\r\n    function listWallets(address theAddress) external view returns (address[] memory) {\r\n        return q.listWallets(theAddress);\r\n    }\r\n\r\n    /**\r\n    * @dev Mint function to be used when the NFT has a wallet limit\r\n    * @param startWallet Must equal to at least 0 and less than endWallet\r\n    * @param endWallet See totalWallets() for maximum value\r\n    * @param theCallData Hex data collected from the NFT contract\r\n    * @param nftContract Address of the NFT contract\r\n    */\r\n    function mint_WalletLimit(uint256 startWallet, uint256 endWallet, bytes calldata theCallData, address nftContract) external payable {\r\n        q.executeOrder{value:msg.value}(startWallet, endWallet, theCallData, nftContract);\r\n    }\r\n\r\n    /**\r\n    * @dev Mint function to be used when different calldata is used each wallet\r\n    * @param startWallet Value used in mint function\r\n    * @param endWallet Value used in mint function\r\n    * @param theCallData Array of calldata\r\n    * @param nftContract Address of the NFT contract\r\n    */\r\n    function mint_WalletLimitSpecial(uint256 startWallet, uint256 endWallet, bytes[] calldata theCallData, address nftContract) external payable {\r\n        q.specialMint{value:msg.value}(startWallet, endWallet, theCallData, nftContract);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer function to be used when the NFT has a wallet limit\r\n    * @param startWallet Value used in mint function\r\n    * @param endWallet Value used in mint function\r\n    * @param to Wallet to transfer the NFTs to\r\n    * @param startID The start ID of the list of NFTs you minted\r\n    * @param amountPerTX Amount minted per TX\r\n    * @param nftContract Address of the NFT contract\r\n    */\r\n    function transfer_WalletLimit(uint256 startWallet, uint256 endWallet, address to, uint256 startID, uint256 amountPerTX, address nftContract) external {\r\n        q.theTransfer(startWallet, endWallet, to, startID, amountPerTX, nftContract);\r\n    }\r\n    \r\n\r\n    /**\r\n    * @dev Mint function to be used when the NFT has no wallet limit\r\n    * @param repeatNum Number of times to repeat mint\r\n    * @param theCallData Hex data collected from the NFT contract\r\n    * @param nftContract Address of the NFT contract\r\n    */\r\n    function mint_noWalletLimit(uint256 repeatNum, bytes calldata theCallData, address nftContract) external payable {\r\n        q.theLoopMint{value:msg.value}(theCallData, nftContract, repeatNum);\r\n    }\r\n\r\n    /**\r\n    * @dev Mint function to be used when different calldata is used each transaction\r\n    * @param theCallData Array of calldata\r\n    * @param nftContract Address of the NFT contract\r\n    */\r\n    function mint_noWalletLimitSpecial(bytes[] calldata theCallData, address nftContract) external payable {\r\n        q.specialMintTwo{value:msg.value}(theCallData, nftContract);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Transfer function to be used when the NFT has no wallet limit\r\n    * @param to Wallet to transfer the NFTs to\r\n    * @param startID The start ID of the list of NFTs you minted\r\n    * @param amountMinted Total amount of NFTs minted\r\n    * @param nftContract Address of the NFT contract\r\n    */\r\n    function transfer_noWalletLimit(address to, uint256 startID, uint256 amountMinted, address nftContract) external {\r\n        q.theLoopTransfer(to, startID, amountMinted, nftContract);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer function to be used when the NFT has no wallet limit (ERC-1155)\r\n    * @param to Wallet to transfer the NFTs to\r\n    * @param tokenIds Array of tokenIds\r\n    * @param amounts Array of amounts\r\n    * @param nftContract Address of the NFT contract\r\n    */\r\n    function transfer_noWalletLimit1155(address to, uint256[] memory tokenIds, uint256[] memory amounts, address nftContract) external {\r\n        q.theLoopTransferElevenFiftyFive(to, tokenIds, amounts, nftContract);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer function to be used when the NFT has a wallet limit (ERC-1155)\r\n    * @param startWallet Value used in mint function\r\n    * @param endWallet Value used in mint function\r\n    * @param to Wallet to transfer the NFTs to\r\n    * @param tokenIds Array of tokenIds\r\n    * @param amounts Array of amounts\r\n    * @param nftContract Address of the NFT contract\r\n    */\r\n    function transfer_WalletLimit1155(uint256 startWallet, uint256 endWallet, address to, uint256[] memory tokenIds, uint256[] memory amounts, address nftContract) external {\r\n        q.theTransferElevenFiftyFive(startWallet, endWallet, to, tokenIds, amounts, nftContract);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"createWallets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theAddress\",\"type\":\"address\"}],\"name\":\"listWallets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"theCallData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"mint_WalletLimit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"theCallData\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"mint_WalletLimitSpecial\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repeatNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"theCallData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"mint_noWalletLimit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"theCallData\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"mint_noWalletLimitSpecial\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theAddress\",\"type\":\"address\"}],\"name\":\"totalWallets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endWallet\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPerTX\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"transfer_WalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endWallet\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"transfer_WalletLimit1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMinted\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"transfer_noWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"transfer_noWalletLimit1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HideoutNFT", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://43513e6c6b9ed89b5d9c56ea73bfa0fae068580eafffea82f1afc223d873ea37"}]}