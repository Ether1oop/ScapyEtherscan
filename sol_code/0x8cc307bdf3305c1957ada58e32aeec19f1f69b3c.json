{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\ncontract TestUniswapLiquidity {\r\n    address private constant FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    address private constant ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private constant TOKEN1 = 0xe89A194D366A3f18B06Ced6474DC7dAba66EFa83;\r\n    address private constant TOKEN2 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    function addLiquidity(\r\n        uint _amountA,\r\n        uint _amountB\r\n    ) external {\r\n        IERC20(TOKEN1).transferFrom(msg.sender, address(this), _amountA);\r\n        IERC20(TOKEN2).transferFrom(msg.sender, address(this), _amountB);\r\n\r\n        IERC20(TOKEN1).approve(ROUTER, _amountA);\r\n        IERC20(TOKEN2).approve(ROUTER, _amountB);\r\n\r\n        IUniswapV2Router(ROUTER)\r\n            .addLiquidity(\r\n                TOKEN1,\r\n                TOKEN2,\r\n                _amountA,\r\n                _amountB,\r\n                1,\r\n                1,\r\n                msg.sender,\r\n                block.timestamp\r\n            );\r\n    }\r\n\r\n    function removeLiquidity(uint _amount) external {\r\n        address pair = IUniswapV2Factory(FACTORY).getPair(TOKEN1, TOKEN2);\r\n\r\n        IERC20(pair).transferFrom(msg.sender, address(this), _amount);\r\n        IERC20(pair).approve(ROUTER, _amount);\r\n\r\n        IUniswapV2Router(ROUTER).removeLiquidity(\r\n            TOKEN1,\r\n            TOKEN2,\r\n            _amount,\r\n            1,\r\n            1,\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint amountA,\r\n            uint amountB,\r\n            uint liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address token0, address token1) external view returns (address);\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountB\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TestUniswapLiquidity", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6ece5c602a41774f80795d760780d753942f6766fcd4a667604d555cbc5c8a2f"}]}