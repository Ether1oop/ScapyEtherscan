{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/MintFromL1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Tells the Solidity compiler to compile only from v0.8.13 to v0.9.0\\npragma solidity ^0.8.13;\\nimport \\\"./Price.sol\\\";\\n\\ninterface Starknet {\\n    function sendMessageToL2(\\n        uint256 toAddress,\\n        uint256 selector,\\n        uint256[] calldata payload\\n    ) external returns (bytes32);\\n}\\n\\ncontract MintFromL1 {\\n    address starknetContract;\\n    address pricingContract;\\n    address payable public owner;\\n\\n    uint256 toAddress;\\n    uint256 selector;\\n\\n    constructor(address _starknetContract, address _owner) {\\n        // on goerli: 0xde29d060D45901Fb19ED6C6e959EB22d8626708e\\n        starknetContract = _starknetContract;\\n        owner = payable(_owner); \\n    }\\n\\n    function withdraw() public {\\n        // get the amount of Ether stored in this contract\\n        uint256 amount = address(this).balance;\\n\\n        // send all Ether to owner\\n        // Owner can receive Ether since the address of owner is payable\\n        (bool success, ) = owner.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function setL2Data(uint256 _toAddress, uint256 _selector) public {\\n        require(\\n            msg.sender == owner,\\n            \\\"You don't have the right to call this function\\\"\\n        );\\n        toAddress = _toAddress;\\n        selector = _selector;\\n    }\\n\\n    // https://github.com/starkware-libs/cairo-lang/blob/4e233516f52477ad158bc81a86ec2760471c1b65/src/starkware/starknet/eth/StarknetMessaging.sol#L100\\n    function purchase(\\n        uint256 domain,\\n        uint256 token_id,\\n        uint256 duration_days,\\n        uint256 resolver,\\n        uint256 addr\\n    ) public payable {\\n        require(\\n            msg.value >= Price.compute_buy_price(domain, duration_days),\\n            \\\"You didn't pay enough\\\"\\n        );\\n\\n        uint256[] memory payload = new uint256[](5);\\n        payload[0] = token_id;\\n        payload[1] = domain;\\n        payload[2] = duration_days;\\n        payload[3] = resolver;\\n        payload[4] = addr;\\n        Starknet(starknetContract).sendMessageToL2(\\n            toAddress,\\n            selector,\\n            payload\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Price.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// A library is like a contract with reusable code, which can be called by other contracts.\\n// Deploying common code can reduce gas costs.\\nlibrary Price {\\n    uint256 constant simple_alphabet_size = 38;\\n    uint256 constant complex_alphabet_size = 2;\\n\\n    function compute_buy_price(uint256 domain, uint256 duration_days)\\n        public\\n        pure\\n        returns (uint256 price)\\n    {\\n        // // Calculate price depending on number of characters\\n        uint256 number_of_character = get_amount_of_chars(domain);\\n        uint256 price_per_day_eth = get_price_per_day(number_of_character);\\n        uint256 days_to_pay = get_days_to_pay(duration_days);\\n\\n        return days_to_pay * price_per_day_eth;\\n    }\\n\\n    function get_amount_of_chars(uint256 domain)\\n        private\\n        pure\\n        returns (uint256 number_of_character)\\n    {\\n        if (domain == 0) {\\n            return 0;\\n        }\\n\\n        uint256 remainder = domain % simple_alphabet_size;\\n        uint256 divided = domain / simple_alphabet_size;\\n        if (remainder == 37) {\\n            uint256 next = get_amount_of_chars(divided / complex_alphabet_size);\\n            return 1 + next;\\n        } else {\\n            uint256 next = get_amount_of_chars(divided);\\n            return 1 + next;\\n        }\\n    }\\n\\n    function get_days_to_pay(uint256 duration_days)\\n        private\\n        pure\\n        returns (uint256 days_to_pay)\\n    {\\n        if (1824 < duration_days) {\\n            return (duration_days - 730);\\n        }\\n\\n        if (1094 < duration_days) {\\n            return (duration_days - 365);\\n        }\\n\\n        return duration_days;\\n    }\\n\\n    function get_price_per_day(uint256 number_of_character)\\n        private\\n        pure\\n        returns (uint256 price)\\n    {\\n        if (number_of_character == 1) {\\n            return (1068493150684932);\\n        }\\n\\n        if (number_of_character == 2) {\\n            return (1024657534246575);\\n        }\\n\\n        if (number_of_character == 3) {\\n            return (931506849315068);\\n        }\\n\\n        if (number_of_character == 4) {\\n            return (232876712328767);\\n        }\\n\\n        return (24657534246575);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"/contracts/Price.sol\": {\r\n        \"Price\": \"0xd9671ef4271a4d2E37dD7E2b015f75079A1ab1Ba\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_starknetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resolver\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_selector\",\"type\":\"uint256\"}],\"name\":\"setL2Data\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MintFromL1", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c662c410c0ecf747543f5ba90660f6abebd9c8c400000000000000000000000054c5a92c57a07f33500ec9977797219d70d506c9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}