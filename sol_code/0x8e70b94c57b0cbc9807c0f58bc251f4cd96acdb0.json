{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/CrawlerToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//   \u2588          \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588    \u2591\u2591\u2591\u2591    \u2588\\n//  \u2588   \u2593\u2593\u2593\u2593\u2593\u2593   \u2588\\n//  \u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\\n//\\n// https://endlesscrawler.io\\n// @EndlessCrawler\\n//\\n/// @title Endless Crawler Chamber Minter\\n/// @author Studio Avante\\n/// @notice Mints new Chambers for Endless Crawler\\n/// @dev Depends on upgradeable ICrawlerIndex and ICrawlerPlayer\\n//\\npragma solidity ^0.8.16;\\nimport { DefaultOperatorFilterer } from \\\"operator-filter-registry/src/DefaultOperatorFilterer.sol\\\";\\nimport { ERC721, IERC721, IERC165, IERC721Metadata } from '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\nimport { ECDSA } from './extras/ECDSA.sol';\\nimport { ERC721Enumerable } from './extras/ERC721Enumerable.sol';\\nimport { ICrawlerIndex } from './ICrawlerIndex.sol';\\nimport { ICrawlerPlayer } from './ICrawlerPlayer.sol';\\nimport { ICrawlerToken } from './ICrawlerToken.sol';\\nimport { Crawl } from './Crawl.sol';\\n\\ncontract CrawlerToken is ERC721, ERC721Enumerable, DefaultOperatorFilterer, Ownable, ICrawlerToken {\\n\\n\\terror MintingIsPaused();\\n\\terror InvalidFromChamber();\\n\\terror InvalidDoor();\\n\\terror InvalidSignature();\\n\\terror InvalidValue();\\n\\terror InvalidTokenId();\\n\\n\\tICrawlerIndex private _index;\\n  ICrawlerPlayer private _player;\\n\\taddress private _signerAddress;\\n\\tuint256 private _mintedCount;\\n\\tuint256 private _priceInPwei;\\n\\tuint256 private _priceInWei;\\n\\tbool private _paused = true;\\n\\n\\tmapping(uint256 => uint256) private _tokenIdToCoord;\\n\\tmapping(uint256 => Crawl.ChamberSeed) private _coordToSeed;\\n\\n\\tevent Paused(bool indexed paused);\\n\\tevent Minted(address indexed to, uint256 indexed tokenId, uint256 indexed coord);\\n\\n\\tconstructor(address index_, address player_, address signer_) ERC721('Endless Crawler', 'CRWLR') {\\n\\t\\tsetIndexContract(index_);\\n\\t\\tsetPlayerContract(player_);\\n\\t\\tsetSigner(signer_);\\n\\t\\tsetPrice(10);\\n\\n\\t\\t// Mint origins, Yonder 1, as...\\n\\t\\t// 2 Water | 3 Air\\n\\t\\t// --------|--------\\n\\t\\t// 1 Earth | 4 Fire\\n\\t\\t_mint((1 << 64) + 1, 1, Crawl.Terrain.Earth, Crawl.Dir.East);\\t\\t\\t\\t\\t\\t// same as Crawl.makeCoord(0, 0, 1, 1) or __WS\\n\\t\\t_mint((1 << 192) + (1 << 64), 1, Crawl.Terrain.Water, Crawl.Dir.South);\\t// same as Crawl.makeCoord(1, 0, 1, 0) or N_W_\\n\\t\\t_mint((1 << 192) + (1 << 128), 1, Crawl.Terrain.Air, Crawl.Dir.West); \\t// same as Crawl.makeCoord(1, 1, 0, 0) or NE__\\n\\t\\t_mint((1 << 128) + 1, 1, Crawl.Terrain.Fire, Crawl.Dir.North);\\t\\t\\t\\t\\t// same as Crawl.makeCoord(0, 1, 0, 1) or _E_S\\n\\t}\\n\\n\\t/// @dev Required by ERC721 interfaces\\n\\tfunction supportsInterface(bytes4 interfaceId) public view override (IERC165, ERC721, ERC721Enumerable) returns (bool) {\\n\\t\\treturn ERC721Enumerable.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/// @dev Required by ERC721 interfaces\\n\\tfunction _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize) internal override (ERC721, ERC721Enumerable) {\\n\\t\\tERC721Enumerable._beforeTokenTransfer(from, to, tokenId, batchSize);\\n\\t\\t_player.transferChamberHoard(from, to, tokenIdToHoard(tokenId));\\n\\t}\\n\\n\\t/// @dev Required by ERC721 interfaces\\n\\tfunction _totalSupply() public view override returns (uint256) {\\n\\t\\treturn _mintedCount;\\n\\t}\\n\\n\\t/// @dev Required by OpenSea operator-filter-registry\\n\\tfunction setApprovalForAll(address operator, bool approved) public override(ERC721, IERC721) onlyAllowedOperatorApproval(operator) {\\n\\t\\tsuper.setApprovalForAll(operator, approved);\\n\\t}\\n\\t/// @dev Required by OpenSea operator-filter-registry\\n\\tfunction approve(address operator, uint256 tokenId) public override(ERC721, IERC721) onlyAllowedOperatorApproval(operator) {\\n\\t\\tsuper.approve(operator, tokenId);\\n\\t}\\n\\t/// @dev Required by OpenSea operator-filter-registry\\n\\tfunction transferFrom(address from, address to, uint256 tokenId) public override(ERC721, IERC721) onlyAllowedOperator(from) {\\n\\t\\tsuper.transferFrom(from, to, tokenId);\\n\\t}\\n\\t/// @dev Required by OpenSea operator-filter-registry\\n\\tfunction safeTransferFrom(address from, address to, uint256 tokenId) public override(ERC721, IERC721) onlyAllowedOperator(from) {\\n\\t\\tsuper.safeTransferFrom(from, to, tokenId);\\n\\t}\\n\\t/// @dev Required by OpenSea operator-filter-registry\\n\\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public override(ERC721, IERC721) onlyAllowedOperator(from) {\\n\\t\\tsuper.safeTransferFrom(from, to, tokenId, data);\\n\\t}\\n\\n\\t//---------------\\n\\t// Admin\\n\\t//\\n\\n\\t/// @notice Admin function\\n\\tfunction setIndexContract(address index_) public onlyOwner {\\n\\t\\t_index = ICrawlerIndex(index_);\\n\\t}\\n\\n\\t/// @notice Admin function\\n\\tfunction setPlayerContract(address player_) public onlyOwner {\\n\\t\\t_player = ICrawlerPlayer(player_);\\n\\t}\\n\\n\\t/// @notice Admin function\\n\\tfunction setSigner(address signer_) public onlyOwner {\\n\\t\\t_signerAddress = signer_;\\n\\t}\\n\\n\\t/// @notice Admin function\\n\\tfunction setPrice(uint256 priceInPwei_) public onlyOwner {\\n\\t\\t_priceInPwei = priceInPwei_;\\n\\t\\t_priceInWei = priceInPwei_ * 1_000_000_000_000_000;\\n\\t}\\n\\n\\t/// @notice Admin function\\n\\tfunction setPaused(bool paused_) public onlyOwner {\\n\\t\\t_paused = paused_;\\n\\t\\temit Paused(_paused);\\n\\t}\\n\\n\\t/// @notice Admin function\\n\\tfunction checkout(uint256 eth) public onlyOwner {\\n\\t\\tpayable(msg.sender).transfer(Crawl.min(eth * 1_000_000_000_000_000_000, address(this).balance));\\n\\t}\\n\\n\\t//---------------\\n\\t// Public\\n\\t//\\n\\n\\t/// @notice Return the current pause status\\n\\t/// @return paused True if paused (cannot mint), False if not (can mint)\\n\\tfunction isPaused() public view override returns (bool) {\\n\\t\\treturn _paused;\\n\\t}\\n\\n\\t/// @notice Return the current Index contract\\n\\t/// @return paused Contract address\\n\\tfunction getIndexContract() public view returns(ICrawlerIndex) {\\n\\t\\treturn _index;\\n\\t}\\n\\n\\t/// @notice Return the current Player contract\\n\\t/// @return paused Contract address\\n\\tfunction getPlayerContract() public view returns(ICrawlerPlayer) {\\n\\t\\treturn _player;\\n\\t}\\n\\n\\t/// @notice Return the current mint prices\\n\\t/// @return prices Prices in WEI (for msg.value), and PWEI (stored, 1 pwei = ETH/1000)\\n\\tfunction getPrices() public view override returns (uint256, uint256) {\\n\\t\\treturn (_priceInWei, _priceInPwei);\\n\\t}\\n\\n\\t/// @notice Return the current mint prices\\n\\t/// Price is FREE for the first token\\n\\t/// Price is FREE when minted in-game, provided signature\\n\\t/// Otherwise, price is _priceInPwei\\n\\t/// @param to Account for which price will be calculated\\n\\t/// @return price Token price for account, in WEI\\n\\tfunction calculateMintPrice(address to) public view override returns (uint256) {\\n\\t\\treturn balanceOf(to) == 0 || to == owner() ? 0 : _priceInWei;\\n\\t}\\n\\n\\t/// @notice Returns a Chamber coordinate\\n\\t/// @param tokenId Token id\\n\\t/// @return result Chamber coordinate\\n\\tfunction tokenIdToCoord(uint256 tokenId) public view override returns (uint256) {\\n\\t\\treturn _tokenIdToCoord[tokenId];\\n\\t}\\n\\n\\t/// @notice Returns a Chamber static immutable data\\n\\t/// @param coord Chamber coordinate\\n\\t/// @return result Crawl.ChamberSeed struct\\n\\tfunction coordToSeed(uint256 coord) public view override returns (Crawl.ChamberSeed memory) {\\n\\t\\treturn _coordToSeed[coord];\\n\\t}\\n\\n\\t/// @notice Returns a Chamber generated data\\n\\t/// @param chapterNumber The Chapter number, or 0 for current chapter\\n\\t/// @param coord Chamber coordinate\\n\\t/// @param generateMaps True for generating bitmap and tilemap\\n\\t/// @return result Crawl.ChamberData struct\\n\\tfunction coordToChamberData(uint8 chapterNumber, uint256 coord, bool generateMaps) public view override returns (Crawl.ChamberData memory result) {\\n\\t\\treturn _index.getChamberData(chapterNumber, coord, _coordToSeed[coord], generateMaps);\\n\\t}\\n\\n\\t/// @notice Returns a Chamber Hoard (gems and coins)\\n\\t/// @param tokenId Token id\\n\\t/// @return result Crawl.Hoard struct\\n\\tfunction tokenIdToHoard(uint256 tokenId) public view override returns (Crawl.Hoard memory) {\\n\\t\\treturn _index.getChamberGenerator().generateHoard(_coordToSeed[_tokenIdToCoord[tokenId]].seed);\\n\\t}\\n\\n\\t/// @notice Unlocks a door, minting a new Chamber\\n\\t/// @param fromCoord Chamber coordinate, where door is located\\n\\t/// @param dir Door direction\\n\\t/// @param signature signature from endlesscrawler.io allowing free mint. if absent, calculateMintPrice(msg.sender) must be sent as msg.value\\n\\t/// @return tokenId Token id\\n\\tfunction mintDoor(uint256 fromCoord, Crawl.Dir dir, bytes calldata signature) public payable returns (uint256) {\\n\\t\\tif(_paused) revert MintingIsPaused();\\n\\n\\t\\tCrawl.ChamberSeed storage fromChamber = _coordToSeed[fromCoord];\\n\\t\\tif(fromChamber.tokenId == 0) revert InvalidFromChamber();\\n\\n\\t\\t// New chamber must be empty\\n\\t\\tuint256 newCoord = Crawl.offsetCoord(fromCoord, dir);\\n\\t\\tif(_coordToSeed[newCoord].tokenId != 0) revert InvalidDoor();\\n\\n\\t\\tif(signature.length != 0) {\\n\\t\\t\\t// If has signature, validate it to mint for free\\n\\t\\t\\tif(ECDSA.recover(ECDSA.toEthSignedMessageHash(keccak256(abi.encode(msg.sender, newCoord))), signature) != _signerAddress) revert InvalidSignature();\\n\\t\\t} else {\\n\\t\\t\\t// Validate price\\n\\t\\t\\tif(msg.value < calculateMintPrice(msg.sender)) revert InvalidValue();\\n\\t\\t}\\n\\n\\t\\t// Terrain type will be defined by a super simple cellular automata\\n\\t\\t// If chamber opposite to fromCoord is different than it, repeat its Terrain, else randomize\\n\\t\\tCrawl.Terrain fromTerrain = fromChamber.terrain;\\n\\t\\tCrawl.Dir entryDir = Crawl.flipDir(dir);\\n\\t\\tCrawl.Terrain terrain = fromTerrain != _coordToSeed[Crawl.offsetCoord(fromCoord, entryDir)].terrain ? fromTerrain\\n\\t\\t\\t: _index.getChamberGenerator().generateTerrainType(fromChamber.seed+uint256(dir), fromTerrain);\\n\\n\\t\\t// mint!\\n\\t\\treturn _mint(\\n\\t\\t\\tnewCoord,\\n\\t\\t\\tfromChamber.yonder + 1,\\n\\t\\t\\tterrain,\\n\\t\\t\\tentryDir);\\n\\t}\\n\\n\\t/// @dev Internal mint function\\n\\tfunction _mint(uint256 coord, uint232 yonder, Crawl.Terrain terrain, Crawl.Dir entryDir) internal returns (uint256) {\\n\\t\\tuint256 tokenId = _mintedCount + 1;\\n\\t\\tuint256 seed = uint256(keccak256(abi.encode(blockhash(block.number-1), tokenId)));\\n\\t\\t_tokenIdToCoord[tokenId] = coord;\\n\\t\\t_coordToSeed[coord] = Crawl.ChamberSeed(\\n\\t\\t\\ttokenId,\\n\\t\\t\\tseed,\\n\\t\\t\\tyonder,\\n\\t\\t\\t_index.getCurrentChapterNumber(),\\n\\t\\t\\tterrain,\\n\\t\\t\\tentryDir\\n\\t\\t);\\n\\t\\t_safeMint(msg.sender, tokenId);\\n\\t\\temit Minted(msg.sender, tokenId, coord);\\n\\t\\t_mintedCount = tokenId;\\n\\t\\treturn tokenId;\\n\\t}\\n\\n\\t/// @notice Returns IERC721Metadata compliant metadata\\n\\t/// @param tokenId Token id\\n\\t/// @return metadata Metadata, as base64 json string\\n\\tfunction tokenURI(uint256 tokenId) public view override (ERC721, IERC721Metadata) returns (string memory) {\\n\\t\\tif(!_exists(tokenId)) revert InvalidTokenId();\\n\\t\\treturn getTokenMetadata(0, _tokenIdToCoord[tokenId]);\\n\\t}\\n\\n\\t/// @notice Returns IERC721Metadata compliant metadata, used by tokenURI()\\n\\t/// @param chapterNumber The Chapter number, or 0 for current chapter\\n\\t/// @param coord Chamber coordinate\\n\\t/// @return metadata Metadata, as base64 json string\\n\\tfunction getTokenMetadata(uint8 chapterNumber, uint256 coord) public view returns (string memory) {\\n\\t\\treturn _index.getTokenMetadata(chapterNumber, coord, _coordToSeed[coord]);\\n\\t}\\n\\n\\t/// @notice Returns a Chamber metadata, without maps\\n\\t/// @param chapterNumber The Chapter number, or 0 for current chapter\\n\\t/// @param coord Chamber coordinate\\n\\t/// @return metadata Metadata, as plain json string\\n\\tfunction getChamberMetadata(uint8 chapterNumber, uint256 coord) public view returns (string memory) {\\n\\t\\treturn _index.getChamberMetadata(chapterNumber, coord, _coordToSeed[coord]);\\n\\t}\\n\\n\\t/// @notice Returns the seed and tilemap of a Chamber, used for world building\\n\\t/// @param chapterNumber The Chapter number, or 0 for current chapter\\n\\t/// @param coord Chamber coordinate\\n\\t/// @return metadata Metadata, as plain json string\\n\\tfunction getMapMetadata(uint8 chapterNumber, uint256 coord) public view returns (string memory) {\\n\\t\\treturn _index.getMapMetadata(chapterNumber, coord, _coordToSeed[coord]);\\n\\t}\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/extras/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//   \u2588          \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588    \u2591\u2591\u2591\u2591    \u2588\\n//  \u2588   \u2593\u2593\u2593\u2593\u2593\u2593   \u2588\\n//  \u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\\n//\\n// https://endlesscrawler.io\\n// @EndlessCrawler\\n//\\n/// @title Endless Crawler IERC721Enumerable implementation Interface\\n/// @author Studio Avante\\n//\\npragma solidity ^0.8.0;\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\ninterface IERC721Enumerable is IERC721 {\\n\\tfunction totalSupply() external view returns (uint256);\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\tfunction tokenByIndex(uint256 index) external view returns (uint256);\\n}\"\r\n    },\r\n    \"/contracts/extras/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//   \u2588          \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588    \u2591\u2591\u2591\u2591    \u2588\\n//  \u2588   \u2593\u2593\u2593\u2593\u2593\u2593   \u2588\\n//  \u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\\n//\\n// https://endlesscrawler.io\\n// @EndlessCrawler\\n//\\n/// @title Endless Crawler IERC721Enumerable implementation\\n/// @author OpenZeppelin, adapted by Studio Avante\\n/// @notice Simplified IERC721Enumerable implementation for gas saving\\n/// @dev As tokens cannot be burned and are minted in consecutive order, allTokens_ and _allTokensIndex could be removed\\n/// Based on: OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n/// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.8/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\n//\\npragma solidity ^0.8.16;\\nimport { ERC721, IERC165 } from '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport { IERC721Enumerable } from  './IERC721Enumerable.sol';\\n\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n\\terror OwnerIndexOutOfBounds();\\n\\terror GlobalIndexOutOfBounds();\\n\\n\\t// Mapping from owner to list of owned token IDs\\n\\tmapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n\\t// Mapping from token ID to index of the owner tokens list\\n\\tmapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n\\t/// @dev Replaces _allTokens and _allTokensIndex, since tokens are sequential and burn proof\\n\\tfunction _totalSupply() public view virtual returns (uint256);\\n\\n\\t/// @dev See {IERC165-supportsInterface}.\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override (IERC165, ERC721) returns (bool) {\\n\\t\\treturn interfaceId == type(IERC721Enumerable).interfaceId || ERC721.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/// @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n\\t\\tif(index >= ERC721.balanceOf(owner)) revert OwnerIndexOutOfBounds();\\n\\t\\treturn _ownedTokens[owner][index];\\n\\t}\\n\\n\\t/// @dev See {IERC721Enumerable-totalSupply}.\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn _totalSupply();\\n\\t}\\n\\n\\t/// @dev See {IERC721Enumerable-tokenByIndex}.\\n\\tfunction tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n\\t\\tif(index >= _totalSupply()) revert GlobalIndexOutOfBounds();\\n\\t\\treturn index + 1;\\n\\t}\\n\\n\\t/// @dev See {ERC721-_beforeTokenTransfer}.\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 batchSize\\n\\t) internal virtual override {\\n\\t\\tERC721._beforeTokenTransfer(from, to, tokenId, batchSize);\\n\\t\\tif (to != from) {\\n\\t\\t\\tif (from != address(0)) {\\n\\t\\t\\t\\tuint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n\\t\\t\\t\\tuint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\t\\t\\t\\t// When the token to delete is the last token, the swap operation is unnecessary\\n\\t\\t\\t\\tif (tokenIndex != lastTokenIndex) {\\n\\t\\t\\t\\t\\tuint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\t\\t\\t\\t\\t_ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t\\t\\t\\t_ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\t\\t\\tdelete _ownedTokensIndex[tokenId];\\n\\t\\t\\t\\tdelete _ownedTokens[from][lastTokenIndex];\\n\\t\\t\\t}\\n\\t\\t\\tuint256 length = ERC721.balanceOf(to);\\n\\t\\t\\t_ownedTokens[to][length] = tokenId;\\n\\t\\t\\t_ownedTokensIndex[tokenId] = length;\\n\\t\\t}\\n\\t}\\n}\"\r\n    },\r\n    \"/contracts/extras/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/// @author OpenZeppelin\\n/// @dev Exact OpenZeppelin copy but public, to be removed from CrawlerToken ABI\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.8/contracts/utils/cryptography/ECDSA.sol\\npragma solidity ^0.8.0;\\nimport \\\"../Crawl.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n\\tenum RecoverError {\\n\\t\\tNoError,\\n\\t\\tInvalidSignature,\\n\\t\\tInvalidSignatureLength,\\n\\t\\tInvalidSignatureS,\\n\\t\\tInvalidSignatureV // Deprecated in v4.8\\n\\t}\\n\\n\\tfunction _throwError(RecoverError error) private pure {\\n\\t\\tif (error == RecoverError.NoError) {\\n\\t\\t\\treturn; // no error: do nothing\\n\\t\\t} else if (error == RecoverError.InvalidSignature) {\\n\\t\\t\\trevert(\\\"ECDSA: invalid signature\\\");\\n\\t\\t} else if (error == RecoverError.InvalidSignatureLength) {\\n\\t\\t\\trevert(\\\"ECDSA: invalid signature length\\\");\\n\\t\\t} else if (error == RecoverError.InvalidSignatureS) {\\n\\t\\t\\trevert(\\\"ECDSA: invalid signature 's' value\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address that signed a hashed message (`hash`) with\\n\\t * `signature` or error string. This address can then be used for verification purposes.\\n\\t *\\n\\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n\\t * this function rejects them by requiring the `s` value to be in the lower\\n\\t * half order, and the `v` value to be either 27 or 28.\\n\\t *\\n\\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n\\t * verification to be secure: it is possible to craft signatures that\\n\\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n\\t * this is by receiving a hash of the original message (which may otherwise\\n\\t * be too long), and then calling {toEthSignedMessageHash} on it.\\n\\t *\\n\\t * Documentation for signature generation:\\n\\t * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n\\t * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n\\t *\\n\\t * _Available since v4.3._\\n\\t */\\n\\tfunction tryRecover(bytes32 hash, bytes memory signature) public pure returns (address, RecoverError) {\\n\\t\\tif (signature.length == 65) {\\n\\t\\t\\tbytes32 r;\\n\\t\\t\\tbytes32 s;\\n\\t\\t\\tuint8 v;\\n\\t\\t\\t// ecrecover takes the signature parameters, and the only way to get them\\n\\t\\t\\t// currently is to use assembly.\\n\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := mload(add(signature, 0x20))\\n\\t\\t\\t\\ts := mload(add(signature, 0x40))\\n\\t\\t\\t\\tv := byte(0, mload(add(signature, 0x60)))\\n\\t\\t\\t}\\n\\t\\t\\treturn tryRecover(hash, v, r, s);\\n\\t\\t} else {\\n\\t\\t\\treturn (address(0), RecoverError.InvalidSignatureLength);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address that signed a hashed message (`hash`) with\\n\\t * `signature`. This address can then be used for verification purposes.\\n\\t *\\n\\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n\\t * this function rejects them by requiring the `s` value to be in the lower\\n\\t * half order, and the `v` value to be either 27 or 28.\\n\\t *\\n\\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n\\t * verification to be secure: it is possible to craft signatures that\\n\\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n\\t * this is by receiving a hash of the original message (which may otherwise\\n\\t * be too long), and then calling {toEthSignedMessageHash} on it.\\n\\t */\\n\\tfunction recover(bytes32 hash, bytes memory signature) public pure returns (address) {\\n\\t\\t(address recovered, RecoverError error) = tryRecover(hash, signature);\\n\\t\\t_throwError(error);\\n\\t\\treturn recovered;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n\\t *\\n\\t * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n\\t *\\n\\t * _Available since v4.3._\\n\\t */\\n\\tfunction tryRecover(\\n\\t\\tbytes32 hash,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 vs\\n\\t) public pure returns (address, RecoverError) {\\n\\t\\tbytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n\\t\\tuint8 v = uint8((uint256(vs) >> 255) + 27);\\n\\t\\treturn tryRecover(hash, v, r, s);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n\\t *\\n\\t * _Available since v4.2._\\n\\t */\\n\\tfunction recover(\\n\\t\\tbytes32 hash,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 vs\\n\\t) public pure returns (address) {\\n\\t\\t(address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n\\t\\t_throwError(error);\\n\\t\\treturn recovered;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n\\t * `r` and `s` signature fields separately.\\n\\t *\\n\\t * _Available since v4.3._\\n\\t */\\n\\tfunction tryRecover(\\n\\t\\tbytes32 hash,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) public pure returns (address, RecoverError) {\\n\\t\\t// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n\\t\\t// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n\\t\\t// the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n\\t\\t// signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n\\t\\t//\\n\\t\\t// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n\\t\\t// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n\\t\\t// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n\\t\\t// these malleable signatures as well.\\n\\t\\tif (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n\\t\\t\\treturn (address(0), RecoverError.InvalidSignatureS);\\n\\t\\t}\\n\\n\\t\\t// If the signature is valid (and not malleable), return the signer address\\n\\t\\taddress signer = ecrecover(hash, v, r, s);\\n\\t\\tif (signer == address(0)) {\\n\\t\\t\\treturn (address(0), RecoverError.InvalidSignature);\\n\\t\\t}\\n\\n\\t\\treturn (signer, RecoverError.NoError);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Overload of {ECDSA-recover} that receives the `v`,\\n\\t * `r` and `s` signature fields separately.\\n\\t */\\n\\tfunction recover(\\n\\t\\tbytes32 hash,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) public pure returns (address) {\\n\\t\\t(address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n\\t\\t_throwError(error);\\n\\t\\treturn recovered;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n\\t * produces hash corresponding to the one signed with the\\n\\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n\\t * JSON-RPC method as part of EIP-191.\\n\\t *\\n\\t * See {recover}.\\n\\t */\\n\\tfunction toEthSignedMessageHash(bytes32 hash) public pure returns (bytes32) {\\n\\t\\t// 32 is the length in bytes of hash,\\n\\t\\t// enforced by the type signature above\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an Ethereum Signed Message, created from `s`. This\\n\\t * produces hash corresponding to the one signed with the\\n\\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n\\t * JSON-RPC method as part of EIP-191.\\n\\t *\\n\\t * See {recover}.\\n\\t */\\n\\tfunction toEthSignedMessageHash(bytes memory s) public pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Crawl.toString(s.length), s));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an Ethereum Signed Typed Data, created from a\\n\\t * `domainSeparator` and a `structHash`. This produces hash corresponding\\n\\t * to the one signed with the\\n\\t * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n\\t * JSON-RPC method as part of EIP-712.\\n\\t *\\n\\t * See {recover}.\\n\\t */\\n\\tfunction toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) public pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/contracts/ICrawlerToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//   \u2588          \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588    \u2591\u2591\u2591\u2591    \u2588\\n//  \u2588   \u2593\u2593\u2593\u2593\u2593\u2593   \u2588\\n//  \u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\\n//\\n// https://endlesscrawler.io\\n// @EndlessCrawler\\n//\\n/// @title Endless Crawler Chamber Minter Interface\\n/// @author Studio Avante\\n//\\npragma solidity ^0.8.16;\\nimport { IERC165 } from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\nimport { IERC721 } from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport { IERC721Metadata } from '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport { IERC721Enumerable } from './extras/IERC721Enumerable.sol';\\nimport { Crawl } from './Crawl.sol';\\n\\ninterface ICrawlerToken is IERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n\\tfunction isPaused() external view returns (bool);\\n\\tfunction getPrices() external view returns (uint256, uint256);\\n\\tfunction calculateMintPrice(address to) external view returns (uint256);\\n\\tfunction tokenIdToCoord(uint256 tokenId) external view returns (uint256);\\n\\tfunction coordToSeed(uint256 coord) external view returns (Crawl.ChamberSeed memory);\\n\\tfunction coordToChamberData(uint8 chapterNumber, uint256 coord, bool generateMaps) external view returns (Crawl.ChamberData memory);\\n\\tfunction tokenIdToHoard(uint256 tokenId) external view returns (Crawl.Hoard memory);\\n\\t// Metadata calls\\n\\tfunction getChamberMetadata(uint8 chapterNumber, uint256 coord) external view returns (string memory);\\n\\tfunction getMapMetadata(uint8 chapterNumber, uint256 coord) external view returns (string memory);\\n\\tfunction getTokenMetadata(uint8 chapterNumber, uint256 coord) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/ICrawlerRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//   \u2588          \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588    \u2591\u2591\u2591\u2591    \u2588\\n//  \u2588   \u2593\u2593\u2593\u2593\u2593\u2593   \u2588\\n//  \u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\\n//\\n// https://endlesscrawler.io\\n// @EndlessCrawler\\n//\\n/// @title Endless Crawler Chamber Renderer Interface\\n/// @author Studio Avante\\n//\\npragma solidity ^0.8.16;\\nimport { IERC165 } from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\nimport { ICrawlerMapper } from './ICrawlerMapper.sol';\\nimport { Crawl } from './Crawl.sol';\\n\\ninterface ICrawlerRenderer is IERC165 {\\n\\tfunction renderAdditionalChamberMetadata(Crawl.ChamberData memory chamber, ICrawlerMapper mapper) external view returns (string memory);\\n\\tfunction renderMapMetadata(Crawl.ChamberData memory chamber, ICrawlerMapper mapper) external view returns (string memory);\\n\\tfunction renderTokenMetadata(Crawl.ChamberData memory chamber, ICrawlerMapper mapper) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/ICrawlerPlayer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//   \u2588          \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588    \u2591\u2591\u2591\u2591    \u2588\\n//  \u2588   \u2593\u2593\u2593\u2593\u2593\u2593   \u2588\\n//  \u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\\n//\\n// https://endlesscrawler.io\\n// @EndlessCrawler\\n//\\n/// @title Endless Crawler Player Manager Interface\\n/// @author Studio Avante\\n//\\npragma solidity ^0.8.16;\\nimport { Crawl } from './Crawl.sol';\\n\\ninterface ICrawlerPlayer {\\n\\tfunction transferChamberHoard(address from, address to, Crawl.Hoard memory hoard) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/ICrawlerMapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//   \u2588          \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588    \u2591\u2591\u2591\u2591    \u2588\\n//  \u2588   \u2593\u2593\u2593\u2593\u2593\u2593   \u2588\\n//  \u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\\n//\\n// https://endlesscrawler.io\\n// @EndlessCrawler\\n//\\n/// @title Endless Crawler Chamber Mapper Interface\\n/// @author Studio Avante\\n//\\npragma solidity ^0.8.16;\\nimport { IERC165 } from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\nimport { Crawl } from './Crawl.sol';\\n\\ninterface ICrawlerMapper is IERC165 {\\n\\t// for generators\\n\\tfunction generateTileMap(Crawl.ChamberData memory chamber) external view returns (bytes memory);\\n\\t// getters / for renderers\\n\\tfunction getTerrainName(Crawl.Terrain terrain) external view returns (string memory);\\n\\tfunction getGemName(Crawl.Gem gem) external view returns (string memory);\\n\\tfunction getTileName(bytes1 tile, uint8 bitPos) external view returns (string memory);\\n\\tfunction getColors(Crawl.Terrain terrain) external view returns (string[] memory);\\n\\tfunction getColor(Crawl.Terrain terrain, uint8 colorId) external view returns (string memory);\\n\\tfunction getGemColors() external view returns (string[] memory);\\n\\tfunction getGemColor(Crawl.Gem gemType) external view returns (string memory);\\n\\t// for renderers\\n\\tfunction getAttributes(Crawl.ChamberData memory chamber) external view returns (string[] memory, string[] memory);\\n\\tfunction renderSvgStyles(Crawl.ChamberData memory chamber) external view returns (string memory);\\n\\tfunction renderSvgDefs(Crawl.ChamberData memory chamber) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/ICrawlerIndex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//   \u2588          \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588    \u2591\u2591\u2591\u2591    \u2588\\n//  \u2588   \u2593\u2593\u2593\u2593\u2593\u2593   \u2588\\n//  \u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\\n//\\n// https://endlesscrawler.io\\n// @EndlessCrawler\\n//\\n/// @title Endless Crawler Chapter Index Interface\\n/// @author Studio Avante\\n//\\npragma solidity ^0.8.16;\\nimport { ICrawlerChamberGenerator } from './ICrawlerChamberGenerator.sol';\\nimport { ICrawlerGenerator } from './ICrawlerGenerator.sol';\\nimport { ICrawlerMapper } from './ICrawlerMapper.sol';\\nimport { ICrawlerRenderer } from './ICrawlerRenderer.sol';\\nimport { Crawl } from './Crawl.sol';\\n\\ninterface ICrawlerIndex {\\n\\tstruct Chapter {\\n\\t\\tuint8 chapterNumber;\\n\\t\\tICrawlerGenerator generator;\\n\\t\\tICrawlerMapper mapper;\\n\\t\\tICrawlerRenderer renderer;\\n\\t}\\n\\t// Public\\n\\tfunction getCurrentChapterNumber() external view returns (uint8);\\n\\tfunction getCurrentChapter() external view returns (Chapter memory);\\n\\tfunction getChapter(uint8 chapterNumber) external view returns (Chapter memory);\\n\\tfunction getChamberGenerator() external view returns (ICrawlerChamberGenerator);\\n\\tfunction getGenerator(uint8 chapterNumber) external view returns (ICrawlerGenerator);\\n\\tfunction getMapper(uint8 chapterNumber) external view returns (ICrawlerMapper);\\n\\tfunction getRenderer(uint8 chapterNumber) external view returns (ICrawlerRenderer);\\n\\t// Metadata calls\\n\\tfunction getChamberData(uint8 chapterNumber, uint256 coord, Crawl.ChamberSeed memory chamberSeed, bool generateMaps) external view returns (Crawl.ChamberData memory);\\n\\tfunction getChamberMetadata(uint8 chapterNumber, uint256 coord, Crawl.ChamberSeed memory chamberSeed) external view returns (string memory);\\n\\tfunction getMapMetadata(uint8 chapterNumber, uint256 coord, Crawl.ChamberSeed memory chamberSeed) external view returns (string memory);\\n\\tfunction getTokenMetadata(uint8 chapterNumber, uint256 coord, Crawl.ChamberSeed memory chamberSeed) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/ICrawlerGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//   \u2588          \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588    \u2591\u2591\u2591\u2591    \u2588\\n//  \u2588   \u2593\u2593\u2593\u2593\u2593\u2593   \u2588\\n//  \u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\\n//\\n// https://endlesscrawler.io\\n// @EndlessCrawler\\n//\\n/// @title Endless Crawler Chamber Generator Interface (Custom data)\\n/// @author Studio Avante\\n//\\npragma solidity ^0.8.16;\\nimport { IERC165 } from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\nimport { Crawl } from './Crawl.sol';\\n\\ninterface ICrawlerGenerator is IERC165 {\\n\\tfunction generateCustomChamberData(Crawl.ChamberData memory chamber) external view returns (Crawl.CustomData[] memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/ICrawlerChamberGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//   \u2588          \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588    \u2591\u2591\u2591\u2591    \u2588\\n//  \u2588   \u2593\u2593\u2593\u2593\u2593\u2593   \u2588\\n//  \u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\\n//\\n// https://endlesscrawler.io\\n// @EndlessCrawler\\n//\\n/// @title Endless Crawler Static Chamber Generator Interface (static data)\\n/// @author Studio Avante\\n//\\npragma solidity ^0.8.16;\\nimport { ICrawlerGenerator } from './ICrawlerGenerator.sol';\\nimport { ICrawlerToken } from './ICrawlerToken.sol';\\nimport { Crawl } from './Crawl.sol';\\n\\ninterface ICrawlerChamberGenerator {\\n\\tfunction generateTerrainType(uint256 seed, Crawl.Terrain fromTerrain) external view returns (Crawl.Terrain);\\n\\tfunction generateHoard(uint256 seed) external view returns (Crawl.Hoard memory);\\n\\tfunction generateChamberData(uint256 coord, Crawl.ChamberSeed memory chamberSeed, bool generateMaps, ICrawlerToken tokenContract, ICrawlerGenerator customGenerator) external view returns (Crawl.ChamberData memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/Crawl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//\\n//    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//   \u2588          \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588            \u2588\\n//  \u2588    \u2591\u2591\u2591\u2591    \u2588\\n//  \u2588   \u2593\u2593\u2593\u2593\u2593\u2593   \u2588\\n//  \u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\\n//\\n// https://endlesscrawler.io\\n// @EndlessCrawler\\n//\\n/// @title Endless Crawler Game Definitions and Library\\n/// @author Studio Avante\\n/// @notice Contains common definitions and functions\\n//\\npragma solidity ^0.8.16;\\n\\nlibrary Crawl {\\n\\n  //-----------------------------------\\n  // ChamberSeed, per token static data\\n  // generated on mint, stored on-chain\\n  //\\n\\tstruct ChamberSeed {\\n\\t\\tuint256 tokenId;\\n\\t\\tuint256 seed;\\n\\t\\tuint232 yonder;\\n\\t\\tuint8 chapter;\\n\\t\\tCrawl.Terrain terrain;\\n\\t\\tCrawl.Dir entryDir;\\n\\t}\\n\\n\\n  //------------------------------------\\n  // ChamberData, per token dynamic data\\n  // generated on demand\\n  //\\n\\tstruct ChamberData {\\n\\t\\t// from ChamberSeed (static)\\n\\t\\tuint256 coord;\\n\\t\\tuint256 tokenId;\\n\\t\\tuint256 seed;\\n\\t\\tuint232 yonder;\\n\\t\\tuint8 chapter;\\t\\t\\t// Chapter minted\\n\\t\\tCrawl.Terrain terrain;\\n\\t\\tCrawl.Dir entryDir;\\n\\n\\t\\t// generated on demand (deterministic)\\n\\t\\tCrawl.Hoard hoard;\\n\\t\\tuint8 gemPos;\\t\\t\\t\\t// gem bitmap position\\n\\n\\t\\t// dynamic until all doors are unlocked\\n\\t\\tuint8[4] doors; \\t\\t// bitmap position in NEWS order\\n\\t\\tuint8[4] locks; \\t\\t// lock status in NEWS order\\n\\n\\t\\t// optional\\n\\t\\tuint256 bitmap;\\t\\t\\t// bit map, 0 is void/walls, 1 is path\\n\\t\\tbytes tilemap;\\t\\t\\t// tile map\\n\\n\\t\\t// custom data\\n\\t\\tCustomData[] customData;\\n\\t}\\n\\n\\tstruct Hoard {\\n\\t\\tCrawl.Gem gemType;\\n\\t\\tuint16 coins;\\t\\t// coins value\\n\\t\\tuint16 worth;\\t\\t// gem + coins value\\n\\t}\\n\\n\\tenum CustomDataType {\\n\\t\\tCustom0, Custom1, Custom2, Custom3, Custom4,\\n\\t\\tCustom5, Custom6, Custom7, Custom8, Custom9,\\n\\t\\tTile,\\n\\t\\tPalette,\\n\\t\\tBackground,\\n\\t\\tForeground,\\n\\t\\tCharSet,\\n\\t\\tMusic\\n\\t}\\n\\n\\tstruct CustomData {\\n\\t\\tCustomDataType dataType;\\n\\t\\tbytes data;\\n\\t}\\n\\n\\n\\t//-----------------------\\n\\t// Terrain types\\n\\t//\\n\\t// 2 Water | 3 Air\\n\\t// --------|--------\\n\\t// 1 Earth | 4 Fire\\n\\t//\\n\\tenum Terrain {\\n\\t\\tEmpty,\\t// 0\\n\\t\\tEarth,\\t// 1\\n\\t\\tWater,\\t// 2\\n\\t\\tAir,\\t\\t// 3\\n\\t\\tFire\\t\\t// 4\\n\\t}\\n\\n\\t/// @dev Returns the opposite of a Terrain\\n\\t// Opposite terrains cannot access to each other\\n\\t// Earth <> Air\\n\\t// Water <> Fire\\n\\tfunction getOppositeTerrain(Crawl.Terrain terrain) internal pure returns (Crawl.Terrain) {\\n\\t\\tuint256 t = uint256(terrain);\\n\\t\\treturn t >= 3 ? Crawl.Terrain(t-2) : t >= 1 ? Crawl.Terrain(t+2) : Crawl.Terrain.Empty;\\n\\t}\\n\\n\\t//-----------------------\\n\\t// Gem types\\n\\t//\\n\\tenum Gem {\\n\\t\\tSilver,\\t\\t\\t// 0\\n\\t\\tGold,\\t\\t\\t\\t// 1\\n\\t\\tSapphire,\\t\\t// 2\\n\\t\\tEmerald,\\t\\t// 3\\n\\t\\tRuby,\\t\\t\\t\\t// 4\\n\\t\\tDiamond,\\t\\t// 5\\n\\t\\tEthernite,\\t// 6\\n\\t\\tKao,\\t\\t\\t\\t// 7\\n\\t\\tCoin\\t\\t\\t\\t// 8 (not a gem!)\\n\\t}\\n\\n\\t/// @dev Returns the Worth value of a Gem\\n\\tfunction getGemValue(Crawl.Gem gem) internal pure returns (uint16) {\\n\\t\\tif (gem == Crawl.Gem.Silver) return 50;\\n\\t\\tif (gem == Crawl.Gem.Gold) return 100;\\n\\t\\tif (gem == Crawl.Gem.Sapphire) return 150;\\n\\t\\tif (gem == Crawl.Gem.Emerald) return 200;\\n\\t\\tif (gem == Crawl.Gem.Ruby) return 300;\\n\\t\\tif (gem == Crawl.Gem.Diamond) return 500;\\n\\t\\tif (gem == Crawl.Gem.Ethernite) return 800;\\n\\t\\treturn 1001; // Crawl.Gem.Kao\\n\\t}\\n\\n\\t/// @dev Calculates a Chamber Worth value\\n\\tfunction calcWorth(Crawl.Gem gem, uint16 coins) internal pure returns (uint16) {\\n\\t\\treturn getGemValue(gem) + coins;\\n\\t}\\n\\n\\t//--------------------------\\n\\t// Directions, in NEWS order\\n\\t//\\n\\tenum Dir {\\n\\t\\tNorth,\\t// 0\\n\\t\\tEast,\\t\\t// 1\\n\\t\\tWest,\\t\\t// 2\\n\\t\\tSouth\\t\\t// 3\\n\\t}\\n\\tuint256 internal constant mask_South = uint256(type(uint64).max);\\n\\tuint256 internal constant mask_West = (mask_South << 64);\\n\\tuint256 internal constant mask_East = (mask_South << 128);\\n\\tuint256 internal constant mask_North = (mask_South << 192);\\n\\n\\t/// @dev Flips a direction\\n\\t/// North <> South\\n\\t/// East <> West\\n\\tfunction flipDir(Crawl.Dir dir) internal pure returns (Crawl.Dir) {\\n\\t\\treturn Crawl.Dir(3 - uint256(dir));\\n\\t}\\n\\n\\t/// @dev Flips a door possition at a direction to connect to neighboring chamber\\n\\tfunction flipDoorPosition(uint8 doorPos, Crawl.Dir dir) internal pure returns (uint8 result) {\\n\\t\\tif (dir == Crawl.Dir.North) return doorPos > 0 ? doorPos + (15 * 16) : 0;\\n\\t\\tif (dir == Crawl.Dir.South) return doorPos > 0 ? doorPos - (15 * 16) : 0;\\n\\t\\tif (dir == Crawl.Dir.West) return doorPos > 0 ? doorPos + 15 : 0;\\n\\t\\treturn doorPos > 0 ? doorPos - 15 : 0; // Crawl.Dir.East\\n\\t}\\n\\n\\t//-----------------------\\n\\t// Coords\\n\\t//\\t\\n\\t// coords have 4 components packed in uint256\\n\\t// in NEWS direction:\\n\\t// (N)orth, (E)ast, (W)est, (S)outh\\n\\t// o-------o-------o-------o-------o\\n\\t// 0       32     128     192    256\\n\\n\\t/// @dev Extracts the North component from a Chamber coordinate\\n\\tfunction getNorth(uint256 coord) internal pure returns (uint256 result) {\\n\\t\\treturn (coord >> 192);\\n\\t}\\n\\t/// @dev Extracts the East component from a Chamber coordinate\\n\\tfunction getEast(uint256 coord) internal pure returns (uint256) {\\n\\t\\treturn ((coord & mask_East) >> 128);\\n\\t}\\n\\t/// @dev Extracts the West component from a Chamber coordinate\\n\\tfunction getWest(uint256 coord) internal pure returns (uint256) {\\n\\t\\treturn ((coord & mask_West) >> 64);\\n\\t}\\n\\t/// @dev Extracts the South component from a Chamber coordinate\\n\\tfunction getSouth(uint256 coord) internal pure returns (uint256) {\\n\\t\\treturn coord & mask_South;\\n\\t}\\n\\n\\t/// @dev Builds a Chamber coordinate from its direction components\\n\\t/// a coord is composed of 4 uint64 components packed in a uint256\\n\\t/// Components are combined in NEWS order: Nort, East, West, South\\n\\t/// @param north North component, zero if South\\n\\t/// @param east East component, zero id West\\n\\t/// @param west West component, zero if East\\n\\t/// @param south South component, zero if North\\n\\t/// @return result Chamber coordinate\\n\\tfunction makeCoord(uint256 north, uint256 east, uint256 west, uint256 south) internal pure returns (uint256 result) {\\n\\t\\t// North or South need to be positive, but not both\\n\\t\\tif(north > 0) {\\n\\t\\t\\trequire(south == 0, 'Crawl.makeCoord(): bad North/South');\\n\\t\\t\\tresult += (north << 192);\\n\\t\\t} else if(south > 0) {\\n\\t\\t\\tresult += south;\\n\\t\\t} else {\\n\\t\\t\\trevert('Crawl.makeCoord(): need North or South');\\n\\t\\t}\\n\\t\\t// West or East need to be positive, but not both\\n\\t\\tif(east > 0) {\\n\\t\\t\\trequire(west == 0, 'Crawl.makeCoord(): bad West/East');\\n\\t\\t\\tresult += (east << 128);\\n\\t\\t} else if(west > 0) {\\n\\t\\t\\tresult += (west << 64);\\n\\t\\t} else {\\n\\t\\t\\trevert('Crawl.makeCoord(): need West or East');\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Offsets a Chamber coordinate in one direction\\n\\t/// @param coord Chamber coordinate\\n\\t/// @param dir Direction to offset\\n\\t/// @return coord The new coordinate. If reached limits, return same coord\\n\\t// TODO: Use assembly?\\n\\tfunction offsetCoord(uint256 coord, Crawl.Dir dir) internal pure returns (uint256) {\\n\\t\\tif(dir == Crawl.Dir.North) {\\n\\t\\t\\tif(coord & mask_South > 1) return coord - 1; // --South\\n\\t\\t\\tif(coord & mask_North != mask_North) return (coord & ~mask_South) + (1 << 192); // ++North\\n\\t\\t} else if(dir == Crawl.Dir.East) {\\n\\t\\t\\tif(coord & mask_West > (1 << 64)) return coord - (1 << 64); // --West\\n\\t\\t\\tif(coord & mask_East != mask_East) return (coord & ~mask_West) + (1 << 128); // ++East\\n\\t\\t} else if(dir == Crawl.Dir.West) {\\n\\t\\t\\tif(coord & mask_East > (1 << 128)) return coord - (1 << 128); // --East\\n\\t\\t\\tif(coord & mask_West != mask_West) return (coord & ~mask_East) + (1 << 64); // ++West\\n\\t\\t} else { //if(dir == Crawl.Dir.South) {\\n\\t\\t\\tif(coord & mask_North > (1 << 192)) return coord - (1 << 192); // --North\\n\\t\\t\\tif(coord & mask_South != mask_South) return (coord & ~mask_North) + 1; // ++South\\n\\t\\t}\\n\\t\\treturn coord;\\n\\t}\\n\\n\\n\\t//-----------------------\\n\\t// String Builders\\n\\t//\\n\\n\\t/// @dev Returns a token description for tokenURI()\\n\\tfunction tokenName(string memory tokenId) public pure returns (string memory) {\\n\\t\\treturn string.concat('Chamber #', tokenId);\\n\\t}\\n\\n\\t/// @dev Short string representation of a Chamebr coordinate and Yonder\\n\\tfunction coordsToString(uint256 coord, uint256 yonder, string memory separator) public pure returns (string memory) {\\n\\t\\treturn string.concat(\\n\\t\\t\\t((coord & Crawl.mask_North) > 0\\n\\t\\t\\t\\t? string.concat('N', toString((coord & Crawl.mask_North)>>192))\\n\\t\\t\\t\\t: string.concat('S', toString(coord & Crawl.mask_South))),\\n\\t\\t\\t((coord & Crawl.mask_East) > 0\\n\\t\\t\\t\\t? string.concat(separator, 'E', toString((coord & Crawl.mask_East)>>128))\\n\\t\\t\\t\\t: string.concat(separator, 'W', toString((coord & Crawl.mask_West)>>64))),\\n\\t\\t\\t(yonder > 0 ? string.concat(separator, 'Y', toString(yonder)) : '')\\n\\t\\t);\\n\\t}\\n\\n\\t/// @dev Renders IERC721Metadata attributes for tokenURI()\\n\\t/// Reference: https://docs.opensea.io/docs/metadata-standards\\n\\tfunction renderAttributesMetadata(string[] memory labels, string[] memory values) public pure returns (string memory result) {\\n\\t\\tfor(uint256 i = 0 ; i < labels.length ; ++i) {\\n\\t\\t\\tresult = string.concat(result,\\n\\t\\t\\t\\t'{'\\n\\t\\t\\t\\t\\t'\\\"trait_type\\\":\\\"', labels[i], '\\\",'\\n\\t\\t\\t\\t\\t'\\\"value\\\":\\\"', values[i], '\\\"'\\n\\t\\t\\t\\t'}',\\n\\t\\t\\t\\t(i < (labels.length - 1) ? ',' : '')\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Returns a Chamber metadata, without maps\\n\\t/// @param chamber The Chamber, no maps required\\n\\t/// @return metadata Metadata, as plain json string\\n\\tfunction renderChamberMetadata(Crawl.ChamberData memory chamber, string memory additionalMetadata) internal pure returns (string memory) {\\n\\t\\treturn string.concat(\\n\\t\\t\\t'{'\\n\\t\\t\\t\\t'\\\"tokenId\\\":\\\"', toString(chamber.tokenId), '\\\",'\\n\\t\\t\\t\\t'\\\"name\\\":\\\"', tokenName(toString(chamber.tokenId)), '\\\",'\\n\\t\\t\\t\\t'\\\"chapter\\\":\\\"', toString(chamber.chapter), '\\\",'\\n\\t\\t\\t\\t'\\\"terrain\\\":\\\"', toString(uint256(chamber.terrain)), '\\\",'\\n\\t\\t\\t\\t'\\\"gem\\\":\\\"', toString(uint256(chamber.hoard.gemType)), '\\\",'\\n\\t\\t\\t\\t'\\\"coins\\\":\\\"', toString(chamber.hoard.coins), '\\\",'\\n\\t\\t\\t\\t'\\\"worth\\\":\\\"', toString(chamber.hoard.worth), '\\\",'\\n\\t\\t\\t\\t'\\\"coord\\\":\\\"', toString(chamber.coord), '\\\",'\\n\\t\\t\\t\\t'\\\"yonder\\\":\\\"', toString(chamber.yonder), '\\\",',\\n\\t\\t\\t\\t_renderCompassMetadata(chamber.coord),\\n\\t\\t\\t\\t_renderLocksMetadata(chamber.locks),\\n\\t\\t\\t\\tadditionalMetadata,\\n\\t\\t\\t'}'\\n\\t\\t);\\n\\t}\\n\\tfunction _renderCompassMetadata(uint256 coord) private pure returns (string memory) {\\n\\t\\treturn string.concat(\\n\\t\\t\\t'\\\"compass\\\":{',\\n\\t\\t\\t\\t((coord & Crawl.mask_North) > 0\\n\\t\\t\\t\\t\\t? string.concat('\\\"north\\\":\\\"', toString((coord & Crawl.mask_North)>>192))\\n\\t\\t\\t\\t\\t: string.concat('\\\"south\\\":\\\"', toString(coord & Crawl.mask_South))),\\n\\t\\t\\t\\t((coord & Crawl.mask_East) > 0\\n\\t\\t\\t\\t\\t? string.concat('\\\",\\\"east\\\":\\\"', toString((coord & Crawl.mask_East)>>128))\\n\\t\\t\\t\\t\\t: string.concat('\\\",\\\"west\\\":\\\"', toString((coord & Crawl.mask_West)>>64))),\\n\\t\\t\\t'\\\"},'\\n\\t\\t);\\n\\t}\\n\\tfunction _renderLocksMetadata(uint8[4] memory locks) private pure returns (string memory) {\\n\\t\\treturn string.concat(\\n\\t\\t\\t'\\\"locks\\\":[',\\n\\t\\t\\t\\t(locks[0] == 0 ? 'false,' : 'true,'),\\n\\t\\t\\t\\t(locks[1] == 0 ? 'false,' : 'true,'),\\n\\t\\t\\t\\t(locks[2] == 0 ? 'false,' : 'true,'),\\n\\t\\t\\t\\t(locks[3] == 0 ? 'false' : 'true'),\\n\\t\\t\\t'],'\\n\\t\\t);\\n\\t}\\n\\n\\n\\t//-----------------------\\n\\t// Utils\\n\\t//\\n\\n\\t/// @dev converts uint8 tile position to a bitmap position mask\\n\\tfunction tilePosToBitmap(uint8 tilePos) internal pure returns (uint256) {\\n\\t\\treturn (1 << (255 - tilePos));\\n\\t}\\n\\n\\t/// @dev overSeed has ~50% more bits\\n\\tfunction overSeed(uint256 seed_) internal pure returns (uint256) {\\n\\t\\treturn seed_ | uint256(keccak256(abi.encodePacked(seed_)));\\n\\t}\\n\\n\\t/// @dev underSeed has ~50% less bits\\n\\tfunction underSeed(uint256 seed_) internal pure returns (uint256) {\\n\\t\\treturn seed_ & uint256(keccak256(abi.encodePacked(seed_)));\\n\\t}\\n\\n\\t/// @dev maps seed value modulus to range\\n\\tfunction mapSeed(uint256 seed_, uint256 min_, uint256 maxExcl_) internal pure returns (uint256) {\\n\\t\\treturn min_ + (seed_ % (maxExcl_ - min_));\\n\\t}\\n\\n\\t/// @dev maps seed value modulus to bitmap position (takes 8 bits)\\n\\t/// the position lands in a 12x12 space at the center of the 16x16 map\\n\\tfunction mapSeedToBitmapPosition(uint256 seed_) internal pure returns (uint8) {\\n\\t\\tuint8 i = uint8(seed_ % 144);\\n\\t\\treturn ((i / 12) + 2) * 16 + (i % 12) + 2;\\n\\t}\\n\\n\\t/// @dev min function\\n\\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a < b ? a : b;\\n\\t}\\n\\n\\t/// @dev max function\\n\\tfunction max(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a > b ? a : b;\\n\\t}\\n\\n\\t//-----------------------------\\n\\t// OpenZeppelin Strings library\\n\\t// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.8/contracts/utils/Strings.sol\\n\\t// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.8/contracts/utils/math/Math.sol\\n\\t//\\n\\tbytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n\\tuint8 private constant _ADDRESS_LENGTH = 20;\\n\\n\\t/// @dev Return the log in base 10, rounded down, of a positive value.\\n\\tfunction log10(uint256 value) private pure returns (uint256) {\\n\\t\\tuint256 result = 0;\\n\\t\\tunchecked {\\n\\t\\t\\tif (value >= 10**64) { value /= 10**64; result += 64; }\\n\\t\\t\\tif (value >= 10**32) { value /= 10**32; result += 32; }\\n\\t\\t\\tif (value >= 10**16) { value /= 10**16; result += 16; }\\n\\t\\t\\tif (value >= 10**8) { value /= 10**8; result += 8; }\\n\\t\\t\\tif (value >= 10**4) { value /= 10**4; result += 4; }\\n\\t\\t\\tif (value >= 10**2) { value /= 10**2; result += 2; }\\n\\t\\t\\tif (value >= 10**1) { result += 1; }\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/// @dev Return the log in base 256, rounded down, of a positive value.\\n\\tfunction log256(uint256 value) private pure returns (uint256) {\\n\\t\\tuint256 result = 0;\\n\\t\\tunchecked {\\n\\t\\t\\tif (value >> 128 > 0) { value >>= 128; result += 16; }\\n\\t\\t\\tif (value >> 64 > 0) { value >>= 64; result += 8; }\\n\\t\\t\\tif (value >> 32 > 0) { value >>= 32; result += 4; }\\n\\t\\t\\tif (value >> 16 > 0) { value >>= 16; result += 2; }\\n\\t\\t\\tif (value >> 8 > 0) { result += 1; }\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/// @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n\\tfunction toString(uint256 value) internal pure returns (string memory) {\\n\\t\\tunchecked {\\n\\t\\t\\tuint256 length = log10(value) + 1;\\n\\t\\t\\tstring memory buffer = new string(length);\\n\\t\\t\\tuint256 ptr;\\n\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tptr := add(buffer, add(32, length))\\n\\t\\t\\t}\\n\\t\\t\\twhile (true) {\\n\\t\\t\\t\\tptr--;\\n\\t\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\tmstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvalue /= 10;\\n\\t\\t\\t\\tif (value == 0) break;\\n\\t\\t\\t}\\n\\t\\t\\treturn buffer;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n\\t/// defined as public to be excluded from the contract ABI and avoid Stack Too Deep error\\n\\tfunction toHexString(uint256 value) public pure returns (string memory) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn toHexString(value, log256(value) + 1);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n\\t/// defined as public to be excluded from the contract ABI and avoid Stack Too Deep error\\n\\tfunction toHexString(uint256 value, uint256 length) public pure returns (string memory) {\\n\\t\\tbytes memory buffer = new bytes(2 * length + 2);\\n\\t\\tbuffer[0] = \\\"0\\\";\\n\\t\\tbuffer[1] = \\\"x\\\";\\n\\t\\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\\n\\t\\t\\tbuffer[i] = _SYMBOLS[value & 0xf];\\n\\t\\t\\tvalue >>= 4;\\n\\t\\t}\\n\\t\\trequire(value == 0, \\\"Strings: hex length insufficient\\\");\\n\\t\\treturn string(buffer);\\n\\t}\\n\\n\\t/// @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n\\tfunction toHexString(address addr) public pure returns (string memory) {\\n\\t\\treturn toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n\\t}\\n\\n\\t/// @dev Converts a single `bytes1` to its ASCII `string` hexadecimal\\n\\tfunction toHexString(bytes1 value) public pure returns (string memory) {\\n\\t\\tbytes memory buffer = new bytes(2);\\n\\t\\tbuffer[0] = _SYMBOLS[uint8(value>>4) & 0xf];\\n\\t\\tbuffer[1] = _SYMBOLS[uint8(value) & 0xf];\\n\\t\\treturn string(buffer);\\n\\t}\\n\\n\\t/// @dev Converts a `bytes` to its ASCII `string` hexadecimal, without '0x' prefix\\n\\tfunction toHexString(bytes memory value, uint256 start, uint256 length) public pure returns (string memory) {\\n\\t\\trequire(start < value.length, \\\"Strings: hex start overflow\\\");\\n\\t\\trequire(start + length <= value.length, \\\"Strings: hex length overflow\\\");\\n\\t\\tbytes memory buffer = new bytes(2 * length);\\n\\t\\tfor (uint256 i = 0; i < length; i++) {\\n\\t\\t\\tbuffer[i*2+0] = _SYMBOLS[uint8(value[start+i]>>4) & 0xf];\\n\\t\\t\\tbuffer[i*2+1] = _SYMBOLS[uint8(value[start+i]) & 0xf];\\n\\t\\t}\\n\\t\\treturn string(buffer);\\n\\t}\\n\\t/// @dev Converts a `bytes` to its ASCII `string` hexadecimal, without '0x' prefix\\n\\tfunction toHexString(bytes memory value) public pure returns (string memory) {\\n\\t\\treturn toHexString(value, 0, value.length);\\n\\t}\\n\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/OperatorFilterer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {IOperatorFilterRegistry} from \\\"./IOperatorFilterRegistry.sol\\\";\\n\\n/**\\n * @title  OperatorFilterer\\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\\n *         registrant's entries in the OperatorFilterRegistry.\\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\\n */\\nabstract contract OperatorFilterer {\\n    error OperatorNotAllowed(address operator);\\n\\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (subscribe) {\\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n            } else {\\n                if (subscriptionOrRegistrantToCopy != address(0)) {\\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Allow spending tokens from addresses with balance\\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n        // from an EOA.\\n        if (from != msg.sender) {\\n            _checkFilterOperator(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        _checkFilterOperator(operator);\\n        _;\\n    }\\n\\n    function _checkFilterOperator(address operator) internal view virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n    function register(address registrant) external;\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n    function unregister(address addr) external;\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n    function subscriptionOf(address addr) external returns (address registrant);\\n    function subscribers(address registrant) external returns (address[] memory);\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n    function filteredOperators(address addr) external returns (address[] memory);\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n    function isRegistered(address addr) external returns (bool);\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/DefaultOperatorFilterer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {OperatorFilterer} from \\\"./OperatorFilterer.sol\\\";\\n\\n/**\\n * @title  DefaultOperatorFilterer\\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\\n */\\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\\n\\n    constructor() OperatorFilterer(DEFAULT_SUBSCRIPTION, true) {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"/contracts/extras/ECDSA.sol\": {\r\n        \"ECDSA\": \"0xaE3A163a9Da6D126074F132016d72d513F5b9D08\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"index_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GlobalIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDoor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFromChamber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintingIsPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerIndexOutOfBounds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"coord\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_FILTER_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"calculateMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"checkout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chapterNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"coord\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"generateMaps\",\"type\":\"bool\"}],\"name\":\"coordToChamberData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"coord\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint232\",\"name\":\"yonder\",\"type\":\"uint232\"},{\"internalType\":\"uint8\",\"name\":\"chapter\",\"type\":\"uint8\"},{\"internalType\":\"enum Crawl.Terrain\",\"name\":\"terrain\",\"type\":\"uint8\"},{\"internalType\":\"enum Crawl.Dir\",\"name\":\"entryDir\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"enum Crawl.Gem\",\"name\":\"gemType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"coins\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"worth\",\"type\":\"uint16\"}],\"internalType\":\"struct Crawl.Hoard\",\"name\":\"hoard\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"gemPos\",\"type\":\"uint8\"},{\"internalType\":\"uint8[4]\",\"name\":\"doors\",\"type\":\"uint8[4]\"},{\"internalType\":\"uint8[4]\",\"name\":\"locks\",\"type\":\"uint8[4]\"},{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"tilemap\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"enum Crawl.CustomDataType\",\"name\":\"dataType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Crawl.CustomData[]\",\"name\":\"customData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Crawl.ChamberData\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coord\",\"type\":\"uint256\"}],\"name\":\"coordToSeed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint232\",\"name\":\"yonder\",\"type\":\"uint232\"},{\"internalType\":\"uint8\",\"name\":\"chapter\",\"type\":\"uint8\"},{\"internalType\":\"enum Crawl.Terrain\",\"name\":\"terrain\",\"type\":\"uint8\"},{\"internalType\":\"enum Crawl.Dir\",\"name\":\"entryDir\",\"type\":\"uint8\"}],\"internalType\":\"struct Crawl.ChamberSeed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chapterNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"coord\",\"type\":\"uint256\"}],\"name\":\"getChamberMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIndexContract\",\"outputs\":[{\"internalType\":\"contract ICrawlerIndex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chapterNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"coord\",\"type\":\"uint256\"}],\"name\":\"getMapMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayerContract\",\"outputs\":[{\"internalType\":\"contract ICrawlerPlayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chapterNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"coord\",\"type\":\"uint256\"}],\"name\":\"getTokenMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromCoord\",\"type\":\"uint256\"},{\"internalType\":\"enum Crawl.Dir\",\"name\":\"dir\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintDoor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"index_\",\"type\":\"address\"}],\"name\":\"setIndexContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused_\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player_\",\"type\":\"address\"}],\"name\":\"setPlayerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInPwei_\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIdToCoord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIdToHoard\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Crawl.Gem\",\"name\":\"gemType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"coins\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"worth\",\"type\":\"uint16\"}],\"internalType\":\"struct Crawl.Hoard\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrawlerToken", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f2132d99159178560f96926cc1f263800b541227000000000000000000000000906a73b7be0513acfdceec13a874651e9b467d84000000000000000000000000ef373c00726f11830d3c622c7ca9c203b5262343", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}