{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FlashProtocol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IFlashStrategy.sol\\\";\\nimport \\\"./interfaces/IFlashFToken.sol\\\";\\nimport \\\"./interfaces/IFlashNFT.sol\\\";\\nimport \\\"./interfaces/IFlashFTokenFactory.sol\\\";\\n\\ncontract FlashProtocol is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable flashNFTAddress;\\n    address immutable flashFTokenFactoryAddress;\\n\\n    // Define the structure for each strategy\\n    struct StrategyInformation {\\n        address fTokenAddress;\\n        address principalTokenAddress;\\n    }\\n    mapping(address => StrategyInformation) strategies;\\n\\n    // This will store the NFT ID to StakeID mapping\\n    mapping(uint256 => uint256) nftIdMappingsToStakeIds;\\n\\n    // This will store how many stakes we have\\n    uint256 stakeCount = 0;\\n\\n    // The global fToken mint fee\\n    uint96 globalMintFee = 0;\\n    address globalMintFeeRecipient = 0x5089722613C2cCEe071C39C59e9889641f435F15;\\n\\n    // This defines the structure of the Stake information we store\\n    struct StakeStruct {\\n        address stakerAddress; // Address of staker\\n        address strategyAddress; // Address of strategy being used\\n        uint256 stakeStartTs; // Unix timestamp of when stake started\\n        uint256 stakeDuration; // Time in seconds from start time until stake ends\\n        uint256 stakedAmount; // The amount of tokens staked\\n        bool active; // Stake has been removed/unstaked\\n        uint256 nftId; // NFT id if set\\n        uint256 fTokensToUser; // How many fERC20 tokens were minted\\n        uint256 fTokensFee; // How many fERC20 tokens were taken as fee\\n        uint256 totalFTokenBurned;\\n        uint256 totalStakedWithdrawn;\\n    }\\n    mapping(uint256 => StakeStruct) stakes;\\n\\n    // Define events\\n    event StrategyRegistered(\\n        address indexed _strategyAddress,\\n        address indexed _principalTokenAddress,\\n        address indexed _fTokenAddress\\n    );\\n    event Staked(uint256 _stakeId);\\n    event Unstaked(uint256 _stakeId, uint256 _tokensReturned, uint256 _fTokensBurned, bool _stakeFinished);\\n    event NFTIssued(uint256 _stakeId, uint256 nftId);\\n\\n    constructor(address _flashNFTAddress, address _flashFTokenFactoryAddress) public {\\n        flashNFTAddress = _flashNFTAddress;\\n        flashFTokenFactoryAddress = _flashFTokenFactoryAddress;\\n    }\\n\\n    function registerStrategy(\\n        address _strategyAddress,\\n        address _principalTokenAddress,\\n        string calldata _fTokenName,\\n        string calldata _fTokenSymbol\\n    ) external {\\n        require(\\n            strategies[_strategyAddress].principalTokenAddress == address(0) &&\\n                _strategyAddress != address(0) &&\\n                _principalTokenAddress != address(0)\\n        );\\n\\n        address flashFToken = IFlashFTokenFactory(flashFTokenFactoryAddress).createFToken(_fTokenName, _fTokenSymbol);\\n\\n        // Store the appropriate information\\n        strategies[_strategyAddress].fTokenAddress = flashFToken;\\n        strategies[_strategyAddress].principalTokenAddress = _principalTokenAddress;\\n\\n        IFlashStrategy(_strategyAddress).setFTokenAddress(flashFToken);\\n\\n        emit StrategyRegistered(_strategyAddress, _principalTokenAddress, flashFToken);\\n    }\\n\\n    function stake(\\n        address _strategyAddress,\\n        uint256 _tokenAmount,\\n        uint256 _stakeDuration,\\n        address _fTokensTo,\\n        bool _issueNFT\\n    ) public nonReentrant returns (StakeStruct memory _stake) {\\n        require(strategies[_strategyAddress].principalTokenAddress != address(0));\\n        require(\\n            _stakeDuration >= 60 && _stakeDuration <= IFlashStrategy(_strategyAddress).getMaxStakeDuration(),\\n            \\\"ISD\\\"\\n        );\\n\\n        // Transfer the tokens from caller to the strategy contract\\n        IERC20(strategies[_strategyAddress].principalTokenAddress).safeTransferFrom(\\n            msg.sender,\\n            address(_strategyAddress),\\n            _tokenAmount\\n        );\\n\\n        // Determine how many fERC20 tokens to mint (ask strategy)\\n        uint256 tokensToMint = IFlashStrategy(_strategyAddress).quoteMintFToken(_tokenAmount, _stakeDuration);\\n\\n        // Deposit into the strategy\\n        uint256 principalAfterDeductions = IFlashStrategy(_strategyAddress).depositPrincipal(_tokenAmount);\\n\\n        // Calculate fee and if this is more than 0, transfer fee\\n        uint256 fee = (tokensToMint * globalMintFee) / 10000;\\n        if (fee > 0) {\\n            IFlashFToken(strategies[_strategyAddress].fTokenAddress).mint(globalMintFeeRecipient, fee);\\n        }\\n\\n        // Mint fERC20 tokens to the user\\n        IFlashFToken(strategies[_strategyAddress].fTokenAddress).mint(_fTokensTo, (tokensToMint - fee));\\n\\n        // Save the stake details\\n        stakeCount = stakeCount + 1;\\n        stakes[stakeCount] = StakeStruct(\\n            msg.sender,\\n            _strategyAddress,\\n            block.timestamp,\\n            _stakeDuration,\\n            principalAfterDeductions,\\n            true,\\n            0,\\n            (tokensToMint - fee),\\n            fee,\\n            0,\\n            0\\n        );\\n\\n        // Mint NFT if requested\\n        if (_issueNFT) {\\n            issueNFT(stakeCount);\\n        }\\n\\n        emit Staked(stakeCount);\\n\\n        return stakes[stakeCount];\\n    }\\n\\n    function unstake(\\n        uint256 _id,\\n        bool _isNFT,\\n        uint256 _fTokenToBurn\\n    ) external nonReentrant returns (uint256 _principalReturned, uint256 _fTokensBurned) {\\n        StakeStruct memory p;\\n        uint256 stakeId;\\n        address returnAddress;\\n        if (_isNFT) {\\n            stakeId = nftIdMappingsToStakeIds[_id];\\n            p = stakes[stakeId];\\n            returnAddress = msg.sender;\\n            require(p.nftId == _id, \\\"SNM\\\");\\n            require(IFlashNFT(flashNFTAddress).ownerOf(_id) == msg.sender, \\\"NNO\\\");\\n        } else {\\n            stakeId = _id;\\n            p = stakes[stakeId];\\n            returnAddress = p.stakerAddress;\\n\\n            require(p.nftId == 0, \\\"NTR\\\");\\n            require(p.stakerAddress == msg.sender, \\\"NSO\\\");\\n        }\\n        require(p.active == true, \\\"SNE\\\");\\n\\n        bool stakeFinished;\\n        uint256 principalToReturn;\\n        uint256 percentageIntoStake = (((block.timestamp - p.stakeStartTs) * (10**18)) / p.stakeDuration);\\n\\n        if (percentageIntoStake >= (10**18)) {\\n            // Stake has ended, simply return principal\\n            principalToReturn = p.stakedAmount - p.totalStakedWithdrawn;\\n            _fTokenToBurn = 0;\\n\\n            stakeFinished = true;\\n        } else {\\n            require(block.timestamp >= (p.stakeStartTs + 3600), \\\"MIN DUR 1HR\\\");\\n\\n            // Stake has not ended yet, user is trying to withdraw early\\n            uint256 fTokenBurnForFullUnstake = ((((10**18) - percentageIntoStake) * (p.fTokensToUser + p.fTokensFee)) /\\n                (10**18));\\n\\n            if (p.totalFTokenBurned > fTokenBurnForFullUnstake) {\\n                // The total number of fTokens burned is greater than the amount required, no burn required\\n                fTokenBurnForFullUnstake = 0;\\n            } else {\\n                fTokenBurnForFullUnstake = fTokenBurnForFullUnstake - p.totalFTokenBurned;\\n            }\\n\\n            // Ensure the user cannot burn more fTokens than required\\n            if (_fTokenToBurn > fTokenBurnForFullUnstake) {\\n                _fTokenToBurn = fTokenBurnForFullUnstake;\\n            }\\n\\n            // Is the user trying to withdraw everything early?\\n            if (_fTokenToBurn == fTokenBurnForFullUnstake) {\\n                // Yes, return all principal\\n                principalToReturn = p.stakedAmount - p.totalStakedWithdrawn;\\n                stakeFinished = true;\\n            } else {\\n                // No - only a partial withdraw\\n                principalToReturn =\\n                    (((_fTokenToBurn * (10**18)) / (p.fTokensToUser + p.fTokensFee)) * p.stakedAmount) /\\n                    (10**18);\\n            }\\n\\n            // Burn these fTokens\\n            IFlashFToken(strategies[p.strategyAddress].fTokenAddress).burnFrom(msg.sender, _fTokenToBurn);\\n\\n            // Update stake information\\n            stakes[stakeId].totalFTokenBurned = p.totalFTokenBurned + _fTokenToBurn;\\n            stakes[stakeId].totalStakedWithdrawn = p.totalStakedWithdrawn + principalToReturn;\\n        }\\n        require(principalToReturn > 0);\\n        require(p.stakedAmount >= stakes[stakeId].totalStakedWithdrawn);\\n\\n        // if the stake is finished, delete all data related to it (nice to have)\\n        if (stakeFinished) {\\n            delete stakes[stakeId];\\n        }\\n        // if the stake finished and it was NFT based, remove the mapping (nice to have)\\n        if (stakeFinished && _isNFT) {\\n            delete nftIdMappingsToStakeIds[_id];\\n        }\\n        emit Unstaked(stakeId, principalToReturn, _fTokenToBurn, stakeFinished);\\n\\n        // Remove tokens from Strategy and transfer to user\\n        IFlashStrategy(p.strategyAddress).withdrawPrincipal(principalToReturn);\\n        IERC20(strategies[p.strategyAddress].principalTokenAddress).safeTransfer(returnAddress, principalToReturn);\\n\\n        return (principalToReturn, _fTokenToBurn);\\n    }\\n\\n    function issueNFT(uint256 _stakeId) public returns (uint256 _nftId) {\\n        StakeStruct memory p = stakes[_stakeId];\\n        require(p.active == true && p.nftId == 0 && p.stakerAddress == msg.sender);\\n\\n        // Mint the NFT\\n        uint256 nftId = IFlashNFT(flashNFTAddress).mint(msg.sender);\\n\\n        // Store the NFT ID\\n        stakes[_stakeId].nftId = nftId;\\n\\n        // Update the NFT Mapping so we can look it up later\\n        nftIdMappingsToStakeIds[nftId] = _stakeId;\\n\\n        emit NFTIssued(_stakeId, nftId);\\n\\n        return nftId;\\n    }\\n\\n    function setMintFeeInfo(address _feeRecipient, uint96 _feePercentageBasis) external onlyOwner {\\n        require(_feePercentageBasis <= 2000);\\n        globalMintFeeRecipient = _feeRecipient;\\n        globalMintFee = _feePercentageBasis;\\n    }\\n\\n    function getStakeInfo(uint256 _id, bool _isNFT) external view returns (StakeStruct memory _stake) {\\n        uint256 stakeId;\\n        if (_isNFT) {\\n            stakeId = nftIdMappingsToStakeIds[_id];\\n            require(stakes[stakeId].nftId == _id);\\n        } else {\\n            stakeId = _id;\\n        }\\n\\n        return stakes[stakeId];\\n    }\\n\\n    function flashStake(\\n        address _strategyAddress,\\n        uint256 _tokenAmount,\\n        uint256 _stakeDuration,\\n        uint256 _minimumReceived,\\n        address _yieldTo,\\n        bool _mintNFT\\n    ) external {\\n        // Stake (re-direct fTokens to this contract)\\n        uint256 fTokensToUser = stake(_strategyAddress, _tokenAmount, _stakeDuration, address(this), _mintNFT)\\n            .fTokensToUser;\\n\\n        IERC20 fToken = IERC20(strategies[_strategyAddress].fTokenAddress);\\n\\n        // Approve, burn and send yield to specified address\\n        fToken.approve(_strategyAddress, fTokensToUser);\\n        IFlashStrategy(_strategyAddress).burnFToken(fTokensToUser, _minimumReceived, _yieldTo);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlashStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IFlashStrategy {\\n    event BurnedFToken(address indexed _address, uint256 _tokenAmount, uint256 _yieldReturned);\\n\\n    // This is how principal will be deposited into the contract\\n    // The Flash protocol allows the strategy to specify how much\\n    // should be registered. This allows the strategy to manipulate (eg take fee)\\n    // on the principal if the strategy requires\\n    function depositPrincipal(uint256 _tokenAmount) external returns (uint256);\\n\\n    // This is how principal will be returned from the contract\\n    function withdrawPrincipal(uint256 _tokenAmount) external;\\n\\n    // Responsible for instant upfront yield. Takes fERC20 tokens specific to this\\n    // strategy. The strategy is responsible for returning some amount of principal tokens\\n    function burnFToken(\\n        uint256 _tokenAmount,\\n        uint256 _minimumReturned,\\n        address _yieldTo\\n    ) external returns (uint256);\\n\\n    // This should return the current total of all principal within the contract\\n    function getPrincipalBalance() external view returns (uint256);\\n\\n    // This should return the current total of all yield generated to date (including bootstrapped tokens)\\n    function getYieldBalance() external view returns (uint256);\\n\\n    // This should return the principal token address (eg DAI)\\n    function getPrincipalAddress() external view returns (address);\\n\\n    // View function which quotes how many principal tokens would be returned if x\\n    // fERC20 tokens are burned\\n    function quoteMintFToken(uint256 _tokenAmount, uint256 duration) external view returns (uint256);\\n\\n    // View function which quotes how many principal tokens would be returned if x\\n    // fERC20 tokens are burned\\n    // IMPORTANT NOTE: This should utilise bootstrap tokens if they exist\\n    // bootstrapped tokens are any principal tokens that exist within the smart contract\\n    function quoteBurnFToken(uint256 _tokenAmount) external view returns (uint256);\\n\\n    // The function to set the fERC20 address within the strategy\\n    function setFTokenAddress(address _fTokenAddress) external;\\n\\n    // This should return what the maximum stake duration is\\n    function getMaxStakeDuration() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlashFToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IFlashFToken {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n\\n    function decimals() external returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlashNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IFlashNFT {\\n    function mint(address _recipientAddress) external returns (uint256);\\n\\n    function burn(uint256 _tokenId) external returns (bool);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlashFTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IFlashFTokenFactory {\\n    function createFToken(string calldata _fTokenName, string calldata _fTokenSymbol) external returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flashNFTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_flashFTokenFactoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"NFTIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_principalTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fTokenAddress\",\"type\":\"address\"}],\"name\":\"StrategyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fTokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_stakeFinished\",\"type\":\"bool\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"flashNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumReceived\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_yieldTo\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_mintNFT\",\"type\":\"bool\"}],\"name\":\"flashStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isNFT\",\"type\":\"bool\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeStartTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fTokensToUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fTokensFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFTokenBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedWithdrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct FlashProtocol.StakeStruct\",\"name\":\"_stake\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"issueNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_fTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fTokenSymbol\",\"type\":\"string\"}],\"name\":\"registerStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feePercentageBasis\",\"type\":\"uint96\"}],\"name\":\"setMintFeeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fTokensTo\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_issueNFT\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeStartTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fTokensToUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fTokensFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFTokenBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedWithdrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct FlashProtocol.StakeStruct\",\"name\":\"_stake\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isNFT\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_fTokenToBurn\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_principalReturned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fTokensBurned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FlashProtocol", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000003b090839c26fe3b2bdfa2f4cd7f3ab001ccdf73f00000000000000000000000005736a8d6bc208b9e3c9a7e20e7f53674aea6ab1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}