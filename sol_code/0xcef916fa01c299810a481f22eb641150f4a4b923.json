{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC721Receiver} interface.\r\n *\r\n * Accepts all token transfers.\r\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\r\n */\r\ncontract ERC721Holder is IERC721Receiver {\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: contracts/pioneer.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@&&&&&&&&&&&&&&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@&&######################&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@&&##//,,,,////////////##**&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@&&##////,,,,//////////##**&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@&&##//,,////,,,,//////##**&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@&&##////,,////,,,,////##**&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@&&##//////,,////,,,,//##**&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@&&&&&&&&######################**&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&**&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@&&,,,,,,,,,,,,,,,,,,,,,,,,**&&@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@&&,,,,  &&,,,,,,    &&,,,,,,,,**&&@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@&&,,,,,,  ,,&&&&&&,,  &&,,,,,,,,,,**&&@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@&&,,,,&&,,,,,,,,&&,,,,,,,,,,&&,,,,,,,,,,,,&&@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@&&&&,,,,&&,,,,,,&&,,&&,,,,,,,,&&,,,,,,,,,,,,,,&&@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@&&**&&,,,,&&,,,,,,&&&&&&,,,,,,,,&&,,&&,,,,,,,,,,&&@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@&&&&,,,,,,&&&&&&      &&&&&&&&,,,,,,&&,,,,,,&&@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@&&,,&&                      &&,,,,******&&@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@&&,,&&      &&  ..  &&        &&,,******&&@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@&&,,&&          &&            &&,,******&&@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@&&,,&&    ,,,,        ,,,,    &&,,******&&@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@&&**,,&&                    &&,,******&&@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@&&**,,&&                &&,,****&&&&@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@&&**,,&&&&......&&&&&&,,****&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@&&**,,,,&&&&&&,,,,,,********&&@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@&&**,,,,,,******,,,,,,,,,,******&&@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@&&**,,,,,,,,,,,,,,,,,,,,,,,,******&&@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@&&****&&,,,,,,,,,,,,,,,,,,&&,,********&&&&@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@&&****,,&&,,,,,,,,,,,,,,,,,,&&,,************&&@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@&&&&&&,,,,,,,,,,,,,,,,,,,,&&  &&,,&&,,**&&@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@&&  &&,,,,,,,,,,,,,,,,,,,,&&    &&&&&&&&@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@&&  &&,,,,,,,,,,,,,,,,,,,,&&      ....&&@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@&&&&,,,,,,,,,,**,,,,,,,,,,&&......&&@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@&&,,,,,,,,**&&@@&&,,,,,,,,**&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@&&,,,,,,,,**&&@@&&,,,,,,,,**&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@&&,,,,,,,,**&&@@&&,,,,,,,,**&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@&&,,,,,,,,**&&@@&&,,,,,,,,**&&@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@&&&&********&&@@&&**********&&@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@&&  ..  ....&&@@&&..  ..  &&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@&&  ..  ....&&@@&&..  ..  &&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   @@@@@@@@@@@@\r\n// @@@@@@@@@@@@  \u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588   \u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588   @@@@@@@@@@@@\r\n// @@@@@@@@@@@@   \u2591\u2588\u2588\u2588   \u2591\u2591\u2588\u2588\u2588 \u2588\u2588\u2588     \u2591\u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588    \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588  \u2588 \u2591    @@@@@@@@@@@@\r\n// @@@@@@@@@@@@   \u2591\u2588\u2588\u2588    \u2591\u2588\u2588\u2588\u2591\u2588\u2588\u2588      \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2591\u2588\u2588\u2588\u2588\u2588\u2588      @@@@@@@@@@@@\r\n// @@@@@@@@@@@@   \u2591\u2588\u2588\u2588    \u2591\u2588\u2588\u2588\u2591\u2588\u2588\u2588      \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591   \u2591\u2588\u2588\u2588\u2591\u2591\u2588      @@@@@@@@@@@@\r\n// @@@@@@@@@@@@   \u2591\u2588\u2588\u2588    \u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588     \u2588\u2588\u2588  \u2591\u2588\u2588\u2588         \u2591\u2588\u2588\u2588 \u2591   \u2588   @@@@@@@@@@@@\r\n// @@@@@@@@@@@@   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591   \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   @@@@@@@@@@@@\r\n// @@@@@@@@@@@@  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591      \u2591\u2591\u2591\u2591\u2591\u2591\u2591    \u2591\u2591\u2591\u2591\u2591        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    @@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n\r\ncontract Pioneer is ERC721Holder, Ownable, Pausable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public dopes;\r\n    IERC721 public dopers;\r\n\r\n    uint256 public totalClaimedDopes;\r\n    uint8 public winner; // if winner is 0 then not endgame\r\n    uint256 public endGameReward;\r\n\r\n    enum Species {\r\n        Human,\r\n        King,\r\n        Angel,\r\n        Devil,\r\n        Zombie\r\n    }\r\n\r\n    enum VoteSide {\r\n        None,\r\n        Angel,\r\n        Devil\r\n    }\r\n\r\n    uint8 public constant MAX_SPECIES = 5;\r\n    uint8 public constant MAX_LAYER = 3;\r\n    uint8 public constant MAX_CASTLE_SIZE = 61;\r\n    uint8 public constant MAX_LEVEL = 5;\r\n    uint8 public constant WINNER_BENEFIT_RATIO = 30; //\ucc9c\uc0ac \uc545\ub9c8 \uc774\uae38\ub54c claim \ube44\uc728(30% \ucd94\uac00 Claim)\r\n    uint8 public constant DOUBLE_WINNER_BENEFIT_RATIO = 50; //\ucc9c\uc0ac \uc545\ub9c8 2\ubc30 \uc774\uc0c1 \uc774\uae38\ub54c claim \ube44\uc728(50% \ucd94\uac00 Claim)\r\n    uint8 public constant FARM_BENEFIT_RATIO = 10;\r\n    uint8 public constant ANGEL_WINNING_BENEFIT_RATIO = 2;\r\n    uint8 public constant MAX_ZOMBIES = 5; // \uc131\ub2f9 \ucd5c\ub300 \uc880\ube44 \uc218\r\n    uint16 public constant BLOCKS_PER_DAY = 7200; // \uc880\ube44 \ucd5c\ub300 \uc788\uc744 \uc2dc\uac04(\ucd5c\ub300 3\uc77c)\r\n    uint16 public constant BLOCKS_PER_WEEK = 50400;\r\n    uint256 public constant CASTLE_PRICE = 2 * 10**5 * 10**18;\r\n    uint256 public constant FLOATING_FACTOR = 10**9;\r\n\r\n    //Game balance parameters\r\n    uint8 public DELTA = 30; // \ud1a0\ud06c\ub178\ubbf9\uc2a4\ub97c \uc704\ud55c \uc870\uc815 \ubcc0\uc218\r\n    uint16 public BARRICADE_PRICE = 5000;\r\n    uint16 public ZOMBIE_TIME = 3000;\r\n    uint32 public BLOCKS_PER_3DAYS = 21600; // \uc880\ube44 \ucd5c\ub300 \uc788\uc744 \uc2dc\uac04(\ucd5c\ub300 3\uc77c)\r\n    uint32 public ZOMBIE_DELTA = 200000;\r\n    uint256 public TEMPLE_PRICE = 1 * 10**6 * 10**18;\r\n\r\n    struct Castle {\r\n        bool hasFarm;\r\n        uint8 barricades;\r\n        uint8 level;\r\n        uint8 zombies;\r\n        uint16 workers;\r\n        uint256 angelInfluences;\r\n        uint256 devilInfluences;\r\n        uint256 ownerTokenID; // \uc131 \uc8fc\uc778\r\n        uint256 taxPool; // castle\uc5d0 \uc313\uc778 \uc138\uae08\ub7c9\r\n        uint256 balance; // \ud604\uc7ac dope \ubcf4\uc720\ub7c9\r\n        uint256 lastAttackedBlock;\r\n    }\r\n\r\n    struct Character {\r\n        uint8 voteSide; // 0 : none, 1 : angel side, 2 : devil side\r\n        uint8 castleId; // 0 : null castle, 1 ~ : castle number | \uce90\ub9ad\ud130\uac00 \ud604\uc7ac \uc788\ub294 \uce90\uc2ac\r\n        uint8 species; // default 0 -> human, 1 -> king, 2 -> angel, 3 -> devil, 4 -> zombie\r\n        uint8 level; // \uac15\ud654\ub3c4\r\n        bool claimable;\r\n        bool isCastleOwner;\r\n        uint256 lastActionedBlock;\r\n    }\r\n\r\n    struct CastleLevel {\r\n        uint8 taxRatio; // 10, 9, 8, 7, 5\r\n        uint256 upgradeBalance;\r\n        uint256 levelUpPrice; // 27 * 10**3 * 10**DECIMAL, 32 * 10**3 * 10**DECIMAL, 35 * 10**3 * 10**DECIMAL, 4 * 10**4 * 10**DECIMAL, 0\r\n    }\r\n\r\n    struct Zombie {\r\n        uint256 lastAttackedBlock; // \ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc131\uc744 \uacf5\uaca9\ud55c\uc2dc\uac04\r\n    }\r\n\r\n    // \ub808\uc774\uc5b4\ub9c8\ub2e4 \uc131\uc774 \uc788\uace0, \ucc98\uc74c\uc5d0 \uacf5\uac1c\ub418\ub294 \ub808\uc774\uc5b8\uc740 0\ubc88 \ub808\uc774\uc5b4. \ub2e4\uc74c \ub808\uc774\uc5b4\uac00 \uacf5\uac1c\ub418\ub824\uba74 \uc5ec\uae30\uc5d0 \uc815\uc758\ub41c \uc218 \uc774\uc0c1\uc758 \uc131\uc774 activate\uc0c1\ud0dc\uc5ec\uc57c\ud55c\ub2e4.\r\n    uint256[MAX_LAYER] public layerCondition = [\r\n        0,\r\n        20 * 10**6 * 10**18,\r\n        36 * 10**7 * 10**18\r\n    ];\r\n    uint8[MAX_LAYER] public castleIdxByLayer = [4, 32, 60];\r\n    uint8[MAX_SPECIES] public dopenesses = [20, 30, 40, 40, 40];\r\n    uint8[MAX_LEVEL] public dopenessesByUpgrade = [6, 15, 27, 42, 60];\r\n\r\n    // castle level\uc5d0 \ub530\ub978 \uc138\uae08\ub960\r\n    CastleLevel[MAX_LEVEL + 1] public castleInfoByLevel; // default is 1\r\n\r\n    uint256 public totalAngelInfluences; // \uc804\uccb4 Angel\uc758 voting power\r\n    uint256 public totalDevilInfluences; // \uc804\uccb4 Devil\uc758 voting power\r\n\r\n    mapping(uint256 => Character) public characters; // tokenId to Character\r\n    mapping(uint8 => Castle) public castles;\r\n    address public templeSink; //addreess to receive DOPES from temple purchases\r\n\r\n    constructor(\r\n        address dopersAddress,\r\n        address dopesAddress,\r\n        address _templeSink\r\n    ) {\r\n        dopers = IERC721(dopersAddress);\r\n        dopes = IERC20(dopesAddress);\r\n        templeSink = _templeSink;\r\n\r\n        castleInfoByLevel[0] = CastleLevel({\r\n            taxRatio: 10,\r\n            upgradeBalance: 4 * 10**6 * 10**18,\r\n            levelUpPrice: 0\r\n        });\r\n        castleInfoByLevel[1] = CastleLevel({\r\n            taxRatio: 10,\r\n            upgradeBalance: 4 * 10**6 * 10**18,\r\n            levelUpPrice: 0\r\n        });\r\n        castleInfoByLevel[2] = CastleLevel({\r\n            taxRatio: 9,\r\n            upgradeBalance: 12 * 10**5 * 10**18,\r\n            levelUpPrice: 27 * 10**3 * 10**18\r\n        });\r\n        castleInfoByLevel[3] = CastleLevel({\r\n            taxRatio: 8,\r\n            upgradeBalance: 16 * 10**5 * 10**18,\r\n            levelUpPrice: 32 * 10**3 * 10**18\r\n        });\r\n        castleInfoByLevel[4] = CastleLevel({\r\n            taxRatio: 7,\r\n            upgradeBalance: 2 * 10**6 * 10**18,\r\n            levelUpPrice: 35 * 10**3 * 10**18\r\n        });\r\n        castleInfoByLevel[5] = CastleLevel({\r\n            taxRatio: 5,\r\n            upgradeBalance: 32 * 10**5 * 10**18,\r\n            levelUpPrice: 4 * 10**4 * 10**18\r\n        });\r\n\r\n        uint256 initialBalance = castleInfoByLevel[0].upgradeBalance * 3;\r\n        castles[1] = Castle({\r\n            hasFarm: false,\r\n            barricades: 0,\r\n            level: 5,\r\n            zombies: 0,\r\n            workers: 0,\r\n            angelInfluences: 0,\r\n            devilInfluences: 0,\r\n            ownerTokenID: 0,\r\n            taxPool: 0,\r\n            balance: initialBalance,\r\n            lastAttackedBlock: 0\r\n        });\r\n        castles[2] = Castle({\r\n            hasFarm: false,\r\n            barricades: 0,\r\n            level: 5,\r\n            zombies: 0,\r\n            workers: 0,\r\n            angelInfluences: 0,\r\n            devilInfluences: 0,\r\n            ownerTokenID: 0,\r\n            taxPool: 0,\r\n            balance: initialBalance,\r\n            lastAttackedBlock: 0\r\n        });\r\n        castles[3] = Castle({\r\n            hasFarm: false,\r\n            barricades: 0,\r\n            level: 5,\r\n            zombies: 0,\r\n            workers: 0,\r\n            angelInfluences: 0,\r\n            devilInfluences: 0,\r\n            ownerTokenID: 0,\r\n            taxPool: 0,\r\n            balance: initialBalance,\r\n            lastAttackedBlock: 0\r\n        });\r\n        castles[4] = Castle({\r\n            hasFarm: false,\r\n            barricades: 0,\r\n            level: 5,\r\n            zombies: 0,\r\n            workers: 0,\r\n            angelInfluences: 0,\r\n            devilInfluences: 0,\r\n            ownerTokenID: 0,\r\n            taxPool: 0,\r\n            balance: initialBalance,\r\n            lastAttackedBlock: 0\r\n        });\r\n\r\n        _pause();\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function ownerOfCastle(uint8 castleId)\r\n        public\r\n        view\r\n        verifyCastle(castleId, true)\r\n        returns (address)\r\n    {\r\n        return dopers.ownerOf(castles[castleId].ownerTokenID);\r\n    }\r\n\r\n    function calculationRewards(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 reward,\r\n            uint256 tax,\r\n            bool isBuzzerBeater\r\n        )\r\n    {\r\n        uint8 castleId = characters[tokenId].castleId;\r\n        uint256 balance = castles[castleId].balance;\r\n\r\n        if (castleId == 0 || balance == 0) return (0, 0, false);\r\n\r\n        isBuzzerBeater = false;\r\n        uint8 species = characters[tokenId].species;\r\n        uint8 taxRate = 0;\r\n\r\n        reward = _min(\r\n            block.number - characters[tokenId].lastActionedBlock,\r\n            (\r\n                species == uint8(Species.Zombie)\r\n                    ? BLOCKS_PER_3DAYS\r\n                    : BLOCKS_PER_WEEK\r\n            )\r\n        );\r\n\r\n        // balance factor\r\n        if (balance <= 10**6 * 10**18) {\r\n            reward *= 7;\r\n        } else if (balance <= 2 * 10**6 * 10**18) {\r\n            reward *= 8;\r\n        } else if (balance <= 3 * 10**6 * 10**18) {\r\n            reward *= 9;\r\n        } else if (balance <= 4 * 10**6 * 10**18) {\r\n            reward *= 10;\r\n        } else {\r\n            reward *= 11;\r\n        }\r\n\r\n        reward *=\r\n            dopenesses[characters[tokenId].species] +\r\n            (\r\n                characters[tokenId].level > 0\r\n                    ? dopenessesByUpgrade[characters[tokenId].level - 1]\r\n                    : 0\r\n            );\r\n\r\n        if (species == uint8(Species.Zombie)) {\r\n            reward *= castles[castleId].workers;\r\n            reward *= ZOMBIE_DELTA;\r\n        } else {\r\n            // production speed\r\n            uint8 productionSpeedRatio = 100;\r\n            if (castles[castleId].hasFarm) {\r\n                productionSpeedRatio += FARM_BENEFIT_RATIO;\r\n            }\r\n            if (totalAngelInfluences > totalDevilInfluences) {\r\n                // \ubc38\ub7f0\uc2f1~~ Peace!\r\n                productionSpeedRatio += totalAngelInfluences >=\r\n                    totalDevilInfluences * 2\r\n                    ? 0\r\n                    : ANGEL_WINNING_BENEFIT_RATIO;\r\n            } else if (totalAngelInfluences < totalDevilInfluences) {\r\n                productionSpeedRatio -= ANGEL_WINNING_BENEFIT_RATIO;\r\n            }\r\n\r\n            reward *= productionSpeedRatio;\r\n\r\n            uint8 winningRatio = 100;\r\n            if (species == uint8(Species.Angel)) {\r\n                if (\r\n                    castles[castleId].angelInfluences >\r\n                    castles[castleId].devilInfluences\r\n                ) {\r\n                    winningRatio += castles[castleId].angelInfluences >=\r\n                        castles[castleId].devilInfluences * 2\r\n                        ? 30\r\n                        : 10;\r\n                }\r\n            } else if (species == uint8(Species.Devil)) {\r\n                if (\r\n                    castles[castleId].devilInfluences >\r\n                    castles[castleId].angelInfluences\r\n                ) {\r\n                    winningRatio += castles[castleId].devilInfluences >=\r\n                        castles[castleId].angelInfluences * 2\r\n                        ? 30\r\n                        : 10;\r\n                }\r\n            }\r\n\r\n            reward *= winningRatio;\r\n            // Zombie effect\r\n            uint8 zombieDecayRate = 10;\r\n            if (\r\n                (block.number - castles[castleId].lastAttackedBlock) <\r\n                BLOCKS_PER_3DAYS\r\n            ) {\r\n                zombieDecayRate -= castles[castleId].zombies;\r\n            }\r\n\r\n            reward *= zombieDecayRate;\r\n            reward *= DELTA;\r\n\r\n            if (species != uint8(Species.King)) {\r\n                if (castles[castleId].level != 0) {\r\n                    taxRate = castleInfoByLevel[castles[castleId].level]\r\n                        .taxRatio;\r\n                }\r\n            }\r\n        }\r\n\r\n        reward *= FLOATING_FACTOR;\r\n        if (balance <= reward) {\r\n            reward = castles[castleId].balance;\r\n            tax = (reward * taxRate) / 10**2;\r\n            if (castles[castleId].level != 0) {\r\n                reward += 20000 * 10**18 * castles[castleId].level;\r\n                isBuzzerBeater = true;\r\n            }\r\n        } else {\r\n            tax = (reward * taxRate) / 10**2;\r\n        }\r\n\r\n        reward -= tax;\r\n\r\n        return (reward, tax, isBuzzerBeater);\r\n    }\r\n\r\n    /* ========== INTERNALS ========== */\r\n\r\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function _influence(\r\n        uint8 voteSide,\r\n        uint8 castleId,\r\n        uint8 dopeness,\r\n        bool isPositive\r\n    ) internal {\r\n        if (voteSide == uint8(VoteSide.Angel)) {\r\n            if (isPositive) {\r\n                castles[castleId].angelInfluences += dopeness;\r\n                totalAngelInfluences += dopeness;\r\n            } else {\r\n                castles[castleId].angelInfluences -= dopeness;\r\n                totalAngelInfluences -= dopeness;\r\n            }\r\n        } else {\r\n            if (isPositive) {\r\n                castles[castleId].devilInfluences += dopeness;\r\n                totalDevilInfluences += dopeness;\r\n            } else {\r\n                castles[castleId].devilInfluences -= dopeness;\r\n                totalDevilInfluences -= dopeness;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _sendReward(\r\n        uint256 tokenId,\r\n        uint8 castleId,\r\n        uint256 reward,\r\n        uint256 tax,\r\n        bool isBuzzerBeater\r\n    ) internal {\r\n        // accumulate tax\r\n        castles[castleId].taxPool += tax;\r\n\r\n        // send reward\r\n        dopes.safeTransfer(_msgSender(), reward);\r\n        totalClaimedDopes += reward;\r\n\r\n        if (isBuzzerBeater) {\r\n            emit BuzzerBeater(\r\n                _msgSender(),\r\n                tokenId,\r\n                castleId,\r\n                castles[castleId].level\r\n            );\r\n            castles[castleId].balance = 0;\r\n        } else {\r\n            castles[castleId].balance -= (reward + tax);\r\n        }\r\n    }\r\n\r\n    function _isCastleActivated(uint8 castleId) internal view returns (bool) {\r\n        if (castleId > 0 && castleId <= castleIdxByLayer[0]) return true;\r\n        if (\r\n            (castleId > castleIdxByLayer[0] &&\r\n                castleId <= castleIdxByLayer[1]) &&\r\n            totalClaimedDopes >= layerCondition[1]\r\n        ) {\r\n            return true;\r\n        }\r\n        if (\r\n            (castleId > castleIdxByLayer[1] &&\r\n                castleId <= castleIdxByLayer[2]) &&\r\n            totalClaimedDopes >= layerCondition[2]\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _infect(\r\n        uint256 tokenId,\r\n        uint8 castleId,\r\n        uint8 oldCastleId\r\n    ) internal isAvailableZombie(tokenId, castleId) {\r\n        if (castles[castleId].barricades == 0) {\r\n            // infect case\r\n            require(\r\n                castles[castleId].zombies < MAX_ZOMBIES,\r\n                \"reached the maximum zombie limit\"\r\n            );\r\n            castles[castleId].zombies++;\r\n            castles[castleId].lastAttackedBlock = block.number;\r\n\r\n            if (oldCastleId != 0) {\r\n                castles[oldCastleId].zombies--;\r\n            }\r\n\r\n            characters[tokenId].castleId = castleId;\r\n            characters[tokenId].lastActionedBlock = block.number;\r\n        } else {\r\n            // demolish barricades case\r\n            if (oldCastleId != 0) {\r\n                castles[oldCastleId].zombies--;\r\n                characters[tokenId].castleId = 0;\r\n            }\r\n            castles[castleId].barricades--;\r\n            characters[tokenId].lastActionedBlock = block.number;\r\n\r\n            uint256 demolishReward = BARRICADE_PRICE * 10**18;\r\n            emit AttackBarricade(\r\n                _msgSender(),\r\n                tokenId,\r\n                castleId,\r\n                demolishReward\r\n            );\r\n\r\n            dopes.safeTransfer(_msgSender(), demolishReward);\r\n        }\r\n    }\r\n\r\n    /* ========== EXTERNALS ========== */\r\n\r\n    function work(\r\n        uint256[] memory tokenIds,\r\n        uint256[] calldata oldCastleIds,\r\n        uint8 castleId,\r\n        uint8 voteSide\r\n    ) external nonReentrant whenNotPaused verifyCastle(castleId, true) {\r\n        // 1. idle \uc0c1\ud0dc\uc5d0\uc11c work\r\n        // 2. work \uc0c1\ud0dc\uc5d0\uc11c \ub2e4\ub978 \uc131\uc73c\ub85c work\r\n        // 3. zombie\uc758 \uacbd\uc6b0 \ubc14\uc774\ucf00\uc774\ub4dc\uac00 \uc788\uc73c\uba74 demolish\r\n        require(tokenIds.length != 0, \"no tokenIds provided\");\r\n\r\n        uint256 totalReward = 0;\r\n        uint256 totalTax = 0;\r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            uint8 oldCastleId = characters[tokenId].castleId;\r\n\r\n            require(oldCastleId != castleId, \"already exists in this castle\");\r\n            require(\r\n                _msgSender() == dopers.ownerOf(tokenId),\r\n                \"msg sender is not doper's owner\"\r\n            );\r\n\r\n            (uint256 reward, uint256 tax, bool isBuzzerBeater) = this\r\n                .calculationRewards(tokenId);\r\n\r\n            uint8 species = characters[tokenId].species;\r\n            if (species == uint8(Species.Zombie)) {\r\n                _infect(tokenId, castleId, oldCastleId);\r\n            } else {\r\n                if (\r\n                    species == uint8(Species.Human) ||\r\n                    species == uint8(Species.King)\r\n                ) {\r\n                    require(\r\n                        voteSide != uint8(VoteSide.None),\r\n                        \"human or king dopers must vote\"\r\n                    );\r\n                    require(voteSide <= uint8(VoteSide.Devil), \"invalid vote\");\r\n                    uint8 dopeness = dopenesses[species];\r\n\r\n                    if (oldCastleId == 0) {\r\n                        characters[tokenId].voteSide = voteSide;\r\n                        _influence(voteSide, castleId, dopeness, true);\r\n                    } else {\r\n                        _influence(\r\n                            characters[tokenId].voteSide,\r\n                            oldCastleId,\r\n                            dopeness,\r\n                            false\r\n                        );\r\n\r\n                        characters[tokenId].voteSide = voteSide;\r\n\r\n                        _influence(voteSide, castleId, dopeness, true);\r\n                    }\r\n                }\r\n\r\n                castles[castleId].workers++;\r\n\r\n                if (oldCastleId != 0) {\r\n                    castles[oldCastleId].workers--;\r\n                }\r\n\r\n                characters[tokenId].castleId = castleId;\r\n                characters[tokenId].lastActionedBlock = block.number;\r\n            }\r\n\r\n            if (reward > 0) {\r\n                _sendReward(tokenId, oldCastleId, reward, tax, isBuzzerBeater);\r\n\r\n                totalTax += tax;\r\n                totalReward += reward;\r\n            }\r\n        }\r\n        emit Claim(_msgSender(), tokenIds, totalReward, totalTax);\r\n        emit Worked(_msgSender(), tokenIds, oldCastleIds, castleId);\r\n    }\r\n\r\n    function claimDope(uint256[] memory tokenIds) external nonReentrant {\r\n        require(tokenIds.length != 0, \"no tokenIds provided\");\r\n\r\n        uint256 totalReward = 0;\r\n        uint256 totalTax = 0;\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            require(\r\n                _msgSender() == dopers.ownerOf(tokenIds[i]),\r\n                \"msg sender is not doper's owner\"\r\n            );\r\n            require(\r\n                characters[tokenIds[i]].species != uint8(Species.Zombie),\r\n                \"zombies can not directly claim\"\r\n            );\r\n\r\n            (uint256 reward, uint256 tax, bool isBuzzerBeater) = this\r\n                .calculationRewards(tokenIds[i]);\r\n\r\n            if (reward > 0) {\r\n                _sendReward(\r\n                    tokenIds[i],\r\n                    characters[tokenIds[i]].castleId,\r\n                    reward,\r\n                    tax,\r\n                    isBuzzerBeater\r\n                );\r\n\r\n                totalTax += tax;\r\n                totalReward += reward;\r\n\r\n                characters[tokenIds[i]].lastActionedBlock = block.number;\r\n            }\r\n\r\n            if (isBuzzerBeater) break;\r\n        }\r\n        emit Claim(_msgSender(), tokenIds, totalReward, totalTax);\r\n    }\r\n \r\n    function upgradeDoper(uint256 tokenId, uint8 level)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n        onlyDoperOwner(tokenId)\r\n    {\r\n        require(level <= MAX_LEVEL, \"invalid level\");\r\n        uint8 castleId = characters[tokenId].castleId;\r\n        require(castleId > castleIdxByLayer[0], \"invalid castle\");\r\n        require(\r\n            characters[tokenId].level < level,\r\n            \"level has already been reached\"\r\n        );\r\n        require(castles[castleId].level >= level, \"insufficient castle level\");\r\n        uint256 price = (dopenessesByUpgrade[level - 1] -\r\n            (\r\n                characters[tokenId].level == 0\r\n                    ? 0\r\n                    : dopenessesByUpgrade[characters[tokenId].level - 1]\r\n            )) * 1000;\r\n\r\n        if (totalDevilInfluences > totalAngelInfluences) {\r\n            price *= totalDevilInfluences > totalAngelInfluences * 2 ? 10 : 8;\r\n        } else if (totalDevilInfluences < totalAngelInfluences) {\r\n            price *= 12;\r\n        } else {\r\n            // it handles totalDevilInfluences == totalAngelInfluences\r\n            price *= 10;\r\n        }\r\n\r\n        price *= 10**17;\r\n        dopes.safeTransferFrom(_msgSender(), address(this), price);\r\n        characters[tokenId].level = level;\r\n\r\n        emit UpgradeDoper(_msgSender(), tokenId, level);\r\n    }\r\n\r\n    function multiUpgradeDoper(uint256[] memory tokenId, uint8[] memory level)\r\n        public\r\n        nonReentrant\r\n        whenNotPaused\r\n    {\r\n        for (uint256 i = 0; i < tokenId.length; i++) {\r\n            require(level[i] <= MAX_LEVEL, \"invalid level\");\r\n            uint8 castleId = characters[tokenId[i]].castleId;\r\n            require(castleId > castleIdxByLayer[0], \"invalid castle\");\r\n            require(\r\n                characters[tokenId[i]].level < level[i],\r\n                \"level has already been reached\"\r\n            );\r\n            require(\r\n                castles[castleId].level >= level[i],\r\n                \"insufficient castle level\"\r\n            );\r\n            uint256 price = (dopenessesByUpgrade[level[i] - 1] -\r\n                (\r\n                    characters[tokenId[i]].level == 0\r\n                        ? 0\r\n                        : dopenessesByUpgrade[characters[tokenId[i]].level - 1]\r\n                )) * 1000;\r\n\r\n            if (totalDevilInfluences > totalAngelInfluences) {\r\n                price *= totalDevilInfluences > totalAngelInfluences * 2\r\n                    ? 10\r\n                    : 8;\r\n            } else if (totalDevilInfluences < totalAngelInfluences) {\r\n                price *= 12;\r\n            } else {\r\n                // it handles totalDevilInfluences == totalAngelInfluences\r\n                price *= 10;\r\n            }\r\n\r\n            price *= 10**17;\r\n            dopes.safeTransferFrom(_msgSender(), address(this), price);\r\n            characters[tokenId[i]].level = level[i];\r\n\r\n            emit UpgradeDoper(_msgSender(), tokenId[i], level[i]);\r\n        }\r\n    }\r\n\r\n    /*************\r\n     * For King *\r\n     *************/\r\n\r\n    function purchaseCastle(uint256 tokenId, uint8 castleId)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n        onlyDoperOwner(tokenId)\r\n        verifyCastle(castleId, false)\r\n    {\r\n        require(\r\n            castleId > castleIdxByLayer[0],\r\n            \"init castle cannot be purchased\"\r\n        );\r\n        require(\r\n            characters[tokenId].species == uint8(Species.King),\r\n            \"doper must be king\"\r\n        );\r\n        require(_isCastleActivated(castleId), \"castle is not activated\");\r\n        require(\r\n            characters[tokenId].isCastleOwner == false,\r\n            \"A king already has a castle.\"\r\n        );\r\n\r\n        dopes.safeTransferFrom(_msgSender(), address(this), CASTLE_PRICE);\r\n\r\n        castles[castleId] = Castle({\r\n            hasFarm: false,\r\n            barricades: 0,\r\n            level: 1,\r\n            zombies: 0,\r\n            workers: 0,\r\n            angelInfluences: 0,\r\n            devilInfluences: 0,\r\n            ownerTokenID: tokenId,\r\n            taxPool: 0,\r\n            balance: castleInfoByLevel[0].upgradeBalance,\r\n            lastAttackedBlock: 0\r\n        });\r\n\r\n        characters[tokenId].isCastleOwner = true;\r\n\r\n        emit PurchaseCastle(_msgSender(), castleId);\r\n    }\r\n\r\n    function purchaseTemple(uint256 tokenId)\r\n        external\r\n        nonReentrant\r\n        onlyDoperOwner(tokenId)\r\n    {\r\n        require(\r\n            block.number >= BLOCKS_PER_DAY + castles[0].lastAttackedBlock,\r\n            \"too soon to buy the temple again\"\r\n        );\r\n        require(\r\n            characters[tokenId].species == uint8(Species.King),\r\n            \"doper must be king\"\r\n        );\r\n        require(castles[0].ownerTokenID != tokenId, \"You already own the temple\");\r\n        dopes.safeTransferFrom(_msgSender(), templeSink, TEMPLE_PRICE);\r\n\r\n        castles[0].ownerTokenID = tokenId;\r\n        castles[0].lastAttackedBlock = block.number;\r\n\r\n        emit PurchaseCastle(_msgSender(), 0);\r\n    }\r\n\r\n    function upgradeCastle(uint8 castleId)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n        onlyCastleOwner(castleId)\r\n        verifyCastle(castleId, true)\r\n    {\r\n        require(castles[castleId].balance == 0, \"castle balance remains\");\r\n        require(\r\n            castles[castleId].level < MAX_LEVEL,\r\n            \"castle already reached max level\"\r\n        );\r\n        uint256 price = castleInfoByLevel[castles[castleId].level + 1]\r\n            .levelUpPrice;\r\n        dopes.safeTransferFrom(_msgSender(), address(this), price);\r\n        castles[castleId].level++;\r\n        castles[castleId].balance = castleInfoByLevel[castles[castleId].level]\r\n            .upgradeBalance;\r\n        emit UpgradeCastle(_msgSender(), castleId, castles[castleId].level);\r\n    }\r\n\r\n    function claimTax(uint8 castleId)\r\n        external\r\n        nonReentrant\r\n        onlyCastleOwner(castleId)\r\n        verifyCastle(castleId, true)\r\n    {\r\n        require(castles[castleId].taxPool > 0, \"taxpool is empty\");\r\n        dopes.safeTransfer(_msgSender(), castles[castleId].taxPool);\r\n        totalClaimedDopes += castles[castleId].taxPool;\r\n\r\n        emit ClaimTax(_msgSender(), castleId, castles[castleId].taxPool);\r\n        castles[castleId].taxPool = 0;\r\n    }\r\n\r\n    function buildFarm(uint8 castleId)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n        onlyCastleOwner(castleId)\r\n        verifyCastle(castleId, true)\r\n    {\r\n        require(\r\n            castles[castleId].hasFarm == false,\r\n            \"farm has already been installed\"\r\n        );\r\n        uint256 price = 60000;\r\n        if (castles[castleId].level == 2) {\r\n            price -= 20000;\r\n        } else if (castles[castleId].level == 3) {\r\n            price -= 26000;\r\n        } else if (castles[castleId].level == 4) {\r\n            price -= 34000;\r\n        } else if (castles[castleId].level == 5) {\r\n            price -= 44000;\r\n        }\r\n        price *= 10**18;\r\n        dopes.safeTransferFrom(_msgSender(), address(this), price);\r\n        castles[castleId].hasFarm = true;\r\n        emit PurchaseFarm(_msgSender(), castleId, price);\r\n    }\r\n\r\n    function buildBarricade(uint8 castleId, uint8 amount)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n        onlyCastleOwner(castleId)\r\n        verifyCastle(castleId, true)\r\n    {\r\n        require(\r\n            castles[castleId].barricades + amount <= 5,\r\n            \"exceeded installable barricades\"\r\n        );\r\n\r\n        uint256 price = BARRICADE_PRICE * 10**18 * amount;\r\n        dopes.safeTransferFrom(_msgSender(), address(this), price);\r\n        castles[castleId].barricades += amount;\r\n        emit PurchaseBarricades(_msgSender(), castleId, amount, price);\r\n    }\r\n\r\n    /*************\r\n     * For EndGame *\r\n     *************/\r\n\r\n    function endGameClaim(uint256 tokenId)\r\n        external\r\n        onlyDoperOwner(tokenId)\r\n        nonReentrant\r\n    {\r\n        require(winner != 0, \"The game is not over yet.\");\r\n        require(\r\n            characters[tokenId].claimable == false,\r\n            \"have already been paid\"\r\n        );\r\n\r\n        uint8 species = characters[tokenId].species;\r\n        require(\r\n            species == uint8(Species.Angel) || species == uint8(Species.Devil),\r\n            \"doper must be immortal\"\r\n        );\r\n\r\n        if (winner == uint8(Species.Angel)) {\r\n            require(species == uint8(Species.Angel), \"winner is angel\");\r\n        } else {\r\n            // winner == uint8(Species.Devil) case\r\n            require(species == uint8(Species.Devil), \"winner is devil\");\r\n        }\r\n\r\n        characters[tokenId].claimable = true;\r\n        dopes.safeTransfer(_msgSender(), endGameReward);\r\n        emit EndGameClaim(_msgSender(), tokenId);\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function setGameParameters(\r\n        uint8 _delta,\r\n        uint16 _barricadePrice,\r\n        uint16 _zombieTime,\r\n        uint32 _blocksPerThreeDays,\r\n        uint32 _zombieDelta,\r\n        uint256 _templePrice\r\n    ) external onlyOwner whenPaused {\r\n        DELTA = _delta;\r\n        BARRICADE_PRICE = _barricadePrice;\r\n        ZOMBIE_TIME = _zombieTime;\r\n        BLOCKS_PER_3DAYS = _blocksPerThreeDays;\r\n        ZOMBIE_DELTA = _zombieDelta;\r\n        TEMPLE_PRICE = _templePrice;\r\n    }\r\n\r\n    function registerDoper(uint256[] memory tokenIds, uint8 species)\r\n        external\r\n        whenPaused\r\n        onlyOwner\r\n    {\r\n        require(tokenIds.length != 0, \"no tokenIds provided\");\r\n        require(\r\n            species >= uint8(Species.Human) && species <= uint8(Species.Zombie),\r\n            \"invalid species\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            require(tokenIds[i] >= 0 && tokenIds[i] < 10000, \"invalid tokenId\");\r\n            characters[tokenIds[i]].species = species;\r\n        }\r\n    }\r\n\r\n    function endgame() external onlyOwner {\r\n        require(winner == 0, \"The game is already over\");\r\n        require(totalClaimedDopes > 6 * 10**26, \"can't end the game hastily\");\r\n        require(\r\n            totalAngelInfluences != totalDevilInfluences,\r\n            \"There must be a winner\"\r\n        );\r\n        endGameReward = dopes.balanceOf(address(this)) / 500;\r\n        winner = totalAngelInfluences > totalDevilInfluences\r\n            ? uint8(Species.Angel)\r\n            : uint8(Species.Devil);\r\n        _pause();\r\n        emit EndGame(totalAngelInfluences, totalDevilInfluences);\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyCastleOwner(uint8 castleId) {\r\n        require(\r\n            dopers.ownerOf(castles[castleId].ownerTokenID) == _msgSender(),\r\n            \"msg sender is not castle's owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyDoperOwner(uint256 tokenId) {\r\n        require(\r\n            dopers.ownerOf(tokenId) == _msgSender(),\r\n            \"msg sender is not token owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier verifyCastle(uint8 castleId, bool saled) {\r\n        require(\r\n            castleId > 0 && castleId < MAX_CASTLE_SIZE,\r\n            \"invalid castle index\"\r\n        );\r\n        if (saled) {\r\n            if (castleId > 4) {\r\n                require(\r\n                    castles[castleId].ownerTokenID != 0,\r\n                    \"castle was not purchased\"\r\n                );\r\n            }\r\n        } else {\r\n            require(\r\n                castles[castleId].ownerTokenID == 0,\r\n                \"castled already sold\"\r\n            );\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier isAvailableZombie(uint256 tokenId, uint8 castleId) {\r\n        require(\r\n            castleId > castleIdxByLayer[0],\r\n            \"zombies can't act in 1st layer\"\r\n        );\r\n\r\n        require(\r\n            (block.number - characters[tokenId].lastActionedBlock) >\r\n                ZOMBIE_TIME,\r\n            \"zombie can't act yet\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n    event Worked(\r\n        address indexed user,\r\n        uint256[] tokenIds,\r\n        uint256[] oldCastleIds,\r\n        uint8 newCastleId\r\n    );\r\n    event Claim(\r\n        address indexed user,\r\n        uint256[] tokenIds,\r\n        uint256 reward,\r\n        uint256 tax\r\n    );\r\n    event BuzzerBeater(\r\n        address indexed user,\r\n        uint256 tokenId,\r\n        uint8 castleId,\r\n        uint8 level\r\n    );\r\n    event UpgradeCastle(address indexed user, uint8 castleId, uint8 level);\r\n    event UpgradeDoper(address indexed user, uint256 tokenId, uint8 level);\r\n    event ClaimTax(address indexed user, uint8 castleId, uint256 tax);\r\n    event PurchaseCastle(address indexed user, uint8 castleId);\r\n    event PurchaseFarm(address indexed user, uint8 castleId, uint256 price);\r\n    event PurchaseBarricades(\r\n        address indexed user,\r\n        uint8 castleId,\r\n        uint8 amount,\r\n        uint256 price\r\n    );\r\n    event AttackBarricade(\r\n        address indexed user,\r\n        uint256 tokenId,\r\n        uint8 castleId,\r\n        uint256 reward\r\n    );\r\n    event EndGame(uint256 endAngelInfluences, uint256 endDevilInfluences);\r\n    event EndGameClaim(address indexed user, uint256 tokenId);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dopersAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dopesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_templeSink\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"castleId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"AttackBarricade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"castleId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"BuzzerBeater\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"castleId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"ClaimTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endAngelInfluences\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDevilInfluences\",\"type\":\"uint256\"}],\"name\":\"EndGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EndGameClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"castleId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PurchaseBarricades\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"castleId\",\"type\":\"uint8\"}],\"name\":\"PurchaseCastle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"castleId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PurchaseFarm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"castleId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"UpgradeCastle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"UpgradeDoper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"oldCastleIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newCastleId\",\"type\":\"uint8\"}],\"name\":\"Worked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ANGEL_WINNING_BENEFIT_RATIO\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BARRICADE_PRICE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_3DAYS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_WEEK\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CASTLE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELTA\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOUBLE_WINNER_BENEFIT_RATIO\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FARM_BENEFIT_RATIO\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLOATING_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CASTLE_SIZE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LAYER\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SPECIES\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ZOMBIES\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEMPLE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WINNER_BENEFIT_RATIO\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZOMBIE_DELTA\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZOMBIE_TIME\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"castleId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"buildBarricade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"castleId\",\"type\":\"uint8\"}],\"name\":\"buildFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"calculationRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBuzzerBeater\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"castleIdxByLayer\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"castleInfoByLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"taxRatio\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"upgradeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelUpPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"castles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasFarm\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"barricades\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"zombies\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"workers\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"angelInfluences\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devilInfluences\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAttackedBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"characters\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"voteSide\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"castleId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"species\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"claimable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCastleOwner\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastActionedBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimDope\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"castleId\",\"type\":\"uint8\"}],\"name\":\"claimTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dopenesses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dopenessesByUpgrade\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dopers\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dopes\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"endGameClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endGameReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endgame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"layerCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"level\",\"type\":\"uint8[]\"}],\"name\":\"multiUpgradeDoper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"castleId\",\"type\":\"uint8\"}],\"name\":\"ownerOfCastle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"castleId\",\"type\":\"uint8\"}],\"name\":\"purchaseCastle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseTemple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"species\",\"type\":\"uint8\"}],\"name\":\"registerDoper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_delta\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_barricadePrice\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_zombieTime\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_blocksPerThreeDays\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_zombieDelta\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_templePrice\",\"type\":\"uint256\"}],\"name\":\"setGameParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"templeSink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAngelInfluences\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedDopes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDevilInfluences\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"castleId\",\"type\":\"uint8\"}],\"name\":\"upgradeCastle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"upgradeDoper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"oldCastleIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"castleId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteSide\",\"type\":\"uint8\"}],\"name\":\"work\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Pioneer", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dc8c9988212ba573ce74bcc2444042f2f8f39101000000000000000000000000c2a2c4581ae53e79eca49e7c81a8cd5b5094a07400000000000000000000000038f84b77d03bf46249182bd9dd5cf58adf2f39aa", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://beaeee506aa99408a4e389b3a0da9a312974ffa5f5ff972cc9629e4a03c7f82b"}]}